{"legacy":{"AbstractDBObject":{"meta":{"has_constructor":false,"description":"Provides common methods for classes based on records in the database. Use this script include as a base class to create your own database object class.","example":""},"properties":{},"methods":[{"name":"isValid","description":"Determines if the current database record is valid.","params":[],"returns":{"type":"Boolean","description":"True if the database record is valid, false otherwise."},"example":[]}]},"AbstractReconciler":{"meta":{"has_constructor":false,"description":"Use this script include as a base class to create your own Discovery\n  reconciler. This is an abstract base class for reconciling newly discovered data in an XMLMemoryTable to a\n   related list in the database. AbstractReconciler implements the common logic and helper methods\n   for reconciling related lists for a particular CMDB item against discovered information present\n   in a MemoryTable instance.<br/><br/>Most of this logic is very straightforward, but one bit may not be: the resolution of\n   references to previously reconciled records. This feature works by collecting information while\n   reconciling one related list, then passing that information on to the reconciler for another\n   related list. For example, while switch partitions are being reconciled, information is gathered\n   (in a map instance) that maps an interface number for a partition to the sys_id of the\n   partition's record in the partition table. Then later when the switchports are being reconciled,\n   a reference to the switch partition that contains the switchport can be resolved by using this\n   map.","example":""},"properties":{},"methods":[{"name":"getReconciliationField","description":"Determines if the newly discovered data is different than the data already in the\n    database for the current item.<p>This method is only invoked for items that have been rediscovered.</p><p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"Boolean","description":"True if the data has changed."},"example":[]},{"name":"getReconciliationKey","description":"Gets the string value of the field to be used as a key to look up a record in the newly\n    discovered data.<p>This value will be used to attempt to find a record in the discovered data, using the\n        column returned by the <span class=\"keyword apiname\">getReconciliationKey()</span> method.</p><p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"String","description":"Value to use as a key into the discovered data."},"example":[]},{"name":"hasChanged","description":"Returns true if the newly discovered data is different than the data already in the\n    database for this item.<p>This method is only invoked for items that have been rediscovered.</p><p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"Boolean","description":"True if the discovered data is different than the data already in the\n                database."},"example":[]},{"name":"markAbsent","description":"Marks CIs as absent by setting the install status to \"Absent\"; other tables are marked\n    by setting the (presumed present) field \"absent\" to true.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"markPresent","description":"Marks CIs as present by setting the install status to \"Installed\"; other tables are\n    marked by setting the (presumed present) field \"absent\" to false.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"Reconciles the newly discovered data with the data already present in the database and\n    resolves references to previously reconciled data.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"readDatabaseFields","description":"Reads the current memory table record of newly discovered data and checks its validity.<p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"Boolean","description":"True if the data is valid."},"example":[]},{"name":"readDiscovered","description":"Reads the current memory table record of newly discovered data and checks its validity.<p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"Boolean","description":"True if the data is valid."},"example":[]},{"name":"resolveReferenceFields","description":"Reads the fields in the current database record into instance member fields.<p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDatabaseFields","description":"Sets the database fields for the current record to the values in the newly discovered\n    information.<p>This method is invoked both for new database records and for existing database records when\n        the discovered data has changed.</p><p>Mandatory method, must be overridden in all concrete subclasses.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setup","description":"Optional override for concrete subclasses that require special setup.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"track","description":"Optional method to override in concrete subclasses that need to resolve reference\n    fields.<p>This method is invoked after valid discovered data is read. Generally implementations will\n        use some of this discovered data as a key into a map (passed into the concrete reconciler\n        class when it was instantiated) that will return the sys_id of the database record holding\n        the referenced information. However, implementations are not required to use this\n        approach.</p>","params":[{"name":"sys_id","type":"String","description":"The sys_id of the current database record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"AbstractScriptProcessor":{"meta":{"has_constructor":false,"description":"Base JavaScript processor class that other JavaScript processors extend. Extend this class to create your own JavaScript processors.","example":""},"properties":{},"methods":[{"name":"initialize","description":"Called by the Prototype JavaScript Framework during object construction.","params":[{"name":"request","type":"String","description":"The request"},{"name":"response","type":"String","description":"The response"},{"name":"process","type":"String","description":"The process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"Called by the Prototype JavaScript Framework during object processing. Do not call this\n    method directly.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"AbstractTimeLineSchedulePage":{"meta":{"has_constructor":false,"description":"A helper class to facilitate working with the data displayed on timelines. Processing the data displayed within a timeline starts by executing the corresponding\n      function of the specified script include. Like other script includes, the language syntax is\n      JavaScript and follows the default security constraints of this type of resource. However,\n      because the different types of display options are complex, a helper class was created. To\n      display a timeline, extend the <span class=\"keyword apiname\">AbstractTimelineSchedulePage</span> class and pair\n      it with it's corresponding schedule page. At a minimum, extending classes should override the\n        <span class=\"keyword apiname\">getItems()</span> method, as this is the primary event handler for returning\n      items to be displayed on the client.<br/><br/>The client processes the data that <span class=\"keyword apiname\">AbstractTimelineSchedulePage</span> returns in\n      two phases. The first phase makes the actual updates to the timeline. Immediately after (if\n      configured), the second phase displays a success message box, error message box, or dialog\n      message prompt. In phase one, the available options  for manipulating data include:<br/><br/><li class=\"li\">Do Not Update Any Items - This is the default behavior. Do not perform any of the\n        remaining steps in phase one. </li>\n\n      <li class=\"li\">Update With Specific Items - This is done using: add(). </li>\n\n      <li class=\"li\">Render The Timeline Using the <span class=\"keyword apiname\">getItems()</span> Function - This is done using:\n          <samp class=\"ph codeph\">setDoReRenderTimeline(true)</samp>. </li><br/><br/><span class=\"notetitle\">Note:</span> If both <span class=\"keyword apiname\">TimelineItems</span> are returned and <span class=\"keyword parmname\">setDoReRenderTimeline\n      </span>is set to <span class=\"ph uicontrol\">true</span>, the system will ignore the\n        <span class=\"keyword parmname\">setDoReRenderTimeline</span> property and explicitly show only the\n        <span class=\"keyword apiname\">TimelineItems</span> that were added via the<span class=\"keyword apiname\"> add()</span>\n      function.<br/><br/>The available options in  phase two include:<br/><br/><li class=\"li\">Do Not Display Any Message Boxes - This is the default behavior. </li>\n\n      <li class=\"li\">Display a Success Dialog Box - This is done using: <span class=\"keyword apiname\">setStatusSuccess()</span>. </li>\n\n      <li class=\"li\">Display an Error Dialog Box - This is done using:\n        <span class=\"keyword apiname\">setStatusError()</span>.</li>\n\n      <li class=\"li\"> Display a Dialog Confirm Box - This is done using:\n        <span class=\"keyword apiname\">setStatusPrompt()</span>.</li><br/><br/><span class=\"notetitle\">Note:</span> \n      <p class=\"p\">A script include class that extends <span class=\"keyword apiname\">AbstractTimelineSchedulePage</span>\n        automatically receives all Uri parameters from the original Url whose prefix begins with\n          <samp class=\"ph codeph\">sysparm_timeline_</samp>. To access the values of these, use:<samp class=\"ph codeph\">\n          this.getParameter(\"sysparm_timeline_VARIABLE\");</samp> inside your extended class. </p>\n\n      <p class=\"p\">This is useful if you need to display a schedule page from a dynamic element, such as from\n        a context menu from a list. By passing in dynamic data via the Url the schedule page will\n        auto-include these parameters inside the Ajax calls and therefore will be accessible inside\n        the <span class=\"keyword apiname\">AbstractTimelineSchedulePage</span> script includes.</p>","example":""},"properties":{},"methods":[{"name":"add","description":"Adds a <span class=\"keyword apiname\">TimelineItem</span> object that will be returned to the client and\n    appropriately displayed on the timeline.","params":[{"name":"ObjTimeline","type":"Object","description":"The <span class=\"keyword apiname\">TimelineItem</span> object to add to the timeline."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addSeparator","description":"Adds a horizontal frame separator into the list of timeline items.\n    All future items added via <span class=\"keyword apiname\">add()</span> will be added into the subsequent timeline\n    frame.<p>All future items added via <span class=\"keyword apiname\">add()</span> will be added into the subsequent timeline\n        frame.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Inside of a script include that extends AbstractTimelineSchedulePage\n      this.addSeparator();\n    ","description":"","output":""}]},{"name":"elementMoveX","description":"Event handler for when a timeline span moves horizontally.","params":[{"name":"spanSysId","type":"String","description":"The sys ID of the current span being adjusted."},{"name":"newStartDateTimeMs","type":"String","description":"The new start time of the span in milliseconds. Make sure to parse the string\n                using <span class=\"keyword apiname\">parseInt</span>() before performing any numerical\n                comparisons."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"elementMoveXY","description":"Event handler for when a timeline span moves both horizontally and vertically.","params":[{"name":"spanSysId","type":"String","description":"The sys ID of the current span being adjusted."},{"name":"itemSysId","type":"String","description":"The sys ID of the timeline item associated with the current span."},{"name":"newItemSysId","type":"String","description":"The sys ID of the timeline item (a row) that the current span was dragged into."},{"name":"newStartDateTimeMs","type":"String","description":"The new start time of the span in milliseconds. Make sure to parse the string\n                using <span class=\"keyword apiname\">parseInt()</span> before performing any numerical\n                comparisons."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"elementMoveY","description":"Event handler for when a timeline span moves vertically.","params":[{"name":"spanSysId","type":"String","description":"The sys ID of the current span being adjusted."},{"name":"itemSysId","type":"String","description":"The sys ID of the timeline item associated with the current span."},{"name":"newItemSysId","type":"String","description":"The sys ID of the timeline item (a row) that the current span was dragged into."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"elementSuccessor","description":"Event handler for when a timeline relationship has been created between two spans.","params":[{"name":"spanSysId","type":"String","description":"The sys ID of the current span which will be a predecessor for the newly created relationship."},{"name":"newSuccSpanId","type":"String","description":"The sys ID of the successor span from the relationship created."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"elementTimeAdjustEnd","description":"Event handler for when a timeline span's end date was modified.","params":[{"name":"spanSysId","type":"String","description":"The sys ID of the current span that is being adjusted."},{"name":"newEndDateTimeMs","type":"String","description":"The new end time of the span in milliseconds. Make sure to parse the string\n                using <span class=\"keyword apiname\">parseInt()</span> prior to performing any numerical\n                comparisons."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"elementTimeAdjustStart","description":"Event handler for when a timeline span's start date was modified.","params":[{"name":"spanSysId","type":"String","description":"The sys ID of the current span that is being adjusted."},{"name":"newStartDateTimeMs","type":"String","description":"The new start time of the span in milliseconds. Make sure to parse the string\n                using <span class=\"keyword apiname\">parseInt()</span> prior to performing any numerical\n                comparisons."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getItems","description":"Event handler for returning schedule items to display on the timeline.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"inputBox","description":"Event handler for when a string was typed into the left pane input box.","params":[{"name":"strInputText","type":"String","description":"The text that was entered in the input box in the left pane."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"itemMove","description":"Event handler for when a timeline row item was moved and dragged into another row item.","params":[{"name":"itemSysId","type":"String","description":"The sys ID of the timeline item associated with the current span."},{"name":"newItemSysId","type":"String","description":"The sys ID of the timeline item (a row) that the current span was dragged into."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDoReRenderTimeline","description":"Specifies whether or not to re-render all of the timeline items using the\n      <span class=\"keyword apiname\">getItems()</span> function.","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, re-render the timeline by making a new event\n                call to the server's <span class=\"keyword apiname\">getItems()</span> handler."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setPageTitle","description":"Specifies the text to display as the title of the timeline.<p>The page title can be set (and updated) from any interactive event; however, is recommended to be\n        set during the<span class=\"keyword apiname\"> getItems()</span> event.</p>","params":[{"name":"strTitle","type":"String","description":"The text to be displayed on the timeline title."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setStatusError","description":"Sets the current event request to an error status with a specified title and message to\n    display in phase two of the <span class=\"keyword apiname\">GlideTimeline</span> event processing.","params":[{"name":"strTitle","type":"String","description":"The text to be displayed in the dialog box title."},{"name":"strMessage","type":"String","description":"The text to be displayed within the dialog box. The text can contain HTML formatting."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setStatusPrompt","description":"Sets the current event request to a prompt error status with a specified title and\n    message to display in a confirmation dialog box during phase two of the\n    <span class=\"keyword apiname\">GlideTimeline</span> event processing. The confirmation box displays an <span class=\"ph uicontrol\">OK</span> and <span class=\"ph uicontrol\">Cancel</span>\n      button that each generate new events that will call the  functions specified the parameter\n      arguments. The custom defined functions for  <span class=\"ph uicontrol\">OK</span>,\n        <span class=\"ph uicontrol\">Cancel</span>, and <span class=\"ph uicontrol\">Close</span>  receive the same\n        parameter arguments as those for the current event.<p>The confirmation box displays an <span class=\"ph uicontrol\">OK</span> and <span class=\"ph uicontrol\">Cancel</span>\n        button that each generate new events that will call the  functions specified the parameter\n        arguments. <div class=\"note note\"><span class=\"notetitle\">Note:</span> The custom defined functions for  <span class=\"ph uicontrol\">OK</span>,\n            <span class=\"ph uicontrol\">Cancel</span>, and <span class=\"ph uicontrol\">Close</span>  receive the same\n          parameter arguments as those for the current event.</div></p>","params":[{"name":"strTitle","type":"String","description":"The text to display in the dialog box. The text can contain HTML formatting."},{"name":"strOkFunction","type":"String","description":"The function to call in the current script include class if the users clicks\n                the <span class=\"ph uicontrol\">OK</span> button."},{"name":"strCancelFunction","type":"String","description":"The function to call in the current script include class if the user clicks the\n                  <span class=\"ph uicontrol\">Cancel</span> button."},{"name":"strCloseFunction","type":"String","description":"The function to call in the current script include class if the user clicks the\n                  <span class=\"ph uicontrol\">Close</span> button."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var MyTimelineScriptIncludeClass = Class.create();\n      MyTimelineScriptIncludeClass.prototype = Object.extendsObject(AbstractTimelineSchedulePage, {\n      \n      getItems: function() {\n      //...\n      },\n      \n      elementTimeAdjustEnd: function(spanSysId, newEndDateTimeMs) {\n      // Display a status prompt dialog box\n      this.setStatusPrompt('Confirm Action', 'Are you sure you want to do that?',\n      'this._myOkHandlerFunction',  \n      'this._myCancelHandlerFunction',\n      'this._myCloseHandlerFunction');\n      },\n      \n      _myOkHandlerFunction: function(spanSysId, newEndDateTimeMs) { // ... },\n      \n      _myCancelHandlerFunction: function(spanSysId, newEndDateTimeMs) { // ... },\n      \n      _myCloseHandlerFunction: function(spanSysId, newEndDateTimeMs) { // ... }\n      };\n    ","description":"","output":""}]},{"name":"setStatusSuccess","description":"Sets the current event request to a success status with a specified title and message to\n    display in phase two of the <span class=\"keyword apiname\">GlideTimeline</span> event processing.","params":[{"name":"strTitle","type":"String","description":"The text to be displayed in the dialog box title."},{"name":"strMessage","type":"String","description":"The text to be displayed within the dialog box. The text can contain HTML formatting."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"ActivityHistoryRecord":{"meta":{"has_constructor":false,"description":"A data object that is a member of  the <span class=\"keyword apiname\">WorkflowModelManager</span> class;\n      <span class=\"keyword apiname\">ActivityHistoryRecord</span> methods facilitate interacting with the\n      <span class=\"keyword apiname\">WorkflowModelManager </span>object. The ActivityHistoryRecord is basically a copy of the data from a GlideRecord on table\n      wf_history. There are some helper methods defined for this class as well. There are no\n      accessors or mutator to the simple data elements of this class.","example":""},"properties":{},"methods":[{"name":"addArrivedActivityToJoin","description":"Changes the <span class=\"keyword parmname\">arrivedState</span> of already known ids to\n      <span class=\"ph uicontrol\">true</span>.<p>As soon as this method changes the <span class=\"keyword parmname\">arrivedState</span> of known ids to\n          <span class=\"ph uicontrol\">true</span>, it tests to see if the join is satisfied. if it is, the model\n        walk can continue; if not, it should continue to next appropriate transition. This is called\n        during playback, as expected <span class=\"keyword apiname\">wf_activities</span> flow to the join.</p>","params":[{"name":"activityIds","type":"String Array","description":"Array of wf_activity.sys_ids that are headed towards join."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addJoinFromActivityIds","description":"Seeds all the expected <span class=\"keyword apiname\">wf_activity</span> sys_ids that are expected to pass\n    through this join and sets their arriveState = false.<p>This state is flipped to <span class=\"ph uicontrol\">true</span> as each expected activity transitions\n        to this instance of the Join. This method is called as part of building the cached model in\n        memory, and is not called during playback.</p>","params":[{"name":"activityIds","type":"String Array","description":"Array of wf_activity.sys_ids that are headed towards join."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addTransition","description":"As model is cached by <span class=\"keyword apiname\">_getExecutedTransitions()</span>, this method adds\n    transitions that have gone FROM this activity towards the .to activity.","params":[{"name":"InTransition","type":"Object","description":"ExecutedTransition Javascript object to add to this activity."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"debugDump","description":"Prints debug information.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"doesJoinContainActivity","description":"Tests the incoming wf_activity sys_id, \n    presumed to be seeded in this history record. \n    If it is, it is tested to see if it is an activity that \n    would come through this join.","params":[],"returns":{"type":"Boolean","description":"True, if it is an activity that would come through this join."},"example":[]},{"name":"getLogString","description":"Returns the log string from the history record.","params":[],"returns":{"type":"String","description":"The log string."},"example":[]},{"name":"getSatisfiedJoinActivities","description":"Returns the sys_ids of the history records that transition to this Join activity that have already come through.","params":[],"returns":{"type":"String Array","description":"Array of sys_ids of the history records that transition to this Join activity."},"example":[]},{"name":"getTransitionCount","description":"Returns the transition count for this activity.","params":[],"returns":{"type":"Number","description":"Number of transitions from this activity."},"example":[]},{"name":"getUnSatisfiedJoinActivities","description":"Returns the sys_ids of the history records that transition to this Join activity that the join is still waiting for.","params":[],"returns":{"type":"String Array","description":"Array of sys_ids of the history records that transition to this Join activity."},"example":[]},{"name":"isARollback","description":"Determines if this activity is one of the Rollback activities.","params":[],"returns":{"type":"Boolean","description":"True, if activity is one of the Rollback activities."},"example":[]},{"name":"isIdADestination","description":"Determines if the sys_id passed in is a destination of any of the transitions associated\n    with this instance of an <span class=\"keyword apiname\">ActivityHistoryRecord</span>.","params":[{"name":"ahrSys_id","type":"String","description":"Activity history sys_id from table wf_history."}],"returns":{"type":"Boolean","description":"True, if the sys_id passed in is a destination of any of the transitions."},"example":[]},{"name":"isJoin","description":"Determines if this activity is a join.","params":[],"returns":{"type":"Boolean","description":"True, if the activity is \"Join\"."},"example":[]},{"name":"isJoinSatisfied","description":"Examines the value of the arriveState.<p>Called during playback when the transition to sys_id of a transition points to an activity that is a join.</p>","params":[],"returns":{"type":"Boolean","description":"True, if the join is satisfied."},"example":[]},{"name":"isJoinWaitingForActivity","description":"Tests the incoming wf_activity sys_id, presumed to be seeded in this history record.<p>If it is, it is tested to see if\n        it has already been through; if it has, then this join is not waiting on this activity and\n        it should look further downstream for the one that is waiting. This test is called in\n        sequence as the model is walked, so it does presume in the instances of rollbacks and loops.\n        If the sys_id is in here and the flag is <span class=\"ph uicontrol\">true</span>, this waiting Join is\n        further up the sequence. This sort of check is required as the history records of Joins are\n        removed from the history table, and so it is possible for a record to be in the transition\n        table with no match in the corresponding history table, but is still an appropriate match\n        for an earlier executed instance of the same Join.</p>","params":[{"name":"activityIds","type":"String Array","description":"Array of wf_activity.sys_ids that are headed towards join."}],"returns":{"type":"Boolean","description":"True, if the activity has already been through."},"example":[]},{"name":"isRolledBack","description":"Determines if this workflow was rolled back.","params":[],"returns":{"type":"Boolean","description":"True, if this workflow was rolled back."},"example":[]},{"name":"isTurnstile","description":"Determines if this activity is a turnstile.","params":[],"returns":{"type":"Boolean","description":"True, if this activity is a turnstile."},"example":[]}]},"Agent":{"meta":{"has_constructor":false,"description":"Provides methods for getting or setting agent presence and channel\n    availability. The Agent API is provided within the sn_awa namespace.<br/><br/>Requires the following: <ul class=\"ul\" id=\"c_Agent__ul_cgv_mtc_2gb\">\n        <li class=\"li\">Advanced Work Assignment plugin (com.glide.awa) </li>\n\n        <li class=\"li\">Role: awa_integration_user or admin</li>\n\n      </ul>","example":""},"properties":{},"methods":[{"name":"get","description":"Gets an agent by sys_id.","params":[{"name":"user_sys_id","type":"String","description":"The sys_id of the user listed in sys_user table."}],"returns":{"type":"Boolean","description":"True if the user exists, false otherwise."},"example":[{"code":"var agent = sn_awa.Agent.get(\"&lt;user_sys_id&gt;\");\nvar presence  = agent.getPresence();","description":"","output":""}]},{"name":"getPresence","description":"Gets the current presence state and channel availability of a provided\n    agent.","params":[],"returns":{"type":"Object","description":"Presence state sys_id, presence state name, and channel information. Error\n                message otherwise."},"example":[{"code":"var agent = sn_awa.Agent.get(\"&lt;user_sys_id&gt;\");\n        var presence  = agent.getPresence();","description":"","output":""}]},{"name":"setPresence","description":"Sets the state of a provided agent’s presence and sets the agent’s channel availability\n    for that state.","params":[{"name":"setRequest","type":"Object","description":"Contains setRequest.sys_id and setRequest.channels."},{"name":"setRequest.sys_id","type":"String","description":"Represents presence_sys_id from awa_presence_state table"},{"name":"setRequest.channels","type":"name/value pair","description":"Optional<ul class=\"ul\" id=\"r_setPresence__ul_vsh_tqn_kgb\">\n                  <li class=\"li\">sys_id – channel_sys_id from the awa_service_channel table</li>\n\n                  <li class=\"li\">available – Agent availability to receive work for this channel (true or\n                    false)</li>\n\n                </ul>"}],"returns":{"type":"Boolean","description":"True if successful, false otherwise."},"example":[{"code":"var agent = sn_awa.Agent.get(\"&lt;user_sys_id&gt;\");\nvar presence = agent.setPresence({\n    sys_id: &lt;presence_sys_id&gt;,\n    channels: [{\n        sys_id: \"&lt;channel_sys_id&gt;\",\n        available: true // or false\n    }]\n});","description":"","output":""}]}]},"AgentMetrics":{"meta":{"has_constructor":true,"description":"Processes inbound MID server metrics. Updates these tables.<ul class=\"ul\" id=\"c_AgentMetricsAPI__ul_t5p_blf_zt\">\n    <li class=\"li\">ECC Agent Counter Metric</li>\n\n    <li class=\"li\">ECC Agent Memory Metric</li>\n\n    <li class=\"li\">ECC Agent RGR Metric</li>\n\n    <li class=\"li\">ECC Agent Scalar Metric</li>\n\n   </ul><br/><br/>Use these methods in server scripts.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of AgentMetrics.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"handleCounter","description":"Handles counter metrics from the agent by putting them into an array that can be used\n    to update the ECC Agent Counter Metric table (ecc_agent_counter_metric).","params":[{"name":"metric","type":"String","description":"The counter object from the agent"},{"name":"name","type":"String","description":"The device name"},{"name":"midId","type":"String","description":"The MID server sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var amtc = new AgentMetrics();\namtc.handleCounter('count', 'server_name', '1098888bbb9483abcd89981ffaeff');","description":"","output":""}]},{"name":"handleMemory","description":"Updates the memory metrics for the given agent.","params":[{"name":"metric","type":"String","description":"The memory object from the agent"},{"name":"name","type":"String","description":"The device name"},{"name":"midId","type":"String","description":"The MID server sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var amtc = new AgentMetrics();\namtc.handleMemory('mem_obj', 'server_name', '1098888bbb9483abcd89981ffaeff');","description":"","output":""}]},{"name":"handleRGR","description":"Handles metric information from a remote glide record by putting it into an\n    array.","params":[{"name":"metric","type":"String","description":"The remote object from the agent"},{"name":"name","type":"String","description":"The device name"},{"name":"midId","type":"String","description":"The MID server sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var amtc = new AgentMetrics();\namtc.handleRGR('remote_obj', 'server_name', '1098888bbb9483abcd89981ffaeff');","description":"","output":""}]},{"name":"handleScalar","description":"Handles scalar values from the agent by putting them into an array.","params":[{"name":"metric","type":"String","description":"The counter object  from the agent"},{"name":"name","type":"String","description":"The device name"},{"name":"midId","type":"String","description":"The MID server sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var amtc = new AgentMetrics();\namtc.handleScalar('scalar', 'server_name', '1098888bbb9483abcd89981ffaeff');","description":"","output":""}]},{"name":"updateMetric","description":"Updates the specified metrics table with the new metric information.","params":[{"name":"tableName","type":"String","description":"The metrics table to update"},{"name":"values","type":"String","description":"The object containing the values to add to the table"},{"name":"metric","type":"String","description":"The metric type to add to the table"},{"name":"midID","type":"String","description":"The MID server sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var amtc = new AgentMetrics();\namtc.handleMemory('memory', 'server_name', '1098888bbb9483abcd89981ffaeff');\namtc.updateMetric('ecc_agent_memory_metric', 'm_values', 'memory', '1098888bbb9483abcd89981ffaeff');","description":"","output":""}]}]},"APCHandler":{"meta":{"has_constructor":false,"description":"Handles SNMP classification and identification for UPSs, environmental monitors, and\n  PDUs made by APC. Use this API for SNMP classification and identification.","example":""},"properties":{},"methods":[{"name":"classifyAndIdentify","description":"Classifies and identifies APC devices.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"ApcPduOutletReconciler":{"meta":{"has_constructor":false,"description":"Reconciles outlets for power distribution units. Use this API for SNMP-related discovery.","example":""},"properties":{},"methods":[{"name":"getReconcilationField","description":"Returns the reconciliation field.","params":[],"returns":{"type":"String","description":"The reconciliation field"},"example":[]},{"name":"getReconcilationKey","description":"Returns the reconciliation key.","params":[],"returns":{"type":"String","description":"The reconciliation key"},"example":[]},{"name":"hasChanged","description":"Determines if the outlet state has changed.","params":[],"returns":{"type":"Boolean","description":"True if the outlet state has changed; otherwise, false."},"example":[]},{"name":"readDatabaseFields","description":"Reads the outlet database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"readDiscovered","description":"Reads the discovered outlet database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDatabaseFields","description":"Sets the outlet database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"ArrayUtil":{"meta":{"has_constructor":false,"description":"ArrayUtil API is a script include with useful functions for working with JavaScript\n  arrays. These methods are available to any server-side script.","example":""},"properties":{},"methods":[{"name":"concat","description":"Merge two arrays.","params":[{"name":"parent","type":"Array","description":"An array to merge"},{"name":"child","type":"Array","description":"An array to merge"}],"returns":{"type":"Array","description":"An array of elements from both input arrays. Duplicates are not\n                removed."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\");\nvar a2 = new Array(\"c\", \"d\", \"e\");\n \ngs.print(\"concat a1, a2: \" + arrayUtil.concat(a1, a2));","description":"","output":"concat a1, a2: a,b,c,c,d,e"}]},{"name":"contains","description":"Searches the array for the element. Returns true if the element exists in the array,\n    otherwise returns false.","params":[{"name":"array","type":"Array","description":"The array to search"},{"name":"element","type":"Object","description":"The element to search for"}],"returns":{"type":"Boolean","description":"True if the element is in the array, false otherwise."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\");\n \ngs.print(\"Contains b: \" + arrayUtil.contains(a1, \"b\"));\ngs.print(\"Contains x: \" + arrayUtil.contains(a1, \"x\"));","description":"","output":""}]},{"name":"convertArray","description":"Convert an object to an array.","params":[{"name":"a","type":"Object","description":"The object to be converted."}],"returns":{"type":"Array","description":"An array created from the object."},"example":[]},{"name":"diff","description":"Finds the differences between two or more arrays.<p>Any number of arrays can be provided as parameters.</p>","params":[{"name":"a","type":"Array","description":"An array"},{"name":"b","type":"Array","description":"An array"}],"returns":{"type":"Array","description":"Returns an array of items from array a that were not found in either array b or\n                c, or other input arrays. Duplicates are removed from the result."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\");\nvar a2 = new Array(\"c\", \"d\", \"e\");\ngs.print(arrayUtil.diff(a1, a2));","description":"","output":"a,b"}]},{"name":"ensureArray","description":"Returns an array from the object.","params":[{"name":"object","type":"Object","description":"The object from which to create an array."}],"returns":{"type":"Array","description":"An array created from the object."},"example":[]},{"name":"indexOf","description":"Searches the array for the element. Returns the element index if found, -1\n    otherwise.","params":[{"name":"array","type":"Array","description":"The array to search"},{"name":"element","type":"Object","description":"The element to search for"}],"returns":{"type":"Number","description":"The index where the element was found, -1 otherwise."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\");\n \ngs.print(\"indexOf b: \" + arrayUtil.indexOf(a1, \"b\"));\ngs.print(\"indexOf x: \" + arrayUtil.indexOf(a1, \"x\"));","description":"","output":""}]},{"name":"indexOf","description":"Searches the array for the element starting with the startIndex element. Returns the\n    element index.","params":[{"name":"array","type":"Array","description":"The array to search"},{"name":"element","type":"Object","description":"The element to search for"},{"name":"startIndex","type":"Number","description":"The index to begin the search"}],"returns":{"type":"Number","description":"The position of the element in the array, or -1 if the element is not in the\n                array."},"example":[]},{"name":"intersect","description":"Finds the elements present in all arrays.<p>Any number of arrays can be provided as parameters.</p>","params":[{"name":"a","type":"Array","description":"An array"},{"name":"b","type":"Array","description":"An array"}],"returns":{"type":"Array","description":"An array of elements from array a that were found in all of the other input\n                arrays. Duplicates are removed."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\");\nvar a2 = new Array(\"c\", \"d\", \"e\");\ngs.print(arrayUtil.intersect(a1, a2));","description":"","output":"c"}]},{"name":"union","description":"Merge two or more arrays.<p>Any number of arrays can be provided as parameters.</p>","params":[{"name":"a","type":"Array","description":"An array"},{"name":"b","type":"Array","description":"An array"}],"returns":{"type":"Array","description":"An array of items from all the input arrays. Duplicates are removed."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\");\nvar a2 = new Array(\"c\", \"d\", \"e\");\ngs.print(arrayUtil.union(a1, a2));","description":"","output":"a,b,c,d,e"}]},{"name":"unique","description":"Removes duplicate items from an array.","params":[{"name":"a","type":"Array","description":"The array to check for duplicate elements."}],"returns":{"type":"Array","description":"An array of unique items from the input array."},"example":[{"code":"var arrayUtil = new ArrayUtil();\nvar a1 = new Array(\"a\", \"b\", \"c\", \"c\", \"b\");\ngs.print(arrayUtil.unique(a1));","description":"","output":"a,c,b"}]}]},"AssessmentCreation":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">AssessmentCreation</span> class provides methods that administrators\n    can use to generate assessments and surveys. <p class=\"p\">There are multiple ways to call the  <span class=\"keyword apiname\">createAssessments</span>method. You must\n        set the <span class=\"keyword parmname\">typeID</span> parameter in all cases to identify a metric type or\n        survey definition.</p>\n\n      <div class=\"p\">Some of the factors that influence how the method behaves include:<ul class=\"ul\" id=\"c_AssessmentCreation__ul_v1j_wdr_lq\">\n          <li class=\"li\">Whether the target is an assessment or survey</li>\n\n          <li class=\"li\">Whether the assessment schedule type is on-demand or scheduled</li>\n\n          <li class=\"li\">Survey schedule periods</li>\n\n          <li class=\"li\">Parameters provided</li>\n\n        </ul>\n</div>\n\n      <p class=\"p\">For example, when the method is called with only the <span class=\"keyword parmname\">typeID</span> parameter\n        set, the method searches for stakeholders or survey users to send invitations to. In\n        contrast, when the method is called with the <span class=\"keyword parmname\">typeID</span> and\n          <span class=\"keyword parmname\">userID</span> parameters set, it attempts to send invitations to the\n        specified users.</p>","example":""},"properties":{},"methods":[{"name":"CreateAssessments ","description":"Creates one or more assessments or surveys for the specified metric type or survey\n    definition.","params":[{"name":"typeID","type":"String","description":"The sys_id of the metric type or survey definition for which to generate\n                assessments or surveys."},{"name":"sourceRecordID","type":"String","description":"One or more comma-separated sys_ids of records to include in the assessments\n                generated. There must be an assessable record associated with the specified metric\n                type for each source record. If this parameter is left blank, the assessments\n                generated include all assessable records for the specified type. This parameter is\n                for use with assessments only."},{"name":"userID","type":"String","description":"One or more comma-separated sys_ids of users to which to send assessment or\n                survey instances. If this parameter is left blank, the assessment stakeholders or\n                survey users receive instances. This parameter is required for on-demand\n                assessments."}],"returns":{"type":"String","description":"If the method is successful, it returns a comma-separated string such as\n                7a2ad2253784200044e0bfc8bcbe5de1, 10, b7e8b5d4c0a80169008b49e468920048 (Instance ID,\n                number of instances, Group ID) with the following values:<ul class=\"ul\" id=\"r_AC-CreateAssessments_S_S_S__ul_kcc_bfr_lq\">\n                  <li class=\"li\">instanceID: Sys_id of the assessment or survey instance created, if there is\n                    only one. Sys_id of one of the instances, if there are multiple. If there are\n                    multiple instances, use the group ID to retrieve data.</li>\n\n                  <li class=\"li\">#instances: Number of assessment or survey instances created.</li>\n\n                  <li class=\"li\">groupID: Sys_id of the assessment group that contains the assessment or survey\n                    instances created.</li>\n\n                </ul>\n<p class=\"p\">If the method is unable to generate assessments or surveys, it returns one\n                  of the error codes.</p>\n<div class=\"p\">Error Codes <ul class=\"ul\" id=\"r_AC-CreateAssessments_S_S_S__ul_axv_x4h_1t\">\n                    <li class=\"li\">isscheduled - Indicates that the <span class=\"keyword parmname\">userID</span> or\n                        <span class=\"keyword parmname\">sourceRecordID</span> parameter should not have been used.\n                      When the <span class=\"keyword parmname\">typeID</span> value represents a metric type with the\n                      Schedule type field set to Scheduled, the <span class=\"keyword parmname\">typeID</span>\n                      parameter is the only parameter that may be used.</li>\n\n                    <li class=\"li\">draft_state - Indicates that the <span class=\"keyword parmname\">typeID</span> value is a\n                      metric type or survey definition that is not published. Publish the metric\n                      type or survey definition.</li>\n\n                    <li class=\"li\">invalidtype - Indicates that there is no existing metric type that matches\n                      the <span class=\"keyword parmname\">typeID</span> value.</li>\n\n                    <li class=\"li\">inactive - Indicates that the <span class=\"keyword parmname\">typeID</span> value is a metric\n                      type or survey definition that is not active. Navigate to the metric type or\n                      survey definition and select the <span class=\"ph uicontrol\">Active</span> check box.</li>\n\n                    <li class=\"li\">not_available - Indicates that the <span class=\"keyword parmname\">typeID</span> value is a\n                      metric type or survey definition that has no metrics or survey questions. Add\n                      at least one metric or survey question.</li>\n\n                    <li class=\"li\">notyet - Indicates that at least one of the users in the\n                        <span class=\"keyword parmname\">userID</span> value is assigned a survey instance for the\n                      specified survey definition, that has yet to expire. The error code returns\n                      the expiration date.</li>\n\n                    <li class=\"li\">wip - Indicates that at least one of the users in the\n                        <span class=\"keyword parmname\">userID</span> value is already assigned a survey instance for\n                      the survey.</li>\n\n                    <li class=\"li\">not_authorized - Indicates that at least one of the users in the\n                        <span class=\"keyword parmname\">userID</span> value is not authorized to take the survey.\n                      Verify that one of the following is true:<ul class=\"ul\" id=\"r_AC-CreateAssessments_S_S_S__ul_lhq_ygr_lq\">\n                        <li class=\"li\">There are no survey users for the specified survey definition.</li>\n\n                        <li class=\"li\">All the users in the <span class=\"keyword apiname\">userID</span> value are saved as survey\n                          users for the specified survey definition.</li>\n\n                      </ul>\n</li>\n\n                    <li class=\"li\">completed - Indicates that the <span class=\"keyword parmname\">typeID</span> value is a survey\n                      definition with the Schedule period field set to Only Once and that at least\n                      one of the users in the <span class=\"keyword parmname\">userID</span> value has already\n                      completed a survey instance for that survey definition.</li>\n\n                    <li class=\"li\">nousers - Indicates that the <span class=\"keyword parmname\">userID</span> parameter was not\n                      used and that one of the following is true:<ul class=\"ul\" id=\"r_AC-CreateAssessments_S_S_S__ul_zsq_chr_lq\">\n                        <li class=\"li\">There are no stakeholders associated with the specified metric type. Set\n                          the <span class=\"keyword parmname\">userID</span> parameter or create at least one\n                          stakeholder.</li>\n\n                        <li class=\"li\">There are no survey users associated with the specified survey\n                          definition. Set the <span class=\"keyword parmname\">userID</span> parameter or create at\n                          least one survey user.</li>\n\n                      </ul>\n</li>\n\n                    <li class=\"li\">nosources - Indicates that the <span class=\"keyword parmname\">typeID</span> value is a metric\n                      type with the Schedule type field set to On demand and that neither the\n                        <span class=\"keyword parmname\">userID</span> nor <span class=\"keyword parmname\">sourceRecordID</span>\n                      parameter was used. Set at least one of these parameters.</li>\n\n                  </ul>\n</div>"},"example":[]}]},"AutomationException":{"meta":{"has_constructor":false,"description":"Provides generic exception wrapping for automation. Include this in automation code to implement error handling.","example":""},"properties":{},"methods":[{"name":"getMessage","description":"Retrieves the error message.","params":[],"returns":{"type":"String","description":"The error message"},"example":[{"code":"var ae = new AutomationException(\"This is an error message\");\ngs.print(ae.getMessage());","description":"","output":"This is an error message"}]}]},"BusinessServiceManager":{"meta":{"has_constructor":true,"description":"Unify service management by converting manually-created services to application\n    services, populating application services, and adding/removing CIs and connections. Use BusinessServiceManager methods in global server scripts. You must have the Application\n      Service administrator [app_service_admin] role.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a BusinessServiceManager object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var bsManager = new SNC.BusinessServiceManager();","description":"","output":""}]},{"name":"addCI","description":"Adds a CI to a manually-created application service.","params":[{"name":"service_id","type":"String","description":"Sys ID of the application service to add a CI to. Must be of type\n                cmdb_ci_service_discovered."},{"name":"source_id","type":"String","description":"Sys ID of the CI whose outgoing connection joins the target CI."},{"name":"target_id","type":"String","description":"Sys ID of the CI to add to the service. Cannot be a blacklisted item.\n                Blacklisted items are CIs added to the sa.mapping.user.manual.citype.blacklist\n                system property that are excluded from specific operations."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Application service is 'PeopleSoft Portals'\n//Source CI is windows server 'PS Apache01'\n//Target CI is 'SAP WEB01'\n\nvar bsManager = new SNC.BusinessServiceManager();\nvar appService = bsManager.addCI('2fce42d80a0a0bb4004af34d7e3984c8','3a27d4370a0a0bb4006316812bf45439', '3a6cadc1c0a8ce01001f1e5d0d7d68fa');","description":"","output":""}]},{"name":"addManualConnection","description":"Adds a manually created connection to an application service.","params":[{"name":"source_id","type":"String","description":"Sys ID of the CI to add to the connection."},{"name":"manual_endpoint","type":"Object","description":"GlideRecord object in the cmdb_ci_endpoint_manual table to add to the\n                application service."},{"name":"service_id","type":"String","description":"Sys ID of the application service to add the connection to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord(\"cmdb_ci_endpoint_manual\");\ngr.initialize(); \ngr.name='myEndpoint'; \ngr.insert();\n\nvar bsManager = new SNC.BusinessServiceManager();\nvar appService = bsManager.addManualConnection(\"3a307c930a0a0bb400353965d0b8861f\", gr, \"2fce42d80a0a0bb4004af34d7e3984c8\");","description":"","output":""}]},{"name":"migrateManualToApplicationService","description":"Converts a manual service to an application service.","params":[{"name":"service_id","type":"String","description":"Sys ID of the manual service to convert."}],"returns":{"type":"Boolean","description":"True if the migration to an application service succeeds."},"example":[{"code":"var bsManager = new SNC.BusinessServiceManager();\nvar appService = bsManager.migrateManualToApplicationService(\"451047c6c0a8016400de0ae6df9b9d76\");","description":"","output":""}]},{"name":"populateApplicationService","description":"Populates an application service with relations and CIs from the designated entry\n    point.","params":[{"name":"service_id","type":"String","description":"Sys ID of the application service to populate."},{"name":"levels","type":"Number","description":"Number of levels of CIs to add from the CMDB."},{"name":"black_listed_relation_types","type":"String","description":"Relation types to exclude when populating the application service."}],"returns":{"type":"Boolean","description":"True if the operation is successful."},"example":[{"code":"var bsManager = new SNC.BusinessServiceManager();\nvar appService = bsManager.populateApplicationService(\"5bf65ebeedb91300964f6fa662989533\", 10, \"Depends on::Used by\");","description":"","output":""}]},{"name":"removeCI","description":"Removes a manually created CI from an application service.","params":[{"name":"service_id","type":"String","description":"<p class=\"p\">Sys ID of the application service to remove a CI from. </p>\n\n                <div class=\"p\">\n                  <div class=\"note note\"><span class=\"notetitle\">Note:</span> Passing a GlideRecord object is also supported. </div>\n\n                </div>"},{"name":"target_id","type":"String","description":"<p class=\"p\">Sys ID of the CI to remove from the application service. </p>\n\n                <div class=\"p\">\n                  <div class=\"note note\"><span class=\"notetitle\">Note:</span> Passing a GlideRecord object is also supported. </div>\n\n                </div>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var bsManager = new SNC.BusinessServiceManager();\nvar appService = bsManager.removeCI(\"2fce42d80a0a0bb4004af34d7e3984c8\", \"3a290cc60a0a0bb400000bdb386af1cf\");","description":"","output":""}]},{"name":"removeManualConnection","description":"Removes a manually created connection and the connected CI from an application\n    service.","params":[{"name":"source_id","type":"String","description":"Sys ID of the CI connected to the endpoint."},{"name":"endpoint_id","type":"String","description":"Sys ID of the manually created connection to remove from the application\n                service"},{"name":"service_id","type":"String","description":"Sys ID of the application service to remove the connection from."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var bsManager = new SNC.BusinessServiceManager();\nvar appService = bsManager.removeManualConnection(\"3a307c930a0a0bb400353965d0b8861f\", \"60ce3176edb91300964f6fa6629895d1\", \"2fce42d80a0a0bb4004af34d7e3984c8\");","description":"","output":""}]}]},"ChangeCollisionHelper":{"meta":{"has_constructor":false,"description":"Helper functions found in the Change Management Collision Detector Plugin. Use these methods in server side scripts, or when using AJAX calls on the client. You must have\n   the Change Management Collision Detector Plugin installed to use these methods.","example":""},"properties":{},"methods":[{"name":"addCiToChangeAffectedCis","description":"Adds the CI to the change's affected CI list.","params":[{"name":"ci","type":"String","description":"The sys_id of the configuration item"},{"name":"changeId","type":"String","description":"The change record's sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAffectedCisByChangeId","description":"Returns the Affected CI sys_ids for the given change.","params":[{"name":"changeId","type":"String","description":"A change record's sys_id"}],"returns":{"type":"Array","description":"An array of sys_ids of affected CIs."},"example":[]},{"name":"getBlackoutsByDate","description":"Returns any blackout that overlap the period defined by startDate and\n    endDate.","params":[{"name":"startDate","type":"GlideDateTime","description":"The beginning date"},{"name":"endDate","type":"GlideDateTime","description":"The ending date"}],"returns":{"type":"Array","description":"An array of blackouts (blackoutId:stringSpan)."},"example":[]},{"name":"getChangesWithAffectedCi","description":"Returns changes scheduled in the timespan (defined by startDate and endDate) that have\n    the given CI in their Affected CIs list.","params":[{"name":"ci","type":"String","description":"The configuration item's sys_id"},{"name":"startDate","type":"GlideDateTime","description":"The beginning date"},{"name":"endDate","type":"GlideDateTime","description":"The ending date of the time span"}],"returns":{"type":"Array","description":"An array of change record's sys_ids"},"example":[]},{"name":"getChangesWithCi","description":"Returns the changes that are in the timespan (startDate, endDate) and that are linked\n    to the given CI.","params":[{"name":"ci","type":"String","description":"The configuration item's sys_id"},{"name":"startDate","type":"GlideDateTime","description":"The beginning date"},{"name":"endDate","type":"GlideDateTime","description":"The ending date of the time span"}],"returns":{"type":"Array","description":"An array of sys_ids for change records"},"example":[]},{"name":"getCiMaintenanceSchedule","description":"Returns the Maintenance Schedule for a CI.","params":[{"name":"ci","type":"String","description":"The configuration item's sys_id"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getDependants","description":"Returns all the CIs that depend on the given CI.","params":[{"name":"ci","type":"String","description":"A configuration item's sys_id"}],"returns":{"type":"Array","description":"An array of CIs"},"example":[]},{"name":"getDependencies","description":"Returns all the CIs that the given CI depends on.","params":[{"name":"ci","type":"String","description":"The configuration item's sys_id"}],"returns":{"type":"Array","description":"An array of CIs"},"example":[]},{"name":"isCiInAffectedCis","description":"Check if an CI is already in the change's affected CIs list.","params":[{"name":"ci","type":"String","description":"The sys_id of the configuration item"},{"name":"changeId","type":"String","description":"The change record's sys_id"}],"returns":{"type":"Boolean","description":"True if the CI already is in the change's affected CI list."},"example":[]},{"name":"isDateInCiMaintenanceWindows","description":"Checks if the time span defined by startDate and endDate falls in the CI's maintenance\n    window.","params":[{"name":"startDate","type":"GlideDateTime","description":"The beginning date"},{"name":"endDate","type":"GlideDateTime","description":"The ending date"},{"name":"maintenanceWindow","type":"String","description":"The configuration item's sys_id"}],"returns":{"type":"Boolean","description":"True if the time span is in the CI's maintenance window"},"example":[]}]},"ChangeConflict":{"meta":{"has_constructor":true,"description":"Helper functions found in the Change Management Collision Detector Plugin. Use these methods in server side scripts, or when using AJAX calls on the client. You must have\n   the Change Management Collision Detector Plugin installed to use these methods.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of ChangeConflict.","params":[{"name":"ciId","type":"String","description":"A configuration item's sys_id"},{"name":"changeId","type":"String","description":"A change request's sys_id"},{"name":"type","type":"Number","description":"A value from the conflict's type choice list"}],"returns":{"type":"","description":""},"example":[]},{"name":"toString","description":"Returns a string representation of the conflict.","params":[],"returns":{"type":"String","description":"The string representation of the conflict"},"example":[]}]},"ChangeConflictHandler":{"meta":{"has_constructor":true,"description":"Helper functions found in the Change Management Collision Detector Plugin. Use these methods in server side scripts, or when using AJAX calls on the client. You must have\n   the Change Management Collision Detector Plugin installed to use these methods.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of ChangeConflictHandler.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"addChangeConflict","description":"Adds the Change Conflict to a Change Conflict Container.","params":[{"name":"chgConflict","type":"String","description":"The sys_id of the change conflict"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"deleteConflictsByChangeId","description":"Deletes conflicts that are associated with the same change request (by\n    sys_id).","params":[{"name":"changeId","type":"String","description":"The sys_id of the change request"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getConflicts","description":"Returns an array of Change Conflicts from a Change Conflict Container.","params":[],"returns":{"type":"Array","description":"An array of change conflicts"},"example":[]},{"name":"saveConflicts","description":"Writes out the Change Conflicts in a Change Conflict Container array to individual\n    Change Conflict records.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CIData":{"meta":{"has_constructor":true,"description":"Utility class for working with CI data structures in JavaScript. Instances of this class represent a CI (both its base record and any related lists), and the\n   provided methods allow loading from or storing both the base record and related lists.<br/><br/>This class acts as a container for simple classes acting as maps of property name/value pairs.\n   This class contains three kinds of such maps. <ul class=\"ul\" id=\"c_CIDataAPI__ul_hhm_3n1_rt\">\n    <li class=\"li\">A single map representing the base CI table entry (such as one row cmdb_ci_linux_server and\n     its superclasses). This map can be retrieved with the <span class=\"keyword apiname\">getData()</span> method. </li>\n\n    <li class=\"li\">Arrays of maps representing the instances of related lists, with each array representing a\n     single related list and each element of such an array representing a single row of that related\n     list. These arrays can be retrieved with the <span class=\"keyword apiname\">getRelatedList()</span> method. </li>\n\n    <li class=\"li\">Arrays of maps representing the instances of many-to-many tables, with each array\n     representing a single many-to-many table and each element of such an array representing a\n     single row of that many-to-many table. These arrays can be retrieved with the\n      <span class=\"keyword apiname\">getM2MTable()</span> method.</li>\n\n   </ul><br/><br/>Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the CIData class.","params":[{"name":"debugFlag","type":"String","description":"True if debug logging is enabled."}],"returns":{"type":"","description":""},"example":[]},{"name":"addRelatedList","description":"Adds the specified related list to this instance.","params":[{"name":"relatedList","type":"Array","description":"The related list"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"convertRelatedList","description":"Converts the specified related list to a related list in a given sensor.","params":[{"name":"sensor","type":"String","description":"The sensor"},{"name":"tableName","type":"String","description":"The table name"},{"name":"refField","type":"String","description":"The reference field"},{"name":"keyName","type":"String","description":"The key name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"fromXML","description":"Initializes the current CIData instance from the specified XML string.","params":[{"name":"xml","type":"String","description":"An XML string"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getData","description":"Gets the data map in the base CI record.","params":[],"returns":{"type":"Object","description":"The data map"},"example":[]},{"name":"getM2MTable","description":"Gets an array of data maps in the given many-to-many list (to this CI).<p>The array is not in any particular order. If this is not a many-to-many list, returns an\n        empty array.</p>","params":[{"name":"table","type":"String","description":"The name of the table containing the related list.  In the case of a\n                many-to-many list, this is the name of the many-to-many table, not the target\n                table."},{"name":"refField","type":"String","description":"The name of the field in the related list that refers to this CI.  In the case\n                of a many-to-many list, this is the name of the referring field in the many-to-many\n                table, not in the target table."}],"returns":{"type":"Array","description":"an array of data maps in the given many-to-many list. If this is not a\n                many-to-many list, returns an empty array."},"example":[]},{"name":"getRelatedList","description":"Gets an array of maps of data in the given related list (to this CI).<p>The array is not in any particular order. In the case of a many-to-many list, this will be\n        an array of instances of the target table, not the many-to-many table. For example, given\n        'cmdb_software_instance' and 'installed_on' (a many-to-many table and the field that refers\n        to a CI), this method will return an array of maps representing cmdb_ci_spkg (the target\n        table) instances.</p>","params":[{"name":"table","type":"String","description":"Name of the table containing the related list. In the case of a many-to-many\n                list, this is the name of the many-to-many table, not the target table."},{"name":"refField","type":"String","description":"Name of the field in the related list that refers to this CI.  In the case of a\n                many-to-many list, this is the name of the referring field in the many-to-many\n                table, not in the target table."}],"returns":{"type":"Array","description":"An array of maps of data in the specified related list."},"example":[]},{"name":"getRelatedListInstance","description":"Returns the instance of CIRelatedList for the given list.","params":[{"name":"table","type":"String","description":"Name of the table containing the related list. In the case of a many-to-many\n                list, this is the name of the many-to-many table, not the target table."},{"name":"refField","type":"String","description":"Name of the field in the related list that refers to this CI.  In the case of a\n                many-to-many list, this is the name of the referring field in the many-to-many\n                table, not in the target table."}],"returns":{"type":"Object","description":"Instance of the CIRelatedList for the specified list."},"example":[]},{"name":"init","description":"Initializes this instance in preparation for loading a new CI.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var cdta = CIData('false');\ncdta.init();","description":"","output":""}]},{"name":"loadFromCI","description":"Loads the current data from a specified sys_id.","params":[{"name":"cmdb_ci","type":"String","description":"The sys_id of the CI"}],"returns":{"type":"Object","description":"The current data from the specified CI."},"example":[{"code":"var cdta = CIData('false');\ncdta.init();\ncdta.loadFromCI('ccaf9c0a8016400b98a06818d57c7');","description":"","output":""}]},{"name":"toString","description":"Converts the name of this instance to a string.","params":[],"returns":{"type":"String","description":"Name of the instance"},"example":[]},{"name":"toXML","description":"Returns an XML string containing a serialized version of this instance (including any\n    related lists).","params":[],"returns":{"type":"String","description":"The XML string containing a serialized version of this instance and any related\n                lists."},"example":[{"code":"var cdta = CIData();\ncdta.toXML();","description":"","output":""}]}]},"CIIdentification":{"meta":{"has_constructor":true,"description":"Main class for discovery CI identification. Use this with any server-side discovery script for CI identification.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the CIIdentification class.","params":[{"name":"ciData","type":"String","description":"The CI data to identify"},{"name":"logger","type":"String","description":"The discovery logger"}],"returns":{"type":"","description":""},"example":[]},{"name":"debug","description":"Logs a message to the CI Identification log if debug logging is turned on.","params":[{"name":"msg","type":"String","description":"The message to log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"Identifies the CI. This is the entry point for the entire CI Identification\n    process.","params":[],"returns":{"type":"IDResult","description":"The result returned by the identifier"},"example":[]}]},"CIIdentifierResult":{"meta":{"has_constructor":false,"description":"Gets the result returned by an identifier. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"CIIdentifierResult","description":"Creates an instance of the CIIdentifierResult class.","params":[{"name":"matched","type":"Array","description":"An array of sys_ids of matching CIs; may have any number of entries including\n                zero."},{"name":"matchable","type":"Boolean","description":"True if identifier had sufficient data to match"},{"name":"terminatedChain","type":"Boolean","description":"True if the identifier chain should stop processing filters. False to\n                continue."}],"returns":{"type":"","description":""},"example":[]}]},"CimCIData":{"meta":{"has_constructor":false,"description":"Provides a wrapper for CIM CI data manipulation. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"addSerial","description":"Adds a serial number to the current CI, by type.","params":[{"name":"type","type":"String","description":"The serial number type. If out-of-box, use the CimCIData.serialType\n                enum."},{"name":"serial","type":"String","description":"The serial number"}],"returns":{"type":"String","description":"The current CI"},"example":[]},{"name":"SerialRecord","description":"Creates a new serial record.","params":[{"name":"type","type":"String","description":"The serial type to assign to the CI. If out-of-box, uses the\n                CimCIData.serialType enum."},{"name":"serial","type":"String","description":"The serial number to assign."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setMakeAndModel","description":"Sets the make and model for the current CI.","params":[{"name":"make","type":"String","description":"The manufacturer"},{"name":"model","type":"String","description":"The model"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CimIDSensor":{"meta":{"has_constructor":false,"description":"Performs identification for CIM probe results. Use in any server-side script to perform identification of CIM probe results.","example":""},"properties":{},"methods":[{"name":"configureTriggeredProbe","description":"Configures a triggered probe before it is launched.","params":[{"name":"probe","type":"String","description":"An already configured probe that is ready to fire."}],"returns":{"type":"Boolean","description":"True to fire this probe, false to skip it."},"example":[]},{"name":"getInstanceHashToken","description":"Gets the instance hash token.","params":[],"returns":{"type":"String","description":"The hash token"},"example":[]},{"name":"prepare","description":"Prepares the probe results.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"Processes all CIM probe query results for a CIM ID sensor.","params":[{"name":"results","type":"Object","description":"The query results"},{"name":"cimData","type":"CimCIData","description":"The CI data of the device being identified."},{"name":"sensor","type":"CimIDSensor","description":"The wrapping sensor, extends CimIDSensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"runMultiProbeScript","description":"Runs a multi-probe script against a probe result.","params":[{"name":"script","type":"String","description":"The script"},{"name":"probeResult","type":"Object","description":"The probe result"},{"name":"probeRecord","type":"String","description":"The probe ID"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateDeviceCount","description":"Updates the device count.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CimInstanceToken":{"meta":{"has_constructor":false,"description":"Represents the unique query identity of a CIM instance. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"getHashToken","description":"Parses the instance token.","params":[{"name":"cimomip","type":"String","description":" "}],"returns":{"type":"String","description":"The hash token"},"example":[]},{"name":"parse","description":"Parses the instance token.","params":[{"name":"instance","type":"XMLObj","description":"The CIM instance"}],"returns":{"type":"String","description":"The parsed instance token, for example,\n                CIM_ClassName{Key1='Value1',Key2='Value2'}"},"example":[]}]},"CimProbe":{"meta":{"has_constructor":false,"description":"Maintains CIM probe meta data. Use in any server-side script where you need to maintain a CIM probe.","example":""},"properties":{},"methods":[{"name":"getNamedQueries","description":"Returns all the named queries for the current CIM probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getQueries","description":"Returns all the queries for the current CIM probe.","params":[],"returns":{"type":"Array","description":"An array of strings of queries"},"example":[]},{"name":"getQueryRecords","description":"Returns all the records in the CIM Probe table.","params":[],"returns":{"type":"GlideRecord","description":"The query result"},"example":[]}]},"CimProbeResult":{"meta":{"has_constructor":false,"description":"Processes CIM probe results. Use to process CIM probe results in any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"getNamedInstances","description":"Gets the named instances for the specified named queries.","params":[{"name":"namedQueries","type":"String","description":"The named queries"}],"returns":{"type":"String","description":"The named instances"},"example":[]},{"name":"getQueries","description":"Gets all the queries for the current CIM probe.","params":[],"returns":{"type":"String Array","description":"All Queries"},"example":[]}]},"CIRelatedList":{"meta":{"has_constructor":true,"description":"Utility class for working with CI Related lists. Each instance of this class contains the details of a single list that is related to a\n   particular CI. The details of this list and the contents of the list are included.<br/><br/>Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the CIRelatedList class. With no arguments, simply constructs an\n    empty instance.","params":[{"name":"table","type":"String","description":"The table containing the related list. If many-to-many, the many-to-many\n                table."},{"name":"refField","type":"String","description":"The reference field in the table for this related list."},{"name":"cmdb_ci","type":"String","description":"The sys_id of the CI this list is related to."},{"name":"debugFlag","type":"String","description":"If true, debug logging is enabled."}],"returns":{"type":"","description":""},"example":[]},{"name":"addRec","description":"Adds the specified record to the related list.","params":[{"name":"record","type":"String","description":"The record to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addRecs","description":"Sets the given records to the related list.","params":[{"name":"records","type":"String","description":"The records to set"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"appendXMLChildFld","description":"Appends an XML child to a field.","params":[{"name":"parent","type":"String","description":"The parent element"},{"name":"name","type":"String","description":"The element name"},{"name":"datum","type":"String","description":"The data to append"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"appendXMLChildRecord","description":"Appends an XML child to a record.","params":[{"name":"parent","type":"String","description":"The parent element"},{"name":"name","type":"String","description":"The element name"},{"name":"record","type":"String","description":"The record"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"checkSysCollection","description":"Checks to see if this is a SysCollection table. If it is, sets the target table name\n    and reference field name.","params":[],"returns":{"type":"CIRelatedList","description":"An instance of CIRelatedList for the specified list."},"example":[]},{"name":"checkSysM2M","description":"Checks to see if this is a Sys many-to-many table. If it is, sets the target table name\n    and reference field name.","params":[],"returns":{"type":"Boolean","description":"True if it is a sys many-to-many table; otherwise, false."},"example":[]},{"name":"fromXML","description":"Initializes this instance from the specified XML element.","params":[{"name":"element","type":"String","description":"An XML element"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"populate","description":"Populates the <samp class=\"ph codeph\">this.records</samp> field of this instance.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"remove","description":"Removes all the related list items.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toString","description":"Makes a string representation of this instance, pushing each line onto the end of the\n    given result array.<p>This method is called from <span class=\"keyword apiname\">CIData.toString()</span>, and assumes related list\n        lines are to be indented two spaces.</p>","params":[{"name":"result","type":"Array","description":"The result to convert"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toXML","description":"Serializes this instance to XML in the given document and <rl> element.","params":[{"name":"document","type":"String","description":"The document"},{"name":"element","type":"String","description":"The rl element"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"xmlToRecord","description":"Converts a related list from XML to record format.","params":[{"name":"records","type":"String","description":"The record to create"},{"name":"element","type":"String","description":"The XML element"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CIUtils":{"meta":{"has_constructor":false,"description":"CIUtils is a utility class for working with configuration items. By default, when traversing CI relationships the system will use a max depth of 10. This can be\n   overridden in the <span class=\"keyword apiname\">glide.relationship.max_depth</span> property.<br/><br/>The maximum number of items returns is 1000. This can be overridden in the\n    <span class=\"keyword apiname\">glide.relationship.threshold</span> property.<br/><br/>The CIUtils class is available to server-side scripts.","example":""},"properties":{},"methods":[{"name":"servicesAffectedByCI","description":"Determine which business services are affected by a specific CI.","params":[{"name":"CI_sys_id","type":"String","description":"The sys_id of a configuration item (cmdb_ci)"}],"returns":{"type":"Array","description":"An array of sys_id values for cmdb_ci records downstream of (or affected by)\n                the specified item."},"example":[{"code":"var CIUtil = new CIUtils();\n \n//get a server record\nvar server = new GlideRecord(\"cmdb_ci_server\");\nserver.addQuery(\"name\", \"lnux100\");\nserver.query();\nif (server.next()) {\n  //get the affected services, array of ids\n  var serviceIds = CIUtil.servicesAffectedByCI(server.getUniqueValue());\n  for (var i=0; i &lt; serviceIds.length; i++) {\n    //get the service record\n    var service = new GlideRecord(\"cmdb_ci_service\");\n    service.get(serviceIds[i]);\n    gs.print(service.getDisplayValue());\n  }\n}","description":"","output":""}]},{"name":"servicesAffectedByTask","description":"Determine which business services are affected by a task.","params":[{"name":"task","type":"GlideRecord","description":"A task GlideRecord, for example incident, change_request, problem"}],"returns":{"type":"Array","description":"An array of sys_id values for CIs downstream of (or affected by) the\n                configuration item referenced by the task's cmdb_ci field."},"example":[{"code":"var CIUtil = new CIUtils();\n \n//get an incident record\nvar inc = new GlideRecord(\"incident\");\ninc.addQuery(\"number\", \"INC00050\");\ninc.query();\nif (inc.next()) {\n  //get the affected services, array of ids\n  var serviceIds = CIUtil.servicesAffectedByTask(inc);\n  for (var i=0; i &lt; serviceIds.length; i++) {\n    //get the service record\n    var service = new GlideRecord(\"cmdb_ci_service\");\n    service.get(serviceIds[i]);\n    gs.print(service.getDisplayValue());\n  }\n}","description":"","output":""}]}]},"ClassifierProbes":{"meta":{"has_constructor":false,"description":"Provides a classifier probe launch facility. Encapsulates an array of probe information\n  records, initialized either from a JavaScript array or the XML serialized version. Use in any server-side script where you need to define a classifier probe launch facility.","example":""},"properties":{},"methods":[{"name":"launch","description":"Launches the next highest priority classifier from those in the list.","params":[],"returns":{"type":"Boolean","description":"True if a classifier is launched; otherwise, false."},"example":[]},{"name":"launchSupplementary","description":"Launches a supplementary probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"size","description":"Returns the probe length.","params":[],"returns":{"type":"Number","description":"The probe length"},"example":[]}]},"CMDBDuplicateTaskUtils":{"meta":{"has_constructor":true,"description":"Use the <span class=\"keyword apiname\">CMDBDuplicateTaskUtils</span> API to  create a\n      <span class=\"ph uicontrol\">De-duplication</span> task that contains duplicate CIs that are of independent\n    type. A de-duplication task can only contain CMDB CIs that are not in another de-duplication\n      task.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the <span class=\"keyword apiname\">CMDBDuplicateTaskUtils</span> class.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"createDuplicateTask","description":"Create a <span class=\"ph uicontrol\">De-duplication</span> task in which the sys_ids of duplicate\n    tasks are specified.","params":[{"name":"sysIDs","type":"String","description":"A comma separated list of sys_IDs."}],"returns":{"type":"String","description":"The sys_ID of the created task. Returns null if the input string is empty, the\n                input parameter contains a sys_ID that is not in the cmdb_ci table, or the input\n                parameter contains a sys_ID that is in an open de-duplication task."},"example":[{"code":"// where sys-id1 and sys-id2 are sys_IDs of CIs in the cmdb_ci table\nvar sysIDs = 'sys-id1, sys-id2';\nvar dupTaskUtil = new CMDBDuplicateTaskUtils();\nvar deDupTaskID = dupTaskUtil.createDuplicateTask(sysIDs);\ngs.info(deDupTaskID);","description":"","output":""}]}]},"CMDBTransformUtil":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">CMDBTransformUtil</span> class uses the Identification and\n  Reconciliation framework to minimize creation of duplicate CIs and to reconcile CI attributes by\n  only accepting information from authorized sources when updating the CMDB in onBefore transform\n  map scripts. This class cannot be used in other scripts. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a CMDBTransformUtil object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var cmdbUtil = new CMDBTransformUtil();","description":"","output":""}]},{"name":"getError","description":"Use this method in onBefore transform map scripts to get the error when  the\n      <span class=\"keyword apiname\">identifyAndReconcile()</span> method was called.","params":[],"returns":{"type":"String","description":"The error message from <span class=\"keyword apiname\">identifyAndReconcile()</span>."},"example":[{"code":"// add this code to the onBefore transform map script\n// Call CMDB API to do Identification and Reconciliation of current row\nvar cmdbUtil = new CMDBTransformUtil();\ncmdbUtil.setDataSource('ImportSet');\ncmdbUtil.identifyAndReconcile(source, map, log);\nignore = true;\n\nif (cmdbUtil.hasError()) {\n        var errorMessage = cmdbUtil.getError();\n        log.error(errorMessage);\n} else {\n        log.info('IE Output Payload: ' + cmdbUtil.getOutputPayload());\n        log.info('Imported CI: ' + cmdbUtil.getOutputRecordSysId());\n}\n","description":"","output":""}]},{"name":"getOutputPayload","description":"Use this method in onBefore transform map scripts to get the JSON payload after the\n      <span class=\"keyword apiname\">identifyAndReconcile()</span> method is called.","params":[],"returns":{"type":"String","description":"A JSON formatted string that is a list of results for the configuration items\n                in the input string. Each result string is in the format  'items: [{}],\n                relations:[{}]',  where each item within the  items and relations lists contains\n                name-value pairs. <div class=\"p\">The possible name-value pairs within the items list are:  <ul class=\"ul\" id=\"CMDBTU-getOutputPayload__d17e161\">\n                    <li class=\"li\">className- the sys_class_name for the CI that was updated or created.</li>\n\n                    <li class=\"li\">operation, which is one of INSERT, UPDATE, UPDATE_WITH_UPGRADE,\n                      UPDATE_WITH_DOWNGRADE, UPDATE_WITH_SWITCH, DELETE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the CI that was updated or created.</li>\n\n                    <li class=\"li\">relatedSysIds -  a list of sys_id values of CIs used during lookup based\n                      identification.</li>\n\n                    <li class=\"li\">maskedAttributes – a list of attributes whose update by a non-authoritative\n                      data source gets skipped as defined by the \n                      <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/configuration-management/task/t_CreateCIReconciliationRule.html\" target=\"_blank\">Reconciliation\n                        Rules</a>.</li>\n\n                    <li class=\"li\">identifierEntrySysId - sys_id of identifier entry used during matching.</li>\n\n                    <li class=\"li\">errors - a list of errors in the format of (error, message string), where\n                      error can be ABANDONED, INVALID_INPUT_DATA, IDENTIFICATION_RULE_MISSING,\n                      IDENTIFICATION_RULE_FOR_LOOKUP_MISSING, NO_LOOKUP_RULES_FOR_DEPENDENT_CI,\n                      NO_CLASS_NAME_FOR_INDEPENDENT_CI, MISSING_DEPENDENCY, MULTIPLE_DEPENDENCIES,\n                      MULTIPLE_DUPLICATE_RECORDS, RELATION_CHAIN_ENDS_AT_QUALIFIER,\n                      QUALIFICATION_LOOP, TYPE_CONFLICT_IN_QUALIFICATION, MULTI_MATCH,\n                      REQUIRED_ATTRIBUTE_EMPTY, RECLASSIFICATION_NOT_ALLOWED</li>\n\n                    <li class=\"li\">duplicateIndices - a list of indexes of items that are duplicates of the\n                      current item.</li>\n\n                    <li class=\"li\">identificationAttempts - a list of attempts in the format of (attributes,\n                      identiferName, attemptResult, searchOnTable) where <ul class=\"ul\" id=\"CMDBTU-getOutputPayload__d17e193\">\n                        <li class=\"li\">attributes - the attributes of identifier entry used during\n                          identification</li>\n\n                        <li class=\"li\">identiferName - the CI identifier to which this identifier entry\n                          belongs</li>\n\n                        <li class=\"li\">attemptResult - one of SKIPPED, NO_MATCH, MATCHED, MULTI_MATCH</li>\n\n                        <li class=\"li\">searchOnTable - the table searched during the identification\n                          process.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"CMDBTU-getOutputPayload__d17e210\">\n                    <li class=\"li\">className - the relationship CI's class name and is always cmdb_rel_ci</li>\n\n                    <li class=\"li\">operation - one of INSERT, UPDATE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the relationship CI inserted or updated</li>\n\n                  </ul>\n</div>"},"example":[{"code":"// add this code to the onBefore transform map script\n// Call CMDB API to do Identification and Reconciliation of current row\nvar cmdbUtil = new CMDBTransformUtil();\ncmdbUtil.setDataSource('ImportSet');\ncmdbUtil.identifyAndReconcile(source, map, log);\nignore = true;\n\nif (cmdbUtil.hasError()) {\n        var errorMessage = cmdbUtil.getError();\n        log.error(errorMessage);\n} else {\n        log.info('IE Output Payload: ' + cmdbUtil.getOutputPayload());\n        log.info('Imported CI: ' + cmdbUtil.getOutputRecordSysId());\n}\n","description":"","output":""}]},{"name":"getOutputRecordSysId","description":"Use this method in onBefore transform map scripts to get the sys_id of the CI that was\n    inserted/updated.","params":[],"returns":{"type":"String","description":"The sys_id of the CI that was inserted/updated."},"example":[{"code":"// add this code to the onBefore transform map script\n// Call CMDB API to do Identification and Reconciliation of current row\nvar cmdbUtil = new CMDBTransformUtil();\ncmdbUtil.setDataSource('ImportSet');\ncmdbUtil.identifyAndReconcile(source, map, log);\nignore = true;\n\nif (cmdbUtil.hasError()) {\n        var errorMessage = cmdbUtil.getError();\n        log.error(errorMessage);\n} else {\n        log.info('IE Output Payload: ' + cmdbUtil.getOutputPayload());\n        log.info('Imported CI: ' + cmdbUtil.getOutputRecordSysId());\n}\n","description":"","output":""}]},{"name":"hasError","description":"Use this method in onBefore transform map scripts to determine if there was an error\n    when  the <span class=\"keyword apiname\">identifyAndReconcile()</span> method was called.","params":[],"returns":{"type":"Boolean","description":"True if the <span class=\"keyword apiname\">identifyAndReconcile()</span> method had an\n                error."},"example":[{"code":"// add this code to the onBefore transform map script\n// Call CMDB API to do Identification and Reconciliation of current row\nvar cmdbUtil = new CMDBTransformUtil();\ncmdbUtil.setDataSource('ImportSet');\ncmdbUtil.identifyAndReconcile(source, map, log);\nignore = true;\n\nif (cmdbUtil.hasError()) {\n        var errorMessage = cmdbUtil.getError();\n        log.error(errorMessage);\n} else {\n        log.info('IE Output Payload: ' + cmdbUtil.getOutputPayload());\n        log.info('Imported CI: ' + cmdbUtil.getOutputRecordSysId());\n}\n","description":"","output":""}]},{"name":"identifyAndReconcile ","description":"Use this method in onBefore transform map scripts to insert or update a configuration\n    item to the CDMB. Using this method instead of relying on the transform to insert or update the\n    configuration item record reduces duplicate entries in the CDMB.<p>This method is used in the onBefore script. Set <samp class=\"ph codeph\">ignore = true</samp> to prevent\n        the transform from adding or updating the record a second time.</p>","params":[{"name":"source","type":"Object","description":"This is the global object available in transform map scripts that holds the\n                incoming record."},{"name":"map","type":"Object","description":"This is the map object available in transform map scripts that holds the\n                current  transform map record."},{"name":"log","type":"Object","description":"This is the log object available in transform map scripts."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// add this code to the onBefore transform map script\n// Call CMDB API to do Identification and Reconciliation of current row\nvar cmdbUtil = new CMDBTransformUtil();\ncmdbUtil.identifyAndReconcile(source, map, log);\nignore = true;","description":"","output":""}]},{"name":"logTransformStats","description":"Use this method in onComplete transform map scripts to log the number of CIs inserted,\n    updated, skipped, or had errors.","params":[{"name":"log","type":"Object","description":"This is the log object available in transform map scripts."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDataSource","description":"Use this method in onBefore transform map scripts to set the data source to be used\n    when  the <span class=\"keyword apiname\">identifyAndReconcile()</span> method is called. If this method is not\n    called, the default value 'ImportSet' is used.","params":[{"name":"source","type":"String","description":"The data source for the source CI record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// add this code to the onBefore transform map script\n// Call CMDB API to do Identification and Reconciliation of current row\nvar cmdbUtil = new CMDBTransformUtil();\ncmdbUtil.setDataSource('ImportSet');\ncmdbUtil.identifyAndReconcile(source, map, log);\nignore = true;\n\nif (cmdbUtil.hasError()) {\n        var errorMessage = cmdbUtil.getError();\n        log.error(errorMessage);\n} else {\n        log.info('IE Output Payload: ' + cmdbUtil.getOutputPayload());\n        log.info('Imported CI: ' + cmdbUtil.getOutputRecordSysId());\n}\n","description":"","output":""}]}]},"CMDBUtil":{"meta":{"has_constructor":false,"description":"The CMDBUtil API provides utility methods for creating and managing table relationships\n  in the configuration management database (CMDB) and managing CMDB baselines. CMDBUtil is a JavaScript-accessible ScriptableObject. The CMDBUtil API has dynamic and static\n   methods. You access dynamic methods by creating a SNC.CMDBUtil object. You access static methods\n   by using SNC.CMDBUtil global object to call the methods.<br/><br/>This example creates a CMDBUtil object.\n   <pre ng-prism='' source='var cu = new SNC.CMDBUtil();\ncu.baselineProposedChangesGenDIFF(current, action.get(&#39;sysparm_changeset&#39;));' class='language-javascript monospaceing'></pre><br/><br/>This example calls a static method.\n   <pre ng-prism='' source='var output = SNC.CMDBUtil.getAllChildrenOfAsCommaList(&#39;cmdb_ci_computer&#39;);' class='language-javascript monospaceing'></pre><br/><br/>Use these methods to manage CMDB table relationships and baselines.","example":""},"properties":{},"methods":[{"name":"baselineProposedChangesApplyChanges","description":"Applies proposed changes in a task_ci record that represent an update set for all CIs\n    associated with the task.<p>This is a dynamic method.</p>","params":[{"name":"proposedChanges","type":"GlideRecord","description":"The collection of proposed changes in the change request (CHG)."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Where current is a GlideRecord and action is the current UI action\nvar base = new SNC.CMDBUtil();\nbase.baselineProposedChangesApplyChanges(current);","description":"","output":""}]},{"name":"baselineProposedChangesGenDiff","description":"Generates the XML for proposed changes diff, and adds it to the corresponding task_ci\n    record.<p>This is a dynamic method.</p>","params":[{"name":"current","type":"GlideRecord","description":"The GlideRecord that contains the collection of proposed changes."},{"name":"changeSet","type":"String","description":"The sysid of the task_ci record that represents the change set to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Where current is a GlideRecord and action is the current UI action\nvar base = new SNC.CMDBUtil();\nbase.baselineProposedChangesGenDIFF(current, action.get('sysparm_changeset'));","description":"","output":""}]},{"name":"bootstrap","description":"Bootstraps the environment by creating the database, creating the system dictionary\n    table, and having the system dictionary table describe itself.<p>This is a static method.</p>","params":[{"name":"dictFile","type":"String","description":"The file name including path, of the dictionary to load."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"createCIRelationship","description":"Creates the specified CI relationship using the specified invocation parameters.<p>If called without the first parameter, passing only four parameters, defaults to the CI\n        Relationship [cmdb_rel_ci] table.</p><p>This is a dynamic method.</p>","params":[{"name":"tableName","type":"String","description":"The table name"},{"name":"parentField","type":"String","description":"The parent field"},{"name":"childField","type":"String","description":"The child field"},{"name":"parentDesc","type":"String","description":"The parent relationship descriptor"},{"name":"childDesc","type":"Object","description":"The child relationship descriptor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAllChildrenOfAsCommaList","description":"Gets all the child tables of the specified table as a comma-separated list.<p>This is a static method.</p>","params":[{"name":"baseTable","type":"String","description":"The base table name."}],"returns":{"type":"String","description":"A comma-separated list of sys_ids of tables extending the base table."},"example":[{"code":"//Where cmdv_ci_computer is a table.\nvar output = SNC.CMDBUtil.getAllChildrenOfAsCommaList('cmdb_ci_computer');\ngs.print(output);","description":"","output":""}]},{"name":"getCMDBViews","description":"Gets all the records in the CMDB View [cmdb_view] table.<p>This is a dynamic method.</p>","params":[],"returns":{"type":"Array List","description":"The records in the CMDB view table."},"example":[]},{"name":"getTables","description":"Gets a list of all the parents of a table.<p>This is a static method.</p>","params":[{"name":"tableName","type":"String","description":"The table name"}],"returns":{"type":"ArrayList","description":"List of tables that are parents of the specified table."},"example":[]},{"name":"isExcludedFromBR","description":"Determines whether a CI class is defined in the Business Rule Exclusion Lists\n    [cmdb_business_rule_exclusions] table. Use this method in an advanced condition to prevent a\n    business rule from executing on excluded CI classes.<p>For example, the Create Asset on insert business rule uses this method in the advanced\n        condition to prevent the rule from creating assets for CI classes such as cmdb_ci_qualifier,\n        cmdb_ci_endpoint, cmdb_ci_storage_volume, and cmdb_ci_vcenter_datastore_disk. Define classes\n        for exclusion in the Business Rule Exclusion Lists [cmdb_business_rule_exclusions]\n        table.</p>","params":[{"name":"className","type":"String","description":"Name of the class to check for exclusion."}],"returns":{"type":"Boolean","description":"True if the class is defined in the Business Rule Exclusion Lists\n                [cmdb_business_rule_exclusions] table; otherwise, false."},"example":[{"code":"//Returns true if the cmdb_ci_endpoint class is defined \n//in the Business Rule Exclusion Lists table\nvar exclusion = SNC.CMDBUtil.isExcludedFromBR(\"cmdb_ci_endpoint\");\n\n//Advanced condition that prevents business rules from executing on \n//classes in the Business Rule Exclusion Lists table\n(!SNC.CMDBUtil.isExcludedFromBR(current.getTableName()))","description":"","output":""}]},{"name":"processCIChange","description":"Wraps the call to <span class=\"keyword apiname\">RelationshipEventProcessor()</span>, which processes any\n    changes to CI relationships.<p>This is a dynamic method.</p>","params":[{"name":"event","type":"GlideRecord","description":"The event record."},{"name":"target","type":"GlideRecord","description":"The target record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processRelChange","description":"Wraps the call to <span class=\"keyword apiname\">RelationshipEventProcessor()</span>, which processes any\n    changes to CI relationships, with the specified type and triplet.<p>This is a dynamic method.</p>","params":[{"name":"event","type":"GlideRecord","description":"The event record"},{"name":"current","type":"GlideRecord","description":"The current record, which is either the relation record or a user record if the\n                current process is a deletion."},{"name":"relType","type":"String","description":"The type of relation that changed."},{"name":"triplet","type":"String","description":"The child, parent, and class name from the relation that changed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"removeCIRelationship","description":"Deletes the specified CI relationship.<p>If called without the first parameter, passing only four parameters, defaults to the CI\n        Relationship [cmdb_rel_ci] table.</p><p>This is a dynamic method.</p>","params":[{"name":"tableName","type":"String","description":"The table name"},{"name":"parentField","type":"String","description":"The parent field"},{"name":"childField","type":"String","description":"The child field"},{"name":"parentDesc","type":"String","description":"The parent relationship descriptor"},{"name":"childDesc","type":"Object","description":"The child relationship descriptor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"reParentTable","description":"Changes the parent of the given table to the new parent.<p>This is a static method.</p>","params":[{"name":"table","type":"String","description":"The table to re-parent"},{"name":"oldParent","type":"String","description":"The old parent"},{"name":"newParent","type":"String","description":"The new parent"}],"returns":{"type":"Boolean","description":"True, if successful; otherwise, false."},"example":[]}]},"ConnectActionResponse":{"meta":{"has_constructor":false,"description":"The ConnectActionResponse API provides a method to create a GlideRecord. ConnectActionResponse methods are accessed through a global object (response) that is available\n   only in Connect action scripts.","example":""},"properties":{},"methods":[{"name":"newRecord","description":"Create a GlideRecord in the specified table with the specified values.<p>Opens a form in the UI based upon the table, which replaces the\n          <span class=\"ph uicontrol\">Table</span> and <span class=\"ph uicontrol\">Document</span> fields in the Live Group\n        Profile record for the associated conversation.</p>","params":[{"name":"table","type":"String","description":"Name of the table where the record is to be added."},{"name":"values","type":"Object","description":"An object of name value pairs where the names are field names in the table and\n                the values are the field values."},{"name":"view","type":"String","description":"The form view to load. This parameter is optional."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"response.newRecord(\"incident\", {\n\tshort_description: conversation.document.short_description || \"\",\n\tcaller_id: conversation.document.opened_by\n});","description":"","output":""}]}]},"CriteriaEvaluator":{"meta":{"has_constructor":false,"description":"Implements a general-purpose criteria evaluator. The general use pattern is to construct the class, add as many criteria as needed, then\n   evaluate.","example":""},"properties":{},"methods":[{"name":"addCriterion","description":"Adds the criteria to be evaluated.","params":[{"name":"lhComparand","type":"String","description":"The left hand comparand. Must be a named value in the left hand values input\n                into <span class=\"keyword apiname\">evaluate()</span>."},{"name":"operator","type":"String","description":"The operator. Must be one of: equals, starts with, contains, does not contain,\n                ends with, or regex matches."},{"name":"rhComparand","type":"String","description":"The right hand comparand. Can be evaluated either as one of the right hand\n                values input to <span class=\"keyword apiname\">evaluate()</span> or as a literal string."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"evaluate","description":"Evaluates the criteria.","params":[{"name":"lhValues","type":"Object","description":"A hashmap of name-value pairs to evaluate the left hand comparands of the\n                criteria."},{"name":"rhValues","type":"String","description":"Optional right hand values to use instead of the literal value in evaluating\n                the right hand comparands."},{"name":"any","type":"Boolean","description":"If true, any criterion matching suffices for a true result. If false, all\n                criteria must match for a true result."}],"returns":{"type":"Boolean","description":"True if the supplied values satisfy the criteria, false otherwise."},"example":[]}]},"DateTimeUtils":{"meta":{"has_constructor":false,"description":"DateTimeUtils class is a collection of date/time functions. The DateTimeUtils class is provided via the Script Include DateTimeUtils.<br/><br/>The DateTimeUtils class can be used in any server-side script, and is available through\n   GlideAjax.","example":""},"properties":{},"methods":[{"name":"int8ToGlideDateTime","description":"Converts Microsoft AD integer8 DateTime format into GlideDateTime format.<p>Integer8 is also known as Microsoft Filetime format. This method is commonly used when\n        importing AD user's date fields, such as Expiration Date.</p>","params":[{"name":"int64","type":"Number","description":"A 64-bit value representing the number of 100-nanosecond intervals since\n                January 1, 1601 (UTC)."}],"returns":{"type":"GlideDateTime","description":"A GlideDateTime object set to the Integer8 date and time."},"example":[{"code":"//convert and set account expiration date from AD\n//this is an example that could be used in an LDAP import transform map to import the LDAP account \n//expires attribute to a customer created u_account_expires GlideDateTime field\nvar dtUtil = new DateTimeUtils();\ntarget.u_account_expires = dtUtil.int8ToGlideDateTime(source.u_accountexpires);","description":"","output":""}]},{"name":"msToGlideDateTime","description":"Convert milliseconds to a GlideDateTime object","params":[{"name":"milliseconds","type":"Number","description":"The number of milliseconds"}],"returns":{"type":"GlideDateTime","description":"A GlideDateTime object"},"example":[{"code":"//example script to call the method from a client\nReplace MILLISECONDSVALUE with your variable\nvar ga = new GlideAjax('DateTimeUtils');\nga.addParam('sysparm_name','msToGlideDateTime');\nga.addParam('sysparm_value', MILLISECONDSVALUE);\nga.getXMLWait();\nvar newGDT = ga.getAnswer();","description":"","output":""}]}]},"Discovery":{"meta":{"has_constructor":true,"description":"Provides a set of miscellaneous functions used in discovery. Use methods to perform discovery functions, such as check for valid IP ranges, start and\n   complete the discovery process, or send a warning message.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the Discovery class.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"completed","description":"Called when the completed business rule is called because the discovery_status started\n    has completed.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"discoveryFromCI","description":"Starts a discovery of the CI with the given sysID, returning the sysID of the status\n    record.","params":[{"name":"cmdb_ci","type":"String","description":"The sys_id of the CI to be discovered."}],"returns":{"type":"String","description":"The sysID of the status record found or created, or null if the CI could not be\n                discovered."},"example":[{"code":"var dj = new Discovery();\ndj.discoveryFromCI('09dad0830a0a0f2500152f56b1adb0ab')","description":"","output":""}]},{"name":"discoveryStartJob","description":"Starts the current discovery job.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dj = new Discovery();\ndj.discoveryStartJob();","description":"","output":""}]},{"name":"getIPsinCI","description":"Gets an array of IP addresses in the CI with a given sysID.","params":[{"name":"ci_sysID","type":"String","description":"The sys_id for the CI to look for"}],"returns":{"type":"Array","description":"An array of IP addresses in the CI with the specified sys_id, or null if the CI\n                doesn't exist."},"example":[{"code":"var dj = new Discovery();\ndj.getIPsInCI('09dad0830a0a0f2500152f56b1adb0ab');","description":"","output":""}]},{"name":"getScheduleContainingAnyIP","description":"Gets the DiscoverySchedule instance for any IP address in a given array and the IP\n    address to be discovered.","params":[{"name":"ips","type":"Array","description":"An array of IP addresses"}],"returns":{"type":"Object","description":"An object with two properties: \"schedule\" that has a DiscoverySchedule instance\n                for a schedule that contains any IP address in the given array, and \"ip\" that has\n                the IP address to be discovered. Returns null if no such schedule could be found for\n                any IP."},"example":[{"code":"var dj = new Discovery();\nvar dinst = ['100.100.98.10', '100.100.98.9'];\ndj.getScheduleContainingAnyIP(dinst);","description":"","output":""}]},{"name":"isValidDiscoverySchedule","description":"Determines if the current discovery schedule is valid.","params":[{"name":"schedule","type":"String","description":"The sys_id of the schedule to check."}],"returns":{"type":"Boolean","description":"True if the schedule is valid; otherwise, false."},"example":[{"code":"var dj = new Discovery();\ndj.isValidDiscoverySchedule('08fcd0830a0a0b2600079f56b1adb9ae');","description":"","output":"true"}]},{"name":"isValidRange","description":"Determines if the IP range for the specified discovery schedule is valid.","params":[{"name":"schedule","type":"String","description":"The sys_id of the schedule to check"}],"returns":{"type":"Boolean","description":"True, if the range is valid; otherwise, false."},"example":[{"code":"var dj = new Discovery();\ndj.isValidRange('08fcd0830a0a0b2600079f56b1adb9ae');","description":"","output":"true"}]},{"name":"warnMsg","description":"Logs a warning message.","params":[{"name":"message","type":"String","description":"The warning message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dj = new Discovery();\ndj.warnMsg('This is a warning message');","description":"","output":"This is a warning message"}]}]},"DiscoveryAjax":{"meta":{"has_constructor":false,"description":"Provides client-callable Ajax functions for Discovery. Use this script include in any server-side Discovery script to get device IP addresses or\n   status, or set device status to ready from the client.","example":""},"properties":{},"methods":[{"name":"ajaxFunction_countECCRecords","description":"Retrieves the number of records in the ECC queue, and the maximum entries.","params":[],"returns":{"type":"String","description":"The number of records in the queue followed by the maximum number of\n                entries."},"example":[{"code":"var da = new DiscoveryAjax();\ngs.print(da.ajaxFunction_countECCRecords());","description":"","output":"5940,300"}]},{"name":"ajaxFunction_discoverIP","description":"Gets the IP address for the next device that is ready for discovery.","params":[],"returns":{"type":"GlideRecord","description":"The IP address of the device. If no device is ready, returns false."},"example":[{"code":"var da = new DiscoveryAjax();\ngs.print(da.ajaxFunction_discoverIP());","description":"","output":"false"}]},{"name":"ajaxFunction_discoverStatus","description":"Gets the Discovery status of a device that has started and is active.","params":[],"returns":{"type":"String","description":"The discovery status ID"},"example":[{"code":"var da = new DiscoveryAjax();\ngs.print(da.ajaxFunction_discoverStatus());","description":"","output":"ea3f0c9ffccba4009886dcf815f7866c"}]},{"name":"ajaxFunction_getSysID","description":"Gets the sys_id for the current Discovery CI.","params":[],"returns":{"type":"String","description":"The sys_id"},"example":[{"code":"var da = new DiscoveryAjax();\nvar id = da.ajaxFunction_getSysID();","description":"","output":""}]},{"name":"ajaxFunction_setAllToReady","description":"Sets the status of all processed devices to ready.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var da = new DiscoveryAjax();\nda.ajaxFunction_setAllToReady();","description":"","output":""}]}]},"DiscoveryAPDEnvSensor":{"meta":{"has_constructor":false,"description":"Processes the application discovery environment file. Use with any server-side discovery script where you need to process the application discovery\n   environment file.","example":""},"properties":{},"methods":[{"name":"start","description":"Starts processing the application discovery environment file.","params":[{"name":"result","type":"Object","description":"Te discovery result file"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryAPDSensor":{"meta":{"has_constructor":false,"description":"The abstract sensor for parsing application files. Extend this class to parse application files.","example":""},"properties":{},"methods":[{"name":"hasValidContent","description":"Determines if the application file has valid content.","params":[{"name":"result","type":"Object","description":"The application file"}],"returns":{"type":"Boolean","description":"True if the file contains valid content; otherwise, false."},"example":[]},{"name":"processCustom","description":"Processes a custom application.","params":[{"name":"dcaGR","type":"GlideRecord","description":"The application record"},{"name":"versionResult","type":"String","description":"The application version"},{"name":"envResult","type":"Object","description":"The environment file"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processPartOfService","description":"Processes a part of the service provided by the current application.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processResult","description":"Processes the result. UNIX-based results must be converted to a JavaScript\n    object.","params":[{"name":"result","type":"Object","description":"The application file"}],"returns":{"type":"Object","description":"The processed result"},"example":[]},{"name":"processServicesConsumed","description":"Processes the services the current application consumes from other\n    applications.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processServicesProvided","description":"Processes the services provided by the current application.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryAPDVersionSensor":{"meta":{"has_constructor":false,"description":"Processes the application discovery version file. Use in any server-side discovery script where you need to process the application discovery\n   version file.","example":""},"properties":{},"methods":[{"name":"findOrCreateApplication","description":"Finds the record for the specified application or, if not found, creates\n    one.","params":[{"name":"dcaGR","type":"GlideRecord","description":"The application classification"}],"returns":{"type":"GlideRecord","description":"The application"},"example":[]},{"name":"processApplication","description":"Processes the application.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processAppToSystemRelation","description":"Creates an application-to-system relation.","params":[{"name":"dcaGR","type":"GlideRecord","description":"The application record"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processEnv","description":"Processes the environment.","params":[],"returns":{"type":"GlideRecord","description":"The environment"},"example":[]},{"name":"processXML","description":"Processes the XML files.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"start","description":"Starts processing the application discovery version file.","params":[{"name":"result","type":"Object","description":"The application file"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryApplicationDiscoMatcher":{"meta":{"has_constructor":false,"description":"Determines how to match an application during application classification. Use in a discovery script to classify an application.","example":""},"properties":{},"methods":[{"name":"isNewCI","description":"Determines if this is a new CI.","params":[],"returns":{"type":"Boolean","description":"True if new; otherwise, false."},"example":[]},{"name":"match","description":"Attempts to match with an application. If no match is found, creates a new application\n    entry.","params":[],"returns":{"type":"GlideRecord","description":"The matching application if found; otherwise, a new application entry."},"example":[]}]},"DiscoveryAttachments":{"meta":{"has_constructor":false,"description":"Implements methods related to attachments used in Discovery. Use this API in any server-side Discovery script to delete Discovery attachments.","example":""},"properties":{},"methods":[{"name":"deleteAttachments","description":"Deletes the attachments for the current Discovery record.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryBehavior":{"meta":{"has_constructor":true,"description":"Provides a set of functions used in Discovery behavior and functionality. Use with any sever-side Discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryBehavior class..","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"fireBasicFunctionality","description":"Starts the basic functionality probe for the specified MID server.","params":[{"name":"defaultMID","type":"String","description":"The MID server"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disb = new DiscoveryBehavior();\ndisb.fireBasicFunctionality(\"sandb01-358\");","description":"","output":""}]},{"name":"fireBehaviorFunctionality","description":"Starts the behavior functionality probe and logs the event.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disb = new DiscoveryBehavior();\ndisb.fireBehaviorFunctionality();","description":"","output":""}]},{"name":"fireFirstPhase","description":"Starts the first Discovery execution phase for the specified MID server.","params":[{"name":"defaultMID","type":"String","description":"The MID server"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disb = new DiscoveryBehavior();\ndisb.fireFirstPhase(\"sandb01-358\");","description":"","output":""}]},{"name":"fireNextPhase","description":"Starts the next Discovery execution phase.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disb = new DiscoveryBehavior();\ndisb.fireFirstPhase('sandb01-358');\ndisb.fireNextPhase();","description":"","output":""}]},{"name":"getFunctionality","description":"Gets an array of hashmaps of the discovery_functionality table with all the instances\n    in the next phase, and updates the scratchpad.last_phase entry.","params":[],"returns":{"type":"Array","description":"An array of hashmaps of the discovery_functionality table with all instances in\n                the next phase."},"example":[]},{"name":"getId","description":"Retrieves the current Discovery Behavior ID.","params":[],"returns":{"type":"String","description":"The Discovery Behavior ID"},"example":[]},{"name":"getMidWinDomain","description":"Gets the MID server Windows domain for the specified Discovery function.","params":[{"name":"dis_Function","type":"String","description":"The discovery function"}],"returns":{"type":"GlideRecord","description":"The Windows domain"},"example":[]},{"name":"haveUnscannedPorts","description":"Determines if the current device has unscanned ports.","params":[],"returns":{"type":"Boolean","description":"True if there are unscanned ports; otherwise, false."},"example":[]},{"name":"isValid","description":"Determines if the current device ID is valid.","params":[],"returns":{"type":"Boolean","description":"True if the current device ID is valid; otherwise, false."},"example":[]},{"name":"meetsCriteria","description":"Determines if there are functionality criteria for the given discovery_functionality\n    record.","params":[{"name":"dis_function","type":"String","description":"The discovery function"}],"returns":{"type":"Boolean","description":"True if there are no functionality criteria for the given\n                discovery_functionality record, or there is criteria and it meets the criteria;\n                false, if there is criteria but it does not meet the criteria"},"example":[]},{"name":"safeLower","description":"Coverts a string to lowercase.","params":[{"name":"str","type":"String","description":"The string to convert"}],"returns":{"type":"String","description":"The string converted to lower case. Returns an empty string if the parameter is\n                not a string."},"example":[{"code":"var discb = new DiscoveryBehavior();\ndiscb.safeLower(\"String with UPPERCASE letters\");","description":"","output":""}]},{"name":"triggerPortScanner","description":"Starts a Discovery scan for the specified MID server and ports.","params":[{"name":"mid","type":"String","description":"The name of the MID server"},{"name":"ports","type":"String","description":"The ports to scan"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryBehaviorRecord":{"meta":{"has_constructor":true,"description":"Encapsulates a discovery behavior. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryBehaviorRecord class.","params":[{"name":"source","type":"Object","description":"Must be a MIDServer instance, a GlideRecord for a behavior, or a string sysID\n                of a behavior record. If the source is a MIDServer instance, then a simple synthetic\n                behavior is created, with the \"All\" Discovery Functionality and the given MIDServer.\n                If the source is a sysID or a GlideRecord, the behavior is loaded from the\n                database."},{"name":"discover","type":"String","description":" "}],"returns":{"type":"","description":""},"example":[]},{"name":"firstPhase","description":"Starts the first discovery execution phase for the specified MID server.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getPhase","description":"Returns the functionality for this phase.","params":[{"name":"phase","type":"String","description":"The phase"}],"returns":{"type":"String","description":"The functionality for the phase."},"example":[]},{"name":"getPortProbesForPhase","description":"Gets the port probes for the specified stage and status.","params":[{"name":"phase","type":"String","description":"The current probe phase"},{"name":"status","type":"String","description":"The current probe status"}],"returns":{"type":"An array of objects","description":"Each object has these properties:<ul class=\"ul\" id=\"r_DBR-getPortProbesForPhase_S_S__ul_m5g_qrt_qt\">\n                  <li class=\"li\">midServer: the MIDServer instance for which services exist</li>\n\n                  <li class=\"li\">portProbes: a hashmap of DiscoveryPortProbe instances (by name) needed for\n                    this MID server</li>\n\n                </ul>"},"example":[]},{"name":"getStuffForResult","description":"Gets a hashmap of information from this behavior if we can find a port probe that\n    probes the given service name and for which the functionality criteria are met with the given\n    left-hand values and right-hand values. Returns null if no such port probe exists.","params":[{"name":"result","type":"String","description":"The ShazzamResult instance for the device being processed."},{"name":"scanner","type":"String","description":"The ShazzamScanner instance for the scanner being processed."},{"name":"phase","type":"String","description":"The current phase of the behavior."},{"name":"midServer","type":"String","description":"The MIDserver instance for the MID server whose Shazzam results are being\n                processed."},{"name":"status","type":"String","description":"The DiscoveryStatus instance for the current discover."}],"returns":{"type":"Object","description":"A hashmap with these properties, or null if none.<ul class=\"ul\" id=\"r_DBR-getStuffForRslt_S_S_S_S_S__ul_rvn_wqt_qt\">\n                  <li class=\"li\">behavior: the DiscoveryBehaviorRecord instance containing the service\n                    found</li>\n\n                  <li class=\"li\">functionality: the DiscoveryFunctionality instance containing the service\n                    found</li>\n\n                  <li class=\"li\">functionalityDefinition: the DiscoveryFunctionalityDefinition instance\n                    containing the service found</li>\n\n                  <li class=\"li\">portProbe: the DiscoveryPortProbe instance containing the service found</li>\n\n                  <li class=\"li\">service: the IPService instance found</li>\n\n                </ul>"},"example":[]},{"name":"nextPhase","description":"Starts the next discovery execution phase.","params":[{"name":"prevPhase","type":"String","description":"The last completed execution phase."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryCIRelationReconciler":{"meta":{"has_constructor":true,"description":"Reconciles records that are related by CI relations. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryCIRelationReconciler class.","params":[{"name":"fromID","type":"String","description":"The sys_id of the parent CI to be related from."},{"name":"nature","type":"String","description":"The relationship type descriptor"},{"name":"toTable","type":"String","description":"The table of CIs to be related"},{"name":"ciData","type":"Array","description":"An array of CIs to create or update and relate to"},{"name":"keys","type":"String","description":"Fields that make up a unique identity when related to the from CI"},{"name":"retireMissing","type":"Boolean","description":"If true, CIs of the same type that are related, but do not match the CIs\n                specified, will be marked absent."},{"name":"reason","type":"String","description":"The reason for needing reconciliation."}],"returns":{"type":"","description":""},"example":[]},{"name":"reconcile","description":"Inserts and updates all the provided CIs, updating the original CI object with the\n    appropriate IDs, then scans all relationships of the same type and class name from the origin\n    for CIs that are not in the current list and retires those missing CIs.","params":[],"returns":{"type":"GlideRecord","description":"The matching application if found, or the new application entry if not\n                found."},"example":[]}]},"DiscoveryClusteredProcessHelper":{"meta":{"has_constructor":false,"description":"Provides a mechanism for re-wiring classified process associations to their cluster\n  rather than a cluster node. Use this API in a discovery script when you need to classify processes.","example":""},"properties":{},"methods":[{"name":"getClassifiedProcesses","description":"Returns all classified processes that have a \"Runs on::Runs\" relationship with the\n    given child.","params":[],"returns":{"type":"GlideRecord","description":"The classified processes"},"example":[]},{"name":"getCluster","description":"Returns the first valid cluster where the current CI is a node.","params":[],"returns":{"type":"GlideRecord","description":"The first valid cluster where this CI is a node."},"example":[]},{"name":"getExistingProc","description":"Returns a classified process that already exists on the cluster.","params":[{"name":"procName","type":"String","description":"The process to get"}],"returns":{"type":"GlideRecord","description":"The process record"},"example":[]},{"name":"getSupportedProcs","description":"Determines which classified processes support clustering, by creating a array of\n    supported processes.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"isClusterResource","description":"Checks if the specified process is a cluster resource.","params":[{"name":"process","type":"Object","description":"The process to check"}],"returns":{"type":"Boolean","description":"True if the process is cluster resource; otherwise, false."},"example":[]},{"name":"isListeningOnAll","description":"Determines if the specified process is listening on all TCP connections.","params":[{"name":"pid","type":"String","description":"The process identifier of the process to check"}],"returns":{"type":"Boolean","description":"True if listening on all connections; otherwise, false."},"example":[]},{"name":"layer7Connections","description":"Builds up TCP half connections for clustered processes that are listening on *\n    (enumerate over cluster IPs in addition to the CI IPs that are already there).","params":[{"name":"deviceGR","type":"GlideRecord","description":"The device record"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"If the current device is a member of a cluster, processes classified processes that can\n    be clustered.","params":[{"name":"deviceGR","type":"GlideRecord","description":"The record of the device to process."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processClusteredProcs","description":"Processes any existing classified processes associated with the cluster, and newly\n    discovered classified processes from one of the cluster nodes.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processExisting","description":"Rewrites the \"@host\" portion of an existing cluster process name if a node has\n    overwritten it.","params":[{"name":"classyProc","type":"Object","description":"The cluster process name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processNew","description":"Processes a new classified process.","params":[{"name":"classyProc","type":"Object","description":"The classification process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"removeNodeRelationship","description":"Removes the relationship between the classified process and the cluster\n    node.","params":[{"name":"process","type":"Object","description":"The classified process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryCreateRangeSets":{"meta":{"has_constructor":true,"description":"Creates range sets from IP networks, transforms the results of a network discovery into\n  range sets that may be incorporated into discovery schedules. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryCreateRangeSets class.","params":[{"name":"statusID","type":"String","description":"The status ID"}],"returns":{"type":"","description":""},"example":[{"code":"var disccr = new DiscoveryCreateRangeSets(\"0010100101\");","description":"","output":""}]},{"name":"bumpStatusCompleted","description":"Increments the number of sensor records that were processed by one.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disccr = new DiscoveryCreateRangeSets(\"0010100101\");\ndisccr.bumpStatusCompleted();","description":"","output":""}]},{"name":"createRangeItem","description":"Creates a range item.","params":[{"name":"subnet","type":"String","description":"The subnet range"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"ensureRangeSet","description":"Ensures a range is set for a specified router.","params":[{"name":"routerID","type":"String","description":"The router ID"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processNetwork","description":"Processes the specified network.","params":[{"name":"netGR","type":"GlideRecord","description":"The network to process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processNetworks","description":"Processes all of the current networks.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disccr = new DiscoveryCreateRangeSets(\"0010100101\");\ndisccr.processNetworks();","description":"","output":""}]},{"name":"rangeItemExists","description":"Ensures that an item exists in a specified subnet.","params":[{"name":"subnet","type":"String","description":"The subnet range"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateStatusStarted","description":"Updates the number of probe messages sent to by the specified number.","params":[{"name":"startCount","type":"Number","description":"The number to increment"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var disccr = new DiscoveryCreateRangeSets(\"0010100101\");\ndisccr.updateStatusStarted('10');","description":"","output":""}]}]},"DiscoveryFunctionality":{"meta":{"has_constructor":true,"description":"Encapsulates a discovery functionality record Use with any server-side discovery script.","example":""},"properties":{"active":{"description":"The active flag.","type":"String"},"behavior":{"description":"An instance of DiscoveryBehavior associated with this instance.","type":"DiscoveryBehavior"},"criteria":{"description":"A JavaScript array of DiscoveryFunctionalityCriterion instances associated with this\n    instance.","type":"Array"},"functionality":{"description":"An instance of DiscoveryFunctionalityDefinition associated with this\n    instance.","type":"DiscoveryFunctionalityDefinition"},"matchCriteria":{"description":"The match criteria for this functionality.","type":"String"},"midServer":{"description":"The first instance of MIDServer associated with this instance.","type":"MIDServer"},"midServers":{"description":"A JavaScript array of MIDServer instances associated with this instance.","type":"Array"},"phase":{"description":"The phase number of this instance.","type":"Number"},"sysID":{"description":"The sys_id of the discovery status record.","type":"String"}},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryFunctionality class..","params":[{"name":"source","type":"Object","description":"Must be either a GlideRecord or a sysID."},{"name":"behavior","type":"String","description":"Optional - used to resolve the behaviour reference if its sysID matches the\n                reference."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"evaluateCriteria","description":"Evaluates the criteria in this functionality using the provided left-hand and\n    right-hand values.","params":[{"name":"lhValue","type":"Object","description":"A hashmap of left-hand criteria values."},{"name":"rhValue","type":"Object","description":"A hashmap of right-hand criteria values."}],"returns":{"type":"Boolean","description":"True if the criteria are met."},"example":[]},{"name":"getForBehavior","description":"Gets a JavaScript array of DiscoveryFunctionality instances related to the specified\n    behavior.","params":[{"name":"behavior","type":"GlideRecord","description":"A DiscoveryBehaviorRecord instance"}],"returns":{"type":"Array","description":"A JavaScript array of DiscoveryFunctionality instances."},"example":[]},{"name":"getStuffForServiceName","description":"Retrieves a hashmap of information from the current functionality if a port probe that\n    probes the given service name can be found and for which the functionality criteria are met with\n    the given left-hand values and right-hand values. Returns null if no such port probe\n    exists.","params":[{"name":"name","type":"String","description":"Name of the service for which a port probe is desired"},{"name":"lhCriteria","type":"Object","description":"A hashmap of left-hand criteria values, for example\n                \"win_domain\"=\"service-now.com\""},{"name":"rhCriteria","type":"Object","description":"A hashmap of right-hand criteria values, for example\n                \"mid_win_domain\"=\"bogus.com\""}],"returns":{"type":"Object","description":"A hashmap with these properties, or null if none. <ul class=\"ul\" id=\"r_DFY-getStuffForServiceName_S_O_O__ul_jnd_3p5_qt\">\n                  <li class=\"li\">behavior: the DiscoveryBehaviorRecord instance containing the service found </li>\n\n                  <li class=\"li\">functionality: the DiscoveryFunctionality instance containing the service\n                    found </li>\n\n                  <li class=\"li\">functionalityDefinition: the DiscoveryFunctionalityDefinition instance\n                    containing the service found </li>\n\n                  <li class=\"li\">portProbe: the DiscoveryPortProbe instance containing the service found </li>\n\n                  <li class=\"li\">service: the IPService instance found</li>\n\n                </ul>"},"example":[]},{"name":"getSyntheticBasic","description":"Retrieves a JavaScript array of one synthetic DiscoveryFunctionality instance, for the\n    given MID server.","params":[{"name":"midServer","type":"String","description":"A MidServer instance"},{"name":"discover","type":"String","description":"What kind of discovery, 'IPs', 'CIs', or 'Nets'"}],"returns":{"type":"Array","description":"A JavaScript array of DiscoveryFunctionality instances."},"example":[]}]},"DiscoveryFunctionalityCriterion":{"meta":{"has_constructor":true,"description":"Encapsulates a Discovery functionality criterion. Use with any server-side discovery script to get instances associated with s specific\n   functionality.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryFunctionalityCriterion class.","params":[{"name":"source","type":"Object","description":"Must be either a GlideRecord instance or a sysID string."},{"name":"functionality","type":"String","description":"Optional used to resolve the functionality reference if its sysID matches the\n                reference."}],"returns":{"type":"","description":""},"example":[]},{"name":"getForFunctionality","description":"Retrieves an array of DiscoveryFunctionalityCriterion instances associated with the\n    given functionality.","params":[{"name":"functionality","type":"String","description":"The functionality"}],"returns":{"type":"Array","description":"An array of DiscoveryFunctionalityCriterion instances with the specified\n                functionality."},"example":[]}]},"DiscoveryFunctionalityDefinition":{"meta":{"has_constructor":true,"description":"Encapsulates ta Discovery functionality definition. Use with any sever-side discovery script to define discovery functionality.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryFunctionalityDefinition class.","params":[{"name":"source","type":"Object","description":"Either a GlideRecord or sysID string for a discovery functionality."}],"returns":{"type":"","description":""},"example":[]},{"name":"getAll","description":"Gets an array of DiscoveryFunctionalityCriterion instances associated with the given\n    functionality.","params":[],"returns":{"type":"Array","description":"An array of DiscoveryFunctionalityCriterion instances associated with the\n                functionality."},"example":[{"code":"var dfd = new DiscoveryFunctionalityDefinition('b43214af1293412acaafaaa12cfff4');\ndfd.getAll();","description":"","output":""}]},{"name":"getNamed","description":"Gets the specified DiscoveryFunctionalityCriterion instance.","params":[{"name":"name","type":"String","description":"The name of the DiscoveryFunctionalityCriterion"}],"returns":{"type":"DiscoveryFunctionalityCriterion","description":"An instance of the specified DiscoveryFunctionalityCriterion."},"example":[{"code":"var dfd = new DiscoveryFunctionalityDefinition('b43214af1293412acaafaaa12cfff4');\ndfd.getNamed('Southwest-SNMP');","description":"","output":""}]},{"name":"isRunOnce","description":"Checks if the trigger type is Run Once, i.e., at one specific date and\n    time.","params":[],"returns":{"type":"Boolean","description":"True if the trigger type is Run Once; otherwise, false."},"example":[{"code":"var dfd = new DiscoveryFunctionalityDefinition('b43214af1293412acaafaaa12cfff4');\nvar trigtype = dfd.isRunOnce();","description":"","output":""}]}]},"DiscoveryFunctions":{"meta":{"has_constructor":false,"description":"A set of functions used in Discovery. ","example":""},"properties":{},"methods":[{"name":"createRelationship","description":"Creates a relationship between two virtual machines.","params":[{"name":"parent","type":"GlideRecord, or the sys_id (String)","description":"The parent virtual machine."},{"name":"child","type":"GlideRecord, or the sys_id (String)","description":"The child virtual machine"},{"name":"pDescription","type":"String","description":"A description of the parent virtual machine"},{"name":"cDescription","type":"String","description":"A description of the child virtual machine"}],"returns":{"type":"String","description":"The sys_id of the relationship"},"example":[]},{"name":"createRelationshipIfNotExists","description":"Creates a relationship between the specified parent and child if none already\n    exists.","params":[{"name":"parent","type":"GlideRecord","description":"The parent virtual machine"},{"name":"child","type":"GlideRecord","description":"The child virtual machine"},{"name":"descriptor","type":"String","description":"The relationship descriptor"}],"returns":{"type":"String","description":"The sys_id of the relationship if found or created; otherwise, returns null or\n                undefined."},"example":[]},{"name":"deleteCI","description":"Deletes a virtual machine by record (cmdb_ci_computer) and workflow application\n    (cmdb_ci_appl).","params":[{"name":"gr","type":"GlideRecord","description":"The cmdb_ci_computer for the virtual machine"},{"name":"workflow","type":"GlideRecord","description":"The workflow application cmdb_ci_appl"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"deleteCIAndRelationshipsRecursive","description":"Deletes virtual machines by traversing through the relationship tree.<p>Traverses through the relationships that have RUNS_ON and HOSTED_ON relationships, looking\n        for all the parent CIs that run on or are hosted on the child CI(s) and deletes them.</p>","params":[{"name":"appList","type":"String","description":"The application list"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"deleteCIBySysId","description":"Deletes a virtual machine by its sys_id.","params":[{"name":"sysId","type":"String","description":"The sys_id of the virtual machine to delete."},{"name":"workflow","type":"GlideRecord","description":"The workflow of the virtual machine"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"findCIRelationshipType","description":"Finds the relationship type for the current VM given its reference table and\n    descriptor.","params":[{"name":"refTable","type":"String","description":"The reference table"},{"name":"descriptor","type":"String","description":"The relationship descriptor"}],"returns":{"type":"String","description":"The relationship type"},"example":[]},{"name":"findCIRelationshipTypeByDesc","description":"Finds the relationship type for the current virtual machine given its parent and child\n    descriptors.","params":[{"name":"refTable","type":"String","description":"The reference table"},{"name":"pDesc","type":"String","description":"The parent descriptor"},{"name":"cDesc","type":"String","description":"The child descriptor"}],"returns":{"type":"String","description":"The relationship type"},"example":[]},{"name":"findNodeValueWithAttribute","description":"Finds the node value with a specified attribute.","params":[{"name":"node","type":"Object","description":"The current node"},{"name":"attrName","type":"String","description":"The attribute for which to search"}],"returns":{"type":"Object","description":"The node array, if found; otherwise, returns null."},"example":[{"code":"Example payload:\n&lt;results probe_time=\"6313\"&gt;\n  &lt;result&gt;\n    &lt;Registry&gt;\n       &lt;entry key=\"HKEY_LOCAL_MACHINE\"&gt;\n          &lt;entry key=\"Software\"&gt;\n             &lt;entry key=\"Microsoft\"&gt;\n                &lt;entry key=\"Windows\"&gt;\n                    &lt;entry key=\"Name\"&gt;\n                        &lt;value&gt;Just a name&lt;/value&gt;\n                     &lt;/entry&gt;\n                  &lt;/entry&gt;\n               &lt;/entry&gt;\n            &lt;/entry&gt;\n         &lt;/entry&gt;\n      &lt;/Registry&gt;\n    &lt;/entry&gt;\n&lt;/results&gt;\n \n // To find the value of the key called \"name\", here's how these methods can be used.\n // registry is a variable representing the payload\n var node = findRegistryNode(registry, \"HKEY_LOCAL_MACHINE.Software.Microsoft\");\n var name = findNodeValueWithAttribute(node, \"Name\");","description":"","output":""}]},{"name":"findNodeWithAttribute","description":"Brief description of the method.","params":[{"name":"currNode","type":"Object","description":"The current node"},{"name":"attrName","type":"String","description":"The attribute name"}],"returns":{"type":"Object","description":"The node array, if found; otherwise, returns null."},"example":[]},{"name":"findRegistryNode","description":"Finds the registry node for a given registry item.","params":[{"name":"currNode","type":"String","description":"The current node"},{"name":"regName","type":"String","description":"The registry name"}],"returns":{"type":"Node","description":"The node if found, otherwise null."},"example":[{"code":"Example payload:\n&lt;results probe_time=\"6313\"&gt;\n  &lt;result&gt;\n    &lt;Registry&gt;\n       &lt;entry key=\"HKEY_LOCAL_MACHINE\"&gt;\n          &lt;entry key=\"Software\"&gt;\n             &lt;entry key=\"Microsoft\"&gt;\n                &lt;entry key=\"Windows\"&gt;\n                    &lt;entry key=\"Name\"&gt;\n                        &lt;value&gt;Just a name&lt;/value&gt;\n                     &lt;/entry&gt;\n                  &lt;/entry&gt;\n               &lt;/entry&gt;\n            &lt;/entry&gt;\n         &lt;/entry&gt;\n      &lt;/Registry&gt;\n    &lt;/entry&gt;\n&lt;/results&gt;\n \n // registry is a variable representing the payload\n var node = findRegistryNode(registry, \"HKEY_LOCAL_MACHINE.Software.Microsoft\");","description":"","output":""}]},{"name":"getDiscoveryType","description":"Gets the discovery type for the specified status ID.","params":[{"name":"statusID","type":"String","description":"The discovery status ID"}],"returns":{"type":"GlideRecord","description":"The discovery type"},"example":[]},{"name":"getFieldsThatChanged","description":"Gets the fields that have changed for the specified device.","params":[{"name":"gr","type":"GlideRecord","description":"The device"}],"returns":{"type":"Array","description":"An array of fields that have changed."},"example":[{"code":"var df = new DiscoveryFunctions();\ndf.getFieldsThatChanged(\"device1\");","description":"","output":""}]},{"name":"getScheduleRecord","description":"Gets the schedule record.","params":[],"returns":{"type":"GlideRecord","description":"The schedule record"},"example":[]},{"name":"getService","description":"Gets the service assigned to the specified port.","params":[{"name":"port","type":"String","description":"The port to check"}],"returns":{"type":"GlideRecord","description":"The service assigned to the port."},"example":[]},{"name":"getStatusRecord","description":"Gets the status record.","params":[],"returns":{"type":"GlideRecord","description":"The Discovery status record"},"example":[]},{"name":"getXMLMemoryTable","description":"Gets the XML memory table.","params":[{"name":"tableName","type":"String","description":"The table name"},{"name":"doc","type":"String","description":"The document where the table resides."},{"name":"path","type":"String","description":"The path to the table"}],"returns":{"type":"String","description":"The XML memory table"},"example":[]},{"name":"insertPIDs","description":"Inserts a new process ID.","params":[{"name":"pids","type":"String","description":"The process ID"},{"name":"app_sys_id","type":"String","description":"The application sys_id"},{"name":"ci_sys_id","type":"String","description":"The virtual machine ID"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"isInRange","description":"Determines if the given IP address is within the current IP range.","params":[{"name":"ip","type":"String","description":"The IP address to check"}],"returns":{"type":"Boolean","description":"True if the IP address is in range, false otherwise."},"example":[{"code":"var df = new DiscoveryFunctions();\ndf.isInRange(\"71.191.290.131\");","description":"","output":""}]},{"name":"reclassify","description":"Reclassifies a device.","params":[{"name":"device","type":"GlideRecord","description":"The device to reclassify"},{"name":"newClassName","type":"String","description":"The new classification"},{"name":"reason","type":"String","description":"The reason for the change"}],"returns":{"type":"GlideRecord","description":"The reclassified CI"},"example":[]},{"name":"relationshipExists","description":"Determines whether a relationship already exists between the parent and\n    child.","params":[{"name":"parent","type":"GlideRecord","description":"The parent virtual machine"},{"name":"child","type":"GlideRecord","description":"The child virtual machine"},{"name":"descriptor","type":"GlideRecord","description":"The relationship descriptor"}],"returns":{"type":"GlideRecord","description":"The record for the relationship if it exists."},"example":[]},{"name":"updatedHistory","description":"Updates the history of the current device.","params":[{"name":"gr","type":"GlideRecord","description":"The device"},{"name":"sensor","type":"String","description":"The sensor"},{"name":"eccID","type":"String","description":"The External Communication Channel (ECC) queue ID."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updatePIDS","description":"Updates the process ID.","params":[{"name":"pids","type":"String","description":"The process ID"},{"name":"app_sys_id","type":"String","description":"The application sys_id"},{"name":"ci_sys_id","type":"String","description":"The virtual machine ID"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryIssuesURLBuilder":{"meta":{"has_constructor":false,"description":"Builds a URL for the calculated issues_link field in\n  discovery_device_history. Use with any server-side discovery script where you need a build a URL for a calculated issues\n   link.","example":""},"properties":{},"methods":[{"name":"url","description":"Builds and returns the URL for the calculated issues_link field in\n    discovery_device_history.","params":[{"name":"deviceHistory","type":"GlideRecord","description":"The device history record"}],"returns":{"type":"String","description":"The URL"},"example":[]}]},"DiscoveryJob":{"meta":{"has_constructor":true,"description":"Encapsulates a scheduled job that kicks off a discovery. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryJob class.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"isRunOnce","description":"Determines if the discovery job has been run at least once.","params":[],"returns":{"type":"Boolean","description":"True if the job has been run one or more times. False if the job has not been\n                run."},"example":[{"code":"var dj = new DiscoveryJob();\ngs.print(dj.isRunOnce());","description":"","output":""}]}]},"DiscoveryLogger":{"meta":{"has_constructor":true,"description":"Provides methods for convenient logging of Discovery events. Use with any server-side script where you want to log Discovery events.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryLogger.","params":[{"name":"sys_id","type":"String","description":"A sys_id of a discovery status record."}],"returns":{"type":"","description":""},"example":[{"code":"var dlogger = new DiscoveryLogger(current.sys_id);","description":"","output":""}]},{"name":"error","description":"Logs error events.","params":[{"name":"msg","type":"String","description":"The message detailing the outcome of the activity or the discovery\n                process."},{"name":"source","type":"String","description":"The activity, such as SNMP Identity or Windows Identity, where the event\n                occurred."},{"name":"sensor","type":"String","description":"The sensor that processed the results of the probe."},{"name":"ci","type":"String","description":"The device for which a matching CI was found in the CMDB."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dlogger = new DiscoveryLogger(current.sys_id);\ndlogger.error('Error message', 'Discovery');","description":"","output":""}]},{"name":"info","description":"Logs information events.","params":[{"name":"msg","type":"String","description":"The message detailing the outcome of the activity or the discovery\n                process."},{"name":"source","type":"String","description":"The activity, such as SNMP Identity or Windows Identity, where the event\n                occurred."},{"name":"sensor","type":"String","description":"The sensor that processed the results of the probe."},{"name":"ci","type":"String","description":"The device for which a matching CI was found in the CMDB."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dlogger = new DiscoveryLogger(current.sys_id);\ndlogger.info('Discovery started', 'Discovery');","description":"","output":""}]},{"name":"log","description":"Logs all events.","params":[{"name":"msg","type":"String","description":"The message detailing the outcome of the activity or the discovery\n                process."},{"name":"source","type":"String","description":"The activity, such as SNMP Identity or Windows Identity, where the event\n                occurred."},{"name":"sensor","type":"String","description":"The sensor that processed the results of the probe."},{"name":"ci","type":"String","description":"The device for which a matching CI was found in the CMDB."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dlogger = new DiscoveryLogger(current.sys_id);\ndlogger.log('Message text', 'Discovery');","description":"","output":""}]},{"name":"warn","description":"Logs warning events.","params":[{"name":"msg","type":"String","description":"The message detailing the outcome of the activity or the discovery\n                process."},{"name":"source","type":"String","description":"The activity, such as SNMP Identity or Windows Identity, where the event\n                occurred."},{"name":"sensor","type":"String","description":"The sensor that processed the results of the probe."},{"name":"ci","type":"String","description":"The device for which a matching CI was found in the CMDB."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dlogger = new DiscoveryLogger(current.sys_id);\ndlogger.warn('Warning message', 'Discovery');","description":"","output":""}]}]},"DiscoveryMacProfileUtils":{"meta":{"has_constructor":false,"description":"Provides utilities for parsing XML files returned by a Mac OS. Use where you want to parse XML files returned by a Mac OS during the discovery process.","example":""},"properties":{},"methods":[{"name":"getArrayFromNode","description":"Returns the child elements for a specified node as an array.","params":[{"name":"el","type":"String","description":"The node for which to get the child elements."}],"returns":{"type":"String","description":"An array of child elements"},"example":[]},{"name":"getBaseElement","description":"Returns the base element for a specified output.","params":[{"name":"output","type":"String","description":"The output for which to get the base element."}],"returns":{"type":"String","description":"The base element"},"example":[]},{"name":"getHashFromNode","description":"Returns the child elements for a specified node as a hash map.","params":[{"name":"el","type":"String","description":"The node for which to get the child elements"}],"returns":{"type":"Object","description":"A hash map of child elements."},"example":[]}]},"DiscoveryMSSQLSensor":{"meta":{"has_constructor":false,"description":"Sensor that processes MSSQL data fetched from either the PowershellMSSQL probe or the\n  RemoteRunner probe. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"parseResult","description":"Parses the data fetched from the probe.","params":[{"name":"result","type":"Object","description":"The data fetched from the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"populateDBCatalogs","description":"Populates the database catalogs with the data fetched from the probe.","params":[{"name":"result","type":"Object","description":"The data fetched from the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"zeroResults","description":"Does nothing if there is no data fetched from the probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryMultiSensor":{"meta":{"has_constructor":false,"description":"Implements multisensors by running the multisensor scripts to process the information\n  for results (called once for each probe). Use in any server-side script where you need to implement a multisensor.","example":""},"properties":{},"methods":[{"name":"logEmptyPayload","description":"Logs the event if the sensor script has no payload data to process.","params":[{"name":"name","type":"String","description":"The sensor name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"prepare","description":"Prepares the sensor by loading the CI data.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"validateScript","description":"Determines if the script is valid. Logs an error if the script is invalid.","params":[{"name":"script","type":"String","description":"The script to validate"},{"name":"msgr","type":"GlideRecord","description":"The multisensor record"}],"returns":{"type":"Boolean","description":"True if the script is valid; otherwise, false."},"example":[]}]},"DiscoveryPhaser":{"meta":{"has_constructor":true,"description":"Encapsulates discovery phases using Shazzam. Use this script include during the discovery scanning phase.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryPhaser class.","params":[{"name":"discoveryStatus","type":"GlideRecord","description":"The discovery status"}],"returns":{"type":"","description":""},"example":[]},{"name":"anyScanned","description":"Determines if any ports were scanned for the specified probe.","params":[{"name":"portProbes","type":"String","description":"The probes to check"}],"returns":{"type":"Boolean","description":"True, if the ports were scanned; otherwise, false."},"example":[]},{"name":"hasNextPhase","description":"Determines if there are any remaining phases for the discovery probe.","params":[],"returns":{"type":"Boolean","description":"True, if there are phases remaining; otherwise, false."},"example":[]}]},"DiscoveryPortProbe":{"meta":{"has_constructor":true,"description":"Encapsulates the notion of a discovery port probe. Use the <span class=\"keyword apiname\">DiscoveryPortProbe</span> class during the discovery scanning phase.","example":""},"properties":{"Active":{"description":"The Active flag is true if the port probe is active; otherwise false.","type":"Boolean"},"class":{"description":"Table name to use for classification when this port probe is active.","type":"String"},"classificationPriority":{"description":"The classification priority.","type":"Number"},"conditional":{"description":"True if it is a conditional scanner; otherwise, false.","type":"Boolean"},"Description":{"description":"The port probe description.","type":"String"},"discoverCIs":{"description":"The discoverCIs flag is true if the port probe is active to discover CIs.","type":"Boolean"},"Name":{"description":"The port probe name.","type":"String"},"scanner":{"description":"The name of the Java class on the MID server to use as a scanner.","type":"String"},"script":{"description":"The optional script associated with the current port probe.","type":"String"},"services":{"description":"A JavaScript array of the IPService instances associated with the current port\n    probe.","type":"Array"},"sysID":{"description":"The sys_id of the port probe record.","type":"String"},"triggersProbeID":{"description":"The sysID of the probe triggered by the current port probe.","type":"String"}},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryPortProbe class.","params":[{"name":"source","type":"Object","description":"Either a GlideRecord instance or a sysID string."}],"returns":{"type":"","description":""},"example":[]}]},"DiscoveryPortScanner":{"meta":{"has_constructor":true,"description":"Provides a set of functions used in discovery port scanning. Use this class during the discovery scanning phase","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryPortScanner class.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"firePortProbeByPort","description":"Fires the port probe for the specified port.","params":[{"name":"port","type":"String","description":"The port to probe."}],"returns":{"type":"Number","description":"The number of probes fired."},"example":[{"code":"var dscps = new DiscoveryPortScanner();\ndscps.firePortProbeByPort(\"1434\");","description":"","output":""}]},{"name":"getAllServicePorts","description":"Gets a list of all service ports.","params":[],"returns":{"type":"Array","description":"A list of all service ports"},"example":[{"code":"var dscps = new DiscoveryPortScanner();\ngs.print(dscps.getAllServicePorts());","description":"","output":"53,137,22,135,80,161,515,9100,548,5060"}]},{"name":"getPortProbeByName","description":"Brief description of the method.","params":[{"name":"name","type":"String","description":"Name of the port probe"}],"returns":{"type":"GlideRecord","description":"The port probe"},"example":[]},{"name":"getPortProbes","description":"Gets all the current port probes for the current device.","params":[],"returns":{"type":"GlideRecord","description":"The port probes"},"example":[{"code":"var dscps = new DiscoveryPortScanner();\ndscps.getPortProbes();","description":"","output":""}]},{"name":"getPPFromSP","description":"Returns the port probes for a specified service port.","params":[{"name":"servicePort","type":"String","description":"The service port"}],"returns":{"type":"GlideRecord","description":"The service probes. Returns null if there are no service probes."},"example":[]},{"name":"getSPFromPP","description":"Returns the service ports for a specified port probe.","params":[{"name":"portProbe","type":"DiscoveryPortProbe","description":"The port probe"}],"returns":{"type":"Array","description":"A list of all service ports"},"example":[]},{"name":"getSPFromPPId","description":"Returns the service ports for a specified probe process ID.","params":[{"name":"ppid","type":"String","description":"The probe process ID."}],"returns":{"type":"Array","description":"A list of all service ports"},"example":[]},{"name":"scheduleProbe","description":"Puts the specified probe and port on the discovery schedule.","params":[{"name":"portProbe","type":"DiscoveryPortProbe","description":"The port probe to schedule"},{"name":"port","type":"String","description":"The port to probe"}],"returns":{"type":"Number","description":"The number of probes added to the schedule."},"example":[]},{"name":"updateCIServicePorts","description":"Updates the service ports for a specified CMDB configuration item.","params":[{"name":"openPorts","type":"Array","description":"The ports that are open"},{"name":"scannedPorts","type":"String","description":"The ports that have been scanned"},{"name":"cmdbCi","type":"String","description":"The CMDB configuration item"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryProcessAppMatch":{"meta":{"has_constructor":false,"description":"Determines how to match an application during process classification. Use with any discovery script where you need match an application during process\n   classification.","example":""},"properties":{},"methods":[{"name":"match","description":"Matches an application during process classification.","params":[],"returns":{"type":"Boolean","description":"True if there are phases remaining; otherwise, false."},"example":[]}]},"DiscoveryProcessConnectionsSensor":{"meta":{"has_constructor":false,"description":"Provides an abstract sensor class for running discovery processes. Use this to implement your own sensor to run discovery processes.","example":""},"properties":{},"methods":[{"name":"addConnection","description":"Adds a connection to the sensor.","params":[{"name":"dtcp","type":"Object","description":"The connection to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addConnections","description":"Adds an array of connections to the sensor.","params":[{"name":"connections","type":"Array","description":"An array of connections to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addListener","description":"Adds a single listener.","params":[{"name":"dtcp","type":"Object","description":"The discovery TCP"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addListeners","description":"Adds an array of listeners.","params":[{"name":"listeners","type":"Array","description":"An array of discovery TCPs"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"after","description":"Completes a number of tasks after a connection has been reconciled, including checking\n    for a print server.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"logConnections","description":"Logs the connections made by the sensor.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parse","description":"Provide code for this method to parse the output.","params":[{"name":"output","type":"Object","description":"The output to parse"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryPsSensor":{"meta":{"has_constructor":false,"description":"Provides tools for working with UNIX process status information returned by the ps\n  command. Most UNIX platforms share a common output for the ps command. This object is shared among\n  the various ps sensors in discovery. Use in any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"getOSType","description":"Returns the operating system type, either ESXi or UNIX.","params":[],"returns":{"type":"String","description":"The OS type, either esx or unix."},"example":[]},{"name":"mapProcesses","description":"Maps the process status results returned from the ps command.","params":[{"name":"result","type":"Object","description":"The result of the ps command"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parseColumnHeader","description":"Parses the column header.","params":[{"name":"line","type":"String","description":"The column header to parse"}],"returns":{"type":"Object","description":"The column line items"},"example":[]},{"name":"parseLine","description":"Parses a line returned by the ps command.","params":[{"name":"line","type":"String","description":"The line to parse"}],"returns":{"type":"Object","description":"The parsed line values"},"example":[]}]},"DiscoveryRunningProcessSensor":{"meta":{"has_constructor":false,"description":"The abstract sensor for running processes. Use to create a sensor for running processes.","example":""},"properties":{},"methods":[{"name":"addDiscovered","description":"Adds a discovered sensor to the specified process.","params":[{"name":"fc","type":"String","description":"The process to add the sensor to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"after","description":"After the reconciler finishes processing, finishes other tasks and starts application\n    mapping.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hasClusterRelationship","description":"Determines if the cluster has any relationships.","params":[{"name":"ci","type":"Object","description":"The cluster node cmdb_ci"}],"returns":{"type":"Boolean","description":"True if the cluster has relationships; otherwise, false."},"example":[]},{"name":"insertCiProcess","description":"Adds any inserts to the specified process.","params":[{"name":"correlationId","type":"String","description":"The correlation ID"},{"name":"classifiedProcess","type":"Object","description":"The classified process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"insertOrUpdate","description":"Performs both pending inserts and updates to the specified process.","params":[{"name":"classifiedProcess","type":"Object","description":"The process into which inserts of updates will be made."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"isClusterable","description":"Determines if a classified process can be clustered.","params":[{"name":"classifiedProcess","type":"Object","description":"The classified process"}],"returns":{"type":"Boolean","description":"True if the process can be clustered; otherwise, false."},"example":[]},{"name":"mapProcesses","description":"Implement your own map process by overwriting this method with a class extending this\n    object.","params":[{"name":"result","type":"Object","description":"The result from the discovery sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processDiscovered","description":"Triggers the probe when the process is discovered.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setFields","description":"Sets the field values of the CI, if values are available.","params":[{"name":"ci","type":"Object","description":"The CI whose fields are to be set."},{"name":"fields","type":"Object","description":"The fields to set"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateCiProcess","description":"Adds any updates to the specified process.","params":[{"name":"ci","type":"Object","description":"The CI of the process to update"},{"name":"correlationid","type":"String","description":"The correlation ID"},{"name":"classifiedProcess","type":"Object","description":"The classified process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoverySchedule":{"meta":{"has_constructor":true,"description":"Encapsulates a Discovery schedule. Use with any schedule-related server-side discovery script.","example":""},"properties":{"active":{"description":"True if this discovery schedule is active.","type":"Boolean"},"discover":{"description":"What to discover.","type":"String"},"includeAlive":{"description":"True if include alive was checked.","type":"Boolean"},"location":{"description":"The location reference in the schedule, or null if none.","type":"String"},"logStateChanges":{"description":"True to log state changes.","type":"Boolean"},"maxRun":{"description":"The GlideElement of max_run parameter.","type":"GlideElement"},"midServer":{"description":"The MIDServer instance for the associated MID server.","type":"MIDServer"},"midServerID":{"description":"The sys_id of the associated MID server.","type":"String"},"name":{"description":"The name of this discovery schedule.","type":"String"},"ranges":{"description":"A JavaScript array of IPIncludeExcludeCollection instances, one per range.","type":"IPIncludeExcludeCollection"},"sysID":{"description":"The sys_id of this discovery schedule record.","type":"String"}},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoverySchedule class.","params":[{"name":"source","type":"Object","description":"Either a GlideRecord for the  discovery schedule record, or a string containing\n                the sysID for the desired discovery schedule record."}],"returns":{"type":"","description":""},"example":[]},{"name":"addConnection","description":"Adds a connection to the sensor.","params":[{"name":"dtcp","type":"String","description":"The connection"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addConnections","description":"Adds an array of connections to the sensor.","params":[{"name":"connections","type":"Array","description":"An array of connections"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addListeners","description":"Adds an array of listeners.","params":[{"name":"listeners","type":"Array","description":"Discovery TCPs."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"contains","description":"Determines if the current range contains the given IP address.","params":[{"name":"ip","type":"String","description":"The IP address in dot-decimal notation."}],"returns":{"type":"Boolean","description":"True if the range includes the IP address, false otherwise."},"example":[]},{"name":"getBehaviorForIP","description":"Gets the correct behavior for the specified IP address, or null if none can be\n    found.","params":[{"name":"ip","type":"String","description":"The IP address in dot-decimal notation."}],"returns":{"type":"DiscoveryBehavior","description":"A DiscoveryBehavior object."},"example":[]},{"name":"getBehaviorForRange","description":"Retrieves the DiscoveryBehavior instance for the given range.","params":[{"name":"ipiec","type":"String","description":"The IPIncludeExcludeCollection for the range."}],"returns":{"type":"GlideRecord","description":"The DiscoveryBehavior record."},"example":[]},{"name":"logConnections","description":"Logs the connections made by the sensor.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoverySensor":{"meta":{"has_constructor":false,"description":"This class describes the default sensor object. All sensors should extend this class.\n  Use this class to define your own discovery sensors. ","example":""},"properties":{},"methods":[{"name":"addCIDataBaseValue","description":"Exposes the base values in CIData to the classifiers. Currently used by Windows, Unix,\n    and SNMP.","params":[{"name":"sensor","type":"Object","description":"The sensor object"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addToRelatedList","description":"Adds the CI to the related list.","params":[{"name":"tableName","type":"String","description":"The table to add to"},{"name":"dataArray","type":"Array","description":"The data array"},{"name":"refName","type":"String","description":"The reference name"},{"name":"keyName","type":"String","description":"The key name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"after","description":"Optionally override this in the sensor to finish after processing and saving all\n    results. This method is invoked once after all results have been processed and\n    saved.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"checkEmptyPayload","description":"Checks if the device history is not yet created. If so, do not write to it.","params":[{"name":"result","type":"Object","description":"The result from the probe"}],"returns":{"type":"Boolean","description":"True if a history for the deice has been created; otherwise, false."},"example":[]},{"name":"checkErrorPayload","description":"Checks whether an error has occurred, and if so calls the function to process the\n    error.","params":[{"name":"result","type":"object","description":"The result from the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"debug","description":"If debugging is turned on, logs the message.","params":[{"name":"msg","type":"String","description":"The message to log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"finish","description":"Optionally override this in the sensor to finish after processing all results. This\n    method is invoked once after all results have been processed.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"fireAdditionalClassifier","description":"Fires additional classifiers.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAgent","description":"Returns the agent name for the probe.","params":[],"returns":{"type":"String","description":"The agent name"},"example":[]},{"name":"getCmdbCi","description":"Returns the Configuration Management Database (CMDB) Configuration Item (CI) of the\n    current device.","params":[],"returns":{"type":"GlideRecord","description":"The current CMDB CI"},"example":[]},{"name":"getCmdbRecord","description":"Returns the current Configuration Management Database (CMDB) record.","params":[],"returns":{"type":"GlideRecord","description":"The current CMDB record"},"example":[]},{"name":"getDeviceCi","description":"Returns the current device's CI object.","params":[],"returns":{"type":"Object","description":"The current device CI"},"example":[]},{"name":"getEccQueueId","description":"Returns the queue ID of the current probe.","params":[],"returns":{"type":"String","description":"The queue ID"},"example":[]},{"name":"getEccQueueRecord","description":"Returns the ECC Queue record for the current probe.","params":[],"returns":{"type":"GlideRecord","description":"The ECC queue record"},"example":[]},{"name":"getParameter","description":"Returns a specified parameter from the Discovery probe.","params":[],"returns":{"type":"String","description":"The requested parameter value"},"example":[]},{"name":"getSensorName","description":"Returns the name of the current sensor.","params":[],"returns":{"type":"String","description":"The sensor name"},"example":[]},{"name":"getSource","description":"Returns the probe's Source field value.","params":[],"returns":{"type":"String","description":"Usually contains the IP address that the probe ran against, or if the probe ran\n                against multiple IP addresses, a human-readable description."},"example":[]},{"name":"handleError","description":"Optionally override this method to handle errors.","params":[{"name":"error","type":"String","description":"The error message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"init","description":"Initializes the sensor.","params":[{"name":"definition","type":"Object","description":"The discovery definition"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"isDebugging","description":"Checks to see if debugging mode is on.","params":[],"returns":{"type":"Boolean","description":"True if debugging mode is on; otherwise, false."},"example":[]},{"name":"logEmptyPayload","description":"Creates a log entry if the device history is empty.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"logWarningPayload","description":"Checks for warnings and logs them.","params":[{"name":"result","type":"Object","description":"The result from the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"main","description":"Provides main processing sequence for the script. Loops recursively until a sys_id is\n    found, then processes the CI.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"prepare","description":"Optionally override this in the sensor to prepare for processing results. This method\n    is invoked once before any results have been processed.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"Override this in the sensor to process each result.","params":[{"name":"result","type":"Object","description":"The result from the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processError","description":"Processes an error by eliminating duplicates, writing the error to the error map, and\n    sending the error to the error handler.","params":[{"name":"msg","type":"String","description":"The message to process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processWarning","description":"Processes a warning message by ignoring duplicate messages and calling\n      <span class=\"keyword apiname\">handleWarning()</span>.","params":[{"name":"msg","type":"String","description":"The warning message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"reclassify","description":"Reclassifies a device to the specified classification.","params":[{"name":"ciClass","type":"String","description":"The new classification"}],"returns":{"type":"GlideRecord","description":"The cmdb record"},"example":[]},{"name":"run","description":"Runs the sensor, including preparation, checking for and logging any warnings and\n    errors, and checking the payload to ensure that a valid sensor is available to process, and\n    calling finish().","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"runClassificationScript","description":"Adds variables to the ci_data variable after running the classification script and\n    storing the variables in ci_data.","params":[{"name":"script","type":"String","description":"The classification script"},{"name":"ciData","type":"Object","description":"The CI data"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"save","description":"If there is a device history, saves the processed data from the probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setCurrentFromJavaMap","description":"Sets the current sensor data from a Java map.","params":[{"name":"javaMap","type":"JavaMap","description":"The sensor data"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTriggerProbes","description":"Sets the trigger value from the probe.","params":[{"name":"value","type":"String","description":"The probe trigger"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"update","description":"Updates the sensor data and related lists.","params":[{"name":"data","type":"Object","description":"The sensor data"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateCounts","description":"Updates the status count and the device count.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateDeviceCount","description":"Updates the count of completed devices.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateStatusCount","description":"Updates the status count.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"zeroResults","description":"Override this in the sensor to change the behavior with no results.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryStatus":{"meta":{"has_constructor":true,"description":"Provides an abstract sensor class for running discovery processes. Use to  implement your own sensor to run discovery processes with any schedule-related\n   server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DiscoveryStatus class.","params":[{"name":"statusGR","type":"GlideRecord","description":"The discovery status"}],"returns":{"type":"","description":""},"example":[]},{"name":"addConnection","description":"Adds a connection to the sensor.","params":[{"name":"dtcp","type":"String","description":"The connection to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addConnections","description":"Adds an array of connections to the sensor.","params":[{"name":"connections","type":"Array","description":"An array of connections"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addListener","description":"Adds a single listener.","params":[{"name":"dtcp","type":"String","description":"The discovery TCP"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addListeners","description":"Adds an array of listeners.","params":[{"name":"listeners","type":"Array","description":"An array of discovery TCPs"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"after","description":"Completes a number of tasks after a connection has been reconciled, including checking\n    for a print server.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"logConnections","description":"Logs the connections made by the sensor.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parse","description":"Provide code for this method to parse the output.","params":[{"name":"output","type":"String","description":"The output to parse"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"process","description":"Called by the Prototype JavaScript Framework during object processing. Provide a value\n    for the parameter, but do not call this method directly.","params":[{"name":"result","type":"String","description":"The discovery result"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"DiscoveryTCPConnection":{"meta":{"has_constructor":false,"description":"Represents a TCP connection belonging to a process. Provides methods for managing\n  discovery TCP/IP connections. Use wherever you need to manage discovery TCP connections.","example":""},"properties":{},"methods":[{"name":"getCommand","description":"Brief description of the method.","params":[],"returns":{"type":"String","description":"The connection command"},"example":[]},{"name":"getFromHost","description":"Returns the host name of the from host.","params":[],"returns":{"type":"String","description":"The host name of the from host"},"example":[]},{"name":"getFromPort","description":"Returns the port number of the from host.","params":[],"returns":{"type":"String","description":"The port number of the from host."},"example":[]},{"name":"getHostPort","description":"Returns the IP address and port number for the specified port.","params":[{"name":"hostPort","type":"String","description":"The host's port"}],"returns":{"type":"String","description":"The host IP address and port number in the format host:port. The  String[]\n                array with 0 as the host and 1 as the port."},"example":[]},{"name":"getPID","description":"Returns the process identifier (PID) of the current application.","params":[],"returns":{"type":"String","description":"The current application's process identifier."},"example":[]},{"name":"getToHost","description":"Returns the host name of the to host.","params":[],"returns":{"type":"String","description":"The host name of the to host."},"example":[]},{"name":"getToPort","description":"Returns the port number of the to host.","params":[],"returns":{"type":"String","description":"The port number of the to host."},"example":[]},{"name":"isListening","description":"Determines if the current device is listening.","params":[],"returns":{"type":"Boolean","description":"True if the device is listening; otherwise, false."},"example":[]},{"name":"isValid","description":"Determines if there is a from host and from port.","params":[],"returns":{"type":"Boolean","description":"True if there is a from host and from port; otherwise, false."},"example":[]},{"name":"isValidConnection","description":"Determines if there is a valid connection with the from host and port.","params":[],"returns":{"type":"Boolean","description":"True if the connection is valid; otherwise, false."},"example":[{"code":"var dtcpc = new DiscoveryTCPConnection();\ngs.print(dtcpc.isValid());","description":"","output":"false"}]},{"name":"setCommand","description":"Sets the connection command for the current process.","params":[{"name":"cmd","type":"String","description":"The connection command"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setConnection","description":"Sets up the discovery TCP connection.","params":[{"name":"connectStr","type":"String","description":"The connection string"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setFrom","description":"Sets the host name and port of the from host.","params":[{"name":"hostName","type":"String","description":"The name of the host"},{"name":"portName","type":"String","description":"The name of the port"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setListening","description":"Sets a listener for the current device.","params":[{"name":"b","type":"Boolean","description":" "}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setPID","description":"Sets the process identifier (PID) for the application.","params":[{"name":"pid","type":"String","description":"The application's process identifier."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTo","description":"Sets the host name and port number of the to host.","params":[{"name":"hostName","type":"String","description":"The host name"},{"name":"portName","type":"String","description":"The port number"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toString","description":"Returns the current connection command and connection string in string\n    format.","params":[],"returns":{"type":"String","description":"The current connection command and connection string."},"example":[]}]},"DiscoveryTimeline":{"meta":{"has_constructor":false,"description":"Use this script include in any server-side script to display a list of discovery probes\n  and sensors in a time line on a schedule page. This API generates a view that shows discovery probes and sensors on the time line. It parses\n   the ecc_queue and sorts the returned items to display a list of nodes and sensor times with\n   respect to their probe. See the <span class=\"keyword apiname\">TimelineAbstractSchedulePage</span> API  for the\n   correct implementation and API usage.","example":""},"properties":{},"methods":[{"name":"getItems","description":"Brief description of the method.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var discl = new DiscoveryTimeline();\ndiscl.getItems();","description":"","output":""}]}]},"DiscoveryUIActionUtils":{"meta":{"has_constructor":false,"description":"A utility class providing methods for the discovery of UI actions. Use with any server-side script to perform condition checks for Discovery UI actions.","example":""},"properties":{},"methods":[{"name":"hasNewerDeviceHistory","description":"Determines if there are newer entries in the device history table.","params":[],"returns":{"type":"Boolean","description":"True if there are newer entries; otherwise, false."},"example":[{"code":"var disb = new DiscoveryUIActionUtils();\ndisb.hasNewerDeviceHistory();","description":"","output":""}]},{"name":"hasOlderDeviceHistory","description":"Determines if there are older entries in the device history table.","params":[],"returns":{"type":"Boolean","description":"True if there are older entries; otherwise, false."},"example":[{"code":"var disb = new DiscoveryUIActionUtils();\ndisb.hasOlderDeviceHistory();","description":"","output":""}]}]},"DiscoveryVMWareSensor":{"meta":{"has_constructor":false,"description":"Sensor for processing VMWare information from UNIX and Windows. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"createLinkToVirtualServers","description":"Creates a link to the virtual servers.","params":[{"name":"images","type":"Object","description":"The VMWare images"},{"name":"vmWare","type":"CI","description":"The CI of the VMWare, which can be the ESXi box, or a VMWare application running\n                on top."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"deleteVMImagesFromVMWare","description":"Deletes the VM images.","params":[{"name":"vmWare","type":"Object","description":"The VMWare images to delete."},{"name":"imageProcessed","type":"Object","description":"The processed image"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parseResult","description":"Parses the result returned from the discovery sensor.","params":[{"name":"result","type":"Object","description":"The result returned by the sensor."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parseVMFile","description":"Parses the VM file.","params":[{"name":"file","type":"String","description":"The file"}],"returns":{"type":"Array","description":" "},"example":[]},{"name":"parseVMNodes","description":"Returns the VMware host (ESXi box) where the current application is\n    running.","params":[{"name":"vms","type":"Object","description":"The VM node"}],"returns":{"type":"Array","description":"The parsed instances."},"example":[]},{"name":"processInstances","description":"Updates the VMware images and links to the virtual servers.","params":[{"name":"instance","type":"Object","description":"The instance to process"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processVersion","description":"Returns the VM version information.","params":[{"name":"vmList","type":"Object","description":"The result returned by the sensor."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateVMWareImages","description":"Updates the VMware images.","params":[{"name":"instances","type":"Array","description":"An array of instances to process."},{"name":"vmWare","type":"Object","description":"The VMWare images to update."}],"returns":{"type":"Array","description":"The processed images"},"example":[]}]},"DiscoveryWindowsClusterBaseSensor":{"meta":{"has_constructor":false,"description":"Base class for Windows classify and Windows cluster sensors. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"associateClustersToResources","description":"Associates Windows clusters with resources in the result returned by the\n    sensor","params":[{"name":"result","type":"Object","description":"The result from the sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"associateClustertoNodes","description":"Associates Windows clusters with specific nodes in the result returned by the\n    sensor.","params":[{"name":"result","type":"Object","description":"The result from the sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"associateResourcesToNodes","description":"Associates resources with specific nodes in the result returned by the\n    sensor.","params":[{"name":"result","type":"Object","description":"The result from the sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"changeCI","description":"Changes the CI sys_id for the current device to the specified CI sys_id.","params":[{"name":"newCIGR","type":"String","description":"The new CI sys_id for the device."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"findCluster","description":"Finds the specified cluster record.","params":[{"name":"name","type":"String","description":"The cluster record to find"}],"returns":{"type":"GlideRecord","description":"The requested cluster record"},"example":[]},{"name":"findClusters","description":"Finds the Windows clusters in the result returned by the sensor.","params":[{"name":"result","type":"Object","description":"The result from the sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"findNodes","description":"Finds the Windows cluster nodes in the result returned by the sensor, and creates an\n    object for each with information about the node, including name, status, description, state,\n    caption, and server.","params":[{"name":"result","type":"Object","description":"The result from the sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"findOrCreateCluster","description":"Finds the requested cluster; if it does not exist, creates a new cluster record under\n    the specified name.","params":[{"name":"name","type":"String","description":"The cluster name to find or, if it does not exist, the name for the new cluster\n                record."}],"returns":{"type":"GlideRecord","description":"The found, or newly created, cluster record."},"example":[]},{"name":"findResources","description":"Finds the Windows cluster resources and puts them into an array of resource\n    information.","params":[{"name":"result","type":"Object","description":"The result from the sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getPropValue","description":"Returns the value of a specified property.","params":[{"name":"name","type":"String","description":"The property"},{"name":"source","type":"String","description":"The property's source"}],"returns":{"type":"String","description":"The requested name/value pair."},"example":[]},{"name":"primStr","description":"Converts the specified value to a string.","params":[{"name":"value","type":"Object","description":"The value to convert"}],"returns":{"type":"String","description":"The value converted to a string; if the value parameter is empty, returns\n                null."},"example":[]},{"name":"propertiesToHumanReadable","description":"Converts cluster properties to a readable format.","params":[{"name":"properties","type":"String","description":"The properties to convert"}],"returns":{"type":"String","description":"The converted properties in the format [property name:property value], with one\n                property:value pair per line."},"example":[]},{"name":"queryForCluster","description":"Queries the Windows Cluster (cmdb_ci_win_cluster) table for the specified\n    cluster.","params":[{"name":"name","type":"String","description":"The cluster for which to search."}],"returns":{"type":"GlideRecord","description":"The record for the specified cluster."},"example":[]}]},"DSCScriptableAPI":{"meta":{"has_constructor":true,"description":"Provides methods for checking the health of your domain configuration for the\n    instance. DSCScriptableAPI is part of the Domain Separation Center dashboard and is available in the\n      SNC global namespace.<br/><br/>The com.glide.domain.msp_extensions.installer plugin must be activated for Domain Separation\n      Center dashboard availability.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new DSCScriptable object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"chkDataInvalidDomainForTables","description":"Checks a list of comma-separated tables for invalid domains.<p>View records that reference invalid domains in the Domain Log [syslog_domain] table.</p>","params":[{"name":"tableNames","type":"String","description":"Comma-separated list of table names."}],"returns":{"type":"String","description":"GUID of any invalid references; OK otherwise"},"example":[{"code":"var dsc = new SNC.DSCScriptableAPI();\ndsc.chkDataInvalidDomainForTables('task, sys_user');","description":"","output":""}]},{"name":"chkDataInvalidPathForTables","description":"Checks a list of comma-separated tables for invalid domain paths.<p>Records that have an invalid domain path are logged in the syslog_domain table.</p>","params":[{"name":"tableNames","type":"String","description":"Comma-separated list of table names."}],"returns":{"type":"String","description":"GUID if there are invalid paths; OK otherwise"},"example":[{"code":"var dsc = new SNC.DSCScriptableAPI();\ndsc.chkDataInvalidPathForTables('task, sys_user');","description":"","output":""}]}]},"DurationCalculator":{"meta":{"has_constructor":true,"description":"Provides methods for calculating durations and due dates. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor for <span class=\"keyword apiname\">DurationCalculator</span> class.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var dc = new DurationCalculator();","description":"","output":""}]},{"name":"calcDuration","description":"Calculates an end date and time based on a specified start datetime and duration\n    (seconds).<p>Upon completion, <span class=\"keyword parmname\">this.endDateTime</span>, <span class=\"keyword parmname\">this.seconds</span>, and\n          <span class=\"keyword parmname\">this.totalSeconds</span> properties are set to indicate the results of the\n        calculation. Prior to calling this method, you must call\n          <span class=\"keyword apiname\">setStartDateTime()</span> with the start time to use in the computation.</p>","params":[{"name":"seconds","type":"Number","description":"Number of seconds to add to the <span class=\"keyword parmname\">startDateTime</span> to compute\n                the other values."}],"returns":{"type":"Boolean","description":"False if input value is not a number."},"example":[{"code":"var gdt = new GlideDateTime(\"2012-05-01 00:00:00\");\ndc.setStartDateTime(gdt);\nif(!dc.calcDuration(2*24*3600)){ // 2 days\n  gs.log(\"*** Error calculating duration\");\n  return;\n}\n    ","description":"","output":""}]},{"name":"calcRelativeDueDate","description":"Calculates the due date starting at <span class=\"keyword parmname\">start</span> and adding\n      <span class=\"keyword parmname\">days</span> using the schedule and time zone.<p>Called from relative duration definitions, initiated by\n        <span class=\"keyword apiname\">calcRelativeDuration()</span>, as\n          <samp class=\"ph codeph\">calculator.calcRelativeDueDate(calculator.startDateTime, days)</samp>. When the\n        day that the work is due is found, sets the time to <span class=\"keyword parmname\">endTime</span> of that\n        day. If there are not enough days left in the schedule, uses the last day in the\n        schedule.</p>","params":[{"name":"start","type":"GlideDateTime","description":"Start <span class=\"keyword parmname\">datetime</span> for the computation."},{"name":"days","type":"Number","description":"Number of days to add to the start <span class=\"keyword parmname\">datetime</span>."},{"name":"endTime","type":"String","description":"Time due of the computed day due in \"hh:mm:ss\" format, or blank to indicate the end of the work day"}],"returns":{"type":"Boolean","description":"True if the completion date is within the schedule. False if the completion date falls\n                outside the schedule. Undefined if no schedule was set prior to calling this\n                method."},"example":[{"code":"var dc = new DurationCalculator();\ndc.calcRelativeDueDate(\"2012-04-10 08:00:00\", 2, \"08:00:00\")","description":"","output":""}]},{"name":"calcRelativeDuration","description":"Calculates the duration using the specified relative duration script.<p>Upon completion, the <span class=\"keyword parmname\">this.endDateTime</span> and\n          <span class=\"keyword parmname\">this.seconds</span> properties are set to indicate the results of the\n        calculation.</p>","params":[{"name":"relativeDurationID","type":"String","description":"sys_id of relative duration schedule (table cmn_relative_duration)."}],"returns":{"type":"Boolean","description":"The result of the duration script."},"example":[{"code":"var dc = new DurationCalculator();\ndc.calcRelativeDuration('08fcd0830a0a1b2600074f56b1ad7cb');","description":"","output":""}]},{"name":"calcScheduleDuration","description":"Returns the actual duration between <span class=\"keyword parmname\">startTime</span> and\n      <span class=\"keyword parmname\">endTime</span> within the already-specified schedule and optionally overridden\n    timezone.<p>Sets <span class=\"keyword parmname\">this.endDateTime</span> (for completeness), <span class=\"keyword parmname\">this.seconds</span>,\n        and <span class=\"keyword parmname\">this.totalSeconds</span>.</p>","params":[{"name":"startTime","type":"GlideDateTime","description":"The start time. If not provided the current value is used (set using<span class=\"keyword apiname\">\n                  setStartDateTime()</span>)."},{"name":"endTime","type":"GlideDateTime","description":"The end time. If not provided the current value is used (set using\n                  <span class=\"keyword apiname\">setEndDateTime()</span>)."}],"returns":{"type":"Number","description":"The schedule duration in seconds (same as calling getSeconds()). Returns\n                0 if endTime is before startTime."},"example":[]},{"name":"calcScheduleDuration","description":"Gets the actual duration between <span class=\"keyword parmname\">startTime</span> and\n      <span class=\"keyword parmname\">endTime</span> within the already-specified schedule and optionally overridden\n      timezone. Sets <span class=\"keyword parmname\">this.endDateTime</span>\n    (for completeness), <span class=\"keyword parmname\">this.seconds</span>, and\n      <span class=\"keyword parmname\">this.totalSeconds</span>.<p>Sets <span class=\"keyword parmname\">this.endDateTime</span> (for completeness), <span class=\"keyword parmname\">this.seconds</span>,\n        and <span class=\"keyword parmname\">this.totalSeconds</span>.</p>","params":[{"name":"startTime","type":"String","description":"The start time. If not provided the current value is used (set using\n                  <span class=\"keyword apiname\">setStartDateTime()</span>)."},{"name":"endTime","type":"String","description":"The end time. If not provided the current value is used (set using\n                  <span class=\"keyword apiname\">setEndDateTime()</span>)."}],"returns":{"type":"Number","description":"The schedule duration in seconds (same as calling getSeconds()). Returns 0\n              if endTime is before startTime."},"example":[{"code":"var dc = new DurationCalculator();\ngs.print(dc.calcScheduleDuration(\"2012-04-10 08:00:00\",\"2012-04-14 06:00:00\"));\n    ","description":"","output":"*** Script: 338400"}]},{"name":"getEndDateTime","description":"Gets the <span class=\"keyword parmname\">endDateTime</span> property that was set by\n      <span class=\"keyword apiname\">calcDuration</span>/<span class=\"keyword apiname\">calcRelativeDuration</span>, indicating the end\n    date and time for the duration.","params":[],"returns":{"type":"GlideDateTime","description":"The end datetime."},"example":[{"code":"var dc = new DurationCalculator();\ndc.calcDuration(52);\ngs.print(dc.getEndDateTime());","description":"","output":"2012-04-17 20:57:27"}]},{"name":"getSeconds","description":"Gets the <span class=\"keyword parmname\">this.seconds</span> property that was set by\n      <span class=\"keyword apiname\">calcDuration</span>/<span class=\"keyword apiname\">calcRelativeDuration</span>, indicating the total\n    number of seconds of work to be performed for the duration.     \n    This is the total work time, not the total time between start and end times and may be used to determine percentages of the work time.<p>This is the total work time, not the total time between start and end times and may be used to determine percentages of the work time.</p>","params":[],"returns":{"type":"Number","description":"The total work time, in seconds."},"example":[{"code":"var dc = new DurationCalculator();\ndc.calcDuration(52);\ngs.print(dc.getSeconds());","description":"","output":"*** Script: 52"}]},{"name":"getTotalSeconds","description":"Gets the<span class=\"keyword parmname\"> totalSeconds</span> value that was set by a call to<span class=\"keyword apiname\">\n      calculate(record)</span>.","params":[],"returns":{"type":"Number","description":"The total number of seconds."},"example":[{"code":"var dc = new DurationCalculator();\ndc.calcDuration(52);\ngs.print(dc.getTotalSeconds());","description":"","output":"*** Script: 52"}]},{"name":"isAfter","description":"Checks if a time occurs after a specified time of day.","params":[{"name":"dt","type":"GlideDateTime","description":"The <span class=\"keyword parmname\">Datetime</span> to compare to."},{"name":"tm","type":"String","description":"The test <span class=\"keyword parmname\">datetime</span>."}],"returns":{"type":"Boolean","description":"True if tm is after dt."},"example":[{"code":"var dc = new DurationCalculator();\ngs.print(dc.isAfter(\"2012-04-10 08:00:00\", \"07:00:00\"));","description":"","output":"*** Script: true"}]},{"name":"setSchedule","description":"Sets the schedule and time zone to use for calculating the due date.","params":[{"name":"schedId","type":"String","description":"The schedule sys_id (table cmn_schedule)."},{"name":"timezone","type":"String","description":"(Optional) Time zone string value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dc = new DurationCalculator();\ndc.setSchedule('08fcd0830a0a0b2600079f56b1adb9ae', 'Los Angeles');","description":"","output":""}]},{"name":"setStartDateTime","description":"Sets the start <span class=\"keyword parmname\">datetime</span> for the duration calculations.","params":[{"name":"description","type":"GlideDateTime","description":"(Optional) The start time in GMT for subsequent calculations. If not present\n                then the current <span class=\"keyword parmname\">datetime</span> is used."},{"name":"amount","type":"Number","description":"amount"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dc = new DurationCalculator();\ndc.calcDuration(52);\ngs.print(dc.getEndDateTime());","description":"","output":""}]},{"name":"setStartDateTime","description":"Sets the start <span class=\"keyword parmname\">datetime</span> for the duration calculations.","params":[{"name":"start","type":"String","description":"(Optional) The start time in GMT for subsequent calculations. If not present\n                then the current <span class=\"keyword parmname\">datetime</span> is used."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dc = new DurationCalculator();\ndc.setStartDateTime(\"2012-04-10 08:00:00\")","description":"","output":""}]},{"name":"setTimeZone","description":"Sets the time zone to use for calculating the due date.","params":[{"name":"timezone","type":"String","description":"Value of the time zone."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dc = new DurationCalculator();\ndc.setTimeZone(\"Los Angeles\");","description":"","output":""}]}]},"ExpenseAllocation":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">ExpenseAllocation</span> API is included with the Cost Management Plugin as a script\n    include record. It is used by various cost management processes and can also be used for\n    generating custom expense allocation records (<span class=\"keyword apiname\">fm_expense_allocation</span>) from scripted expense\n    allocation rules. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Called when you create a new <span class=\"keyword apiname\">ExpenseAllocation</span> object.<p>This is not needed if scripting advanced allocation rules. This object is already available\n        as the <var class=\"keyword varname\">allocation</var> variable.</p>","params":[{"name":"expense","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> identifying the source of the expense."},{"name":"rule","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> identifying the rule to use in allocating the\n                expense line."}],"returns":{"type":"ExpenseAllocation object","description":"The ExpenseAllocation object just created."},"example":[{"code":"var allocation=new ExpenseAllocation(expenseGlideRecord, ruleGlideRecord);","description":"","output":""}]},{"name":"createAllocation","description":"Creates an expense allocation (<span class=\"keyword apiname\">fm_expense_allocation</span>) record\n    referencing the parameters provided during instantiation and this method.","params":[{"name":"target","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> target of the allocation, for example a cost\n                center record to allocate an expense to Decimal amount - the amount of the\n                allocation."},{"name":"amount","type":"Number","description":"The amount of the allocation."}],"returns":{"type":"Boolean","description":"True if the expense allocation was successfully created."},"example":[{"code":"var allocation=new ExpenseAllocation(expenseGlideRecord, ruleGlideRecord);\nallocation.createAllocation(costCenterGlideRecord, 2345.67);","description":"","output":""}]}]},"ExpenseLine":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">ExpenseLine</span> API is included with the Cost Management Plugin as a\n  script include record. It is used by various cost management processes and can also be used for\n  generating expense line (<span class=\"keyword apiname\">fm_expense_line</span>) records from your own server-side\n  scripts. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor for <span class=\"keyword apiname\">ExpenseLine</span> object.","params":[{"name":"source","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> identifying the source of the expense"},{"name":"amount","type":"Number","description":"Decimal number identifying the amount of the expense"},{"name":"description","type":"String","description":"(Optional) Description of the expense."}],"returns":{"type":"ExpenseLine object","description":"The ExpenseLine object just instantiated."},"example":[{"code":"//get some random CI to be used as an expense source\n        var ci = new GlideRecord(\"cmdb_ci_server\");\n        ci.query();\n        ci.next();\n        \n        //create expense line\n        var exp = new ExpenseLine(ci, 234.56, \"Test expense line\");","description":"","output":""}]},{"name":"createExpense","description":"Creates a new expense line record.","params":[],"returns":{"type":"Boolean","description":"True if the expense line was successfully created."},"example":[{"code":"//get some random CI to be used as an expense sourcevar ci =new GlideRecord(\"cmdb_ci_server\");\nci.query();\nci.next();\n \n//create expense line\nvar exp =new ExpenseLine(ci,234.56,\"Test expense line\");\nexp.setSummaryType(\"run_business\");\nvar success = exp.createExpense();\n","description":"","output":""}]},{"name":"processCIParents","description":"Used internally by the <span class=\"keyword apiname\">createExpense</span> method to process CI\n    relationships when the expense source is a cmdb_ci record.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setCostSource","description":"Identifies the source rate card or distribution cost that was the source of expense\n    line generation.<p>This is not the source (CI, task) of the expense.</p>","params":[{"name":"costSource","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> of CI rate card cost, distribution cost, or task\n                rate card. This is generally only used for system-generated expense lines."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDescription","description":"Defines the description of an expense.","params":[{"name":"description","type":"String","description":"Description of expense."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setParent","description":"Sets the parent field on the expense line.<p>This is generally only used by the system\n        when generating indirect expenses such as business service aggregated expenses.</p>","params":[{"name":"expense","type":"GlideRecord","description":"Parent expense line record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setRecurring","description":"Flags the expense as recurring by setting the recurring field to true.<p>Expense lines are set to false by default so there is no need to call\n          <span class=\"keyword apiname\">setRecurring(false)</span>.</p>","params":[{"name":"recurring","type":"Boolean","description":"Set to true to identify expense line as a recurring expense."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSummaryType","description":"Sets a value for the expense line summary_type field.","params":[{"name":"summaryType","type":"String","description":"Typically you would set this to a value already specified in the expense line\n                summary type field choice list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//get some random CI to be used as an expense sourcevar ci =new GlideRecord(\"cmdb_ci_server\");\nci.query();\nci.next();\n \n//create expense line\nvar exp =new ExpenseLine(ci,234.56,\"Test expense line\");\nexp.setSummaryType(\"run_business\");","description":"","output":""}]}]},"ExtractTermsFromAttachment":{"meta":{"has_constructor":false,"description":"Extracts terms from an attachment. This class is called with the ScriptedExtractor object, SysAttachmentInputStream, the sys_id\n   for the attachment, and the extension for the attachment. The <span class=\"keyword apiname\">getTerms()</span>\n   method is called to extract the terms from the attachment that should be indexed. The\n    <span class=\"keyword apiname\">getTerms()</span> method should just return a string that contains the terms. If you\n   prefer to input a file rather than an inputStream, call <span class=\"keyword apiname\">extractor.getFile()</span> to\n   get the File object containing the attachment.","example":""},"properties":{},"methods":[]},"FormInfoHeader":{"meta":{"has_constructor":false,"description":"FormInfoHeader allows you to add an HTML message as a form info message. The <span class=\"keyword apiname\">addMessage</span> function is commonly used in record producers.<br/><br/>The FormInfoHeader class is available to server-side script.","example":""},"properties":{},"methods":[{"name":"addMessage","description":"Adds an HTML message to the form header, where form info messages are\n    displayed.","params":[{"name":"message","type":"String","description":"A message that may include HTML tags."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.include(\"FormInfoHeader\");\n  var fi = new FormInfoHeader();\n  fi.addMessage('This incident was opened on your behalf&lt;br/&gt;\n     The IT department will contact you for further information or when the incident is resolved');","description":"","output":""}]}]},"GenericUPSAlarmsReconciler":{"meta":{"has_constructor":false,"description":"Concrete reconciler for generic UPS alarms. Use this API for SNMP-related discovery.","example":""},"properties":{},"methods":[{"name":"getReconcilationField","description":"Returns the reconciliation field.","params":[],"returns":{"type":"String","description":"The reconciliation field"},"example":[]},{"name":"getReconcilationKey","description":"Returns the reconciliation key.","params":[],"returns":{"type":"String","description":"The reconciliation key"},"example":[]},{"name":"hasChanged","description":"Determines if the generic UPS Bypass information has changed.","params":[],"returns":{"type":"Boolean","description":"True if the information has changed; otherwise, false."},"example":[]},{"name":"readDatabaseFields","description":"Reads the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"readDiscovered","description":"Reads the discovered information.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDatabaseFields","description":"Sets the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GenericUPSBypassReconciler":{"meta":{"has_constructor":false,"description":"Concrete reconciler for generic UPS bypasses. Use this API for SNMP-related discovery.","example":""},"properties":{},"methods":[{"name":"getReconcilationField","description":"Returns the reconciliation field.","params":[],"returns":{"type":"String","description":"The reconciliation field"},"example":[]},{"name":"getReconcilationKey","description":"Returns the reconciliation key.","params":[],"returns":{"type":"String","description":"The reconciliation key"},"example":[]},{"name":"hasChanged","description":"Determines if the generic UPS Bypass information has changed.","params":[],"returns":{"type":"Boolean","description":"True if the information has changed; otherwise, false."},"example":[]},{"name":"readDatabaseFields","description":"Reads the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"readDiscovered","description":"Reads the discovered information.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDatabaseFields","description":"Sets the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GenericUPSInputsReconciler":{"meta":{"has_constructor":false,"description":"Concrete reconciler for generic UPS inputs. Use this API for SNMP-related discovery.","example":""},"properties":{},"methods":[{"name":"getReconcilationField","description":"Returns the reconciliation field.","params":[],"returns":{"type":"String","description":"The reconciliation field"},"example":[]},{"name":"getReconcilationKey","description":"Returns the reconciliation key.","params":[],"returns":{"type":"String","description":"The reconciliation key"},"example":[]},{"name":"hasChanged","description":"Determines if the generic UPS Bypass information has changed.","params":[],"returns":{"type":"Boolean","description":"True if the information has changed; otherwise, false."},"example":[]},{"name":"readDatabaseFields","description":"Reads the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"readDiscovered","description":"Reads the discovered information.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDatabaseFields","description":"Sets the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GenericUPSOutputsReconciler":{"meta":{"has_constructor":false,"description":"Concrete reconciler for generic UPS outputs. Use this API for SNMP-related discovery.","example":""},"properties":{},"methods":[{"name":"getReconcilationField","description":"Returns the reconciliation field.","params":[],"returns":{"type":"String","description":"The reconciliation field"},"example":[]},{"name":"getReconcilationKey","description":"Returns the reconciliation key.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hasChanged","description":"Determines if the generic UPS bypass information has changed.","params":[],"returns":{"type":"Boolean","description":"True if the information has changed; otherwise, false."},"example":[]},{"name":"readDatabaseFields","description":"Reads the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"readDiscovered","description":"Reads the discovered information.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDatabaseFields","description":"Sets the database fields.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideAggregate":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">GlideAggregate</span> enables you to easily create database aggregation\n  queries. The <span class=\"keyword apiname\">GlideAggregate</span> class is an extension of <span class=\"keyword apiname\">GlideRecord</span>\n   and provides database aggregation (COUNT, SUM, MIN, MAX, AVG) queries. This functionality can be\n   helpful when creating customized reports or in calculations for calculated fields. The\n    <span class=\"keyword apiname\">GlideAggregate</span> class works only on number fields.<br/><br/>When you use <span class=\"keyword apiname\">GlideAggregate</span> on currency or price fields, you are working\n   with the reference currency value. Be sure to convert the aggregate values to the user's session\n   currency for display. Because the conversion rate between the currency or price value (displayed\n   value) and its reference <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/currency/concept/currency.html\" target=\"_blank\">currency</a>\n   \n    value (aggregation value)\n   might change, the result may not be what the user expects.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> When using an on-premise system, the database server time zone must be set to GMT/UTC for\n    this class to work properly.</div>","example":""},"properties":{},"methods":[{"name":"addAggregate","description":"Adds an aggregate.","params":[{"name":"agg","type":"String","description":"Name of the aggregate to add, for example, COUNT, MIN, or MAX"},{"name":"name","type":"String","description":"(Optional) Name of the column to aggregate. Null is the default."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function doMyBusinessRule(assigned_to, number) {\n  var agg = new GlideAggregate('incident');\n  agg.addQuery('assigned_to', assigned_to);\n  agg.addQuery('category', number);\n  agg.addAggregate(\"COUNT\");\n  agg.query();\n  var answer = 'false';\n  if (agg.next()) {\n    answer = agg.getAggregate(\"COUNT\");\n    if (answer &gt; 0)\n      answer = 'true';\n    else\n      answer = 'false';\n  }\n  return answer; \n}","description":"","output":""}]},{"name":"addEncodedQuery","description":"Adds an encoded query to the other queries that may have been set for this\n    aggregate.","params":[{"name":"query","type":"String","description":"An encoded query string to add to the aggregate."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count','category'); \nagg.orderByAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(2)'); \nagg.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(2)'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count','category');\n  var query = agg.getQuery();  \n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count','category');\n  agg2.orderByAggregate('count', 'category');\n  agg2.orderBy('category');\n  agg2.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(3)');\n  agg2.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(3)');\n  agg2.addEncodedQuery(query);\n  agg2.query();\n  var last = \"\";\n  while (agg2.next()) {\n     last = agg2.getAggregate('count','category');      \n  }\n  gs.log(category + \": Last month:\" + count + \" Previous Month:\" + last);\n \n}","description":"","output":""}]},{"name":"addHaving","description":"Adds a \"having\" element to the aggregate e.g. select category, count(*) from incident\n    group by category HAVING count(*) > 5.","params":[{"name":"name","type":"String","description":"The aggregate to filter on for example, COUNT."},{"name":"operator","type":"String","description":"The operator symbol for example <, >, =, !=."},{"name":"value","type":"String","description":"The value to query on, for example '5'."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addTrend","description":"Adds a trend for a field.","params":[{"name":"fieldName","type":"String","description":"The name of the field for which trending should occur."},{"name":"timeInterval","type":"String","description":"The time interval for the trend. The following choices are available: year,\n                quarter, date, week, month, dayofweek, hour, value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var trend = new GlideAggregate('incident');  \ntrend.addTrend ('opened_at','Month');  \ntrend.addAggregate('COUNT');  \ntrend.setGroup(false);  \ntrend.query();  \nwhile(trend.next()) {  \n   gs.print(trend.getValue('timeref') + ': ' + trend.getAggregate('COUNT'));  \n}  ","description":"","output":""}]},{"name":"getAggregate","description":"Gets the value of an aggregate from the current record.","params":[{"name":"agg","type":"String","description":"The type of the aggregate, for example, SUM or Count."},{"name":"name","type":"String","description":"Name of the field to get the aggregate from."}],"returns":{"type":"String","description":"The value of the aggregate."},"example":[{"code":"function doMyBusinessRule(assigned_to, number) {\n  var agg = new GlideAggregate('incident');\n  agg.addQuery('assigned_to', assigned_to);\n  agg.addQuery('category', number);\n  agg.addAggregate(\"COUNT\");\n  agg.query();\n  var answer = 'false';\n  if (agg.next()) {\n    answer = agg.getAggregate(\"COUNT\");\n    if (answer &gt; 0)\n      answer = 'true';\n    else\n      answer = 'false';\n  }\n  return answer; \n}","description":"","output":""}]},{"name":"getQuery","description":"Retrieves the query necessary to return the current aggregate.","params":[],"returns":{"type":"String","description":"The query."},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count','category'); \nagg.orderByAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(2)'); \nagg.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(2)'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count','category');\n  var query = agg.getQuery();  \n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count','category');\n  agg2.orderByAggregate('count', 'category');\n  agg2.orderBy('category');\n  agg2.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(3)');\n  agg2.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(3)');\n  agg2.addEncodedQuery(query);\n  agg2.query();\n  var last = \"\";\n  while (agg2.next()) {\n     last = agg2.getAggregate('count','category');      \n  }\n  gs.log(category + \": Last month:\" + count + \" Previous Month:\" + last);\n \n}","description":"","output":""}]},{"name":"getTotal","description":"Returns the number of records by summing an aggregate.","params":[{"name":"agg","type":"String","description":"The aggregate"},{"name":"name","type":"String","description":"The name of the field to aggregate"}],"returns":{"type":"Number","description":"The total"},"example":[]},{"name":"getValue","description":"Gets the value of a field.","params":[{"name":"name","type":"String","description":"The name of the field."}],"returns":{"type":"String","description":"The value of the field."},"example":[]},{"name":"groupBy","description":"Provides the name of a field to use in grouping the aggregates.<p>May be called numerous times to set multiple group fields.</p>","params":[{"name":"name","type":"String","description":"Name of the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":" var count = new GlideAggregate('incident');\n  count.addAggregate('MIN', 'sys_mod_count');\n  count.addAggregate('MAX', 'sys_mod_count');\n  count.addAggregate('AVG', 'sys_mod_count');\n  count.groupBy('category');\n  count.query();   \n  while (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n     gs.log(category + \" Update counts: MIN = \" + min + \" MAX = \" + max + \" AVG = \" + avg);\n  }","description":"","output":""}]},{"name":"orderBy","description":"Provides the name of a field that should be used to order the aggregates. The field\n    will also be added to the group-by list.","params":[{"name":"name","type":"String","description":"Name of the field used to order the aggregates."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count','category'); \nagg.orderByAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(2)'); \nagg.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(2)'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count','category');\n  var query = agg.getQuery();  \n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count','category');\n  agg2.orderByAggregate('count', 'category');\n  agg2.orderBy('category');\n  agg2.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(3)');\n  agg2.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(3)');\n  agg2.addEncodedQuery(query);\n  agg2.query();\n  var last = \"\";\n  while (agg2.next()) {\n     last = agg2.getAggregate('count','category');      \n  }\n  gs.log(category + \": Last month:\" + count + \" Previous Month:\" + last);\n \n}","description":"","output":""}]},{"name":"orderByAggregate","description":"Orders the aggregates based on the specified aggregate and field.","params":[{"name":"agg","type":"String","description":"Type of aggregation, for example SUM, COUNT, MIN, MAX."},{"name":"fieldName","type":"String","description":"Name of the field to aggregate."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count','category'); \nagg.orderByAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(2)'); \nagg.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(2)'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count','category');\n  var query = agg.getQuery();  \n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count','category');\n  agg2.orderByAggregate('count', 'category');\n  agg2.orderBy('category');\n  agg2.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(3)');\n  agg2.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(3)');\n  agg2.addEncodedQuery(query);\n  agg2.query();\n  var last = \"\";\n  while (agg2.next()) {\n     last = agg2.getAggregate('count','category');      \n  }\n  gs.log(category + \": Last month:\" + count + \" Previous Month:\" + last);\n \n}","description":"","output":""}]},{"name":"query","description":"Issues the query and gets the results.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count','category'); \nagg.orderByAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(2)'); \nagg.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(2)'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count','category');\n  var query = agg.getQuery();  \n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count','category');\n  agg2.orderByAggregate('count', 'category');\n  agg2.orderBy('category');\n  agg2.addQuery('opened_at', '&gt;=', 'javascript:gs.monthsAgoStart(3)');\n  agg2.addQuery('opened_at', '&lt;=', 'javascript:gs.monthsAgoEnd(3)');\n  agg2.addEncodedQuery(query);\n  agg2.query();\n  var last = \"\";\n  while (agg2.next()) {\n     last = agg2.getAggregate('count','category');      \n  }\n  gs.log(category + \": Last month:\" + count + \" Previous Month:\" + last);","description":"","output":""}]},{"name":"setGroup","description":"Sets whether the results are to be grouped.","params":[{"name":"b","type":"Boolean","description":"Set to true if grouping is true, otherwise set to false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var ga = new GlideAggregate('incident');\nga.addAggregate('COUNT', 'category');\n \nga.setGroup(true);\n","description":"","output":""}]}]},"GlideappCalculationHelper":{"meta":{"has_constructor":false,"description":"The GlideappCalculationHelper API is a scriptable object that provides methods that add\n    items to an existing request or request the recalculation of the price of a request. The methods for this API are used in global server-side scripts (script includes, business\n      rules, etc.). There is currently no support for scoped applications.<br/><br/>","example":""},"properties":{},"methods":[{"name":"addItemToExistingRequest","description":"Adds one or more of a specified catalog item to an existing request.","params":[{"name":"requestID","type":"String","description":"sys_id of the request to which to add the catalog item(s)"},{"name":"catalogID","type":"String","description":"sys_id of the catalog item to add to the request"},{"name":"quantity","type":"String","description":"Number of the specified catalog item to add to the request"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catItemId = \"04b7e94b4f7b4200086eeed18110c7fd\";\nvar requestId = \"6eed229047801200e0ef563dbb9a71c2\";\nvar helper = new GlideappCalculationHelper()\nhelper.addItemToExistingRequest(requestId, catItemId, \"1\");","description":"","output":""}]},{"name":"rebalanceRequest","description":"Recalculates the price of all of the items in a specified request.","params":[{"name":"requestID","type":"String","description":"sys_id of the request for which to recalculate the price"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catItemId = \"04b7e94b4f7b4200086eeed18110c7fd\";\nvar requestId = \"6eed229047801200e0ef563dbb9a71c2\";\nvar helper = new GlideappCalculationHelper()\n//Add an item to the request\nhelper.addItemToExistingRequest(requestId, catItemId, \"1\");\n//Re-calculate the price of the request after adding the item\nhelper.rebalanceRequest(requestId);","description":"","output":""}]}]},"GlideCertificateEncryption":{"meta":{"has_constructor":true,"description":"APIs available for encrypting certificates. Use these methods to generate a hash for the certificate, sign data using a private key, and\n   generate a message authentication code.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideCertificateEncryption object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"generateMac","description":"Generates the Message Authentication Code (MAC), which is used to authenticate a\n    message.","params":[{"name":"key","type":"String","description":"Key to use to sign the message. Must be Base64 encoded."},{"name":"algorithm","type":"String","description":"Algorithm to use to generate the MAC: HmacSHA256, HmacSHA1, HmacMD5, and so\n                on."},{"name":"data","type":"String","description":"Data to process."}],"returns":{"type":"String","description":"MAC in base64 format."},"example":[{"code":"var mac = new GlideCertificateEncryption;\nvar key = \"sample_key\"; \nkey = GlideStringUtil.base64Encode(key);\nmac.generateMac(key, \"HmacSHA256\", \"sample_data\");","description":"","output":""}]},{"name":"getThumbPrint","description":"Generates a hash (SHA-1, SHA-256, and so on) for the certificate from Trust Store\n    Cert.","params":[{"name":"certificateID","type":"String","description":"sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."},{"name":"algorithm","type":"String","description":"SHA-1, SHA-256, and so on"}],"returns":{"type":"String","description":"Thumbprint in base64 format."},"example":[]},{"name":"getThumbPrintFromKeystore","description":"Generates a hash (SHA-1, SHA-256, and so on) for the certificate from the key store\n    entry.","params":[{"name":"certificateID","type":"String","description":"sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."},{"name":"alias","type":"String","description":"Alias name for the certificate."},{"name":"algorithm","type":"String","description":"SHA-1, SHA-256, and so on."}],"returns":{"type":"String","description":"Thumbprint in base64 format."},"example":[]},{"name":"sign","description":"Signs the data using the private key and the given algorithm.","params":[{"name":"certificateID","type":"String","description":"sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."},{"name":"alias","type":"String","description":"Private key name."},{"name":"aliaspassword","type":"String","description":"Password for the private key."},{"name":"datatosign","type":"String","description":"Data to sign."},{"name":"algorithm","type":"String","description":"SHA-1, SHA-256, and so on."}],"returns":{"type":"String","description":"Signed data in base64 format."},"example":[{"code":"var gce = new GlideCertificateEncryption;\ngce.sign(\"recordID\", \"alias\", \"password\", \"SHA-1\", \"sign this data\");","description":"","output":""}]}]},"GlideConversation":{"meta":{"has_constructor":false,"description":"The GlideConversation API provides access to information in a Connect message. GlideConversation properties are accessed through a global object (conversation) that is\n   available only in Connect action conditions and scripts.<br/><br/>Connect conversations are stored on the Live Group Profile [live_group_profile] table.","example":""},"properties":{"description":{"description":"The conversation's description.","type":"String"},"document":{"description":"The sysID of the document associated with the conversation.<p>This field is set for feed conversations, and contains the sysID of the record being\n        discussed.</p>","type":"GlideRecord"},"name":{"description":"The name of the conversation.","type":"String"},"queueEntry":{"description":"The queue entry associated with the conversation.<p>The queue entry is a reference field pointing to the chat_queue_entry table. This field is\n        only available on support conversations. The queue chat entry is used to track the state of\n        the conversation. This property is not changed if an incident record is created from the\n        support conversation using the <span class=\"keyword apiname\">newRecord()</span> method.</p>","type":"GlideRecord"},"sys_id":{"description":"The sys_id of the conversation.","type":"String"},"table":{"description":"The name of the table containing the record being discussed.<p>This field is set for feed conversations, and is set to the table holding the record.</p>","type":"String"},"type":{"description":"The conversation type.<p>This is not the message type.</p><p>Connect supports the following types.<ul class=\"ul\" id=\"r_CONV-type__ul_bpy_v3f_gv\">\n          <li class=\"li\">peer - direct conversations, which consist of messages between two users.</li>\n\n          <li class=\"li\">connect - group conversations, which consist of messages between more than two\n            users.</li>\n\n          <li class=\"li\">support - Connect Support conversations.</li>\n\n          <li class=\"li\">feed - record conversations, which consist of messages that correspond to comments and\n            work notes on a specific record.  </li>\n\n        </ul></p>","type":"String"}},"methods":[]},"GlideDateTime":{"meta":{"has_constructor":true,"description":"The GlideDateTime class provides methods for performing operations on GlideDateTime\n  objects, such as instantiating GlideDateTime objects or working with glide_date_time\n  fields. Use the GlideDateTime methods to perform date-time operations, such as instantiating a\n   GlideDateTime object, performing date-time calculations, formatting a date-time, or converting\n   between date-time formats.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new GlideDateTime object from a date and time value in the UTC time zone\n    specified with the format yyyy-MM-dd HH:mm:ss.","params":[{"name":"dateTime","type":"String","description":"A UTC date and time using the  format yyyy-MM-dd HH:mm:ss."}],"returns":{"type":"","description":""},"example":[{"code":"var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");","description":"","output":""}]},{"name":"constructor","description":"Instantiates a new GlideDateTime object set to the time of a specified GlideDateTime\n    object in GMT format.","params":[{"name":"gDT","type":"GlideDateTime","description":"Object used to set the time of the new object."}],"returns":{"type":"","description":""},"example":[{"code":"var start = new GlideDateTime(\"2011-01-01 12:00:00\");\nvar end = new GlideDateTime(start);\ngs.print(end);","description":"","output":"2011-01-01 12:00:00"}]},{"name":"constructor","description":"Instantiates a new GlideDateTime object with the current date and time in GMT\n    format.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var gdt = new GlideDateTime();","description":"","output":""}]},{"name":"add","description":"Adds a GlideTime object to the current GlideDateTime object.","params":[{"name":"time","type":"GlideTime","description":"The time to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngdt.add(gtime1);\ngs.print(gdt.getTime());","description":"","output":"1970-01-01 08:00:20"}]},{"name":"add","description":"Adds a specified number of milliseconds to the GlideDateTime object.","params":[{"name":"milliseconds","type":"Number","description":"The number of milliseconds to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getNumericValue());\ngdt.add(10);\ngs.print(gdt.getNumericValue());","description":"","output":""}]},{"name":"addDays","description":"Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days.<p>Use <span class=\"keyword apiname\">addDaysLocalTime()</span> and <span class=\"keyword apiname\">addDaysUTC()</span> instead of\n        this method.</p>","params":[{"name":"days","type":"Number","description":"The number of days to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDays(-1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-30"}]},{"name":"addDaysLocalTime","description":"Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts days using the local date and time values.</p>","params":[{"name":"days","type":"Number","description":"The number of days to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDaysLocalTime(-1);\ngs.print(gdt.getLocalDate());","description":"","output":"2011-08-30"}]},{"name":"addDaysUTC","description":"Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days.<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts days using the UTC date and time values.</p>","params":[{"name":"days","type":"Number","description":"The number of days to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDaysUTC(-1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-30"}]},{"name":"addMonths","description":"Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months.<p>Use <span class=\"keyword apiname\">addMonthsLocalTime()</span> or <span class=\"keyword apiname\">addMonthsUTC()</span> instead of\n        this method.</p>","params":[{"name":"months","type":"Number","description":"The number of months to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonths(2);\ngs.print(gdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addMonthsLocalTime","description":"Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts months using the local date and time\n        values.</p>","params":[{"name":"months","type":"Number","description":"The number of months to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonthsLocalTime(2);\ngs.print(gdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addMonthsUTC","description":"Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months.<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts months using the UTC date and time values.</p>","params":[{"name":"months","type":"Number","description":"The number of months to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonthsUTC(2);\ngs.print(gdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addSeconds","description":"Adds a specified number of seconds to the GlideDateTime object.","params":[{"name":"seconds","type":"Number","description":"The number of seconds to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-07 08:00:00\");\ngdt.addSeconds(1000);\ngs.print(gdt.getValue());","description":"","output":"2011-12-07 08:16:40"}]},{"name":"addWeeks","description":"Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks.<p>Use <span class=\"keyword apiname\">addWeeksLocalTime()</span> and <span class=\"keyword apiname\">addWeeksUTC()</span> instead of\n        this method.</p>","params":[{"name":"weeks","type":"Number","description":"The number of weeks to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeks(-1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addWeeksLocalTime","description":"Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts weeks using the local date and time values.</p>","params":[{"name":"weeks","type":"Number","description":"The number of weeks to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeksLocalTime(-1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addWeeksUTC","description":"Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks.<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts weeks using the UTC date and time values.</p>","params":[{"name":"weeks","type":"Number","description":"The number of weeks to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeksUTC(-1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addYears","description":"Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years.<p>Use <span class=\"keyword apiname\">addYearsLocalTime()</span> or <span class=\"keyword apiname\">addYearsUTC()</span> instead of\n        this method.</p>","params":[{"name":"years","type":"Number","description":"The number of years to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYears(1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"addYearsLocalTime","description":"Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideDateTime object, then adds or subtracts years using the local date and time values.</p>","params":[{"name":"years","type":"Number","description":"The number of years to add. To subtract use a negative value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYearsLocalTime(1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"addYearsUTC","description":"Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years.<p>The date and time value stored by GlideDateTime object is interpreted as being in the UTC\n        time zone.</p>","params":[{"name":"years","type":"Number","description":"The number of years to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYearsUTC(1);\ngs.print(gdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"compareTo","description":"Compares two date and time objects to determine whether one occurs before the other or\n    if they are equivalent.","params":[{"name":"dateTime","type":"Object","description":"Date time in a GlideDateTime object"}],"returns":{"type":"Number","description":"<ul class=\"ul\" id=\"r_GDT-compareTo_O__ul_tb3_mjg_sz\">\n                  <li class=\"li\">0 = Dates are equal</li>\n\n                  <li class=\"li\">1 = The object's date is after the date specified in the parameter</li>\n\n                  <li class=\"li\">-1 = The object's date is before the date specified in the parameter</li>\n\n                </ul>"},"example":[{"code":"var initDate = new GlideDateTime(\"2011-08-01 12:00:00\");\nvar compDate1 = new GlideDateTime(\"2011-08-01 12:00:00\");\nvar compDate2 = new GlideDateTime(\"2011-07-31 12:00:00\");\nvar compDate3 = new GlideDateTime(\"2011-08-04 16:00:00\");\n \ngs.info(initDate.compareTo(compDate1)); // Equals (0)\ngs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)\ngs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)","description":"","output":""}]},{"name":"equals","description":"Compares an object with an existing value for equality.","params":[{"name":"GDT","type":"Object","description":"The object to compare. Can be a GlideDateTIme object or a valid date time\n                string."}],"returns":{"type":"Boolean","description":"True if they are equal, false otherwise."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 00:00:00\");\ngs.print(gdt.equals(\"2011-09-30 00:12:01\"));","description":"","output":"false"}]},{"name":"getDate","description":"Gets the date stored by the GlideDateTime object, expressed in the standard format,\n    yyyy-MM-dd, and the system time zone, UTC by default.","params":[],"returns":{"type":"GlideDate","description":"The date in the system time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"getDayOfMonth","description":"Gets the current day of the month in the UTC time zone.<p>Use <span class=\"keyword apiname\">getDayOfMonthLocalTime()</span> and <span class=\"keyword apiname\">getDayOfMonthUTC()</span>\n        instead of this method.</p>","params":[],"returns":{"type":"Number","description":"The day of the month in the UTC time zone, from 1 to 31."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.print(gdt.getDayOfMonth());","description":"","output":"2"}]},{"name":"getDayOfMonthLocalTime","description":"Gets the day of the month stored by the GlideDateTime object, expressed in the current\n    user's time zone.","params":[],"returns":{"type":"Number","description":"The day of the month in the user's time zone, from 1 to 31."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.print(gdt.getDayOfMonthLocalTime());","description":"","output":"2"}]},{"name":"getDayOfMonthUTC","description":"Gets the day of the month stored by the GlideDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"The day of the month in the UTC time zone, from 1 to 31."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.print(gdt.getDayOfMonthUTC());","description":"","output":"2"}]},{"name":"getDayOfWeek","description":"Retrieves the day of the week stored by the GlideDateTime object, expressed in the\n    user's time zone.<p>Use <span class=\"keyword apiname\">getDayOfWeekLocalTime()</span> and <span class=\"keyword apiname\">getDayOfWeekUTC()</span>\n        instead of this method.</p>","params":[],"returns":{"type":"Number","description":"The day of the week value - Monday = 1, ... Sunday = 7."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");\ngs.print(gdt.getDayOfWeek());","description":"","output":"4"}]},{"name":"getDayOfWeekLocalTime","description":"Gets the day of the week stored by the GlideDateTime object, expressed in the user's\n    time zone.","params":[],"returns":{"type":"Number","description":"The day of the week value - Monday = 1, ... Sunday = 7"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");\ngs.print(gdt.getDayOfWeekLocalTime());","description":"","output":"4"}]},{"name":"getDayOfWeekUTC","description":"Gets the day of the week stored by the GlideDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"The day of the week value - Monday = 1, ... Sunday = 7"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");\ngs.print(gdt.getDayOfWeekUTC());","description":"","output":"4"}]},{"name":"getDaysInMonth","description":"Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the Java Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">getDaysInMonthLocalTime()</span> and <span class=\"keyword apiname\">getDaysInMonthUTC()</span>\n        instead of this method.</p>","params":[],"returns":{"type":"Number","description":"The number of days in the current month in the Java Virtual Machine time\n                zone."},"example":[{"code":"var gdt = new GlideDateTime(); //December\ngs.print(gdt.getDaysInMonth());","description":"","output":"31"}]},{"name":"getDaysInMonthLocalTime","description":"Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the current user's time zone.","params":[],"returns":{"type":"Number","description":"The number of days in the current month in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(); //December\ngs.print(gdt.getDaysInMonthLocalTime());","description":"","output":"31"}]},{"name":"getDaysInMonthUTC","description":"Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the UTC time zone.","params":[],"returns":{"type":"Number","description":"The number of days in the month stored by the GlideDateTime object, expressed\n                in the UTC time zone."},"example":[{"code":"var gdt = new GlideDateTime(); //December\ngs.print(gdt.getDaysInMonthUTC());","description":"","output":"31"}]},{"name":"getDisplayValue","description":"Gets the date and time value in the current user's display format and time zone.\n    Referring to the GlideDateTime object directly returns the date and time value in the GMT time\n    zone.","params":[],"returns":{"type":"String","description":"The date and time in the user's format and time zone. Keep in mind when\n                designing business rules or script includes that this method may return values in\n                different formats for different users."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getDisplayValue());","description":"","output":"2011-08-31 01:00:00"}]},{"name":"getDisplayValueInternal","description":"Returns the display value in the internal format (yyyy-MM-dd HH:mm:ss). This method is\n    useful for date/time fields, but not for date fields.","params":[],"returns":{"type":"String","description":"The date and time values for the GlideDateTime object in the current user's\n                time zone and the internal date and time format of yyyy-MM-dd HH:mm:ss."},"example":[{"code":"// Wednesday\nvar gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getDisplayValueInternal());","description":"","output":"2011-08-31 01:00:00"}]},{"name":"getDSTOffset","description":"Gets the amount of time that daylight saving time is offset.","params":[],"returns":{"type":"Number","description":"Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if\n                there is no offset or if the time is not during daylight saving time."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getDSTOffset());","description":"","output":"3600000"}]},{"name":"getErrorMsg","description":"Gets the current error message.","params":[],"returns":{"type":"String","description":"The error message"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 aa:00:00\"); //bad\ngs.print(gdt.isValid()); //false\ngs.print(gdt.getErrorMsg()); //reason","description":"","output":""}]},{"name":"getInternalFormattedLocalTime","description":"Returns the object's time in the local time zone and in the internal\n    format.","params":[],"returns":{"type":"String","description":"The object's time in the local time zone and the internal format."},"example":[]},{"name":"getInternalMidnight","description":"Returns a date and time object set to midnight of a specified day using\n    UTC.","params":[{"name":"dayOfTheWeek","type":"Number","description":"The day of the week for which to return the date/time object."}],"returns":{"type":"GlideDateTime","description":"A GlideDateTime object set to midnight."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getInternalMidnight(2));","description":"","output":"2011-08-30 00:00:01"}]},{"name":"getLocalDate","description":"Gets the date stored by the GlideDateTime object, expressed in the standard format,\n    yyyy-MM-dd, and the current user's time zone.","params":[],"returns":{"type":"GlideDate","description":"The date in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getLocalDate());","description":"","output":"2011-08-31"}]},{"name":"getLocalTime","description":"Gets the time in the user's time zone.","params":[],"returns":{"type":"GlideTime","description":"The time in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getLocalTime());","description":"","output":"1970-01-01 01:00:00"}]},{"name":"getMonth","description":"Retrieves the month stored by the GlideDateTime object, expressed in Java Virtual\n    Machine time zone.<p>Use <span class=\"keyword apiname\">getMonthLocalTime()</span> and <span class=\"keyword apiname\">getMonthUTC()</span> instead of\n        this method.</p>","params":[],"returns":{"type":"Number","description":"The numerical value of the month, Jan=1, Dec=12."},"example":[{"code":"var gdt = new GlideDateTime(); //December\ngs.print(gdt.getMonth());","description":"","output":"12"}]},{"name":"getMonthLocalTime","description":"Gets the month stored by the GlideDateTime object, expressed in the current user's time\n    zone.","params":[],"returns":{"type":"Number","description":"The numerical value of the month, Jan=1, Dec=12."},"example":[{"code":"var gdt = new GlideDateTime(); //December\ngs.print(gdt.getMonthLocalTime());","description":"","output":"12"}]},{"name":"getMonthUTC","description":"Gets the month stored by the GlideDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"The numerical value of the month, Jan=1, Dec=12."},"example":[{"code":"var gdt = new GlideDateTime(); //December\ngs.print(gdt.getMonthUTC());","description":"","output":"12"}]},{"name":"getNumericValue","description":"Gets the number of milliseconds since January 1, 1970, 00:00:00 GMT.","params":[],"returns":{"type":"Number","description":"The number of milliseconds since January 1, 1970, 00:00:00 GMT."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getNumericValue());","description":"","output":"1314777600000"}]},{"name":"getSpanTime","description":"Retrieves the amount of time elapsed since the midnight of a specified day to the\n    current time.","params":[{"name":"dayOfWeek","type":"Number","description":"Day of week value from 1 to 7. 1 = Monday, 7=Sunday."}],"returns":{"type":"GlideTime","description":"The amount of time elapsed since midnight of the specified day. To display the\n                result in user-friendly terms, set the value to GlideDuration."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\"); //Wednesday\nvar dur = new GlideDuration();\n \nvar span = gdt.getSpanTime(1); //how much time since Monday 00:00:00\ndur.setValue(span);\ngs.print(dur.getDisplayValue());","description":"","output":"2 Days 8 Hours"}]},{"name":"getTime","description":"Gets the Unix duration stamp.","params":[],"returns":{"type":"GlideTime","description":"The Unix duration stamp in system format based on GMT time."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getTime());","description":"","output":"1970-01-01 08:00:00"}]},{"name":"getTZOffset","description":"Gets the time zone offset in milliseconds.","params":[],"returns":{"type":"Number","description":"The number of milliseconds of the time zone offset"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.getLocalTime(); // PST local time\ngs.print(gdt.getTZOffset());","description":"","output":"28800000"}]},{"name":"getUserFormattedLocalTime","description":"Returns the object's time in local time zone in the user's format.","params":[],"returns":{"type":"String","description":"The object's time in local time and the user's format."},"example":[]},{"name":"getUserTimeZone","description":"Retrieves the time zone for the current user session.<p>This method is equivalent to <samp class=\"ph codeph\">gs.getSession().getTimeZone()</samp>.</p>","params":[],"returns":{"type":"TimeZone","description":"TimeZone object for the current user."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getUserTimeZone());","description":"","output":"sun.util.calendar.ZoneInfo[id=&quot;America/Los_Angeles&quot;,offset=-28800000,dstSavings=3600000,useDaylight=true,transitions=185,\nlastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-28800000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,\nstartMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,\nendTime=7200000,endTimeMode=0]]"}]},{"name":"getUTCMidnight","description":"Retrieves a GlideDateTime object with the time set to midnight using the UTC time zone.<p>This method sets the date of the new GlideDateTime object as the specified day of the week\n        within the week of the original GlideDateTime object.</p>","params":[{"name":"dayOfTheWeek","type":"Number","description":"The day of the week, from 1 to 7. Monday=1, Sunday=7. Do not enter 0 in this\n                parameter."}],"returns":{"type":"GlideDateTime","description":"A new GlideDateTime object, set to midnight."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\"); // Wednesday, 3rd day of the week.\ngs.print(gdt.getUTCMidnight(5)); //Friday, 5th day of the week.","description":"","output":"2011-09-02 00:00:00"}]},{"name":"getValue","description":"Gets the date and time value stored by the GlideDateTime object in the internal format,\n    yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default.","params":[],"returns":{"type":"String","description":"The date and time in the internal format and system time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.getValue());","description":"","output":"2011-08-31 08:00:00"}]},{"name":"getWeekOfYearLocalTime","description":"Gets the number of the week stored by the GlideDateTime object, expressed in the\n    current user's time zone.<p>All weeks begin on Sunday. The first week of the year is the week that contains at least\n        one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n        of 2016 as that week contains January 1 and 2.</p>","params":[],"returns":{"type":"Number","description":"The number of the current week. The highest week number in a year is either 52\n                or 53."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");\ngs.print(gdt.getWeekOfYearUTC());","description":"","output":"49"}]},{"name":"getWeekOfYearUTC","description":"Gets the number of the week stored by the GlideDateTime object, expressed in the UTC\n    time zone.<p>All weeks begin on Sunday. The first week of the year is the week that contains at least\n        one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n        of 2016 as that week contains January 1 and 2.</p>","params":[],"returns":{"type":"Number","description":"The number of the current week in UTC time. The highest week number in a year\n                is either 52 or 53."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");\ngs.print(gdt.getWeekOfYearUTC());","description":"","output":"49"}]},{"name":"getYear","description":"Retrieves the year stored by the GlideDateTime object, expressed in the Java Virtual\n    Machine time zone.<p>Use <span class=\"keyword apiname\">getYearLocalTime()</span> and <span class=\"keyword apiname\">getYearUTC()</span> instead of\n        this method.</p>","params":[],"returns":{"type":"Number","description":"The 4-digit year value in the Java Virtual Machine time zone."},"example":[{"code":"var gdt = new GlideDateTime(); //2011\ngs.print(gdt.getYear());","description":"","output":"2011"}]},{"name":"getYearLocalTime","description":"Gets the year stored by the GlideDateTime object, expressed in the current user's time\n    zone.","params":[],"returns":{"type":"Number","description":"The 4-digit year value in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(); //2011\ngs.print(gdt.getYearLocalTime());","description":"","output":"2011"}]},{"name":"getYearUTC","description":"Gets the year stored by the GlideDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"number","description":"The 4-digit year value in the UTC time zone."},"example":[{"code":"var gdt = new GlideDateTime(); //2011\ngs.print(gdt.getYearUTC());","description":"","output":"2011"}]},{"name":"hasDate","description":"Determines if an object's date is set.","params":[],"returns":{"type":"Boolean","description":"True if the object's date is set, false otherwise."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.hasDate());","description":"","output":"true"}]},{"name":"isDST","description":"Determines if the object's time uses a daylight saving offset","params":[],"returns":{"type":"Boolean","description":"True if the time is daylight saving time, false otherwise."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 00:00:00\");\ngs.print(gdt.isDST()); //true","description":"","output":"true"}]},{"name":"isValid","description":"Determines if a value is a valid date and time.","params":[],"returns":{"type":"Boolean","description":"True if value is valid, false otherwise."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 aa:00:00\"); //bad\ngs.print(gdt.isValid()); //false","description":"","output":"false"}]},{"name":"setDayOfMonth","description":"Sets the day of the month to a specified value.<p>Use <span class=\"keyword apiname\">setDayOfMonthLocalTime(day)</span> and\n          <span class=\"keyword apiname\">setDayOfMonthUTC(day)</span> instead of this method.</p>","params":[{"name":"day","type":"Number","description":"Day of the month, from 1 to 31."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setDayOfMonth(9);\ngs.print(gdt.getDayOfMonth());","description":"","output":"9"}]},{"name":"setDayOfMonthLocalTime","description":"Sets the day of the month to a specified value in the current user's time zone.","params":[{"name":"day","type":"Number","description":"The day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the\n                month."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setDayOfMonthLocalTime(9);\ngs.print(gdt.getDayOfMonthLocalTime());","description":"","output":"9"}]},{"name":"setDayOfMonthUTC","description":"Sets the day of the month to a specified value in the UTC time zone.","params":[{"name":"day","type":"Number","description":"The day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the\n                month."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setDayOfMonthUTC(9);\ngs.print(gdt.getDayOfMonthUTC());","description":"","output":"9"}]},{"name":"setDisplayValue","description":"Sets a date and time value using the current user's display format and time\n    zone.","params":[{"name":"asDisplayed","type":"String","description":"The date and time in the current user's display format and time zone. The\n                parameter must be formatted using the current user's preferred display format, such\n                as MM-dd-yyyy HH:mm:ss. To assign the current date and time to a variable in a\n                workflow script, use\n                <samp class=\"ph codeph\">&lt;variable&gt;.setDisplayValue(gs.nowDateTime);</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-02-02 12:00:00\");\ngdt.setDisplayValue(\"2011-01-01 12:00:00\");\ngs.print(gdt.getValue());","description":"","output":"2011-01-01 20:00:00"}]},{"name":"setDisplayValue","description":"Sets a date and time value using the current user's time zone and the specified date\n    and time format.<p>This method throws a runtime exception if the date and time format used in the dateTime\n        parameter does not match the format parameter. You can retrieve the error message by calling\n          <span class=\"keyword apiname\">getErrorMsg()</span> on the GlideDateTime object after the exception is\n        caught.</p>","params":[{"name":"dateTime","type":"String","description":"The date and time in the current user's time zone."},{"name":"format","type":"String","description":"The format to use to parse the dateTime parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-02-02 12:00:00\");\ngdt.setDisplayValue(\"20-5-2011 12:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.print(gdt.getValue());","description":"","output":"2011-05-20 19:00:00"}]},{"name":"setDisplayValueInternal","description":"Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.","params":[{"name":"dateTime","type":"String","description":"The date and time in internal format"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-02-02 12:00:00\");\ngdt.setDisplayValueInternal(\"2011-01-01 12:00:00\");\ngs.print(gdt.getValue());","description":"","output":"2011-01-01 20:00:00"}]},{"name":"setDisplayValueInternalWithAlternates","description":"Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.<p>This method attempts to parse incomplete date and time values.</p>","params":[{"name":"dateTime","type":"String","description":"The date and time in internal format."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setGlideDateTime","description":"Sets the date and time of the current object using an existing GlideDateTime object.<p>This method is equivalent to instantiating a new object with a GlideDateTime parameter.</p>","params":[{"name":"gDT","type":"GlideDateTime","description":"A GlideDateTime object"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dt1 = new GlideDateTime(\"2011-01-01 12:00:00\");\nvar dt2 = new GlideDateTime(\"2011-02-02 08:00:00\");\ndt1.setGlideDateTime(dt2);\ngs.print(dt1.getValue());","description":"","output":"2011-02-02 08:00:00"}]},{"name":"setInitialValue","description":"Sets the date and time.<p>This method is equivalent to <span class=\"keyword apiname\">setValue(Object)</span>.</p>","params":[{"name":"dateTime","type":"String","description":"The date and time to use. Accepts either a string in the GMT time zone in the\n                internal format, or a GlideDateTime object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setInitialValue(\"2011-01-01 12:00:00\");\ngs.print(gdt.getValue());","description":"","output":"2011-01-01 12:00:00"}]},{"name":"setMonth","description":"Sets the month stored by the GlideDateTime object to a specified value using the Java\n    Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">setMonthLocalTime()</span> or <span class=\"keyword apiname\">setMonthUTC()</span> instead of\n        this method.</p>","params":[{"name":"month","type":"Number","description":"The month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setMonth(1);\ngs.print(gdt.getMonth());","description":"","output":"1"}]},{"name":"setMonthLocalTime","description":"Sets the month stored by the GlideDateTime object to a specified value using the\n    current user's time zone.","params":[{"name":"month","type":"Number","description":"The month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setMonthLocalTime(1);\ngs.print(gdt.getMonthLocalTime());","description":"","output":"1"}]},{"name":"setMonthUTC","description":"Sets the month stored by the GlideDateTime object to a specified value using the UTC\n    time zone.","params":[{"name":"month","type":"Number","description":"The month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setMonthUTC(1);\ngs.print(gdt.getMonthUTC());","description":"","output":"1"}]},{"name":"setNumericValue","description":"Sets the date and time to the number of milliseconds since January 1, 1970 00:00:00\n    GMT.","params":[{"name":"milliseconds","type":"Number","description":"Number of milliseconds"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setNumericValue(1314777600000);\ngs.print(gdt.getValue());","description":"","output":"2011-08-31 08:00:00"}]},{"name":"setTZ","description":"Sets the time zone of the GlideDateTime object to be the specified time\n    zone.","params":[{"name":"timeZone","type":"TimeZone","description":"A time zone object"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var tz = gs.getSession().getTimeZone();\nvar gdt = new GlideDateTime(); \ngdt.setTZ(tz);","description":"","output":""}]},{"name":"setValue","description":"Sets the date and time of the GlideDateTime object.<p>This method is equivalent to <span class=\"keyword apiname\">setInitialValue()</span>.</p>","params":[{"name":"dateTime","type":"Object","description":"The date and time to use. This parameter may be one of several types. <ul class=\"ul\" id=\"r_GDT-setValue_O__ul_j3h_4pc_nt\">\n                  <li class=\"li\">A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss:\n                    Sets the value of the object to the specified date and time. Using the method\n                    this way is equivalent to instantiating a new GlideDateTime object using the\n                      <samp class=\"ph codeph\">GlideDateTime(value)</samp> constructor. If the date and time format\n                    used does not match the internal format, the method attempts to set the date and\n                    time using other available formats. Resolving the date and time this way can\n                    lead to inaccurate data due to ambiguity in the day and month values. When using\n                    a non-standard date and time format, use <samp class=\"ph codeph\">setValue(dt, format)</samp>\n                    instead.</li>\n\n                  <li class=\"li\">A GlideDateTime object: Sets the value of the object to the date and time\n                    stored by the GlideDateTime passed in the parameter. Using the method this way\n                    is equivalent to instantiating a new GlideDateTime object using the\n                      <samp class=\"ph codeph\">GlideDateTime(g)</samp> constructor.</li>\n\n                  <li class=\"li\">A Java Date object: Sets the value of the object using the value stored by the\n                    Java Date object. Using the method this way is equivalent to passing the value\n                    returned by the Java Date object <span class=\"keyword apiname\">getTime() </span>to the\n                    GlideDateTime <span class=\"keyword apiname\">setNumericValue()</span> method. This method does not\n                    accept JavaScript Date objects.</li>\n\n                  <li class=\"li\">A JavaScript Number: Sets the value of the object using the Number value as\n                    milliseconds past January 1, 1970 00:00:00 GMT. Using the method this way is\n                    equivalent to the <samp class=\"ph codeph\">setNumericValue(milliseconds) </samp>method.</li>\n\n                  <li class=\"li\">A Java Integer or Long: Sets the value of the object using the Integer or Long\n                    value as milliseconds past January 1, 1970 00:00:00 GMT. Using the method this\n                    way is equivalent to the <samp class=\"ph codeph\">setNumericValue(milliseconds)\n                    </samp>method.</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");\ngdt.setValue(\"2011-02-02 08:00:00\");\ngs.print(gdt.getValue());","description":"","output":"2011-02-02 08:00:00"}]},{"name":"setValueUTC","description":"Sets a date and time value using the UTC time zone and the specified date and time\n    format.<p>This method throws a runtime exception if the date and time format used in the dateTime\n        parameter does not match the format parameter. You can retrieve the error message by calling\n          <span class=\"keyword apiname\">getErrorMsg()</span> on the GlideDateTime object after the exception is\n        caught.</p>","params":[{"name":"dateTime","type":"String","description":"The date and time to use."},{"name":"format","type":"String","description":"The format to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");\ngdt.setValueUTC(\"15-02-2011 08:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.print(gdt.getValue());","description":"","output":"2011-02-15 08:00:00"}]},{"name":"setYear","description":"Sets the year stored by the GlideDateTime object to a specified value using the Java\n    Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">setYearLocalTime()</span> or <span class=\"keyword apiname\">setYearUTC()</span> instead of\n        this method.</p>","params":[{"name":"year","type":"Number","description":"The year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setYear(2013);\ngs.print(gdt.getYear());","description":"","output":"2013"}]},{"name":"setYearLocalTime","description":"Sets the year stored by the GlideDateTime object to a specified value using the current\n    user's time zone.","params":[{"name":"year","type":"Number","description":"The year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setYearLocalTime(2013);\ngs.print(gdt.getYearLocalTime());","description":"","output":"2013"}]},{"name":"setYearUTC","description":"Sets the year stored by the GlideDateTime object to a specified value using the UTC\n    time zone.","params":[{"name":"year","type":"Number","description":"The year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setYearUTC(2013);\ngs.print(gdt.getYearUTC());","description":"","output":"2013"}]},{"name":"subtract","description":"Gets the duration difference between two GlideDateTime values.","params":[{"name":"start","type":"GlideDateTime","description":"The start value"},{"name":"end","type":"GlideDateTime","description":"The end value"}],"returns":{"type":"GlideDuration","description":"The time between the two values"},"example":[{"code":"var gdt1 = new GlideDateTime(\"2011-08-28 09:00:00\");\nvar gdt2 = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar dur = new GlideDuration();\n \nvar dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2\ngs.print(dur.getDisplayValue());","description":"","output":"2 Days 23 Hours"}]},{"name":"subtract","description":"Subtracts a specified amount of time.","params":[{"name":"time","type":"GlideTime","description":"The time to subtract"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngdt.subtract(gtime1);\ngs.print(gdt.getTime());","description":"","output":"1970-01-01 07:59:40"}]},{"name":"subtract","description":"Subtracts a specified number of milliseconds from the GlideDateTime object.","params":[{"name":"milliseconds","type":"Number","description":"The number of milliseconds to subtract"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-07 08:00:00\");\ngdt.subtract(1000);\ngs.print(gdt.getValue());","description":"","output":"2011-12-07 07:59:59"}]},{"name":"toString","description":"Returns the date and time value stored by the GlideDateTime object in the internal\n    format, yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default.<p>This method is equivalent to <span class=\"keyword apiname\">getValue()</span>.</p>","params":[],"returns":{"type":"String","description":"The date and time stored by the GlideDateTime object in the system time zone\n                and format."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.print(gdt.toString());","description":"","output":"2011-08-31 08:00:00"}]}]},"GlideElement":{"meta":{"has_constructor":false,"description":"The GlideElement API provides a number of convenient script methods for dealing with\n  fields and their values. GlideElement methods are available for the fields of the current\n  GlideRecord. ","example":""},"properties":{},"methods":[{"name":"canCreate","description":"Determines if the user's role permits the creation of new records in this\n    field.","params":[],"returns":{"type":"Boolean","description":"True if the field can be created, false otherwise."},"example":[]},{"name":"canRead","description":"Determines whether the user's role permits them to read the associated\n    GlideRecord.","params":[],"returns":{"type":"Boolean","description":"True if the field can be read, false otherwise."},"example":[]},{"name":"canWrite","description":"Determines whether the user's role permits them to write to the associated\n    GlideRecord.","params":[],"returns":{"type":"Boolean","description":"True if the user can write to the field, false otherwise."},"example":[]},{"name":"changes","description":"Determines if the current field has been modified. This functionality is available for\n    all available data types, except Journal fields.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">changes()</span> method is not supported within ACL scripts.</div></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>","params":[],"returns":{"type":"Boolean","description":"True if the field has changed, false otherwise."},"example":[]},{"name":"changesFrom","description":"Determines if the previous value of the current field matches the specified\n    object.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>","params":[{"name":"value","type":"Object","description":"An object value to check against the previous value of the current\n                field."}],"returns":{"type":"Boolean","description":"True if the previous value matches the parameter, false if it does not."},"example":[{"code":"if (theState.changesTo(resolvedState)) {\n  operation = 4; //Resolved\n}\nelse if (theState.changesTo(closedState)) {\n  operation = 11; //Resolution Accepted\n}\nelse if (theState.changesFrom(resolvedState) || theState.changesFrom(closedState)) {\n  operation = 10; //Re-open\n}\nelse {\n  operation = 6; //Update\n}","description":"","output":""}]},{"name":"changesTo","description":"Determines if the new value of a field, after a change, matches the specified\n    object.<p><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">changesTo()</span> method is not supported within ACL scripts.</p><p><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized and\n        read, and has not been written, the underlying before-and-after values are the same. In this\n        case, the method returns \"false\", as there has been no change to the data store.</p>","params":[{"name":"value","type":"Object","description":"An object value to check against the new value of the current field."}],"returns":{"type":"Boolean","description":"True if the new value matches the parameter, false if it does not."},"example":[{"code":"if (theState.changesTo(resolvedState)) {\n  operation = 4; //Resolved\n}\nelse if (theState.changesTo(closedState)) {\n  operation = 11; //Resolution Accepted\n}\nelse if (theState.changesFrom(resolvedState) || theState.changesFrom(closedState)) {\n  operation = 10; //Re-open\n}\nelse {\n  operation = 6; //Update\n}","description":"","output":""}]},{"name":"dateNumericValue","description":"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT for a duration\n    field. Does not require the creation of a GlideDateTime object because the duration field is\n    already a GlideDateTime object.","params":[],"returns":{"type":"Number","description":"Number of milliseconds since January 1, 1970, 00:00:00 GMT."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.get('17c90efb13418700cc36b1422244b05d');\ngs.info(inc.calendar_duration.dateNumericValue());","description":"","output":"98000"}]},{"name":"debug","description":"Debugs the object and adds debug messages using\n    <span class=\"keyword apiname\">setError(String)</span>.","params":[{"name":"o","type":"Object","description":"An object to debug."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAttribute","description":"Returns the value of the specified attribute from the dictionary.<p>If the attribute is a boolean attribute, use <span class=\"keyword apiname\">getBooleanAttribute(String)</span>\n        to get the value as a boolean rather than as a string.</p>","params":[{"name":"attributeName","type":"String","description":"Attribute name"}],"returns":{"type":"String","description":"Attribute value"},"example":[{"code":"doit();\nfunction doit() {\n  var gr = new GlideRecord('sys_user');\n  gr.query(\"user_name\",\"admin\");\n  if (gr.next()) {\n    gs.print(\"we got one\");\n    gs.print(gr.location.getAttribute(\"tree_picker\"));\n  }\n \n}","description":"","output":""}]},{"name":"getBaseTableName","description":"Gets the base table of the field.","params":[],"returns":{"type":"String","description":"Name of the base table. This may be different from the table that the field is\n                defined on. See \"Tables and Classes\" in the product documentation."},"example":[]},{"name":"getBooleanAttribute","description":"Returns the Boolean value of the specified attribute from the dictionary.<p>To get the value as a string, use <span class=\"keyword apiname\">getAttribute(string)</span>.</p>","params":[{"name":"attributeName","type":"String","description":"Attribute name"}],"returns":{"type":"Boolean","description":"Boolean value of the attribute. Returns false if the attribute does not\n                exist."},"example":[]},{"name":"getChoices","description":"Generates a choice list for a field. Returns the choice values from the base table\n    only, not from the extended table.","params":[{"name":"value","type":"String","description":"An optional dependent value."}],"returns":{"type":"array list","description":"The choice values for the field."},"example":[]},{"name":"getChoiceValue","description":"Gets the choice label for the current choice value.","params":[],"returns":{"type":"String","description":"The choice label."},"example":[]},{"name":"getDebugCount","description":"Gets the number of debug messages logged by <span class=\"keyword apiname\">debug()</span>.","params":[],"returns":{"type":"Number","description":"The number of debug messages."},"example":[]},{"name":"getDependent","description":"Checks whether or not the field is dependent on another field.","params":[],"returns":{"type":"String","description":"Name of the field on which the current field depends."},"example":[]},{"name":"getDependentTable","description":"Gets the table that the current table depends on.","params":[],"returns":{"type":"String","description":"The name of the table."},"example":[]},{"name":"getDisplayValue","description":"Gets the formatted display value of the field.","params":[{"name":"maxChar","type":"Number","description":"Optional, maximum number of characters to return."}],"returns":{"type":"String","description":"Display value of the field."},"example":[{"code":"var fields = current.getFields();\nfor (var i = 0; i &lt; fields.size(); i++) { \n  var field = fields.get(i);\n  var name = field.getName(); \n  var value = field.getDisplayValue(); \n  gs.print(i + \". \" + name + \"=\" + value); \n}","description":"","output":""}]},{"name":"getDisplayValueExt","description":"Gets the formatted display value of a field, or a specified substitute value if the\n    display value is null or empty.","params":[{"name":"maxChar","type":"Number","description":"Optional, the maximum number of characters to be returned."},{"name":"nullSub","type":"String","description":"The value to return if the display value is null or empty."}],"returns":{"type":"String","description":"The formatted display value of the field, or the specified substitute\n                value."},"example":[]},{"name":"getED","description":"Returns an element descriptor.","params":[],"returns":{"type":"ElementDescriptor","description":"The field's element descriptor."},"example":[{"code":"var fields = current.getFields();\nfor (i=0; i&lt;fields.size(); i++) { \n  var field = fields.get(i);\n  var descriptor = field.getED(); \n  gs.print(\"type=\" + descriptor.getType() + \n    \" internalType=\" + descriptor.getInternalType()); \n}","description":"","output":""}]},{"name":"getElementValue","description":"Gets the value for a given element.","params":[{"name":"value","type":"String","description":"An element"}],"returns":{"type":"String","description":"The value of the element."},"example":[]},{"name":"getError","description":"Gets error debug messages.","params":[],"returns":{"type":"String","description":"A string of debug messages"},"example":[]},{"name":"getEscapedValue","description":"Gets the escaped value for the current element.","params":[],"returns":{"type":"String","description":"The escaped value of the current element."},"example":[]},{"name":"getFieldStyle","description":"Gets the CSS style for the field.","params":[],"returns":{"type":"String","description":"The CSS style for the field."},"example":[{"code":"var fields = current.getFields();\nfor (var i = 0; i &lt; fields.size(); i++) { \n  var field = fields.get(i);\n  var name = field.getName(); \n  var value = field.getDisplayValue(); \n  gs.print(i + \". \" + name + \"=\" + value); \n}","description":"","output":""}]},{"name":"getGlideObject","description":"Gets a glide object.","params":[],"returns":{"type":"Object","description":"A Glide object."},"example":[{"code":"function calcDateDelta(start, end, calendar) {\n  var cal = GlideCalendar.getCalendar(calendar);\n  if (!cal.isValid())\n      return null;\n  var realStart = start.getGlideObject();\n  var realEnd = end.getGlideObject();  \n  var duration = cal.subtract(realStart, realEnd);\n  return duration;\n}","description":"","output":""}]},{"name":"getGlideRecord","description":"Gets a glide record.","params":[],"returns":{"type":"GlideRecord","description":"A glide record"},"example":[{"code":"function task_ci_allocate() {\n   var cnt = g_list.getRowCount();\n   if (cnt == 0)\n      return;\n \n   var pct = 100.0 / cnt;\n   var pct = (parseInt((pct + .005) * 100)) / 100;\n   var gr = g_list.getGlideRecord();\n   gr.query();\n   while (gr.next()) {\n      gr.u_allocation = pct;\n      gr.update();\n   }\n}","description":"","output":""}]},{"name":"getHTMLValue","description":"Returns the HTML value of a field.","params":[{"name":"maxChars","type":"Number","description":"Optional. Maximum number of characters to return."}],"returns":{"type":"String","description":"HTML value for the field."},"example":[{"code":"var inccause = new GlideRecord(\"incident\");\ninccause.short_description = current.short_description;\ninccause.comments = current.comments.getHTMLValue();\ninccause.insert();","description":"","output":""}]},{"name":"getHTMLValueExt","description":"Returns the HTML value of a field, or a specified substitute value if the HTML value is\n    null or empty.","params":[{"name":"maxChar","type":"Number","description":"The maximum number of characters to return."},{"name":"nullSub","type":"String","description":"The value to return if the HTML value is null or empty."}],"returns":{"type":"String","description":"The HTML value or the specified substitute value."},"example":[]},{"name":"getJournalEntry","description":"Returns either the most recent journal entry or all journal entries.","params":[{"name":"mostRecent","type":"Number","description":"If 1, returns the most recent entry. If -1, returns all journal\n                entries."}],"returns":{"type":"String","description":"<p class=\"p\">For the most recent entry, returns a string that contains the field label,\n                  timestamp, and user display name of the journal entry.</p>\n\n                <p class=\"p\">For all journal entries, returns the same information for all journal entries\n                  ever entered as a single string with each entry delimited by \"\\n\\n\".</p>"},"example":[{"code":"//gets all journal entries as a string where each entry is delimited by '\\n\\n'\nvar notes = current.work_notes.getJournalEntry(-1); \n//stores each entry into an array of strings\nvar na = notes.split(\"\\n\\n\");  \n                      \nfor (var i = 0; i &lt; na.length; i++)                 \n  gs.print(na[i]);","description":"","output":""}]},{"name":"getLabel","description":"Returns the object's label.","params":[],"returns":{"type":"String","description":"Object's label"},"example":[{"code":"var gr = new GlideRecord(\"sc_req_item\");\ngr.addQuery(\"request\", current.sysapproval);\ngr.query();\nwhile(gr.next()) {\n    var nicePrice = gr.price.toString();\n    if (nicePrice != ) {\n        nicePrice = parseFloat(nicePrice);\n        nicePrice = nicePrice.toFixed(2);\n    }\n    template.print(gr.number + \":  \" + gr.quantity + \" X \" + gr.cat_item.getDisplayValue() + \" at $\" + nicePrice + \" each \\n\");\n    template.print(\"    Options:\\n\");\n    var variables = gr.variables.getElements();    \n    for (var key in variables) {\n      var v = variables[key];\n      if(v.getQuestion().getLabel() != ) {\n         template.space(4);\n         template.print('     ' +  v.getQuestion().getLabel() + \" = \" + v.getDisplayValue() + \"\\n\");  \n      }\n    }\n}","description":"Element","output":""}]},{"name":"getName","description":"Returns the name of the field.","params":[],"returns":{"type":"String","description":"Field name"},"example":[]},{"name":"getRefRecord","description":"Returns a GlideRecord object for a given reference element.<p><span class=\"warningtitle\">Warning:</span> If the reference element does not contain a value, it returns an empty\n        GlideRecord object, not a NULL object.</p>","params":[],"returns":{"type":"GlideRecord","description":"A GlideRecord object"},"example":[{"code":"\nvar grINC = new GlideRecord('incident'); \ngrINC.notNullQuery('caller_id'); \ngrINC.query(); \nif (grINC.next()) { \n\n// Get a GlideRecord object for the referenced sys_user record \nvar grUSER = grINC.caller_id.getRefRecord(); \nif (grUSER.isValidRecord()) \n  gs.print( grUSER.getValue('name') ); \n\n} ","description":"","output":""}]},{"name":"getStyle","description":"Get the CSS style for the value.","params":[],"returns":{"type":"String","description":"The CSS style for the value."},"example":[{"code":"// Get string of style field from Field Style record\nvar cssStyle = gr.state.getStyle();","description":"","output":""}]},{"name":"getTableName","description":"Returns the name of the field's table.","params":[],"returns":{"type":"String","description":"Name of the table. This may be different from the table Class that the record\n                is in. See Tables and Classes in the product documentation."},"example":[{"code":"if (current.approver.getTableName() == \"sysapproval_approver\") {\n  if (current.approver == email.from_sys_id)  {\n     current.comments = \"reply from: \" + email.from + \"\\n\\n\" + email.body_text;\n \n   // if it's been cancelled, it's cancelled.\n  var doit = true;\n  if (current.state=='cancelled')\n      doit = false;\n \n  if (email.body.state != undefined)\n     current.state= email.body.state;\n \n   if (doit)\n      current.update();\n} else {\n   gs.log(\"Approval for task (\"+current.sysapproval.getDisplayValue()+\") rejected because user sending \n           email( \"+email.from+\") does not match the approver (\"+current.approver.getDisplayValue()+\")\");\n}\n \n}","description":"","output":""}]},{"name":"getTextAreaDisplayValue","description":"Retrieves the value and escapes the HTML.","params":[],"returns":{"type":"String","description":"The escaped HTML"},"example":[]},{"name":"getXHTMLValue","description":"Retrieves the XHTML value of a field.","params":[],"returns":{"type":"String","description":"The XHTML value"},"example":[]},{"name":"getXMLValue","description":"Gets the XML value of a field as a string.","params":[],"returns":{"type":"String","description":"The XML value"},"example":[]},{"name":"hasAttribute","description":"Determines whether a field has a particular attribute.","params":[{"name":"attributeName","type":"String","description":"The attribute to check for"}],"returns":{"type":"Boolean","description":"True if the field has the attribute, false otherwise."},"example":[{"code":"var totalCritical = 0;\n \nvar filledCritical = 0; var fields = current.getFields(); gs.print(fields); for (var num = 0; num &amp;lt; fields.size(); num++) { \n \n    gs.print(\"RUNNING ARRAY VALUE \" + num);\n   var ed = fields.get(num).getED();\n   if(ed.hasAttribute(\"tiaa_critical\")) {\n       gs.print(\"CRITICAL FIELD FOUND\");\n       totalCritical ++;\n       if (!fields.get(num).isNil()) {\n           filledCritical ++;\n       }\n   }\n \n} var answer = 0; gs.print(\"TOTAL - \" + totalCritical); gs.print(\"FILLED - \" + filledCritical); if (filledCritical &amp;gt; 0 &amp;amp;&amp;amp; totalCritical &amp;gt; 0){ \n \n    var pcnt = (filledCritical/totalCritical)*100;\n   answer = pcnt.toFixed(2);;    \n \n} answer;","description":"","output":""}]},{"name":"hasRightsTo","description":"Determines if the user has the right to perform a particular operation.","params":[{"name":"operationName","type":"String","description":"Name of the operation to check for"}],"returns":{"type":"Boolean","description":"True if the user has permission to perform the operation, false\n                otherwise."},"example":[]},{"name":"hasValue","description":"Determines if the field has a value.","params":[],"returns":{"type":"Boolean","description":"True if the field has a value, false otherwise."},"example":[]},{"name":"nil","description":"Determines whether the field is null.","params":[],"returns":{"type":"Boolean","description":"True if the field is null or an empty string, false otherwise."},"example":[{"code":"if (current.start_date.changes() || current.end_date.changes() || current.assigned_to.changes()) { \n  if (!current.start_date.nil() &amp;&amp; !current.end_date.nil() &amp;&amp; !current.assigned_to.nil()) {\n gs.eventQueue(\"change.calendar.notify\", current, current.assigned_to, previous.assigned_to);\n \n}","description":"","output":""}]},{"name":"setDateNumericValue","description":"Sets the duration field to a number of milliseconds since January 1, 1970, 00:00:00 GMT\n    for a duration field. Does not require the creation of a GlideDateTime object because the\n    duration field is already a GlideDateTime object.","params":[{"name":"milliseconds","type":"Number","description":"Number of milliseconds spanned by the duration."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.get('17c90efb13418700cc36b1422244b05d');\nvar timems = inc.calendar_duration.dateNumericValue();\ntimems = timems + 11*1000; \ninc.calendar_duration.setDateNumericValue(timems)\ngs.info(inc.calendar_duration.getValue());","description":"","output":"1970-01-01 00:01:38"}]},{"name":"setDisplayValue","description":"Sets the display value of the field.","params":[{"name":"displayValue","type":"Object","description":"Value to be displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setError","description":"Adds an error message.<p>Can be retrieved using <span class=\"keyword apiname\">getError()</span>.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {\n  var start = current.u_date1.getGlideObject().getNumericValue();\n  var end = current.u_date2.getGlideObject().getNumericValue();\n  if (start &gt; end) {\n    gs.addInfoMessage('start must be before end');\n    current.u_date1.setError('start must be before end');\n    current.setAbortAction(true);\n  }\n}","description":"","output":""}]},{"name":"setInitialValue","description":"Sets the initial value of a field.","params":[{"name":"value","type":"String","description":"Initial value for the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setJournalEntry","description":"Sets the journal entry.","params":[{"name":"value","type":"Object","description":"The value to set the journal entry to."},{"name":"userName","type":"String","description":"The user to attribute the journal entry to. Does not set the journal entry's\n                created by field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setValue","description":"Sets the value of a field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Before calling this method, the element must already exist by querying an existing\n          record or by using the <span class=\"keyword apiname\">gr.initialize()</span> method to initialize a new\n          record.</div></p>","params":[{"name":"value","type":"Object","description":"The value the field is to be set to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// GlideElement.setValue provides same functionality as GlideRecord.setValue\n        var gr = new GlideRecord('incident'); \n        gr.initialize(); \n        gr.short_description.setValue('A short description.');\n        gs.info(gr.getElement('short_description'));","description":"","output":""}]},{"name":"toString","description":"Converts the field's value to a string.","params":[],"returns":{"type":"String","description":"The field's value as a string."},"example":[{"code":"doit();\n \nfunction doit() { \n \n  var gr = new GlideRecord('sys_user');\n  gr.query();\n  while (gr.next()) {\n    if ((gr.first_name.toString().length != gr.first_name.toString().trim().length) || (gr.last_name.toString().length \n         != gr.last_name.toString().trim().length)) {\n      gr.first_name = gr.first_name.toString().trim();\n      gr.last_name = gr.last_name.toString().trim();\n      gr.autoSysFields(false);\n      gr.update();\n    }\n  }\n \n}","description":"","output":""}]}]},"GlideEncrypter":{"meta":{"has_constructor":true,"description":"GlideEncrypter provides methods to encrypt and decrypt strings using the Triple DES\n    algorithm. The GlideEncrypter class is used in server scripts in the global scope. The GlideEncrypter\n      class has two constructors: <ul class=\"ul\" id=\"GlideEncrypterAPI__ul_icd_pnj_1z\">\n        <li class=\"li\"><span class=\"keyword apiname\">GlideEncrypter()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">GlideEncrypter(String key)</span>\n        </li>\n\n      </ul>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideEncrypter class using a given encryption key.","params":[{"name":"key","type":"String","description":"Your encryption key must be exactly 24 characters. A key longer than 24\n                characters will be truncated."}],"returns":{"type":"","description":""},"example":[{"code":"var encr = new GlideEncrypter(myKey); ","description":"","output":""}]},{"name":"constructor","description":"Creates an instance of the GlideEncrypter class using a default (static) encryption\n    key.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var encr = new GlideEncrypter(); ","description":"","output":""}]},{"name":"decrypt","description":"Decrypts a clear string using the Triple DES algorithm.","params":[{"name":"encryptedString","type":"String","description":"String to be decrypted."}],"returns":{"type":"String","description":"Clear text string."},"example":[{"code":"var encr = new GlideEncrypter(); \nvar clearString = 'abcdefg'; \nvar encrString = encr.encrypt(clearString);\nvar decrString = encr.decrypt(encrString);  \ngs.print(\"Decrypted string = \" + decrString);","description":"","output":""}]},{"name":"encrypt","description":"Encrypts a clear string using the Triple DES algorithm.","params":[{"name":"clearString","type":"String","description":"String to be encrypted."}],"returns":{"type":"String","description":"Encrypted string."},"example":[{"code":"var encr = new GlideEncrypter(); \nvar clearString = 'abcdefg'; \nvar encrString = encr.encrypt(clearString); \ngs.print(\"Encrypted string = \" + encrString); \n","description":"","output":""}]}]},"GlideImpersonate":{"meta":{"has_constructor":false,"description":"The global GlideImpersonate API enables administrators to pose as another authenticated\n    user for testing purposes. Use the <span class=\"keyword apiname\">GlideImpersonate</span> API when you need to act as another user so to\n      test functionality within your application. When impersonating another user, the administrator\n      has access to exactly what the impersonated user would have access to in the system, including\n      the same menus and modules. <div class=\"note note\"><span class=\"notetitle\">Note:</span> The system records anything the administrator does while\n        impersonating another user as having been done by that user.</div><br/><br/>","example":""},"properties":{},"methods":[{"name":"canDebug","description":"Verifies whether the specified user can perform debugging on scripts.<p>In order for a user to be able to debug scripts, they must be on a developer instance.\n        Debugging is not allowed on production instances.</p>","params":[{"name":"userSysId","type":"String","description":"sys_Id of the user to verify for debugging capability."}],"returns":{"type":"Boolean","description":"True: User is able to debug the application. <p class=\"p\">False: User is not able to\n                  debug the application.</p>"},"example":[{"code":"userDebug: function(userId) {\n  var impUser = new GlideImpersonate();\n  impUser.canDebug(userId);\n }","description":"","output":""}]},{"name":"canImpersonate","description":"Verifies whether the current user can impersonate the specified user.<p>If the current user is not assigned the admin role, the user to impersonate is inactive, or\n        there are other issues with impersonating the specified user, the method returns \"false\" and\n        the user cannot be impersonated.</p>","params":[{"name":"userSysId","type":"String","description":"sys_Id of the user to impersonate"}],"returns":{"type":"Boolean","description":"True: Current user can impersonate the specified user.<p class=\"p\">False: Current user\n                  cannot impersonate the specified user.</p>"},"example":[{"code":"function onlineImpersonate(userSysId) {\n    if (!GlideImpersonate().canImpsersonate(userSysId)){\n        gs.addInfoMessage(\"No access to impersonate \" + userSysId);\n    } else {\n        GlideImpersonate().impersonate(userSysId);\n    }\n    return;\n}","description":"","output":""}]},{"name":"impersonate","description":"Sets the user ID for the current administrator to the passed-in user ID, enabling the\n    administrator to act as that user.<p>When impersonating another user, the administrator has access to exactly what the\n        impersonated user would have access to in the system, including the same menus and modules.\n        Only use this method when testing functionality in an application. Ensure that once you are\n        finished impersonating a user that you call the method again with the administrator sys_Id\n        to stop the impersonation.</p>","params":[{"name":"userSysId","type":"String","description":"sys_id of the user to impersonate"}],"returns":{"type":"String","description":"sys_id of the user that was logged in prior to the impersonation\n                request"},"example":[{"code":"impersonateUser: function(userId) {\n  var impUser = new GlideImpersonate();\n  impUser.impersonate(userId);\n }","description":"","output":""}]},{"name":"isImpersonating","description":"Determines whether the current user is impersonating another user.","params":[],"returns":{"type":"Boolean","description":"True: User is currently impersonating another user.<p class=\"p\">False: User is not\n                  currently impersonating another user.</p>"},"example":[{"code":"function abortOnImpersonate() {\n    if (GlideImpersonate().isImpersonating()){\n  current.setAbortAction(true);\n  gs.addInfoMessage(\"Transaction canceled due to Impersonation\");\n    }\n    return;\n}","description":"","output":""}]}]},"GlideListProperties":{"meta":{"has_constructor":true,"description":"Create a list and set list properties. For example, define whether a list has a filter,\n    breadcrumbs, and search. Use GlideListProperties in global server-side scripts. To use this class, instantiate a\n      GlideListProperties object using the constructor.<br/><br/>For an example of this class in the base system, configure a list and select\n        <span class=\"ph uicontrol\">All</span>. The tabbed list of options uses the personalize_all UI page and\n      personalize_all_list UI macro to set list properties such as title, context menu, and\n      breadcrumbs.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideListProperties object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var list = new GlideListProperties();\n","description":"","output":""}]},{"name":"getListID","description":"Returns the unique ID for a list.","params":[],"returns":{"type":"String","description":"Unique ID for the list"},"example":[{"code":"var list = new GlideListProperties();\nvar getID = list.getListID();\ngs.print(getID);","description":"","output":"3519f77ad95f5700964f387107a8a394"}]},{"name":"getListName","description":"Returns the name of the list.","params":[],"returns":{"type":"String","description":"Name of the list."},"example":[{"code":"var list = new GlideListProperties();\nvar setName = list.setListName(\"my custom list\");\nvar getName = list.getListName();\ngs.print(getName);","description":"","output":"my custom list"}]},{"name":"getTitle","description":"Get the title of a list.","params":[],"returns":{"type":"String","description":"The title of the list."},"example":[{"code":"var list = new GlideListProperties();\nvar title = list.setTitle(\"My title\");\nvar getTitle = list.getTitle();\ngs.print(getTitle);","description":"Optional example explanation","output":"My title"}]},{"name":"hasActions","description":"Returns whether or not the <span class=\"ph uicontrol\">Actions on select rows</span> option is\n    enabled for a list.","params":[],"returns":{"type":"Boolean","description":"Returns <span class=\"ph uicontrol\">true</span> if the actions option is enabled for a\n                list."},"example":[{"code":"var list = new GlideListProperties();\nvar actions = list.setHasActions(true);\nvar hasActions = list.hasActions();\ngs.print(hasActions);","description":"","output":"true"}]},{"name":"hasBottomNav","description":"Returns whether or not a list has navigation at the bottom.","params":[],"returns":{"type":"Boolean","description":"If returns <span class=\"ph uicontrol\">true</span> the list has bottom navigation."},"example":[{"code":"var lp = new GlideListProperties();\nvar Nav = lp.setHasBottomNav(true);\nvar hasNav = lp.hasBottomNav();\ngs.print(hasNav);","description":"","output":"true"}]},{"name":"hasBottomVCR","description":"Returns whether or not the page navigation controls appear in the footer of a\n    list.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the page navigation controls appear in the\n                footer of a list."},"example":[{"code":"var list = new GlideListProperties();\nvar vcr = list.setHasBottomVCR(true);\nvar hasVCR = list.hasBottomVCR();\ngs.print(hasVCR);","description":"","output":"true"}]},{"name":"hasFilter","description":"Returns whether or not a list has a filter.<p>The filter property is a parent of the breadcrumbs property. If the filter property is\n        listed as false and the breadcrumb is listed as true, <samp class=\"ph codeph\">hasFilter()</samp> still\n        returns true because the child property is marked as true.</p>","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> a filter icon appears with the list, or the\n                breadcrumb property is listed as true. If <span class=\"ph uicontrol\">false</span> both the\n                filter property and the breadcrumb property are marked as false."},"example":[{"code":"var list = new GlideListProperties();\nvar filter = list.setHasFilter(true);\nvar breadcrumbs = list.setHasBreadcrumbs(true);\nvar hasFilter = list.hasFilter();\ngs.print(hasFilter);\n","description":"","output":"true"}]},{"name":"hasHeader","description":"Returns whether or not a list has a header.","params":[],"returns":{"type":"Boolean","description":"Returns <span class=\"ph uicontrol\">true</span> if a list has a header."},"example":[{"code":"var list = new GlideListProperties();\nvar header = list.setHasHeader(true);\nvar hasHeader = list.hasHeader();\ngs.print(hasHeader);","description":"","output":"true"}]},{"name":"hasHeaderContextMenu","description":"Returns whether or not a header context menu is enabled for a list.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> a context menu displays next to each column\n                header in a list."},"example":[{"code":"var list = new GlideListProperties();\nvar header = list.setHasHeaderContextMenu(true);\nvar hasHeader = list.hasHeaderContextMenu();\ngs.print(hasHeader);","description":"","output":"true"}]},{"name":"hasListMechanic","description":"Returns whether list personalization is enabled for a list.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the list mechanic is enabled for a list and the\n                Personalize List icon appears on the page."},"example":[{"code":"var list = new GlideListProperties();\nvar mechanic = list.setHasListMechanic(true);\nvar hasMechanic = list.hasListMechanic();\ngs.print(hasMechanic);","description":"","output":"true"}]},{"name":"hasPopup","description":"Returns whether or not a list can have popup windows.","params":[],"returns":{"type":"Boolean","description":"Returns <span class=\"ph uicontrol\">true</span> if the list allows popups."},"example":[{"code":"var list = new GlideListProperties();\nvar popup = list.setHasPopup(true);\nvar hasPopup = list.hasPopup();\ngs.print(hasPopup);","description":"","output":"true"}]},{"name":"hasRowContextMenu","description":"Returns whether or not rows in a list have a context menu.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> a list row can have a context menu."},"example":[{"code":"var list = new GlideListProperties();\nvar contextMenu = list.setHasRowContextMenu(true);\nvar hasContextMenu = list.hasRowContextMenu();\ngs.print(hasContextMenu);","description":"","output":"true"}]},{"name":"hasSearch","description":"Returns whether or not the search bar is enabled for a list.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the search bar appears in the header of a\n                list."},"example":[{"code":"var list = new GlideListProperties();\nvar search = list.setHasSearch(true);\nvar hasSearch = list.hasSearch();\ngs.print(hasSearch);","description":"","output":"true"}]},{"name":"hasTitle","description":"Returns whether or not the list title appears in the list header.<p>The title context menu is a child property of title. If\n          <samp class=\"ph codeph\">setHasTitleContextMenu</samp> is set to true, <samp class=\"ph codeph\">hasTitle</samp> also\n        returns true, even if <samp class=\"ph codeph\">setHasTitle</samp> is set to false.</p>","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the list title appears in the list\n                header."},"example":[{"code":"var list = new GlideListProperties();\nvar title = list.setHasTitle(true);\nvar contextMenu = list.setHasTitleContextMenu(true);\nvar hasTitle = list.hasTitle();\ngs.print(hasTitle);\n","description":"","output":"true"}]},{"name":"hasTitleContextMenu","description":"Returns whether a context menu appears in a list header.<p>The title context menu is a child property of title. If\n          <samp class=\"ph codeph\">setHasTitleContextMenu</samp> is set to true, <samp class=\"ph codeph\">hasTitle</samp> also\n        returns true, even if <samp class=\"ph codeph\">setHasTitle</samp> is set to false.</p>","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the context menu appears in the list header next\n                to the list title."},"example":[{"code":"var list = new GlideListProperties();\nvar contextMenu = list.setHasTitleContextMenu(true);\nvar hasContextMenu = list.hasTitleContextMenu();\ngs.print(hasContextMenu);\n","description":"Optional example explanation","output":"true"}]},{"name":"hasTopVCR","description":"Returns whether or not the page navigation controls appear in the header of a\n    list.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the page navigation controls appear in the\n                header of a list."},"example":[{"code":"var list = new GlideListProperties();\nvar vcr = list.setHasTopVCR(true);\nvar hasVCR = list.hasTopVCR();\ngs.print(hasVCR);","description":"","output":"true"}]},{"name":"isOmitFilter","description":"Returns whether or not the omit filter option has been selected.<p>The ListControl omit flags take precedence in that if they are set, they negate the setting\n        of their corresponding flag. For example, if the show filter flag has been set to true, but\n        the ListControl omit filter is true, then checking hasFilter returns\n          <kbd class=\"ph userinput\">false</kbd>.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true or false whether the omit filter flag has been selected."},"example":[{"code":"var lp = new GlideListProperties();\nvar omitFilter = lp.isOmitFilter();\ngs.print(omitFilter);","description":"","output":"false"}]},{"name":"isSaveFilterHidden","description":"Returns whether the Save Filter button is hidden in the condition builder.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the Save Filter button is hidden in the\n                condition builder."},"example":[{"code":"var list = new GlideListProperties();\nvar SaveFilter = list.setSaveFilterHidden(true);\nvar hasSaveFilter = list.isSaveFilterHidden();\ngs.print(hasSaveFilter);","description":"","output":"true"}]},{"name":"isShowLinks","description":"Returns whether or not a list shows links.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar links = list.setShowLinks(true);\nvar hasLinks = list.isShowLinks();\ngs.print(hasLinks);","description":"","output":"true"}]},{"name":"isToggleHeader","description":"Returns whether or not toggling the header columns is available for a list.","params":[],"returns":{"type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> users can show or hide the column headers for a\n                table."},"example":[{"code":"var list = new GlideListProperties();\nvar toggle = list.setToggleHeader(true);\nvar hasToggle = list.isToggleHeader();\ngs.print(hasToggle);","description":"","output":"true"}]},{"name":"setCanChangeView","description":"Determine whether the user can change the view for the list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">false</span> users cannot change the list view. By default,\n                changing views is enabled."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar changeView = list.setCanChangeView(true);","description":"","output":""}]},{"name":"setCanGroup","description":"Determine whether users can group items in a list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">false</span>, the group by option does not appear in the\n                column context menu. By default the group by option appears in the list context\n                menu."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar canGroup = list.setCanGroup(true);","description":"","output":""}]},{"name":"setCanSort","description":"Determine whether the sort option is available in a list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">false</span>, the sort option does not appear in column list\n                context menu, and users cannot click the column title to change the order of the\n                list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar canSort = list.setCanSort(true);","description":"","output":""}]},{"name":"setContextMenus","description":"Displays or hides all of the available context menus for a list.","params":[{"name":"onOff","type":"Boolean","description":"If set to <span class=\"ph uicontrol\">true</span> displays the title context menu, header\n                context menu, and list context menu for a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar context = list.setContextMenus(true);","description":"","output":""}]},{"name":"setHasActions","description":"Determine whether the <span class=\"ph uicontrol\">Actions on select rows </span> options display at\n    the bottom of a list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> displays action options for a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar actions = list.setHasActions(true);","description":"","output":""}]},{"name":"setHasBottomNav","description":"Determine whether the navigation actions at the bottom of a list are hidden or not.","params":[{"name":"onOff","type":"Boolean","description":"When <span class=\"ph uicontrol\">true</span> adds navigation to the bottom of a\n                list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var lp = new GlideListProperties();\nvar bottom = lp.setHasBottomNav(true);","description":"","output":""}]},{"name":"setHasBottomVCR","description":"Determine whether the first page, last page, next page, and previous page buttons\n    appear at the bottom of the list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, the first page, last page, next page, and\n                previous page buttons appear at the bottom of the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar bottomVCR = list.setHasBottomVCR(true);","description":"","output":""}]},{"name":"setHasBreadcrumbs","description":"Determine whether or not breadcrumbs appear at the top of a list.<p>Breadcrumbs are a child of filters. To hide breadcrumbs completely, you need to also set\n        the filter to false.</p>","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> breadcrumbs appear at the top of a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar breadcrumbs = list.setHasBreadcrumbs(true);","description":"","output":""}]},{"name":"setHasFilter","description":"Determine whether or not the filter displays as part of a list.<p>The filter is a parent of breadcrumbs. To remove the filter, you need to set both the\n        filter and the breadcrumbs to false.</p>","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> a filter icon appears at the top of the list.\n                Users can use the filter to narrow search results."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar filter = list.setHasFilter(true);","description":"","output":""}]},{"name":"setHasHeader","description":"Determine whether or not a list displays a header.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the list displays a header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar header = list.setHasHeader(true);","description":"","output":""}]},{"name":"setHasHeaderContextMenu","description":"Determine whether or not the context menu appears next to each column in a\n    list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the context menu appears next to each column in\n                a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar actions = list.setHasHeaderContextMenu(true);","description":"","output":""}]},{"name":"setHasListMechanic","description":"Determine whether or not a list has the option for personalization.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the list mechanic is enabled and the Personalize\n                List icon appears on the page."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar mechanic = list.setHasListMechanic(true);","description":"","output":""}]},{"name":"setHasPopup","description":"Determine whether the list has a popup or modal window.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>the list can have popup windows."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar popup = list.setHasPopup(true);","description":"","output":""}]},{"name":"setHasRowContextMenu","description":"Determines whether or not list rows have a context menu.","params":[{"name":"onOff","type":"Boolean","description":"When <span class=\"ph uicontrol\">true</span> list rows can have a context  menu."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar contextMenu = list.setHasRowContextMenu(true);","description":"","output":""}]},{"name":"setHasSearch","description":"Determine whether search appears for a list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the search bar appears in the list\n                header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar search = list.setHasSearch(true);","description":"","output":""}]},{"name":"setHasTitle","description":"Determine whether the list title appears in the header.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the title of the list appears in the list\n                header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar title = list.setHasTitle(true);\n","description":"","output":""}]},{"name":"setHasTitleContextMenu","description":"Determine whether or not a list has a context menu in the header.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the context menu appears next to the list title\n                in the header"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar contextMenu = list.setHasTitleContextMenu(true);","description":"","output":""}]},{"name":"setHasTopVCR","description":"Determine whether or not a list has the page navigation controls in the list\n    header.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the page navigation controls appear in the\n                header of a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar vcr = list.setHasTopVCR(true);","description":"","output":""}]},{"name":"setHideRows","description":"Determine whether rows are visible in a list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> all of the rows are hidden for a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar hideRows = list.setHideRows(true);","description":"","output":""}]},{"name":"setListID","description":"Set the unique ID for a list.","params":[{"name":"Unique ID","type":"String","description":"The unique ID for the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar setID = list.setListID(\"a9dd1483d99f5700964f387107a8a3ec\");\nvar getID = list.getListID();\ngs.print(getID);","description":"","output":"a9dd1483d99f5700964f387107a8a3ec"}]},{"name":"setListName","description":"Defines a name for the list.","params":[{"name":"name","type":"String","description":"Name of the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar name = list.setListName(\"my custom list\");\n","description":"","output":""}]},{"name":"setSaveFilterHidden","description":"Determine whether the Save Filter button appears in the condition builder.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> the Save Filter button is hidden."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar saveFilter = list.setSaveFilterHidden(true);","description":"","output":""}]},{"name":"setShowLinks","description":"Whether or not a list includes links.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> list includes related links."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar links = list.setShowLinks(true);","description":"","output":""}]},{"name":"setTitle","description":"Defines the list title.","params":[{"name":"title","type":"String","description":"Title for the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar title = list.setTitle(\"My title\");","description":"","output":""}]},{"name":"setToggleHeader","description":"Determine whether users can show or hide column headers for a table.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span> an icon appears in the header that allows users\n                to show or hide the column headers."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar toggle = list.setToggleHeader(true);\n","description":"","output":""}]},{"name":"setVCR","description":"Determine whether the first page, last page, next page, and previous page buttons appear\n    at the top and bottom of the list.","params":[{"name":"onOff","type":"Boolean","description":"If <span class=\"ph uicontrol\">false</span>, the list does not have any of the page\n                navigation buttons for a list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = new GlideListProperties();\nvar VCR = list.setVCR(true);","description":"","output":""}]}]},"GlideQueryCondition":{"meta":{"has_constructor":false,"description":"The GlideQueryCondition API provides additional AND or OR conditions that can be added\n    to the current condition, allowing you to build complex queries. Build complex queries such\n      as:<pre ng-prism='' source='category=&#39;hardware&#39; OR category=&#39;software&#39; AND priority=&#39;2&#39; AND priority=&#39;1&#39;' class='language-javascript monospaceing'></pre><br/><br/>In the case of addCondition(), an implied AND is added.<br/><br/>This class has no constructor. A GlideQueryCondition object is returned by the following\n        methods:<ul class=\"ul\" id=\"c_GlideQueryConditionAPI__ul_xyz_nsg_qz\">\n        <li class=\"li\"><span class=\"keyword apiname\">addActiveQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addInactiveQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addJoinQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addNotNullQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addNullQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addQuery()</span></li>\n\n      </ul><br/><br/>If there is a complicated set of AND and OR queries, a single encoded query containing all\n      conditions simplifies the query creation. To simplify the query creation, create a query in a\n      list view, right-click the query, and select <span class=\"ph uicontrol\">Copy query</span>. It creates a\n      single encoded query string to return your result set. Use that string as a parameter in an\n        <span class=\"keyword apiname\">addEncodedQuery()</span> call.<br/><br/>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.<br/><br/>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.","example":""},"properties":{},"methods":[{"name":"addCondition","description":"Adds an AND condition to the current condition.<p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table parameters\" frame=\"border\" id=\"GQC-addCondition_S_S_O__table_vy2_525_jq\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 1. Parameters</span></caption>\n            \n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d141705e59\" valign=\"top\">Name</th>\n\n                <th class=\"entry\" id=\"d141705e62\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d141705e65\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d141705e59\" valign=\"top\">name </td>\n\n                <td class=\"entry\" headers=\"d141705e62\" valign=\"top\">String</td>\n\n                <td class=\"entry\" headers=\"d141705e65\" valign=\"top\">The name of a field.</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d141705e59\" valign=\"top\">oper</td>\n\n                <td class=\"entry\" headers=\"d141705e62\" valign=\"top\">String </td>\n\n                <td class=\"entry\" headers=\"d141705e65\" valign=\"top\">(Optional) The operator for the query. If you do not specify an operator, the\n                  condition uses an equals operator.</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d141705e59\" valign=\"top\">value</td>\n\n                <td class=\"entry\" headers=\"d141705e62\" valign=\"top\">Object</td>\n\n                <td class=\"entry\" headers=\"d141705e65\" valign=\"top\">The value to query on. </td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p><p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table returns\" frame=\"border\" id=\"GQC-addCondition_S_S_O__table_mxx_f5b_2r\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 2. Returns</span></caption>\n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d141705e129\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d141705e132\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d141705e129\" valign=\"top\">GlideQueryCondition</td>\n\n                <td class=\"entry\" headers=\"d141705e132\" valign=\"top\">A reference to a GlideQueryConditon that was added to the\n                  GlideRecord.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>","params":[{"name":"name","type":"String","description":"The name of a field."},{"name":"oper","type":"String","description":"(Optional) The operator for the query. If you do not specify an operator, the\n                  condition uses an equals operator."},{"name":"value","type":"Object","description":"The value to query on."}],"returns":{"type":"GlideQueryCondition","description":"A reference to a GlideQueryConditon that was added to the\n                  GlideRecord."},"example":[{"code":"var gr = new GlideRecord('incident');\nvar qc = gr.addQuery('category', 'Hardware');\nqc.addCondition('category', 'Network');\ngr.addQuery('number','INC0000003');\ngr.next();\ngr.number;\ngs.info(gr.getEncodedQuery());","description":"","output":""}]},{"name":"addOrCondition","description":"Appends a 2-or-3 parameter OR condition to an existing GlideQueryCondition.<p><span class=\"keyword apiname\">addOrCondition()</span> works in conjunction with any of the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideRecordAddQuery_String_String_Object&amp;v=madrid\" target=\"_blank\">addQuery()</a>methods to <samp class=\"ph codeph\">OR</samp> the specified query parameters to\n        the query previously constructed using <span class=\"keyword apiname\">addQuery()</span>.</p><p><span class=\"keyword apiname\">addOrCondition()</span> is typically called with three parameters; table field,\n        operator, and comparison value. It can be called with only two parameters, table field and\n        comparison value, such as <samp class=\"ph codeph\">qc.addOrCondition('category', 'software');</samp>. The\n        operator in this case is assumed to be \"equal to\".</p><p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table parameters\" frame=\"border\" id=\"GQC-addOrCondition_S_S_O__table_vy2_525_jq\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 1. Parameters</span></caption>\n            \n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d142009e82\" valign=\"top\">Name</th>\n\n                <th class=\"entry\" id=\"d142009e85\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d142009e88\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d142009e82\" valign=\"top\">name </td>\n\n                <td class=\"entry\" headers=\"d142009e85\" valign=\"top\">String</td>\n\n                <td class=\"entry\" headers=\"d142009e88\" valign=\"top\">Field name</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d142009e82\" valign=\"top\">oper</td>\n\n                <td class=\"entry\" headers=\"d142009e85\" valign=\"top\">String </td>\n\n                <td class=\"entry\" headers=\"d142009e88\" valign=\"top\">(Optional) Query operator. The available values are dependent on the data\n                  type of the <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"GQC-addOrCondition_S_S_O__ul_qyb_rbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">&gt;</li>\n\n                      <li class=\"li\">&gt;=</li>\n\n                      <li class=\"li\">&lt;</li>\n\n                      <li class=\"li\">&lt;=</li>\n\n                    </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"GQC-addOrCondition_S_S_O__ul_egz_vbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">IN</li>\n\n                      <li class=\"li\">STARTSWITH</li>\n\n                      <li class=\"li\">ENDSWITH</li>\n\n                      <li class=\"li\">CONTAINS</li>\n\n                      <li class=\"li\">DOESNOTCONTAIN</li>\n\n                    </ul>\n</div>\n</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d142009e82\" valign=\"top\">value</td>\n\n                <td class=\"entry\" headers=\"d142009e85\" valign=\"top\">Object</td>\n\n                <td class=\"entry\" headers=\"d142009e88\" valign=\"top\">Value on which to query (not case-sensitive).<div class=\"note note\"><span class=\"notetitle\">Note:</span> All passed in arrays must\n                    contain a minimum of two elements. Single element arrays are not\n                    supported.</div>\n</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p><p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table returns\" frame=\"border\" id=\"GQC-addOrCondition_S_S_O__table_w2h_w2c_2r\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 2. Returns</span></caption>\n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d142009e206\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d142009e209\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d142009e206\" valign=\"top\">GlideQueryCondition</td>\n\n                <td class=\"entry\" headers=\"d142009e209\" valign=\"top\">A reference to a GlideQueryConditon that was added to the\n                  GlideRecord.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>","params":[{"name":"name","type":"String","description":"Field name"},{"name":"oper","type":"String","description":"(Optional) Query operator. The available values are dependent on the data\n                  type of the <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"GQC-addOrCondition_S_S_O__ul_qyb_rbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">&gt;</li>\n\n                      <li class=\"li\">&gt;=</li>\n\n                      <li class=\"li\">&lt;</li>\n\n                      <li class=\"li\">&lt;=</li>\n\n                    </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"GQC-addOrCondition_S_S_O__ul_egz_vbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">IN</li>\n\n                      <li class=\"li\">STARTSWITH</li>\n\n                      <li class=\"li\">ENDSWITH</li>\n\n                      <li class=\"li\">CONTAINS</li>\n\n                      <li class=\"li\">DOESNOTCONTAIN</li>\n\n                    </ul>\n</div>"},{"name":"value","type":"Object","description":"Value on which to query (not case-sensitive).<div class=\"note note\"><span class=\"notetitle\">Note:</span> All passed in arrays must\n                    contain a minimum of two elements. Single element arrays are not\n                    supported.</div>"}],"returns":{"type":"GlideQueryCondition","description":"A reference to a GlideQueryConditon that was added to the\n                  GlideRecord."},"example":[{"code":"var gr = new GlideRecord('incident');\nvar qc = gr.addQuery('category', 'Hardware');\nqc.addOrCondition('category', 'Network');\ngr.addQuery('number','INC0000003');\ngr.next();\ngr.number;\ngs.info(gr.getEncodedQuery());\n","description":"","output":""},{"code":"var myObj = new GlideRecord('incident');\nvar q1 = myObj.addQuery('state', '&lt;', 3);\nq1.addOrCondition('state', '&gt;', 5);\nvar q2 = myObj.addQuery('priority', 1);\nq1.addOrCondition('priority', 5);\nmyObj.query();","description":"To group AND/OR statements such as <samp class=\"ph codeph\">(state &lt; 3 OR state &gt; 5) AND (priority = 1 OR\n          priority = 5)</samp> use code similar to the following:","output":""}]}]},"GlideRecord":{"meta":{"has_constructor":true,"description":"GlideRecord is used for database operations. A GlideRecord contains both records and fields. For information about GlideRecordSecure, which\n   is a class inherited from GlideRecord that performs the same functions as GlideRecord, and also\n   enforces ACLs, see the <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/script/glide-server-apis/topic/p_GlideServerAPIs.html\" target=\"_blank\">GlideServer APIs</a>.<br/><br/>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.<br/><br/>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideRecord class for the specified table.","params":[{"name":"tableName","type":"String","description":"The table to be used."}],"returns":{"type":"","description":""},"example":[{"code":"var gr = new GlideRecord('incident');","description":"","output":""}]},{"name":"addActiveQuery","description":"Adds a filter to return active records.","params":[],"returns":{"type":"QueryCondition","description":"Filter to return active records."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.addActiveQuery();\ninc.query();","description":"","output":""}]},{"name":"addDomainQuery","description":"Changes the domain used for the query from the user's domain to the domain of the\n    provided GlideRecord.<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p><p>This function requires the Domain Support -\n        Domain Extensions Installer (com.glide.domain.msp_extensions.installer) plugin.</p>","params":[{"name":"glideRecord","type":"Object","description":"GlideRecord from which to obtain the domain."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//This example requires the Domain plugin be active, the Group table is the specified \n//Domain table, and the ITIL user is in the Database Atlanta domain\n//From any domain (using queryNoDomain()) look up the incidents that an ITIL user can only see \n//who is in the Database Atlanta domain, should expect all incidents with the global or the\n//Database Atlanta domain specified.\nvar domain = new GlideRecord('sys_user');\ndomain.addQuery('user_name', 'itil');\ndomain.queryNoDomain();\nif (domain.next()) {\n    var domainQuery = new GlideRecord('incident');\n    domainQuery.addQuery('active', true);\n    domainQuery.addDomainQuery(domain);\n    domainQuery.query();\n    gs.print('Number of Incidents for ITIL user: ' + domainQuery.getRowCount());\n    while (domainQuery.next())\n        gs.print(domainQuery.number);\n}","description":"","output":""}]},{"name":"addEncodedQuery","description":"Adds an encoded query to other queries that may have been set.<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"query","type":"String","description":"An <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">encoded query\n                  string</a>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var queryString = \"priority=1^ORpriority=2\";\n var gr = new GlideRecord('incident');\n \n gr.addEncodedQuery(queryString);\n gr.query();\n while (gr.next()) {\n   gs.addInfoMessage(gr.number);\n }","description":"","output":""}]},{"name":"addFunction","description":"Applies a pre-defined GlideDBFunctionBuilder object to a record.<p>Use the GlideDBFunctionBuilder scoped class to define a function. After the function is\n        defined, use the <span class=\"keyword apiname\">addFunction(Object function)</span> method to apply the\n        function to a record.</p>","params":[{"name":"function","type":"Object","description":"A GlideDBFunctionBuilder object that defines a SQL operation."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();\n\nvar gr = new GlideRecord('incident');\ngr.addFunction(myAddingFunction);\ngr.addQuery(myAddingFunction, '&lt;', 5);\ngr.query();\nwhile(gr.next())\ngs.log(gr.getValue(myAddingFunction));\n","description":"","output":"*** Script: 1\n*** Script: 4\n*** Script: 3\n*** Script: 1\n*** Script: 1\n*** Script: 2\n*** Script: 1\n*** Script: 1"}]},{"name":"addInactiveQuery","description":"Adds a filter to return inactive records. Inactive records have the active flag set to\n    false.","params":[],"returns":{"type":"QueryCondition","description":"Records where the active flag is false."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.addInactiveQuery();\ninc.query();","description":"","output":""}]},{"name":"addJoinQuery","description":"Adds a filter to return records based on a relationship in a related table.<p>For example, find all the users that are in the database group (users via sys_user_grmember\n        table). Another example would be find all problems that have an assigned incident (problems\n        via the incident.problem_id relationship).</p><p>This is not a true database join; rather, <span class=\"keyword apiname\">addJoinQuery()</span> adds a\n        subquery. So, while the result set is limited based on the join, the only fields that you\n        have access to are those on the base table (those which are in the table with which the\n        GlideRecord was initialized).</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"table","type":"String","description":"Table name"}],"returns":{"type":"QueryCondition","description":"Records where the relationships match."},"example":[{"code":"var prob = new GlideRecord('problem');\nprob.addJoinQuery('incident');\nprob.query();","description":"Find problems that have an incident attached. This example returns problems that have\n        associated incidents. However, it won't pull values from the incidents that are returned as\n        a part of the query.","output":""},{"code":"// Look for Problem records\nvar gr = new GlideRecord('problem');\n \n// That have associated Incident records\nvar grSQ = gr.addJoinQuery('incident');\n \n// Where the Problem records are \"active=false\"\ngr.addQuery('active', 'false');\n \n// And the Incident records are \"active=true\"\ngrSQ.addCondition('active', 'true');\n \n// Query\ngr.query();\n \n// Iterate and print results\nwhile (gr.next()) {\n    gs.print(gr.getValue('number'));\n}","description":"Find active=false problems with associated incidents.","output":""}]},{"name":"addJoinQuery","description":"Adds a filter to return records based on a relationship in a related table.<p>For example, find all the users that are in the database group (users via sys_user_grmember\n        table). Another example would be find all problems that have an assigned incident (problems\n        via the incident.problem_id relationship).</p><p>This is not a true database join; rather, <span class=\"keyword apiname\">addJoinQuery()</span> adds a\n        subquery. So, while the result set is limited based on the join, the only fields that you\n        have access to are those on the base table (those which are in the table with which the\n        GlideRecord was initialized).</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"table","type":"String","description":"Table name"},{"name":"primaryField","type":"String","description":"If other than sys_id, the primary field."}],"returns":{"type":"QueryCondition","description":"Records where the relationships match."},"example":[]},{"name":"addJoinQuery","description":"Adds a filter to return records based on a relationship in a related table.<p>For example, find all the users that are in the database group (users via sys_user_grmember\n        table). Another example would be find all problems that have an assigned incident (problems\n        via the incident.problem_id relationship).</p><p>This is not a true database join; rather, <span class=\"keyword apiname\">addJoinQuery()</span> adds a\n        subquery. So, while the result set is limited based on the join, the only fields that you\n        have access to are those on the base table (those which are in the table with which the\n        GlideRecord was initialized).</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"table","type":"String","description":"Table name"},{"name":"primaryField","type":"String","description":"If other than sys_id, the primary field."},{"name":"joinTableField","type":"String","description":"If other than sys_id, the field that joins the tables"}],"returns":{"type":"QueryCondition","description":"Records where the relationships match."},"example":[{"code":"var gr = new GlideRecord('problem'); \ngr.addJoinQuery('incident', 'opened_by', 'caller_id'); \ngr.query();","description":"Find problems that have incidents associated where the incident caller_id field value\n        matches that of the problem opened_by field.","output":""}]},{"name":"addNotNullQuery","description":"Adds a filter to return records where the specified field is not null.","params":[{"name":"fieldName","type":"String","description":"The field name."}],"returns":{"type":"QueryCondition","description":"QueryCondition of records where the parameter field is not null."},"example":[{"code":"var target = new GlideRecord('incident'); \n  target.addNotNullQuery('short_description');\n  target.query();   // Issue the query to the database to get all records\n  while (target.next()) {   \n     // add code here to process the incident record\n  }","description":"","output":""}]},{"name":"addNullQuery","description":"Adds a filter to return records where the specified field is null.","params":[{"name":"fieldName","type":"String","description":"The field name."}],"returns":{"type":"QueryCondition","description":"QueryCondition of records where the specified field is null."},"example":[{"code":"var target = new GlideRecord('incident'); \n  target.addNullQuery('short_description');\n  target.query();   // Issue the query to the database to get all records\n  while (target.next()) {   \n     // add code here to process the incident record\n  }","description":"","output":""}]},{"name":"addQuery","description":"Provides the ability to build a request, which when executed, returns the rows from the\n    specified table that match the request.<p>If you are familiar with SQL, this method is similar to the \"where\" clause. One or more\n          <span class=\"keyword apiname\">addQuery()</span> calls can be made in a single query; for this method the\n        queries are AND'ed. If any of the query statements need to be OR'ed, use the class <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=c_GlideQueryConditionAPI&amp;v=madrid\" target=\"_blank\">GlideQueryCondition</a>.</p><p><span class=\"keyword apiname\">addQuery()</span> is typically called with three parameters; table field,\n        operator, and comparison value.  It can be called with only two parameters, table field and\n        comparison value, such as <samp class=\"ph codeph\">myObj.addQuery('category','Hardware');</samp>. The\n        operator in this case is assumed to be \"equal to\".</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"name","type":"String","description":"Table field name"},{"name":"operator","type":"Object","description":"Query operator. The available values are dependent on the data type of the\n                  <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_GlideRecord-AddQuery_String_Object_Object__ul_qyb_rbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">&gt;</li>\n\n                    <li class=\"li\">&gt;=</li>\n\n                    <li class=\"li\">&lt;</li>\n\n                    <li class=\"li\">&lt;=</li>\n\n                  </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_GlideRecord-AddQuery_String_Object_Object__ul_egz_vbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">IN</li>\n\n                    <li class=\"li\">NOT IN</li>\n\n                    <li class=\"li\">STARTSWITH</li>\n\n                    <li class=\"li\">ENDSWITH</li>\n\n                    <li class=\"li\">CONTAINS</li>\n\n                    <li class=\"li\">DOES NOT CONTAIN</li>\n\n                    <li class=\"li\">INSTANCEOF</li>\n\n                  </ul>\n</div>"},{"name":"value","type":"Object","description":"Value on which to query (not case-sensitive)."}],"returns":{"type":"QueryCondition","description":"A reference to the QueryCondition that was added to the GlideRecord."},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.addQuery('active',true);\nrec.addQuery('sys_created_on', \"&gt;\", \"2010-01-19 04:05:00\");\nrec.query();\nwhile (rec.next()) { \n rec.active = false;\n gs.print('Active incident ' + rec.number + ' closed');\n rec.update();\n}","description":"","output":""},{"code":"var que = new GlideRecord('incident');\nque.addQuery('number','IN','INC00001,INC00002');\nque.query();\nwhile(que.next()) {\n //do something....\n}","description":"Using the IN operator.","output":""}]},{"name":"applyTemplate","description":"Apply a template record (from sys_template) to the current record. If the specified\n    template is not found, no action is taken.","params":[{"name":"template","type":"String","description":"Name of a template from the sys_template table"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec1 = new GlideRecord(\"incident\");\nrec1.initialize();\nrec1.applyTemplate(\"my_incident_template\");\n//...possibly more code here... \n\nrec1.insert();\n","description":"","output":""}]},{"name":"autoSysFields","description":"Enables or disables the update to the fields sys_updated_by, sys_updated_on,\n    sys_mod_count, sys_created_by, and sys_created_on. This is often used for manually updating\n    field values on a record while leaving historical information unchanged.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span>  This is not available for scoped apps, starting with the Fuji release. See the Scoped\n          GlideRecord API Reference for a list of what APIs are available for scoped apps.</div></p><p><div class=\"cautiontitle\">CAUTION:</div><div class=\"note caution\">Use caution if you use this method. When you use this method the\n          sys_mod_count field will not be incremented, and other sys_ fields will not be updated.\n          This can break functionality including, but not limited to, the Activity Formatter,\n          History Sets, and Metrics.</div></p>","params":[{"name":"e","type":"Boolean","description":"If false disables updates to sys_updated_by, sys_updated_on, sys_mod_count,\n                sys_created_by, and sys_created_on."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var inc = new GlideRecord('incident');\n \n// Change all Open(1) incidents to Active(2)\n \ninc.addQuery('state', 1);\ninc.query();\n \nwhile (inc.next()) {\n  inc.autoSysFields(false);  // Do not update sys_updated_by, sys_updated_on, sys_mod_count, sys_created_by, and sys_created_on\n  inc.setWorkflow(false);    // Do not run any other business rules\n  inc.setValue('state', 2);\n  inc.update();\n}","description":"","output":""}]},{"name":"canCreate","description":"Determines if the access control rules (which includes the user's role) permit\n    inserting new records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit creating of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_GlideRecord-CanCreate__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Creating permitted</li>\n\n                    <li class=\"li\">false: Creating is not permitted</li>\n\n                  </ul>\n</div>"},"example":[]},{"name":"canDelete","description":"Determines if the access control rules (which includes the user's role) permit deletion\n    of records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit deleting of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_GlideRecord-CanDelete__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Deleting permitted</li>\n\n                    <li class=\"li\">false: Deleting is not permitted</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var att = new GlideRecord('sys_attachment');\natt.get('$[sys_attachment.sys_id]');\nvar sm = GlideSecurityManager.get();\nvar checkMe = 'record/sys_attachment/delete';\nvar canDelete = sm.hasRightsTo(checkMe, att);\ngs.log('canDelete: ' + canDelete);","description":"","output":""}]},{"name":"canRead","description":"Determines if the access control rules (which includes the user's role) permit reading\n    this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit reading of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_GlideRecord-CanRead__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Reading permitted</li>\n\n                    <li class=\"li\">false: Reading is not permitted</li>\n\n                  </ul>\n</div>"},"example":[]},{"name":"canWrite","description":"Determines if the access control rules (which includes the user's role) permit updates\n    to records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit writing of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_GlideRecord-CanWrite__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Writing permitted</li>\n\n                    <li class=\"li\">false: Writing is not permitted</li>\n\n                  </ul>\n</div>"},"example":[]},{"name":"changes","description":"Determines whether any of the fields in the record have changed.","params":[],"returns":{"type":"Boolean","description":"True if any of the fields in the record have changed, false otherwise."},"example":[]},{"name":"deleteMultiple","description":"Deletes multiple records according to the current \"where\" clause.<p>This method does not delete attachments.</p><p>Dot-walking is not supported for this method. When using the\n          <span class=\"keyword apiname\">deleteMultiple()</span> function on referenced tables, all the records in the\n        table are deleted. Also, when using <span class=\"keyword apiname\">deleteRecord()</span> to cascade delete,\n        prior calls to <span class=\"keyword apiname\">setWorkflow()</span> on the same GlideRecord object are ignored.</p><p>Do not use <span class=\"keyword apiname\">deleteMultiple()</span> on tables with currency fields. Always\n        delete each record individually. Also, do not use this method with the\n          <span class=\"keyword apiname\">chooseWindow()</span> or <span class=\"keyword apiname\">setLimit()</span> methods when working\n        with large tables.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function nukeCart() {\n  var cart = getCart();\n  var id = cart.sys_id;\n  var kids = new GlideRecord('sc_cart_item');\n  kids.addQuery('cart', cart.sys_id);\n  kids.deleteMultiple();\n}","description":"","output":""}]},{"name":"deleteRecord","description":"Deletes a single record.<p><span class=\"notetitle\">Note:</span> When using <span class=\"keyword apiname\">deleteMultiple()</span> to cascade delete, prior calls to\n          <span class=\"keyword apiname\">setWorkflow()</span> on the same GlideRecord object are ignored.</p>","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the record was successfully deleted.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_GlideRecord-deleteRecord__ul_hkn_5bj_s3b\">\n                    <li class=\"li\">true: Record was deleted.</li>\n\n                    <li class=\"li\">false: No record was found to delete.</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.addQuery('active',false);\nrec.query();\nwhile (rec.next()) { \n gs.print('Inactive incident ' + rec.number + ' deleted');\n rec.deleteRecord();\n}","description":"","output":""}]},{"name":"find","description":"Returns true if any record has a matching value in the specified column. If found, it\n    also moves to the first record that matches, essentially executing <span class=\"keyword apiname\">next()</span>\n    until the record is returned.","params":[{"name":"columnName","type":"String","description":"Specifies the field name."},{"name":"value","type":"String","description":"Specifies the value to check for in the specified field."}],"returns":{"type":"Boolean","description":"True if any record has a matching value in the specified field."},"example":[]},{"name":"get","description":"Returns the specified record in an instantiated GlideRecord object.<p>This method accepts either one or two parameters. If only a single parameter is passed in,\n        the method assumes it is the sys_id of the desired record. If two parameters are passed in,\n        the first is the name of the column within the instantiated GlideRecord to search. The\n        second is the value to search for.</p><p>If multiple records are found, use <span class=\"keyword apiname\">next()</span> to access the additional\n        records.</p>","params":[{"name":"name","type":"Object","description":"Optional. Name of the instantiated GlideRecord column to search for the\n                specified <span class=\"keyword parmname\">value</span> parameter. If only a single parameter is passed\n                in, the method assumes that this parameter is sys_id."},{"name":"value","type":"Object","description":"Value to match."}],"returns":{"type":"Boolean","description":"Indicates whether the requested record was located:<ul class=\"ul\" id=\"r_GlideRecord-get_Object_Object__ul_ngs_clw_qfb\">\n                  <li class=\"li\">true: record was found</li>\n\n                  <li class=\"li\">false: record was not found</li>\n\n                </ul>"},"example":[{"code":"var grIncident = new GlideRecord('incident');\nvar returnValue = grIncident.get('99ebb4156fa831005be8883e6b3ee4b9');\ngs.info(returnValue); // logs true or false\ngs.info(grIncident.number); // logs Incident Number","description":"","output":""},{"code":"var grIncident = new GlideRecord('incident');\nvar returnValue = grIncident.get('caller_id.name','Sylivia Wayland');\ngs.info(returnValue); // logs true or false\ngs.info(grIncident.number); // logs Incident Number","description":"","output":""}]},{"name":"getAttribute","description":"Returns the dictionary attributes on the specified field.","params":[{"name":"fieldName","type":"String","description":"Field name for which to return the dictionary attributes"}],"returns":{"type":"String","description":"Dictionary attributes"},"example":[{"code":"doit();\nfunction doit() {\n  var gr = new GlideRecord('sys_user');\n  gr.query(\"user_name\",\"admin\");\n  if (gr.next()) {\n    gs.print(\"we got one\");\n    gs.print(gr.location.getAttribute(\"tree_picker\"));\n  }\n}","description":"","output":""}]},{"name":"getClassDisplayValue","description":"Returns the table's label.","params":[],"returns":{"type":"String","description":"The table's label"},"example":[]},{"name":"getDisplayValue","description":"Retrieves the display value for the current record.","params":[],"returns":{"type":"String","description":"Display value for the current record"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.get('sys_id','ef43c6d40a0a0b5700c77f9bf387afe3');\ngs.info(gr.getDisplayValue());","description":"","output":""}]},{"name":"getED","description":"Returns the element's descriptor.","params":[],"returns":{"type":"GlideElementDescriptor","description":"The element's descriptor"},"example":[{"code":"var totalCritical  = 0;\nvar filledCritical = 0;\nvar fields         = current.getFields();\n \ngs.print(fields);\n \nfor (var num = 0; num &lt; fields.size(); num++) {\n \n\tgs.print(\"RUNNING ARRAY VALUE \" + num);\n \n\tvar ed = fields.get(num).getED();\n \n\tif(ed.hasAttribute(\"tiaa_critical\")) {\n\t\tgs.print(\"CRITICAL FIELD FOUND\");\n\t\ttotalCritical ++;\n \n\t\tif (!fields.get(num).isNil()) {\n\t\t\tfilledCritical ++;\n\t\t}\n\t}\n \n}\n \nvar answer = 0;\ngs.print(\"TOTAL - \" + totalCritical);\ngs.print(\"FILLED - \" + filledCritical);\n \nif (filledCritical &gt; 0 &amp;&amp; totalCritical &gt; 0) {\n \n\tvar pcnt = (filledCritical/totalCritical)*100;\n\tanswer = pcnt.toFixed(2);;\n \n}\n \nanswer;","description":"","output":""}]},{"name":"getElement","description":"Retrieves the GlideElement for a specified field.","params":[{"name":"fieldName","type":"String","description":"A field name"}],"returns":{"type":"GlideElement","description":"A GlideElement object"},"example":[]},{"name":"getEncodedQuery","description":"Retrieves the encoded query as a string.","params":[],"returns":{"type":"String","description":"The encoded query"},"example":[]},{"name":"getEscapedDisplayValue","description":"Retrieves the field value for the display field of the current record and adds escape\n    characters for use in Jelly scripts.","params":[],"returns":{"type":"String","description":"Escaped value of display field."},"example":[]},{"name":"getFields","description":"Retrieves a Java ArrayList of fields in the current record.","params":[],"returns":{"type":"Java ArrayList","description":"Fields in the current record"},"example":[{"code":"// This can be run in \"Scripts - Background\" for demonstration purposes\n \n// Get a single incident record\nvar grINC = new GlideRecord('incident');\ngrINC.query();\ngrINC.next();\ngs.print('Using ' + grINC.getValue('number'));\ngs.print('');\n \n// getFields() returns a Java ArrayList\nvar fields = grINC.getFields();\n \n// Enumerate GlideElements in the GlideRecord object that have values\ngs.print('Enumerating over all fields with values:');\nfor (var i = 0; i &lt; fields.size(); i++) {\n  var glideElement = fields.get(i);\n  if (glideElement.hasValue()) {\n    gs.print('  ' + glideElement.getName() + '\\t' + glideElement);\n  }\n}\ngs.print('');\n \n// Get a specific GlideElement: number\ngs.print('Getting the number field:');\nfor (var i = 0; i &lt; fields.size(); i++) {\n  var glideElement = fields.get(i);\n  if (glideElement.hasValue() &amp;&amp; glideElement.getName() == 'number') {\n    gs.print('  ' + glideElement.getName() + '\\t' + glideElement);\n  }\n}","description":"","output":""}]},{"name":"getLabel","description":"Retrieves the field's label.","params":[],"returns":{"type":"String","description":"The field's label"},"example":[{"code":"template.print(\"Summary of Requested items:\\n\");  \nvar gr = new GlideRecord(\"sc_req_item\");\ngr.addQuery(\"request\", current.sysapproval);\ngr.query();\nwhile(gr.next()) {\n    var nicePrice = gr.price.toString();\n    if (nicePrice != '') {\n        nicePrice = parseFloat(nicePrice);\n        nicePrice = nicePrice.toFixed(2);\n    }\n    template.print(gr.number + \":  \" + gr.quantity + \" X \" + gr.cat_item.getDisplayValue() \n                     + \" at $\" + nicePrice + \" each \\n\");\n    template.print(\"    Options:\\n\");\n    for (key in gr.variables) {\n      var v = gr.variables[key];\n      if(v.getGlideObject().getQuestion().getLabel() != '') {\n         template.space(4);\n         template.print('     ' +  v.getGlideObject().getQuestion().getLabel() + \" = \" \n                     + v.getDisplayValue() + \"\\n\");  \n      }\n    }\n}","description":"","output":""}]},{"name":"getLink","description":"Retrieves the link for the current record.","params":[{"name":"noStack","type":"Boolean","description":"If true, the link generated will not append\n                  <samp class=\"ph codeph\">&amp;sysparm_stack=[tablename]_list.do? sysparm_query=active=true</samp>\n                to the end of the URL; if false, the link will. Leaving the parameter empty defaults\n                to false."}],"returns":{"type":"String","description":"A URL"},"example":[{"code":"//Check for attachments and add link if there are any\n  var attachment_link = '';\n  var rec = new GlideRecord('sc_req_item');\n  rec.addQuery('sys_id', current.request_item);\n  rec.query();\n  if(rec.next()){\n    if(rec.hasAttachments()){\n      attachment_link = gs.getProperty('glide.servlet.uri') + rec.getLink();\n    }   \n  }","description":"","output":""}]},{"name":"getLocation","description":"Retrieves the current row number.","params":[{"name":"b","type":"Boolean","description":" "}],"returns":{"type":"Number","description":"The row number of the current record"},"example":[]},{"name":"getPlural","description":"Retrieves the plural label of the GlideRecord table.<p>For example, if the table name is \"Change Request,\" this method returns \"Change\n        Requests.\"</p>","params":[],"returns":{"type":"String","description":"The plural label of the GlideRecord's table."},"example":[]},{"name":"getRecordClassName","description":"Retrieves the class (table) name for the current record.","params":[],"returns":{"type":"String","description":"Class or table name"},"example":[{"code":"function TaskAssignmentFilter() {\n  var classname = current.getRecordClassName();\n  var filter = \"type=null\";\n  if (classname == \"incident\" &amp;&amp; current.category == \"database\") {\n    filter = GetGroupFilter(\"database\");\n  }\n  else {\n    // append exclusion for 'catalog' to the filter\n    var cat = new GlideRecord(\"sys_user_group_type\");  \n    cat.addQuery(\"name\", \"catalog\");\n    cat.query();\n    if (cat.next()) {\n      filter += \"^ORtype!=\" + cat.sys_id;\n    }\n  }\n  gs.log(\"TaskAssignmentFilter: \" + filter);\n  return filter;\n}","description":"","output":""}]},{"name":"getRelatedLists","description":"Retrieves a list of names and display values of tables that refer to the current\n    record.","params":[{"name":"Boolean","type":"b","description":" "}],"returns":{"type":"HashMap","description":"Hash map with names and display values of related tables."},"example":[]},{"name":"getRelatedTables","description":"Retrieves a list of names and display values of tables that are referred to by the\n    current record.","params":[{"name":"b","type":"Boolean","description":" "}],"returns":{"type":"HashMap","description":"Hash map with names and display values of related tables."},"example":[]},{"name":"getRowCount","description":"Retrieves the number of rows in the GlideRecord object.<p><span class=\"notetitle\">Note:</span> This method should not be used in a production environment as it creates a heavy load on\n        the system. Instead, use <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=c_GlideAggregateAPI&amp;v=madrid\" target=\"_blank\">GlideAggregate()</a>.</p>","params":[],"returns":{"type":"Number","description":"Number of rows."},"example":[]},{"name":"getRowNumber","description":"Retrieves the row number set by saveLocation() or setLocation().<p>To get the current row number, use getLocation().</p>","params":[],"returns":{"type":"Number","description":"The saved row number."},"example":[]},{"name":"getTableName","description":"Retrieves the table name associated with this GlideRecord.","params":[],"returns":{"type":"String","description":"A table name"},"example":[{"code":"gs.log('Table: ' + current.getTableName()); \ngs.log('Parent: ' + current.parent.sys_id); \nvar item = new GlideRecord('sc_req_item'); \nitem.addQuery('sys_id', current.parent.sys_id); \nitem.query(); \nif(item.next()){ \n  for(var variable in item.variable_pool) { gs.log(variable); \n  var answer = eval (\"item.variable_pool.\" + variable + \".getDisplayValue()\");\ngs.log(answer);}\n}","description":"","output":""}]},{"name":"getValue","description":"Retrieves the string value of an underlying element in a field.","params":[{"name":"fieldName","type":"String","description":"Name of a field"}],"returns":{"type":"String","description":"The string value of the underlying element. Returns null if the field is empty,\n                or the field does not exist."},"example":[]},{"name":"hasAttachments","description":"Determines if the current record has any attachments.","params":[],"returns":{"type":"Boolean","description":"True if the current record has attachments, false otherwise."},"example":[{"code":"//Check for attachments and add link if there are any\n  var attachment_link = '';\n  var rec = new GlideRecord('sc_req_item');\n  rec.addQuery('sys_id', current.request_item);\n  rec.query();\n  if(rec.next()){\n    if(rec.hasAttachments()){\n      attachment_link = gs.getProperty('glide.servlet.uri') + rec.getLink();\n    }    \n  }","description":"","output":""}]},{"name":"hasNext","description":"Determines if there are any more records in the GlideRecord.<p>Consistency across all API ref topics is critical. Follow the template exactly or the\n        importer script will fail.</p>","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query set."},"example":[{"code":"if (gr.hasNext()) {\n  dothis(); // found it, do it\n} else {\n  dothat(); // didn't find it\n}\n;","description":"","output":""}]},{"name":"initialize","description":"Creates an empty record suitable for population before an insert.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('to_do');\ngr.initialize(); \ngr.name = 'first to do item'; \ngr.description = 'learn about GlideRecord'; \ngr.insert();","description":"","output":""}]},{"name":"insert","description":"Inserts a new record using the field values that have been set for the current\n    record.","params":[],"returns":{"type":"String","description":"The sys_id of the inserted record, or null if the record is not\n                inserted."},"example":[{"code":"var gr = new GlideRecord('to_do');\ngr.initialize(); \ngr.name = 'first to do item'; \ngr.description = 'learn about GlideRecord'; \ngr.insert();","description":"","output":""}]},{"name":"insertWithReferences","description":"Inserts a new record and also inserts or updates any related records with the provided\n    information.","params":[],"returns":{"type":"String","description":"sys_id of the inserted record or null if the record was not inserted."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.initialize();\ninc.short_description = 'New incident 1';\ninc.caller_id.first_name = 'John';\ninc.caller_id.last_name = 'Doe';\ninc.insertWithReferences();","description":"If a reference value is not specified (as below), then a new user record is created with\n        the provided first_name and last_name, and the caller_id value is set to this newly created\n        sys_user record. The result is a new sys_user record with the provided first_name and\n        last_name and a new incident record with the provided short_description and caller_id.","output":""},{"code":"var inc = new GlideRecord('incident');\ninc.initialize();\ninc.short_description = 'New incident 1';\ninc.caller_id.setDisplayValue('David Loo');\ninc.caller_id.first_name = 'John';\ninc.caller_id.last_name = 'Doe';\ninc.insertWithReferences();","description":"If a caller_id value is specified, then that caller_id is updated with the provided\n        first_name and last_name. The result is a newly created incident record with values set for\n        short_description and caller_id.","output":""}]},{"name":"instanceOf","description":"Checks a table for the type\\class of table.","params":[{"name":"className","type":"String","description":"Name of a type or class of record."}],"returns":{"type":"Boolean","description":"True if table is an instance of the specified class."},"example":[]},{"name":"isNewRecord","description":"Determines whether the current record has been inserted into the database. This method\n    returns true only if the <span class=\"keyword apiname\">newRecord()</span> method has been called. This method is\n    useful for scripted ACL, and in the condition of UI actions, but should not be used in\n    background scripts.<p><span class=\"notetitle\">Note:</span> This method returns true for any new record during a business rule, or if the\n          <span class=\"keyword apiname\">newRecord()</span> method is used to initialize a record with default values\n        and a unique ID (sys_id). In all other cases, it returns false.</p>","params":[],"returns":{"type":"Boolean","description":"True if the current record is new (has not been inserted into the\n                database.)"},"example":[{"code":"answer = gs.hasRole(\"filter_admin\") || current.isNewRecord()","description":"","output":""}]},{"name":"isValid","description":"Determines if the table exists.","params":[],"returns":{"type":"Boolean","description":"True if the table is valid or if the record was successfully fetched, false\n                otherwise."},"example":[{"code":"var testTable = new GlideRecord('incident');\ngs.print(testTable.isValid());","description":"","output":""}]},{"name":"isValidField","description":"Determines if the specified field is defined in the current table.","params":[{"name":"fieldName","type":"String","description":"Name of a field."}],"returns":{"type":"Boolean","description":"True if the field is valid, false otherwise."},"example":[]},{"name":"isValidRecord","description":"Determines if the current record is valid.","params":[],"returns":{"type":"Boolean","description":"True if the current record is valid or false if past the end of the record set."},"example":[]},{"name":"newRecord","description":"Creates a GlideRecord, set the default values for the fields and assign a unique id to\n    the record.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"next","description":"Moves to the next record in the GlideRecord.<p>Use this method to iterate through the records returned by a GlideRecord query.</p><p><span class=\"notetitle\">Note:</span> This method fails if there is a field in the table called \"next\". If that is the case,\n        use the method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_GlideRecord-_next&amp;v=newyork\" target=\"_blank\">_next()</a>.</p><p><span class=\"notetitle\">Note:</span> The <samp class=\"ph codeph\">if(myObj.next())</samp> construct only processes the first record\n        returned.</p>","params":[],"returns":{"type":"Boolean","description":"Flag that indicates if there is a \"next\" record in the GlideRecord. <div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_GlideRecord-next__ul_anq_km4_s3b\">\n                    <li class=\"li\">true: Move to the next record was successful.</li>\n\n                    <li class=\"li\">false: No more records in the result set.</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) { \n  gs.print(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"operation","description":"Retrieves the current operation being performed, such as insert, update, delete,\n    etc.","params":[],"returns":{"type":"String","description":"The current operation"},"example":[]},{"name":"orderBy","description":"Specifies a field name to be used to order the query set. This may be called more than\n    once to order by multiple fields.","params":[{"name":"fieldName","type":"String","description":"A field name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function UpdateProjectWBS(project) {\n  var count = 0;\n  var child = new GlideRecord('pm_project_task');\n  child.addQuery('parent', project.sys_id);\n  child.orderBy('order');\n  child.orderBy('number');\n  child.query();\n  var len = child.getRowCount().toString().length;\n  var seq = 0;\n  while (child.next()) {\n    count += UpdateProjectTaskWBS(child, 1, ++seq, len, '');\n  }\n  gs.addInfoMessage(count + ' Project Tasks updated');\n}","description":"","output":""}]},{"name":"orderByDesc","description":"Specifies a field used to order the query set in descending order.","params":[{"name":"fieldName","type":"String","description":"A field name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"query","description":"Runs the query against the table based on the filters specified by\n      <span class=\"keyword apiname\">addQuery()</span> and <span class=\"keyword apiname\">addEncodedQuery()</span>.<p>This method queries the GlideRecord table as well as any references of the table. One\n        argument adds a query string. Usually this is performed without arguments, but you can\n        specify a name/value pair.<div class=\"note note\"><span class=\"notetitle\">Note:</span> This method fails if there is a field in the table called\n          \"query\". If that is the case, use the method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_GlideRecord-_query_Object_Object&amp;v=newyork\" target=\"_blank\">_query()</a>.</div></p>","params":[{"name":"field","type":"Object","description":"Field name"},{"name":"value","type":"Object","description":"Field value"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) { \n gs.print(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"queryNoDomain","description":"Used in domain separated instances. Similar to <span class=\"keyword apiname\">query()</span>, runs the\n    query against the table based on the filters specified by <span class=\"keyword apiname\">addQuery()</span> and\n      <span class=\"keyword apiname\">addEncodedQuery()</span>, but ignores domains.<p>This will query the GlideRecord table as well as any references of the table. One argument\n        adds a query string. Usually this is performed without arguments, but a name/value pair can\n        be specified.</p>","params":[{"name":"field","type":"Object","description":"A field name"},{"name":"value","type":"Object","description":"A value"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.queryNoDomain();\nwhile (rec.next()) { \n gs.print(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"restoreLocation","description":"Sets the current record to be the record that was saved with\n      <span class=\"keyword apiname\">saveLocation()</span>. If <span class=\"keyword apiname\">saveLocation()</span> has not been called,\n    the current record is set to be the first record of the GlideRecord.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"saveLocation","description":"Save the current row number so that we can get back to this location using the\n      <span class=\"keyword apiname\">restoreLocation()</span> method.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setAbortAction","description":"Sets a flag to indicate if the next database action (insert, update, delete) is to be\n    aborted.<p>Use in an onBefore business rule\n        to prevent the database action from being done. The business rule continues to run after\n          <span class=\"keyword apiname\">setAbortAction()</span> is called. Calling <span class=\"keyword apiname\">setAbortAction()</span>\n        does not stop subsequent business rules from executing. Calling this method only prevents\n        the database action from occurring.</p>","params":[{"name":"b","type":"Boolean","description":"True to abort next action, or false to allow the next action."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {\n  var start = current.u_date1.getGlideObject().getNumericValue();\n  var end = current.u_date2.getGlideObject().getNumericValue();\n  if (start &gt; end) {\n    gs.addInfoMessage('start must be before end');\n    current.u_date1.setError('start must be before end');\n    current.setAbortAction(true);\n  }\n}","description":"","output":""}]},{"name":"setDisplayValue","description":"Sets the specified field to the specified display value.<p>For a reference field this is the display value for the table. For a date/time this is the\n        time in the caller's current timezone.</p>","params":[{"name":"name","type":"String","description":"Field name"},{"name":"value","type":"Object","description":"Display value for the specified field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.get('46f09e75a9fe198100f4ffd8d366d17b');\ngr.setDisplayValue('opened_at','2011-02-13 4:30:00');\ngr.update();","description":"","output":""}]},{"name":"setForceUpdate","description":"Updates the record even if fields have not changed.","params":[{"name":"force","type":"Boolean","description":"True to update even if fields have not changed, otherwise false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setLimit","description":"Sets the limit for how many records are in the GlideRecord.","params":[{"name":"limit","type":"Number","description":"Limit for records to fetch."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.orderByDesc('sys_created_on');\ngr.setLimit(10);\ngr.query();","description":"","output":""}]},{"name":"setLocation","description":"Sets the current row location.","params":[{"name":"rowNumber","type":"Number","description":"The row number to set as the current row."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setNewGuid","description":"Generates a new GUID and sets it as the unique id for the current record. This function\n    applies only to new records. The GUID for an existing record cannot be changed","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var tsk_id = task.setNewGuid();\n \ntask.description = \"Request: \" + current.request.number;\ntask.description = task.description + \"\\n\" + \"Requested by: \" + current.request.u_requested_by.name;\ntask.description = task.description + \"\\n\" + \"Requested for: \" + current.request.u_requested_for.name;\ntask.description = task.description + \"\\n\" + \"Item: \" + current.cat_item.name;\n \nvar gr = new GlideRecord ('task_rel_task');\n//link the incident to the request (may need to review if it needs to be the item)\ngr.parent = current.request;\ngr.child = tsk_id;\ngr.insert();","description":"","output":""}]},{"name":"setNewGuidValue ","description":"Generates a new GUID and sets it as the unique id for the current record, when\n    inserting a new record.","params":[{"name":"guid","type":"String","description":"A string value for the new GUID"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setQueryReferences","description":"Enables or disables using the reference field's display name when querying a reference\n    field.","params":[{"name":"queryReferences","type":"Boolean","description":"If true, will generate a string of display names. If false, will generate a\n                string of sys_ids."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setUseEngines","description":"Disable or enable the running of any engines (approval rules / assignment\n    rules).","params":[{"name":"e","type":"Boolean","description":"If true, enables engines. If false disables engines."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setValue","description":"Sets the specified field to the specified value.<p>Normally a script would do a direct assignment, for example, <samp class=\"ph codeph\">gr.category =\n          value</samp>. However, if in a script the element name is a variable, then\n          <samp class=\"ph codeph\">gr.setValue(elementName, value)</samp> can be used. When setting a value, ensure\n        the data type of the field matches the data type of the value you enter. This method cannot\n        be used on journal fields.</p><p>If the value parameter is null, the record is not updated, and an error is not thrown.</p>","params":[{"name":"name","type":"String","description":"Field name"},{"name":"value","type":"Object","description":"A value to be assigned."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setWorkflow","description":"Enables or disables the running of business rules that might normally be triggered by\n    subsequent actions. If the e parameter is set to false, an insert/update will not be audited.\n    Auditing only happens when the parameter is set to true for a GlideRecord operation.<p><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">setWorkflow()</span> method is ignored when subsequently using either\n        the <span class=\"keyword apiname\">deleteProblem()</span> or <span class=\"keyword apiname\">deleteMultiple()</span> methods to\n        cascade delete.</p>","params":[{"name":"e","type":"Boolean","description":"If true (default), enables business rules. If false, disables business\n                rules."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"doit('name1','name2'); \n \nfunction doit(username1,username2) { \n \n  var usr1 = new GlideRecord('sys_user');\n  var usr2 = new GlideRecord('sys_user');\n  var num = 0;\n \n  if (usr1.get('user_name',username1) &amp;&amp; usr2.get('user_name',username2)) {\n    var ref;\n    var dict = new GlideRecord('sys_dictionary');\n    dict.addQuery('reference','sys_user');\n    dict.addQuery('internal_type','reference');\n    dict.query();\n    while (dict.next()) {\n      num = 0;\n      ref = new GlideRecord(dict.name.toString());\n      ref.addQuery(dict.element,usr1.sys_id);\n      ref.query();\n      while (ref.next()) {\n        ref.setValue(dict.element.toString(),usr2.sys_id); \n        ref.setWorkflow(false);\n        ref.update();\n        num++;\n      }\n      if (num &gt; 0) {\n        gs.print(dict.element + ' changed from ' + usr1.user_name + \n          ' to ' + usr2.user_name + ' in ' + num + ' ' + dict.name + ' records');\n      }\n    }\n  }\n}","description":"","output":""}]},{"name":"update","description":"Updates the GlideRecord with any changes that have been made. If the record does not\n    exist, it is inserted.","params":[{"name":"reason","type":"Object","description":"Optional. Reason for the update. The reason appears in the audit record."}],"returns":{"type":"String","description":"The sys_id of the new or update record. Returns null if the update\n                fails."},"example":[{"code":"  var gr = new GlideRecord('task_ci');\ngr.addQuery();\ngr.query();\nvar count = gr.getRowCount();\nif (count &gt; 0) {\n   var allocation = parseInt(10000 / count) / 100;\n   while (gr.next()) {\n      gr.u_allocation = allocation;\n      gr.update();\n   }\n}","description":"","output":""}]},{"name":"updateMultiple","description":"Updates each GlideRecord in a stated query with a specified set of changes.<p>When changing field values, use <span class=\"keyword apiname\">setValue()</span> instead of directly setting\n        the field (<samp class=\"ph codeph\">field = something</samp>). When using\n          <span class=\"keyword apiname\">updateMultiple()</span>, directly setting the field (<samp class=\"ph codeph\">gr.state =\n          4</samp>) results in all records in the table being updated instead of just the records\n        returned by the query.</p><p>Do not use this method with the <span class=\"keyword apiname\">chooseWindow()</span> or\n          <span class=\"keyword apiname\">setLimit()</span> methods when working with large tables.</p><p>This method sets new values and does not clear existing values.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// update the state of all active incidents to 4 - \"Awaiting User Info\"\nvar gr = new GlideRecord('incident');\ngr.addQuery('active', true);\ngr.setValue('state',  4);\ngr.updateMultiple();","description":"","output":""}]},{"name":"updateWithReferences","description":"Updates a record and also inserts or updates any related records with the information\n    provided.","params":[{"name":"reason","type":"Object","description":"Optional. Reason for the updates. The reason appears in the audit\n                record."}],"returns":{"type":"String","description":"The sys_id for the record being updated."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.get(inc_sys_id);  // Looking up an existing incident record where 'inc_sys_id' represents the sys_id of a incident record\ninc.caller_id.first_name = 'John';\ninc.caller_id.last_name = 'Doe';\ninc.updateWithReferences();\n","description":"If processing an incident where the Caller ID is set to reference sys_user record 'David\n        Loo,' then the following code would update David Loo's user record.  If processing an\n        incident where there is no Caller ID specified, then the following code would create a new\n        sys_user record with the provided information (first_name, last_name) and set the Caller ID\n        value to the newly created sys_user record.","output":""}]},{"name":"_next","description":"Moves to the next record in the GlideRecord. Provides the same functionality as\n      <span class=\"keyword apiname\">next()</span>, intended to be used in cases where the GlideRecord has a column\n    named next.","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query set."},"example":[{"code":"var rec = new GlideRecord('sys_template');\nrec.query();\nwhile (rec._next()) { \n  gs.print(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"_query","description":"Identical to <span class=\"keyword apiname\">query()</span>. This method is intended to be used on tables\n    where there is a column named query, which would interfere with using the\n      <span class=\"keyword apiname\">query()</span> method.<p>Runs the query against the table based on the filters specified by the\n          <span class=\"keyword apiname\">addQuery()</span> and <span class=\"keyword apiname\">addEncodedQuery()</span> methods. This will\n        query the GlideRecord table as well as any references of the table. One argument adds a\n        query string. Usually this is performed without arguments, but a name/value pair can be\n        specified.</p>","params":[{"name":"name","type":"Object","description":"A field name"},{"name":"value","type":"Object","description":"A value"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('sys_app_module');\nrec._query();\nwhile (rec.next()) { \n gs.print(rec.number + ' exists');\n}","description":"","output":""}]}]},"GlideRecordUtil":{"meta":{"has_constructor":false,"description":"A utility class for working with GlideRecords The <span class=\"keyword apiname\">GlideRecordUtil</span> class is available in server-side scripts.","example":""},"properties":{},"methods":[{"name":"getCIGR","description":"Returns a GlideRecord instance positioned to the given CI sys_id, and of the right\n    class (table).","params":[{"name":"sys_id","type":"String","description":"The sys_id of the desired CI."}],"returns":{"type":"GlideRecord","description":"A GlideRecord instance positioned to the given CI sys_id, and of the right\n                class (table)."},"example":[{"code":"var gr = new GlideRecordUtil().getCIGR(\"2dfd7c8437201000deeabfc8bcbe5d56\");","description":"","output":""}]},{"name":"getFields","description":"Returns a list of all the fields in the specified GlideRecord.","params":[{"name":"gr","type":"GlideRecord","description":"A GlideRecord instance positioned to a valid record."}],"returns":{"type":"String","description":"An array of field names for the specified GlideRecord."},"example":[{"code":"var queryString = \"priority=1^ORpriority=2\";\nvar gr = new GlideRecord('incident');\ngr.addEncodedQuery(queryString);\ngr.query();\ngr.next());\n\nvar gRU = new GlideRecordUtil();\nvar fieldList = gRU.getFields(gr);\ngs.info(fieldList);","description":"","output":""}]},{"name":"getGR","description":"Returns a GlideRecord instance for the given table, positioned to the given sys_id, and\n    of the right class (table).<p>This method is useful when you need to load a GlideRecord from a sys_id, but you don't know\n        what the actual table is (because it may be extended from the base table). This method\n        always returns a GlideRecord of the correct type base_table: the name of the base table that\n        the specified sys_id is in.</p>","params":[{"name":"baseTable","type":"String","description":"The name of the base table containing the sys_id."},{"name":"sys_id","type":"String","description":"The sys_id of the desired record."}],"returns":{"type":"GlideRecord","description":"The GlideRecord for the specified sys_id."},"example":[{"code":"var gr = new GlideRecordUtil().getGR(\"cmdb_ci_computer\", \"2dfd7c8437201000deeabfc8bcbe5d56\");","description":"","output":""}]},{"name":"getTables","description":"Returns a Java ArrayList of the ancestors of the given table name.<p>For example, given cmdb_ci_linux_server, this would return cmdb_ci, cmdb_ci_computer,\n        cmdb_ci_server, and cmdb_ci_linux_server.</p>","params":[{"name":"tableName","type":"String","description":"Name of the table"}],"returns":{"type":"ArrayList","description":"A list of ancestors of the specified table"},"example":[{"code":"var tables = new GlideRecordUtil().getTables(\"cmdb_ci_linux_server\");\ngs.log(tables.join(\",\"));  \n// The result would be \"cmdb_ci, cmdb_ci_computer, cmdb_ci_server, cmdb_ci_linux_server\".","description":"","output":""}]},{"name":"mergeToGR","description":"Sets the fields in the specified GlideRecord with the field values contained in the\n    specified hashmap, unless that field name is in the ignore hashmap.","params":[{"name":"hashMap","type":"Object","description":"An Object instance (being used as a hashmap), with properties named for fields\n                and containing the fields' value."},{"name":"GlideRecord","type":"GR","description":"The GlideRecord instance to receive the field values."},{"name":"ignore","type":"Object","description":"An optional hashmap of field names to ignore."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecordUtil().getGR(\"cmdb_ci_computer\", \"2dfd7c8437201000deeabfc8bcbe5d56\");   \nvar obj = {\"name\": \"xyz\", \"os\": \"windows 2000\", \"sys_created_by\", \"aleck.lin\"};\nvar ignore = {\"sys_created_by\": true};\nnew GlideRecordUtil().mergeToGR(obj, gr, ignore);\ngr.update();","description":"This example updates a computer record's name and os fields, but does not update the\n        sys_created_by field:","output":""}]},{"name":"populateFromGR","description":"Populates the given hashmap from the given GlideRecord instance. Each field in the\n    GlideRecord becomes a property in the hashmap.","params":[{"name":"hashMap","type":"Object","description":"An object being used as a hashmap."},{"name":"gr","type":"GlideRecord","description":"A GlideRecord instance positioned to a valid record."},{"name":"ignore","type":"Object","description":"An optional hashmap of file names not to populate."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var objectToPopulate = {};\nvar gr = new GlideRecordUtil().getGR(\"cmdb_ci_computer\", \"2dfd7c8437201000deeabfc8bcbe5d56\");\nvar ignore = {\"sys_created_on\": true, \"sys_updated_by\": true};\nnew GlideRecordUtil().populateFromGR(objectToPopulate, gr, ignore);\n// Now the objectToPopulate contains field/value pairs from the computer GlideRecord","description":"","output":""}]}]},"GlideScopedEvaluator":{"meta":{"has_constructor":true,"description":"The GlideScopedEvaluator API allows you to evaluate scripts in a GlideRecord field from\n    both scoped and global server scripts. The GlideScopedEvaluator API evaluates scripts within the script field type. The scope of the\n      record defines the scope of the script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideScopedEvaluator object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"evaluateScript","description":"Evaluates a script from a GlideRecord field.","params":[{"name":"grObj","type":"GlideRecord","description":"The GlideRecord containing a script expression."},{"name":"scriptField","type":"String","description":"(Optional) The name of the field containing the script expression."},{"name":"variables","type":"Object","description":"(Optional) A map of variables with name-value pairs. These variables are\n                available to the script during execution of this method."}],"returns":{"type":"Object","description":"The result of the script execution."},"example":[{"code":"// For this example, we created a table: \"u_global_table\" with two columns: \"short_description\", \"test_script\"\n// \"test_script\" will store the script to be evaluated by GlideScopedEvaluator.\ngr = new GlideRecord('u_global_table'); \ngr.u_short_description = 'Testing GlideScopedEvaluator';  \ngr.u_test_script = \"gs.getUser().getName() + ' says ' + greeting; \"; \ngr.insert(); \n \n// setup variables to be used by the script\nvar vars = {'greeting' : 'hello'};\n \n//Evaluate the script from the field\nvar evaluator = new GlideScopedEvaluator(); \ngr = new GlideRecord('u_global_table'); \ngr.addQuery('u_short_description','Testing GlideScopedEvaluator'); \ngr.query(); \nif (gr.next()) { \n    gs.info(evaluator.evaluateScript(gr, 'u_test_script', vars));\n}","description":"","output":"admin says hello"}]},{"name":"getVariable","description":"Returns a variable from a GlideScopedEvaluator object.","params":[{"name":"name","type":"String","description":"The name of the variable."}],"returns":{"type":"Object","description":"The value of the specified variable."},"example":[{"code":"//setting up a record that contains the script to be executed.\ngr = new GlideRecord('u_global_table'); \ngr.u_short_description = 'Calculate Addition';  \ngr.u_test_script = \"result = x + y\"; \ngr.insert(); \n \nvar evaluator = new GlideScopedEvaluator();\nevaluator.putVariable('x', 100);\nevaluator.putVariable('y', 200);\nevaluator.putVariable('result', null);\n \n// Now retrieve the result \ngr = new GlideRecord('u_global_table'); \ngr.addQuery('u_short_description','Calculate Addition'); \ngr.query(); \nif (gr.next()) { \n    evaluator.evaluateScript(gr, 'u_test_script', null);\n    gs.info(evaluator.getVariable('result'));\n}","description":"","output":"300"}]},{"name":"putVariable","description":"Puts a variable into the GlideScopedEvaluator object. These variables are available to\n    the script that this GlideScopedEvaluator object runs.","params":[{"name":"name","type":"String","description":"The name of the variable."},{"name":"value","type":"Object","description":"The value of the variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//setting up a record that contains the script to be executed.\ngr = new GlideRecord('u_global_table'); \ngr.u_short_description = 'Calculate Addition';  \ngr.u_test_script = \"result = x + y\"; \ngr.insert(); \n \nvar evaluator = new GlideScopedEvaluator();\nevaluator.putVariable('x', 100);\nevaluator.putVariable('y', 200);\nevaluator.putVariable('result', null);\n \n// Now retrieve the result \ngr = new GlideRecord('u_global_table'); \ngr.addQuery('u_short_description','Calculate Addition'); \ngr.query(); \nif (gr.next()) { \n    evaluator.evaluateScript(gr, 'u_test_script', null);\n    gs.info(evaluator.getVariable('result'));\n}","description":"","output":"300"}]}]},"GlideSession":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">GlideSession</span> API allows you to find information about the current\n  session. ","example":""},"properties":{},"methods":[{"name":"clearClientData","description":"Clears a session client value previously set with <span class=\"keyword apiname\">putClientData()</span>.<p>This method is used in a client script to clear data values that were set by a server\n        script using the <span class=\"keyword apiname\">putClientData()</span> method.</p>","params":[{"name":"paramName","type":"String","description":"Name of the client data to clear."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var session = gs.getSession();\nsession.putClientData('custName', 'Harry');\nvar clientData = session.getClientData('custName');\ngs.info(clientData);\n \nsession.clearClientData('custName');\nclientData = session.getClientData('custName');\ngs.info(clientData);","description":"","output":"Harry\n \nnull"}]},{"name":"getClientData","description":"Returns a session client value previously set with <span class=\"keyword apiname\">putClientData()</span>.<p>This method is used in a client script to retrieve data values that were set by a server\n        script that used the <span class=\"keyword apiname\">putClientData() </span>method.</p>","params":[{"name":"paramName","type":"String","description":"Name of the client data to retrieve."}],"returns":{"type":"String","description":"The client data as a string."},"example":[{"code":"var session = gs.getSession();\nsession.putClientData('test1', 'Harry');\nvar clientData = session.getClientData('test1');\ngs.info(clientData);","description":"","output":"Harry"}]},{"name":"getLanguage","description":"Gets the session's language code.","params":[],"returns":{"type":"String","description":"The session's language code."},"example":[{"code":"var session = gs.getSession();\nvar language = session.getLanguage();\ngs.info(language);","description":"","output":"en"}]},{"name":"getRoles","description":"Gets a list of roles for the current user.<p>The list of roles does not reflect any changes made during the current user session. To get\n        the updated list of roles, the user must log out and log back in.</p>","params":[],"returns":{"type":"String","description":"A comma separated list of roles."},"example":[{"code":"gs.info(gs.getSession().getRoles());","description":"","output":"admin,hr_fulfiller,itsa_fulfiller,security_admin"}]},{"name":"getTimeZoneName","description":"Gets the name of the session's time zone.","params":[],"returns":{"type":"String","description":"The name of the session's time zone."},"example":[{"code":"var session = gs.getSession();\nvar zoneName = session.getTimeZoneName();\ngs.info(zoneName);","description":"","output":"US/Pacific"}]},{"name":"isInteractive","description":"Determines if the current session is interactive.<p>An interactive session is one that involves an end-user interacting with a user interface\n        that then retrieves information from a server. An example of this type of session is when a\n        user logs in using the log-in screen or uses a form to query a data store. A non-interactive\n        session is one that only involves programmatic interaction with a server such as a SOAP\n        request to retrieve data.</p>","params":[],"returns":{"type":"Boolean","description":"True if the session is interactive."},"example":[{"code":"var interActive = gs.getSession().isInteractive();\ngs.info(interActive);","description":"","output":"false"}]},{"name":"isLoggedIn","description":"Determines if the current user is currently logged in.","params":[],"returns":{"type":"Boolean","description":"True if the current user is logged in."},"example":[{"code":"var session = gs.getSession();\nvar loggedIn = session.isLoggedIn();\ngs.info(loggedIn);","description":"","output":"true"}]},{"name":"putClientData","description":"Sets a session client value that can be retrieved with\n      <span class=\"keyword apiname\">getClientData()</span>. This method is used in a server side script that runs when\n    a form is created.","params":[{"name":"paramName","type":"String","description":"Name of the client parameter to set."},{"name":"paramValue","type":"String","description":"Parameter value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var session = gs.getSession();\nsession.putClientData('test1', 'Harry');\nvar clientData = session.getClientData('test1');\ngs.info(clientData);","description":"","output":"Harry"}]}]},"GlideSystem":{"meta":{"has_constructor":false,"description":"The GlideSystem (referred to by the variable name 'gs' in any server-side JavaScript)\n  API provides a number of convenient methods to get information about the system, the current\n  logged in user, etc. Many of the GlideSystem methods facilitate the easy inclusion of dates in query ranges, and are\n   most often used in filters and reporting.","example":""},"properties":{},"methods":[{"name":"addErrorMessage","description":"Adds an error message for the current session.<p>Use <span class=\"keyword apiname\">getErrorMessages()</span> to retrieve a list of error messages currently\n        being shown.</p>","params":[{"name":"message","type":"Object","description":"The message to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.include(\"PrototypeServer\");\n  var ValidatePasswordStronger = Class.create();\n  ValidatePasswordStronger.prototype = {\n       process : function() {\n          var user_password = request.getParameter(\"user_password\");\n          var min_len = 8;\n          var rules = \"Password must be at least \" + min_len + \n             \" characters long and contain a digit, an uppercase letter, and a lowercase letter.\";\n          if (user_password.length() &lt; min_len) {\n             gs.addErrorMessage(\"TOO SHORT: \" + rules);\n             return false;\n          }\n          var digit_pattern = new RegExp(\"[0-9]\", \"g\");\n          if (!digit_pattern.test(user_password)) {\n             gs.addErrorMessage(\"DIGIT MISSING: \" + rules);\n             return false;\n          }\n          var upper_pattern = new RegExp(\"[A-Z]\", \"g\");\n          if (!upper_pattern.test(user_password)) {\n             gs.addErrorMessage(\"UPPERCASE MISSING: \" + rules);\n             return false;\n          }\n          var lower_pattern = new RegExp(\"[a-z]\", \"g\");\n          if (!lower_pattern.test(user_password)) {\n             gs.addErrorMessage(\"LOWERCASE MISSING: \" + rules);\n             return false;\n          }\n          return true; // password is OK\n       }\n  }\n[edit]","description":"","output":""}]},{"name":"addInfoMessage","description":"Adds an info message for the current session.<p>Use <span class=\"keyword apiname\">getInfoMessages()</span> to retrieve the list of info messages being shown.\n        This method is not supported for asynchronous business rules and cannot be used within\n        transform scripts.</p>","params":[{"name":"message","type":"Object","description":"The message to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {\n  var start = current.u_date1.getGlideObject().getNumericValue();\n  var end = current.u_date2.getGlideObject().getNumericValue();\n  if (start &gt; end) {\n    gs.addInfoMessage('start must be before end');\n    current.u_date1.setError('start must be before end');\n    current.setAbortAction(true);\n  }\n}","description":"","output":""}]},{"name":"addMessage","description":"Adds a message for the current session.","params":[{"name":"type","type":"String","description":"Type of message"},{"name":"message","type":"Object","description":"The message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.include(\"FormInfoHeader\");\nvar fi = new FormInfoHeader();\nvar s = 'An incident ' + current.number + ' has been opened for your request.&lt;br/&gt;';\ns += 'The IT department will contact you when the password is reset or for further information.&lt;br/&gt;';\n//s += 'You can track status from the &lt;a href=\"home.do\" class=\"breadcrumb\" &gt;Home Page&lt;/a&gt; &lt;br/&gt;';\nfi.addMessage(s);\nproducer.redirect = 'home.do?sysparm_view=ess';","description":"","output":""}]},{"name":"beginningOfLastMonth","description":"Gets the date and time for the beginning of last month in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of last month, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfLastWeek","description":"Returns the date and time for the beginning of last week in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of last week, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfNextMonth","description":"Returns the date and time for the beginning of next month in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of next month, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfNextWeek","description":"Gets the date and time for the beginning of next week in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of next week, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfNextYear","description":"Returns the date and time for the beginning of next year in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of next year, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfThisMonth","description":"Returns the date and time for the beginning of this month in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of this month, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfThisQuarter","description":"Returns the date and time for the beginning of this quarter in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of this quarter, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfThisWeek","description":"Returns the date and time for the beginning of this week in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of this week, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfThisYear","description":"Returns the date and time for the beginning of this year in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of this year, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfToday","description":"Retrieves the date and time for the beginning of today in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of today, in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"var beginToday = gs.beginningOfToday(); \nvar endToday = gs.endOfToday(); \nvar beginTomorrow = gs.beginningOfTomorrow(); \nvar endTomorrow = gs.endOfTomorrow(); \nvar beginYesterday = gs.beginningOfYesterday(); \nvar endYesterday = gs.endOfYesterday(); \n\ngs.info('beginningOfToday: ' + beginToday); \ngs.info('endOfToday: ' + endToday); \ngs.info('-----------'); \ngs.info('beginningOfTomorrow: ' + beginTomorrow); \ngs.info('endOfTomorrow: ' + endTomorrow); \ngs.info('beginningOfYesterday: ' + beginYesterday); \ngs.info('endOfYesterday: ' + endYesterday); \ngs.info('-----------'); \nvar gdt1 = new GlideDateTime(beginToday); \nvar gdt2 = new GlideDateTime(beginTomorrow); \nvar dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2 \ngs.info('BeginTomorrow: ' + dur.getDisplayValue()); \n\nvar gdt1 = new GlideDateTime(endToday); \nvar gdt2 = new GlideDateTime(endTomorrow); \nvar dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2 \ngs.info('EndTomorrow: ' + dur.getDisplayValue()); \n\nvar gdt1 = new GlideDateTime(beginToday); \nvar gdt2 = new GlideDateTime(beginYesterday); \nvar dur = GlideDateTime.subtract(gdt2, gdt1); //the difference between gdt1 and gdt2 \ngs.info('BeginningYesterday: ' + dur.getDisplayValue()); \n\nvar gdt1 = new GlideDateTime(endToday); \nvar gdt2 = new GlideDateTime(endYesterday); \nvar dur = GlideDateTime.subtract(gdt2, gdt1); //the difference between gdt1 and gdt2 \ngs.info('EndYesterday: ' + dur.getDisplayValue());","description":"","output":""}]},{"name":"beginningOfTomorrow","description":"Retrieves the (UTC) beginning of tomorrow adjusted for the timezone of the current\n    session.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"var today = new GlideDateTime(gs.beginningOfTomorrow()).getNumericValue();","description":"","output":""}]},{"name":"beginningOfYesterday","description":"Retrieves the date and time for the beginning of yesterday in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of yesterday, in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"var start = new GlideDateTime();\nstart.setValue(gs.beginningOfYesterday());","description":"","output":""}]},{"name":"calDateDiff","description":"Calculate the difference between two dates using the default calendar.<p>Calendars are now legacy. If Schedules are being used, see the topic Calculate Duration\n        Given a Schedule.</p>","params":[{"name":"startDate","type":"String","description":"The starting date to compare in the current user's date format."},{"name":"endDate","type":"String","description":"The ending date to compare in the current user's date format."},{"name":"numericValue","type":"Boolean","description":"If true, the return value will be formatted in number of seconds; if false the\n                return value will be formatted ddd hh:mm:ss."}],"returns":{"type":"String","description":"If the numericValue parameter is true, returns the difference between the two\n                dates as an integer number of seconds; if false, returns the difference between the\n                two dates in the format ddd hh:mm:ss."},"example":[]},{"name":"dateDiff","description":"Calculates the difference between two dates.<p>This method expects the earlier date as the first parameter and the later date as the\n        second parameter; otherwise, the method returns the difference as a negative value. Use\n          <span class=\"keyword apiname\">getDisplayValue()</span> to convert the strings to the expected format.</p><p>This method expects parameters in the user/system date time format, which may not be the\n        same as the internal format. Using parameters in formats other than the user/system date\n        time format may return invalid results.</p><p>If you are working with GlideDateTime objects use the GlideDateTime\n          <span class=\"keyword apiname\">subtract()</span> method instead of <span class=\"keyword apiname\">dateDiff()</span>.</p>","params":[{"name":"startDate","type":"String","description":"The starting date to compare in the current user's date format."},{"name":"endDate","type":"String","description":"The ending date to compare in the current user's date format."},{"name":"numericValue","type":"Boolean","description":"If true, the return value will be formatted in number of seconds; if false the\n                return value will be formatted ddd hh:mm:ss."}],"returns":{"type":"String","description":"If the numericValue parameter is true, returns the difference between the two\n                dates as an integer number of seconds; if false, returns the difference between the\n                two dates in the format ddd hh:mm:ss."},"example":[{"code":"// Given two date/times as DateTime objects\n// Set the values this way to ensure a consistent input time\nvar date1 = new GlideDateTime();\nvar date2 = new GlideDateTime();\ndate1.setDisplayValueInternal('2014-01-01 12:00:00');\ndate2.setDisplayValueInternal('2014-01-01 13:00:00');\n \n// Determine the difference as number of seconds (returns a string)\n// Use getDisplayValue() to convert the string to the format expected by dateDiff()\nvar diffSeconds = gs.dateDiff(date1.getDisplayValue(), date2.getDisplayValue(), true);\n \n// JavaScript will coerce diffSeconds from a string to a number\n// since diffSeconds is being compared to a number\nvar msg = (diffSeconds &lt;= 0) ? ' is on or after ' : ' is before ';\ngs.print(date1.getDisplayValue() + msg + date2.getDisplayValue())","description":"","output":""}]},{"name":"dateGenerate","description":"Generates a date and time for the specified date in GMT.<p>To use the <span class=\"keyword apiname\">dateGenerate()</span> method in a scoped application, use the\n        corresponding scoped method: <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_SGSYS-dateGenerate_S_S&amp;v=newyork\" target=\"_blank\">dateGenerate()</a>.</p>","params":[{"name":"date","type":"String","description":"Format: yyyy-mm-dd."},{"name":"range","type":"String","description":"Start, end, or a time in the 24-hour format hh:mm:ss."}],"returns":{"type":"String","description":"Date and time in the format yyyy-mm-dd hh:mm:ss. If range is start, the return\n                value is yyyy-mm-dd 00:00:00. If range is end, the return value is yyyy-mm-dd\n                23:59:59."},"example":[]},{"name":"daysAgo","description":"Returns a date and time for a certain number of days ago.","params":[{"name":"days","type":"Number","description":"Number of days"}],"returns":{"type":"String","description":"The GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"function contractNoticeDue() {\n    var gr = new GlideRecord(\"contract\");\n    gr.addQuery(\"u_contract_status\", \"Active\");\n    gr.query();\n    while (gr.next()) {\n        if ((gr.u_termination_date &lt;= gs.daysAgo(-90)) &amp;&amp; (gr.u_contract_duration == \"Long\")) {\n            gr.u_contract_status = \"In review\";\n        } \n        else if ((gr.u_termination_date &lt;= gs.daysAgo(-50)) &amp;&amp; (gr.u_contract_duration == \"Medium\")) {\n            gr.u_contract_status = \"In review\";\n        } \n        else if ((gr.u_termination_date &lt;= gs.daysAgo(-10)) &amp;&amp; (gr.u_contract_duration == \"Short\")) {\n            gr.u_contract_status = \"In review\";\n        }\n    }\n    gr.update();\n}","description":"","output":""}]},{"name":"daysAgoEnd","description":"Returns a date and time for the end of the day a specified number of days\n    ago.","params":[{"name":"days","type":"Number","description":"Integer number of days"}],"returns":{"type":"String","description":"The GMT end of the day in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"daysAgoLocal","description":"Returns the date and time of the beginning of the day for the specified number of days\n    ago. The returned date and time reflect the time zone of the current session (local\n    time).","params":[{"name":"days","type":"Number","description":"Number of days ago"}],"returns":{"type":"String","description":"Local date and time for the beginning of the day in the user-defined date time\n                format. If the date time format is not modified from its initial value the format is\n                yyyy-mm-dd hh:mm:ss."},"example":[{"code":"if (due_in == \"1 Day\") {\n  dd = gs.daysAgoLocal(-1);\n}\nif (due_in == \"1 Week\") {\n  dd = gs.daysAgoLocal(-7);\n}","description":"","output":""}]},{"name":"daysAgoStart","description":"Returns a date and time for the beginning of the day a specified number of days\n    ago.","params":[{"name":"days","type":"String","description":"Integer number of days"}],"returns":{"type":"String","description":"GMT start of the day in the format yyyy-mm-dd hh:mm:ss"},"example":[{"code":"var gr = new GlideRecord('sysapproval_approver');\ngr.addQuery('state', 'requested');\ngr.addQuery('sys_updated_on', '&lt;', gs.daysAgoStart(5));\ngr.query();","description":"","output":""}]},{"name":"endOfLastMonth","description":"Returns the date and time for the end of last month in GMT.","params":[],"returns":{"type":"String","description":"The GMT end of last month, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfLastWeek","description":"Returns the date and time for the end of last week in GMT.","params":[],"returns":{"type":"String","description":"GMT end of last week, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfLastYear","description":"Returns the date and time for the end of last year in GMT.","params":[],"returns":{"type":"String","description":"GMT in format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfNextMonth","description":"Returns the date and time for the end of next month in GMT.","params":[],"returns":{"type":"String","description":"The GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfNextWeek","description":"Gets the date and time for the end of next week in GMT.","params":[],"returns":{"type":"String","description":"The GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfNextYear","description":"Returns the date and time for the end of next year in GMT.","params":[],"returns":{"type":"String","description":"The GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfThisMonth","description":"Returns the date and time for the end of this month in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format (yyyy-mm-dd huh:mm:ss)"},"example":[]},{"name":"endOfThisQuarter","description":"Returns the date and time for the end of this quarter in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfThisWeek","description":"Returns the date and time for the end of this week in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfThisYear","description":"Returns the date and time for the end of this year in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"endOfToday","description":"Retrieves the date and time for the end of today in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"var beginToday = gs.beginningOfToday(); \n        var endToday = gs.endOfToday(); \n        var beginTomorrow = gs.beginningOfTomorrow(); \n        var endTomorrow = gs.endOfTomorrow(); \n        var beginYesterday = gs.beginningOfYesterday(); \n        var endYesterday = gs.endOfYesterday(); \n        \n        gs.info('beginningOfToday: ' + beginToday); \n        gs.info('endOfToday: ' + endToday); \n        gs.info('-----------'); \n        gs.info('beginningOfTomorrow: ' + beginTomorrow); \n        gs.info('endOfTomorrow: ' + endTomorrow); \n        gs.info('beginningOfYesterday: ' + beginYesterday); \n        gs.info('endOfYesterday: ' + endYesterday); \n        gs.info('-----------'); \n        var gdt1 = new GlideDateTime(beginToday); \n        var gdt2 = new GlideDateTime(beginTomorrow); \n        var dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2 \n        gs.info('BeginTomorrow: ' + dur.getDisplayValue()); \n        \n        var gdt1 = new GlideDateTime(endToday); \n        var gdt2 = new GlideDateTime(endTomorrow); \n        var dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2 \n        gs.info('EndTomorrow: ' + dur.getDisplayValue()); \n        \n        var gdt1 = new GlideDateTime(beginToday); \n        var gdt2 = new GlideDateTime(beginYesterday); \n        var dur = GlideDateTime.subtract(gdt2, gdt1); //the difference between gdt1 and gdt2 \n        gs.info('BeginningYesterday: ' + dur.getDisplayValue()); \n        \n        var gdt1 = new GlideDateTime(endToday); \n        var gdt2 = new GlideDateTime(endYesterday); \n        var dur = GlideDateTime.subtract(gdt2, gdt1); //the difference between gdt1 and gdt2 \n        gs.info('EndYesterday: ' + dur.getDisplayValue());","description":"","output":""}]},{"name":"endOfTomorrow","description":"Retrieves the date and time for the end of tomorrow in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"var tomorrowEnd = new GlideDateTime();\ntomorrowEnd.setValue(gs.endOfTomorrow());","description":"","output":""}]},{"name":"endOfYesterday","description":"Gets the date and time for the end of yesterday in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format (yyyy-mm-dd huh:mm:ss)."},"example":[{"code":"var yesterdayEnd = new GlideDateTime();\nyesterdayEnd.setValue(gs.endOfYesterday());","description":"","output":""}]},{"name":"eventQueue","description":"Queues an event for the event manager.","params":[{"name":"name","type":"String","description":"Name of the event being queued."},{"name":"glideRecord","type":"Object","description":"GlideRecord object, such as \"current\"."},{"name":"parm1","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"parm2","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"queue","type":"String","description":"Name of the queue."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) {\n    gs.eventQueue(\"incident.commented\", current, gs.getUserID(), gs.getUserName());\n}","description":"","output":""}]},{"name":"eventQueueScheduled","description":"Queues an event for the event manager at a specified date and time.","params":[{"name":"name","type":"String","description":"Name of the event being queued."},{"name":"glideRecord","type":"Object","description":"GlideRecord object, such as \"current\"."},{"name":"parm1","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"parm2","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"expiration","type":"Object","description":"Date and time to process this event."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) {\n    gs.eventQueueScheduled(\"incident.commented\", current, gs.getUserID(), gs.getUserName(), new GlideDateTime('2018-06-02 20:00:00'));\n}","description":"","output":""}]},{"name":"flushMessages","description":"Clears session messages saved using <span class=\"keyword apiname\">addErrorMessage()</span> or\n      <span class=\"keyword apiname\">addInfoMessage()</span>.<p>Session messages are shown at the top of the form. In client side scripts, use\n          <span class=\"keyword apiname\">g_form.clearMessages()</span> to remove session messages.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.flushMessages();","description":"","output":""}]},{"name":"getAvatar","description":"Returns the file path to the user's avatar.","params":[],"returns":{"type":"String","description":"The file path to the user's avatar."},"example":[{"code":"var avatarFile = gs.getUser().getAvatar();        \ngs.addInfoMessage('User avatar ID: ' + avatarFile);","description":"","output":"User avatar ID: c148e1d13741310042106710ce41f149.iix?t=small"}]},{"name":"getCurrentScopeName","description":"Gets the name of the current scope.","params":[],"returns":{"type":"String","description":"The current scope name"},"example":[]},{"name":"getDisplayColumn","description":"Retrieves the display column for the table.","params":[{"name":"tableName","type":"String","description":"Name of the table from which to get the display column name."}],"returns":{"type":"String","description":"Display column name"},"example":[{"code":"// Return the sys_id value for a given table and its display value\nfunction GetIDValue(table, displayValue) { \n    var rec = new GlideRecord(table);\n    var dn = gs.getDisplayColumn(table);\n    if (rec.get(dn, displayValue))\n        return rec.sys_id;\n    else\n        return null;\n}","description":"","output":""}]},{"name":"getDisplayValueFor","description":"Returns the display value for a specified field on a record.","params":[{"name":"tableName","type":"String","description":"Name of the table"},{"name":"recordID","type":"String","description":"sysid for the record"},{"name":"fieldName","type":"String","description":"Name of the field"}],"returns":{"type":"String","description":"Display value for the field"},"example":[]},{"name":"getErrorMessages","description":"Returns the list of error messages for the session that were added by\n      <span class=\"keyword apiname\">addErrorMessage()</span>.","params":[],"returns":{"type":"String","description":"List of error messages"},"example":[]},{"name":"getEscapedProperty","description":"Retrieves the property and escapes it for XML parsing.","params":[{"name":"key","type":"String","description":"Key for the property whose value should be returned."},{"name":"substituteObject","type":"Object","description":"Object to be returned if the property is not found."}],"returns":{"type":"String","description":"The property, or the substituteObject if the property is not found."},"example":[]},{"name":"getImpersonatingUserDisplayName","description":"Returns the display name of the impersonating user.","params":[],"returns":{"type":"String","description":"The display name of the impersonating user"},"example":[]},{"name":"getImpersonatingUserName","description":"Returns the name of the impersonating user or null if not impersonating.","params":[],"returns":{"type":"String","description":"Name of impersonating user"},"example":[]},{"name":"getInfoMessages","description":"Retrieves the list of info messages for the session that were added by\n      <span class=\"keyword apiname\">addInfoMessage()</span>.","params":[],"returns":{"type":"String","description":"List of info messages"},"example":[]},{"name":"getInitials","description":"Returns the user's initials.","params":[],"returns":{"type":"String","description":"The user's initials."},"example":[{"code":"var userInitials = gs.getUser().getInitials();        \ngs.addInfoMessage('User initials: ' + userInitials);","description":"","output":"User initials: SA"}]},{"name":"getMessage","description":"Retrieves translated messages to display in the UI.<p>If the specified string exists in the database for the current language, then the\n        translated message is returned. If the specified string does not exist for the current\n        language, then the English version of the string is returned. If the string does not exist\n        at all in the database, then the ID itself is returned.</p><p>If the UI message has a tick ('), there may be issues with the message in the script; to\n        escape the ticks ('), use <span class=\"keyword apiname\">getMessageS(String, Object)</span>.</p>","params":[{"name":"MessageID","type":"String","description":"The ID of the message."},{"name":"args","type":"Object","description":"(Optional) a list of strings or other values defined by\n                java.text.MessageFormat,\n                which allows you to produce language-neutral messages for display to users."}],"returns":{"type":"String","description":"The UI message"},"example":[{"code":"var my_message = '${gs.getMessage(\"This is a message.\")}'; \nalert(my_message);","description":"","output":""},{"code":"gs.getMessage('\"{0}\" is not a Client Callable Script Include','BAR’);","description":"Using the optional parameter:","output":"&quot;BAR&quot; is not a Client Callable Script Include"}]},{"name":"getMessageS","description":"Retrieves translated messages to display in the UI and escapes all ticks (').<p>If the specified string exists in the database for the current language, then the\n        translated message is returned. If the specified string does not exist for the current\n        language, then the English version of the string is returned. If the string does not exist\n        at all in the database, then the ID itself is returned. Useful if you are inserting into a\n        JavaScript expression from Jelly.</p>","params":[{"name":"MessageID","type":"String","description":"The ID of the message."},{"name":"args","type":"Object","description":"(Optional) a list of strings or other values defined by\n                java.text.MessageFormat,\n                which allows you to produce language-neutral messages for display to users."}],"returns":{"type":"String","description":"The message with ticks escaped."},"example":[{"code":"/*\n\"I love France\" translates to \"J'aime la France\" in French.\nRendering this without escaping the tick in \"J'aime\" would break Jelly, because \nthe tick would prematurely end the variable assignment, and everything that \nfollows (aime la France') would be a jelly syntax error.\n*/\nvar my_message = '${gs.getMessageS(\"I love France\")}'; \nalert(my_message);","description":"","output":"J'aime la France"}]},{"name":"getMessages","description":"Returns the list of messages of the specified type for the session that were added by\n      <span class=\"keyword apiname\">addMessage()</span>.","params":[{"name":"type","type":"String","description":"The type of message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getNodeName","description":"Returns the node name for specified index.","params":[{"name":"obj","type":"Object","description":"Object to examine"},{"name":"index","type":"Number","description":"Index from which to get the node name"}],"returns":{"type":"String","description":"The node's name"},"example":[]},{"name":"getNodeValue","description":"Returns the node value for specified index.","params":[{"name":"obj","type":"Object","description":"Object to examine"},{"name":"index","type":"Number","description":"Index from which to get the node value"}],"returns":{"type":"Object","description":"The node's value"},"example":[]},{"name":"getPreference","description":"Returns a user preference.","params":[{"name":"key","type":"String","description":"The key for the preference"},{"name":"default","type":"Object","description":"The default value"}],"returns":{"type":"String","description":"The preference. If no preference, returns the specified default value."},"example":[]},{"name":"getProperty","description":"Gets the value of a Glide property. If the property is not found, returns the alternate\n    value.","params":[{"name":"key","type":"String","description":"The key for the property whose value should be returned."},{"name":"alt","type":"Object","description":"(Optional) Alternate object to return if the property is not found."}],"returns":{"type":"String","description":"The value of the Glide property, or the alternate object defined above."},"example":[{"code":"//Check for attachments and add link if there are any\n  var attachment_link = '';\n  var rec = new GlideRecord('sc_req_item');\n  rec.addQuery('sys_id', current.request_item);\n  rec.query();\n  if(rec.next()){\n    if(rec.hasAttachments()){\n      attachment_link = gs.getProperty('glide.servlet.uri') + rec.getLink();\n    }    \n  }","description":"","output":""}]},{"name":"getScriptError","description":"Returns the script error found in the specified script, if there is one.<p>The script is not executed by this function, only checked for syntax errors.</p>","params":[{"name":"script","type":"String","description":"The script to check for errors."}],"returns":{"type":"String","description":"The error message, or null if there is no error."},"example":[]},{"name":"getSession","description":"Returns a GlideSession object.","params":[],"returns":{"type":"GlideSession Object","description":"A GlideSession object for the current session"},"example":[]},{"name":"getSessionID","description":"Returns the GlideSession Session ID.","params":[],"returns":{"type":"String","description":"The session ID"},"example":[]},{"name":"getStyle","description":"Returns the style defined for the table, field and value.","params":[{"name":"tableName","type":"String","description":"The table name"},{"name":"fieldName","type":"String","description":"The field name"},{"name":"fieldValue","type":"String","description":"The field value"}],"returns":{"type":"String","description":"The style"},"example":[]},{"name":"getTrivialMessages","description":"Returns the list of error messages for the session that were added with the trivial\n    flag.","params":[],"returns":{"type":"String","description":"List of messages"},"example":[]},{"name":"getUser","description":"Returns a reference to the user object for the current user.","params":[],"returns":{"type":"GlideUser","description":"A reference to a user object for the current user"},"example":[]},{"name":"getUserDisplayName","description":"Returns the name field of the current user (e.g. John Smith, as opposed to\n    smith).","params":[],"returns":{"type":"String","description":"The user's display name"},"example":[]},{"name":"getUserID","description":"Returns the sys_id of the current user.","params":[],"returns":{"type":"String","description":"The sys_id of the current user."},"example":[{"code":"if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) {\n    gs.eventQueue(\"incident.commented\", current, gs.getUserID(), gs.getUserName());\n}","description":"","output":""}]},{"name":"getUserName","description":"Returns the username of the current user (e.g., jsmith).","params":[],"returns":{"type":"String","description":"Username of the current user"},"example":[{"code":"//Add a comment when closing\n    current.comments = \"Closed by \" + gs.getUserName() + \" at \" + gs.nowDateTime();\n    gs.addInfoMessage(\"Close comment added\");\n}","description":"","output":""}]},{"name":"getUserNameByUserID","description":"Returns the username based on a user ID.","params":[{"name":"sys_id","type":"String","description":"A sys_id for a user"}],"returns":{"type":"String","description":"The username"},"example":[]},{"name":"getXMLNodeList","description":"Constructs an Array of all the nodes and values in an XML document.","params":[{"name":"xml","type":"String","description":"The XML document to parse"}],"returns":{"type":"Array list","description":"List of names and values"},"example":[]},{"name":"getXMLText","description":"Returns the XML text for the first node in the XML string that matches the XPath\n    query.","params":[{"name":"xml","type":"String","description":"An XML string"},{"name":"xpathQuery","type":"String","description":"The XPath query to match"}],"returns":{"type":"String","description":"The XML node"},"example":[]},{"name":"hasRole","description":"Determines if the current user has at least one of the passed-in roles.","params":[{"name":"roleName","type":"String","description":"Comma separated list of roles"}],"returns":{"type":"Boolean","description":"True if the user has at least one of the passed-in roles; otherwise false. Also\n                returns true if the user has the administrator role."},"example":[{"code":"if (!gs.hasRole(\"admin, groups_admin\") &amp;&amp; gs.getSession().isInteractive()) {\n  var qc = current.addQuery(\"u_hidden\", \"!=\", \"true\"); //cannot see hidden groups... \n  qc.addOrCondition(\"sys_id\", \"javascript:getMyGroups()\"); //...unless in the hidden group\n}","description":"","output":""}]},{"name":"hasRoleInGroup","description":"Determines if the current user has the specified role within a specified\n    group.","params":[{"name":"roleName","type":"Object","description":"Name of the role"},{"name":"group","type":"Object","description":"sys_id of the group to check for the specified role"}],"returns":{"type":"Boolean","description":"Returns true when the following conditions are met, otherwise returns false.<ul class=\"ul\" id=\"r_GS-hasRoleInGroup_O_O__ul_xfm_x4b_mt\">\n                  <li class=\"li\">The logged-in user is assigned to the specified the role.</li>\n\n                  <li class=\"li\">The granted by field on the user role record is set to the specified\n                    group.</li>\n\n                  <li class=\"li\">The inherited field on the user role record is false.</li>\n\n                </ul>"},"example":[{"code":"var group = new GlideRecord('sys_user_group');\ngroup.addQuery('name', 'GROUP_NAME');\ngroup.setLimit(1);\ngroup.query();\nif (group.next()) {\n   if (gs.hasRoleInGroup('role_name', group)) {\n      gs.print('User has role in group');  \n   } else {\n      gs.print('User does NOT have role in group');\n   }  \n}","description":"","output":""}]},{"name":"hoursAgo","description":"Returns a date and time for a certain number of hours ago.","params":[{"name":"hours","type":"Number","description":"Number of hours"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[{"code":"if (current.operation() == 'insert') {\n // If no due date was specified, calculate a default\n if (current.due_date == '') {\n \n  if (current.urgency == '1') {\n   // Set due date to 4 hours ahead of current time\n   current.due_date = gs.hoursAgo(-4);\n  }\n \n  if (current.urgency == '2') {\n   // Set due date to 2 days ahead of current time\n   current.due_date = gs.daysAgo(-2);\n  }\n \n  if (current.urgency == '3') {\n   // Set due date to 7 days ahead of current time\n   current.due_date = gs.daysAgo(-7);\n  }\n }\n}","description":"","output":""}]},{"name":"hoursAgoEnd","description":"Returns a date and time for the end of the hour a certain number of hours\n    ago.","params":[{"name":"hours","type":"Number","description":"An integer number of hours"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"hoursAgoStart","description":"Returns a date and time for the start of the hour a certain number of hours\n    ago.","params":[{"name":"hours","type":"Number","description":"An integer number of hours"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"isFirstDayOfMonth","description":"Checks whether the date is the first day of the month.","params":[{"name":"date","type":"Object","description":"date object"}],"returns":{"type":"Boolean","description":"True if the date is the first day of the month, false otherwise."},"example":[]},{"name":"isFirstDayOfWeek","description":"Checks whether the date is the first day of the week. This uses the ISO standard of\n    Monday being the first day of the week.","params":[{"name":"date","type":"Object","description":"date object"}],"returns":{"type":"Boolean","description":"True if the date is the first day of the month, false otherwise."},"example":[]},{"name":"isFirstDayOfYear","description":"Checks whether the date is the first day of the year.","params":[{"name":"date","type":"Object","description":"date object"}],"returns":{"type":"Boolean","description":"True if the date is the first day of the year, false otherwise."},"example":[]},{"name":"isInteractive","description":"Checks if the current session is interactive.<p>An example of an interactive session is when a user logs in using the log-in screen. An\n        example of a non-interactive session is using a SOAP request to retrieve data.</p>","params":[],"returns":{"type":"Boolean","description":"True if the session is interactive."},"example":[{"code":"if (!gs.hasRole('admin') &amp;&amp; gs.isInteractive()) {\n    var qc1 = current.addQuery('u_group', '');\n    var gra = new GlideRecord('sys_user_grmember');\n    gra.addQuery('user', gs.getUserID());\n    gra.query();\n    while (gra.next()) {\n      qc1.addOrCondition('u_group', gra.group);\n   }\n}","description":"","output":""}]},{"name":"isLastDayofMonth","description":"Checks whether the date is the last day of the month.","params":[{"name":"date","type":"Object","description":"date object"}],"returns":{"type":"Boolean","description":"True if the date is the last day of the month, false otherwise. Uses the ISO\n                standard of Sunday being the last day of the week."},"example":[]},{"name":"isLastDayOfWeek","description":"Checks whether the date is the last day of the week.","params":[{"name":"date","type":"Object","description":"date object"}],"returns":{"type":"Boolean","description":"True if date is the last day of the week, false otherwise."},"example":[]},{"name":"isLastDayOfYear","description":"Checks whether the date is the last day of the year.","params":[{"name":"date","type":"Object","description":"date object"}],"returns":{"type":"Boolean","description":"True if date is the last day of the year, false otherwise."},"example":[]},{"name":"isLoggedIn","description":"Determines if the current user is currently logged in.","params":[],"returns":{"type":"Boolean","description":"True if the current user is logged in, false otherwise."},"example":[]},{"name":"isMobile","description":"Determines whether a request comes from a mobile device.<p>This method can be used in UI action conditions and business rules.</p>","params":[],"returns":{"type":"Boolean","description":"True if the request comes from a mobile device; otherwise, false."},"example":[{"code":"if (gs.isMobile())\n  gs.info(\"submitted from mobile UI\");\n else \n   gs.info(\"NOT submitted from mobile UI\");","description":"","output":""}]},{"name":"lastWeek","description":"Returns the date and time one week ago in GMT.","params":[],"returns":{"type":"String","description":"The date and time one week ago, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"log","description":"Logs a message to the system log and saves it to the syslog table.","params":[{"name":"message","type":"String","description":"The message to log."},{"name":"source","type":"String","description":"(optional) The source of the message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addQuery('active', 'true');\ncount.addAggregate('COUNT', 'category');\ncount.query();   \nwhile (count.next()) {\n   var category = count.category;\n   var categoryCount = count.getAggregate('COUNT', 'category');\n   gs.log(\"The are currently \" + categoryCount + \" incidents with a category of \" + category, \"Incident Counter\");\n}","description":"","output":""}]},{"name":"logError","description":"Logs an error to the system log and saves it to the syslog table.","params":[{"name":"message","type":"String","description":"The message to log."},{"name":"source","type":"String","description":"(optional) The source of the message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"logWarning","description":"Logs a warning to the system log and saves it to the syslog table.","params":[{"name":"message","type":"String","description":"The message to log."},{"name":"source","type":"String","description":"(optional) The source of the message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"minutesAgo","description":"Returns a date and time for a certain number of minutes ago","params":[{"name":"minutes","type":"Number","description":"An integer number of minutes"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[{"code":"/\n// Check to see if the user has failed to login too many times\n// when the limit is reached, lock the user out of the system\n//\n  //Check failed logins in the last 15 minutes\n  var gr = new GlideRecord('sysevent');\n  gr.addQuery('name', 'login.failed');\n  gr.addQuery('parm1', event.parm1.toString());\n  gr.addQuery('sys_created_on','&gt;=', gs.minutesAgo(15));\n  gr.query();\n  var rowCount = gr.getRowCount();\n  if(rowCount &gt;= 5){\n      var gr = new GlideRecord(\"sys_user\");\n      gr.addQuery(\"user_name\", event.parm1.toString());\n      gr.query();\n      if (gr.next()) {\n           gr.locked_out = true;\n           gr.update();\n           gs.log(\"User \" + event.parm1 + \" locked out due to too many invalid login attempts\");\n      }\n  }","description":"","output":""}]},{"name":"minutesAgoEnd","description":"Returns a date and time for the end of the minute a certain number of minutes\n    ago.","params":[{"name":"minutes","type":"Number","description":"An integer number of minutes"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"minutesAgoStart","description":"Returns a date and time for the start of the minute a certain number of minutes\n    ago.","params":[{"name":"minutes","type":"Number","description":"An integer number of minutes"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"monthsAgo","description":"Returns a date and time for a certain number of months ago.","params":[{"name":"months","type":"Number","description":"An integer number of months"}],"returns":{"type":"String","description":"GMT on today's date of the specified month, in the format yyyy-mm-dd\n                hh:mm:ss."},"example":[]},{"name":"monthsAgoEnd","description":"Returns a date and time for the last day of the month a certain number of months\n    ago.","params":[{"name":"months","type":"Number","description":"An integer number of months"}],"returns":{"type":"String","description":"GMT end of the month the specified number of months ago, in the format\n                yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"monthsAgoStart","description":"Returns a date and time for the start of the month a certain number of months\n    ago.","params":[{"name":"months","type":"Number","description":"An integer number of months"}],"returns":{"type":"String","description":"GMT start of the month the specified number of months ago, in the format\n                yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"nil","description":"Queries an object and returns true if the object is null or contains an empty\n    string.","params":[{"name":"obj","type":"Object","description":"The object to be checked."}],"returns":{"type":"Boolean","description":"True if null or empty string; otherwise, false."},"example":[{"code":"if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {\n  var start = current.u_date1.getGlideObject().getNumericValue();\n  var end = current.u_date2.getGlideObject().getNumericValue();\n  if (start &gt; end) {\n    gs.addInfoMessage('start must be before end');\n    current.u_date1.setError('start must be before end');\n    current.setAbortAction(true);\n  }\n}","description":"","output":""}]},{"name":"now","description":"Returns the current date in UTC.","params":[],"returns":{"type":"String","description":"The current date in the user-defined format, in UTC."},"example":[{"code":"// When the user password changes then set the u_password_last_reset field\n// to now so we know when to force another update\n \nvar gr = new GlideRecord(\"sys_user\");\nif (gr.get(event.parm1.toString())) {\n    // Do something based on the Password Changing\n    gs.log(\"The user password changed so do something else...\");\n    gr.u_password_last_reset = gs.now();\n    gr.update();\n}","description":"","output":""}]},{"name":"nowDateTime","description":"Gets the current date and time in the user-defined format.","params":[],"returns":{"type":"String","description":"The current date and time in the user-defined format."},"example":[{"code":"current.u_target_date = gs.nowDateTime();","description":"","output":""},{"code":"current.variables.end_date.setDisplayValue(gs.nowDateTime());","description":"When setting a variable in a workflow script to the current date and time, use the\n          <span class=\"keyword apiname\">setDisplayValue()</span> method. The following script sets the workflow\n        variable <span class=\"keyword apiname\">end_date</span> to the current date and time.","output":""}]},{"name":"nowGlideDateTime","description":"Gets a GlideDateTime object with the current date and time.<p>After you get a GlideDateTime object with the current date and time, you can use the\n        GlideDateTime methods to perform date-time operations, such as performing date-time\n        calculations, formatting a date-time, or converting between date-time formats.</p>","params":[],"returns":{"type":"Object","description":"GlideDateTime object with the current date and time in GMT format."},"example":[{"code":"current.u_target_date = gs.nowGlideDateTime();","description":"Sets the field u_target_date to the current date and time in GMT format.","output":""}]},{"name":"nowNoTZ","description":"Returns the current date and time in UTC format.","params":[],"returns":{"type":"String","description":"The current UTC date time"},"example":[{"code":"// When the user password changes then set the u_password_last_reset field\n// to now so we know when to force another update\n \nvar gr = new GlideRecord(\"sys_user\");\nif (gr.get(event.parm1.toString())) {\n    // Do something based on the Password Changing\n    gs.log(\"The user password changed so do something else...\");\n    gr.u_password_last_reset = gs.nowNoTZ();\n    gr.update();\n}","description":"","output":""}]},{"name":"print","description":"Writes a message to the system log.<p>This method does not write the message to the syslog table unless debug has been\n        activated.</p>","params":[{"name":"message","type":"String","description":"The message to log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.addQuery('active',false);\nrec.query();\nwhile (rec.next()) { \n gs.print('Inactive incident ' + rec.number + ' deleted');\n rec.deleteRecord();\n}","description":"","output":""}]},{"name":"quartersAgo","description":"Returns a date and time for a certain number of quarters ago.","params":[{"name":"quarters","type":"Number","description":"An integer number of quarters"}],"returns":{"type":"String","description":"GMT beginning of the quarter that was the specified number of quarters ago, in\n                the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"quartersAgoEnd","description":"Returns a date and time for the last day of the quarter, for a specified number of\n    quarters ago.","params":[{"name":"quarters","type":"Number","description":"An integer number of quarters"}],"returns":{"type":"String","description":"GMT end of the quarter that was the specified number of quarters ago, in the\n                format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"quartersAgoStart","description":"Returns a date and time for the first day of the quarter, for a specified number of\n    quarters ago.","params":[{"name":"quarters","type":"Number","description":"An integer number of quarters"}],"returns":{"type":"String","description":"GMT end of the month that was the specified number of quarters ago, in the\n                format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"setProperty","description":"Sets the specified key to the specified value.<p><span class=\"notetitle\">Note:</span> Care should be taken when setting system properties (sys_properties) using this method\n        as it causes a system-wide cache flush. Each flush can cause system degradation while the\n        caches rebuild. If a value must be updated often, it should not be stored as a system\n        property. In general, you should only place values in the sys_properties table that do not\n        frequently change.</p>","params":[{"name":"key","type":"String","description":"The key for the property to be set."},{"name":"value","type":"String","description":"The value of the property to be set."},{"name":"description","type":"String","description":"A description of the property."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.setProperty(\"glide.foo\",\"bar\",\"foo\");\ngs.info(gs.getProperty(\"glide.foo\"));","description":"","output":"bar"}]},{"name":"setRedirect","description":"Sets the redirect URI for this transaction, which then determines the next page the\n    user will see.","params":[{"name":"URI","type":"Object","description":"URI to set as the redirect"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.setRedirect(\"com.glideapp.servicecatalog_cat_item_view.do?sysparm_id=d41ce5bac611227a0167f4bf8109bf70&amp;sysparm_user=\" \n+ current.sys_id + \"&amp;sysparm_email=\" + current.email)","description":"This example redirects the user to a particular catalog item, and passes along the current\n        email as a parameter.","output":""}]},{"name":"setReturn","description":"Sets the return URI for this transaction. This determines what page the user will be\n    directed to when they return from the next form.","params":[{"name":"URI","type":"Object","description":"URI to set as the return location."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.setReturn (current.getLink(true));","description":"This example ensures that the user will be returned to the current page when they are done\n        with the next one.","output":""}]},{"name":"tableExists","description":"Determines if a database table exists.","params":[{"name":"tableName","type":"String","description":"Name of the table"}],"returns":{"type":"Boolean","description":"True if the table exists, false otherwise."},"example":[]},{"name":"userID","description":"Returns the sys_id of the user associated with this session. Use\n      <span class=\"keyword apiname\">getUserID()</span> instead.","params":[],"returns":{"type":"String","description":"sys_id of the current user"},"example":[]},{"name":"workflowFlush","description":"Deletes all existing workflow operations for the specified GlideRecord.","params":[{"name":"glideRecord","type":"Object","description":"The GlideRecord"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"yearsAgo","description":"Gets a date and time for a certain number of years ago.","params":[{"name":"years","type":"Number","description":"An integer number of years"}],"returns":{"type":"String","description":"GMT beginning of the year that is the specified number of years ago, in the\n                format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"yesterday","description":"Returns yesterday's time (24 hours ago).","params":[],"returns":{"type":"String","description":"GMT for 24 hours ago, in the format yyyy-mm-dd hh:mm:ss"},"example":[]}]},"GlideTimeline":{"meta":{"has_constructor":false,"description":"The GlideTimeline class provides the core implementation for configuring and displaying\n    a Glide Windowing Toolkit Timeline. For security, the GlideTimeline has already been instantiated as a single instance variable\n        named<span class=\"keyword apiname\"> glideTimeline</span>. All configurations should be made in the client\n      script section of the corresponding schedule page that references this instance variable.","example":""},"properties":{},"methods":[{"name":"groupByParent","description":"Specifies whether or not to group timeline items by their parent.\n    If <span class=\"ph uicontrol\">true</span>, this will nest all child items inside their parent. This affects\n      the ordering of display and children will always be listed immediately after their parent.\n      The default value for the <span class=\"keyword parmname\">groupByParent</span> property is\n      <span class=\"ph uicontrol\">false</span>.<p>If <span class=\"ph uicontrol\">true</span>, this will nest all child items inside their parent. This affects\n        the ordering of display and children will always be listed immediately after their parent.\n        The default value for the <span class=\"keyword parmname\">groupByParent</span> property is\n          <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, displays Timeline Items grouped by parent."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.groupByParent(true);","description":"","output":""}]},{"name":"registerEvent","description":"Registers the specified Timeline server event.\n    The <span class=\"keyword apiname\">strServerEvent</span> must be one of the allowed events for registration to work\n      correctly. When the event occurs, the <span class=\"keyword apiname\">GlideTimeline</span> sends a request to\n      the server and processes the event as handled inside the\n      <span class=\"keyword apiname\">strScriptIncludeName</span> class.<p>The <span class=\"keyword apiname\">strServerEvent</span> must be one of the allowed events for registration to work\n        correctly. When the event occurs, the <span class=\"keyword apiname\">GlideTimeline</span> sends a request to\n        the server and processes the event as handled inside the\n          <span class=\"keyword apiname\">strScriptIncludeName</span> class.</p>","params":[{"name":"strServerEvent","type":"String","description":"Specifies one of the following case-sensitive events: <ul class=\"ul\">\n                  <li class=\"li\"><span class=\"keyword parmname\">getItems</span></li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">elementMoveX</span></li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">elementMoveY</span></li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">elementMoveXY</span></li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">elementSuccessor</span></li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">elementTimeAdjustStart</span></li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">elementTimeAdjustEnd</span>\n                  </li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">inputBox</span>\n                  </li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">itemMove</span></li>\n\n                </ul>"},{"name":"strScriptIncludeName","type":"String","description":"Specifies the name of the class to receive the\n                  <span class=\"keyword parmname\">strServerEvent</span>. This class must be defined in a script\n                include that extends <span class=\"keyword apiname\">AbstractTimelineSchedulePage</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.registerEvent(\"getItems\", \"TimelineGanttSchedulePage\");","description":"","output":""}]},{"name":"setAutoRefresh","description":"Specifies the number of seconds to wait before performing an auto refresh of the data on\n    the timeline. Setting the number of seconds to 0 will\n    turn auto refresh off. By default, auto refresh is disabled. If <span class=\"keyword parmname\">intSeconds</span>\n    is greater than 0 and less than the minimum allowed time in seconds (10), it will be set to 10\n    seconds.<p>Setting the number of seconds to 0 will turn auto refresh off. By default, auto refresh is disabled. \n        If intSeconds is greater than 0 and less than the minimum allowed time in seconds (10), it will be set to 10 seconds.</p>","params":[{"name":"intSeconds","type":"Number","description":"An integer specifying the time in seconds between auto-refreshing."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.setAutoRefresh(15); // Sets the interval for auto-refreshing to 15 seconds.","description":"","output":""}]},{"name":"setDefaultPointIconClass","description":"Specifies the default icon class to use for Timeline Spans with \n    zero duration if no icon class was explicitly specified in the properties of the \n    Timeline Span returned from the server.\n    The default value for the <span class=\"keyword apiname\">setDefaultPointIconClass</span> property is\n      <span class=\"keyword parmname\">milestone</span>.<p>The default value for the <span class=\"keyword apiname\">setDefaultPointIconClass</span> property is\n          <span class=\"keyword parmname\">milestone</span>.</p>","params":[{"name":"icon_class","type":"String","description":"String that specifies one of the following values: <ul class=\"ul\" id=\"r_GTL-setDefaultPointIconClass_S__ul_hmt_fgn_xt\">\n                  <li class=\"li\"><samp class=\"ph codeph\">milestone</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">blue_square </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">sepia_square </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">green_square</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">red_square </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">black_square</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">blue_circle</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">sepia_circle </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">green_circle</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">red_circle</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\"> black_circle </samp></li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.setDefaultPointIconClass('blue_circle');","description":"","output":""}]},{"name":"setExtraAjaxParam","description":"Allows setting of additional parameters in the client script to be made available to the\n    corresponding Script Include events by using the <span class=\"keyword apiname\">getParameter()</span>\n    method.\n    URI parameters that are prefixed with <samp class=\"ph codeph\">sysparm_timeline_</samp> will automatically be\n      included in all server side AJAX calls.<p>URI parameters that are prefixed with <samp class=\"ph codeph\">sysparm_timeline_</samp> will automatically be\n        included in all server side AJAX calls.</p>","params":[{"name":"strName","type":"String","description":"The URI parameter name."},{"name":"strValue","type":"String","description":"The value of strName."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.setExtraAjaxParam(\"sysparm_timeline_limit\", \"5\");","description":"","output":""}]},{"name":"setInitialViewRange","description":"Specifies the initial viewable range for the timeline.\n    The default range is the range that specifies the earliest Timeline Span point to the end of the\n      latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property is specified, it\n      will override the default range.<p>The default range is the range that specifies the earliest Timeline Span point to the end of the\n        latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property is specified, it\n        will override the default range.</p>","params":[{"name":"objStartDate","type":"Number","description":"The start time of the view range in milliseconds."},{"name":"objEndDate","type":"Number","description":"The end time in milliseconds."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Sets the initial range to begin on June 20th, 2010 at 8:00 AM and end on June 28th, 2010 at 2:00 PM UTC time.\n      glideTimeline.setInitialViewRange(1277046000000, 1277647200000);","description":"","output":""}]},{"name":"setInitialViewRange","description":"Specifies the initial viewable range for the timeline.\n    The default range is the range that specifies the earliest Timeline Span point to the end of the\n    latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property is specified, it\n    will override the default range.<p>The default range is the range that specifies the earliest Timeline Span point to the end of the\n        latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property is specified, it\n        will override the default range.</p>","params":[{"name":"objStartDate","type":"Number","description":"The start time of the view range in milliseconds."},{"name":"objEndDate","type":"String","description":"The end time of the view range in format: yyyy-MM-dd HH:mm:ss ."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Sets the initial range to begin on June 20th, 2010 at 8:00 AM and end on June 28th, 2010 at 2:00 PM UTC time.\n      glideTimeline.setInitialViewRange(1277046000000, \"2010-06-28 14:00:00\");","description":"Explanation","output":""}]},{"name":"setInitialViewRange","description":"Specifies the initial viewable range for the timeline.\n     The default range is the range that specifies the earliest Timeline Span point to the end of the\n      latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property is specified, it\n      will override the default range.<p>The default range is the range that specifies the earliest Timeline Span point to the end of the\n        latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property is specified, it\n        will override the default range.</p>","params":[{"name":"objStartDate","type":"String","description":"The start time of the view range in format: yyyy-MM-dd HH:mm:ss ."},{"name":"objEndDate","type":"Number","description":"The end time in milliseconds."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Sets the initial range to begin on June 20th, 2010 at 8:00 AM and end on June 28th, 2010 at 2:00 PM UTC time.\n      glideTimeline.setInitialViewRange(\"2010-06-20 08:00:00\", 1277647200000);","description":"Explanation","output":""}]},{"name":"setInitialViewRange","description":"Specifies the initial viewable range for the timeline.\n    The format of the start and end dates must be in the default timestamp format: yyyy-MM-dd\n      HH:mm:ss. The default range is the range that specifies the earliest Timeline Span point to\n      the end of the latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property\n      is specified, it will override the default range.<p>The format of the start and end dates must be in the default timestamp format: yyyy-MM-dd\n        HH:mm:ss. The default range is the range that specifies the earliest Timeline Span point to\n        the end of the latest Timeline Span. If the <span class=\"keyword parmname\">initialViewRange</span> property\n        is specified, it will override the default range.</p>","params":[{"name":"objStartDate","type":"String","description":"The start time of the view range in format: yyyy-MM-dd HH:mm:ss ."},{"name":"objEndDate","type":"String","description":"The end time of the view range in format: yyyy-MM-dd HH:mm:ss ."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Sets the initial range to begin on June 20th, 2010 at 8:00 AM and end on June 28th, 2010 at 2:00 PM UTC time.\n      glideTimeline.setInitialViewRange(\"2010-06-20 08:00:00\", \"2010-06-28 14:00:00\");\n    ","description":"","output":""}]},{"name":"setReadOnly","description":"Enables or disables all timeline event interaction.\n    If enabled, event interaction is determined from the corresponding attributes specified by each\n      <span class=\"keyword apiname\">Timeline</span> Item. The default value for the <span class=\"keyword parmname\">readOnly</span>\n      property is <span class=\"ph uicontrol\">false</span>.<p>If enabled, event interaction is determined from the corresponding attributes specified by each\n          <span class=\"keyword apiname\">Timeline</span> Item. The default value for the <span class=\"keyword parmname\">readOnly</span>\n        property is <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, marks the entire timeline as\n                  <span class=\"ph uicontrol\">read-only</span> (non-interactive)."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.setReadOnly(true);","description":"","output":""}]},{"name":"showDependencyLines","description":"Specifies whether or not to show dependency lines between Timeline Spans.\n    This method applies only if the set of Timeline Items returned from the server includes\n      dependency relationships. The default value for the showDependencyLines property is\n      <span class=\"ph uicontrol\">false</span>.<p>This method applies only if the set of Timeline Items returned from the server includes\n        dependency relationships. The default value for the showDependencyLines property is\n          <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, displays dependency lines on the timeline;\n                otherwise, does not."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showDependencyLines(true);","description":"","output":""}]},{"name":"showGridLines","description":"Specifies whether or not to show grid lines for each row of data on the timeline. \n    By default, grid lines are enabled.<p>By default, grid lines are enabled.</p>","params":[{"name":"bShowGridlines","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, timeline shows grid lines; otherwise, does not\n                display grid lines."},{"name":"amount","type":"Number","description":"amount"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showGridLines(false); // Disables grid lines.","description":"","output":""}]},{"name":"showLeftPane","description":"Specifies whether or not to show the left hand pane in the timeline. \n    The default value for the <span class=\"keyword parmname\">leftPane</span> property is\n      <span class=\"ph uicontrol\">true</span>.<p>The default value for the <span class=\"keyword parmname\">leftPane</span> property is\n        <span class=\"ph uicontrol\">true</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, the timeline shows the left pane; otherwise,\n                the left pane is not be displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showLeftPane(false);","description":"","output":""}]},{"name":"showLeftPaneAsTree","description":"Specifies how to show child items in the left pane of the timeline. Child items\n    are displayed either as nested, indented nodes with expand and collapse capability or on a single indent level. \n    The default value for the <span class=\"keyword parmname\">showLeftPaneAsTree</span> property is\n      <span class=\"ph uicontrol\">false</span>.<p>The default value for the <span class=\"keyword parmname\">showLeftPaneAsTree</span> property is\n          <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, child item nodes are shown as indented with\n                expand/collapse capability; otherwise, all left pane items are displayed at a single\n                indent level."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showLeftPaneAsTree(true);","description":"","output":""}]},{"name":"showLeftPaneInputBox","description":"Specifies whether or not to show the text input box at the bottom of the left pane with a\n    default value as specified by <span class=\"ph uicontrol\">strDefaultValue</span>. \n    If the left pane is diabled via <span class=\"keyword apiname\">showLeftPane()</span>, the input box will not be\n      visible. The default value for the <span class=\"keyword parmname\">showLeftPaneInputBox</span> property is\n      <span class=\"ph uicontrol\">false</span>.<p>If the left pane is diabled via <span class=\"keyword apiname\">showLeftPane()</span>, the input box will not be\n        visible. The default value for the <span class=\"keyword parmname\">showLeftPaneInputBox</span> property is\n          <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, show the left pane input box."},{"name":"strDefaultValue","type":"String","description":"The default value to display in the input box."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showLeftPaneInputBox(true, 'Add a new task ...');\n    ","description":"","output":""}]},{"name":"showSummaryPane","description":"Specifies whether or not to show the summary pane at the bottom of the timeline. \n    The default value for the showSummaryPane property is <span class=\"ph uicontrol\">true</span>.<p>The default value for the showSummaryPane property is <span class=\"ph uicontrol\">true</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, the timeline includes the summary pane;\n                otherwise, the summary pane is not  displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showSummaryPane(false);","description":"","output":""}]},{"name":"showTimelineText","description":"Specifies whether or not to show the timeline text underneath each Timeline Span in the primary timeline pane. \n    The default value for the showTimelineText property is <span class=\"ph uicontrol\">false</span>.<p>The default value for the showTimelineText property is <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, displays descriptive text underneath each\n                Timeline Span; otherwise, no text is displayed underneath each Timeline\n                Span."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.showTimelineText(true);","description":"","output":""}]},{"name":"snapVertScrollingIntoRows","description":"Specifies whether or not the vertical \n    movement of timeline span objects (if appropriately registered to perform this event) \n    should snap adjust into the closest row. \n    By default this value is enabled.<p>By default this value is enabled.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, snaps vertical movement of timeline span\n                objects into rows; otherwise, items move exactly with respect to the mouse."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.snapVertScrollingIntoRows(false);","description":"","output":""}]},{"name":"sortByLeftLabelText","description":"Specifies whether or not to group items by their left label text. \n    The default value for the <span class=\"keyword parmname\">sortByLeftLabelText</span> property is\n      <span class=\"ph uicontrol\">false</span>.<p>The default value for the <span class=\"keyword parmname\">sortByLeftLabelText</span> property is\n          <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, sort Timeline Items alphabetically by the text\n                specified in each item's left label."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.sortByLeftLabelText(true);","description":"","output":""}]},{"name":"sortByStartDate","description":"Specifies whether or not to sort the list of Timeline Items returned by the earliest start date of an item's \n    Timeline Span objects. If <span class=\"keyword apiname\">groupByParent()</span> is set <span class=\"ph uicontrol\">true</span>, items are sorted after\n      grouping has occurred. The default value for the <span class=\"keyword parmname\">sortByStartDate</span>\n      property is <span class=\"ph uicontrol\">false</span>.<p>If <span class=\"keyword apiname\">groupByParent()</span> is set <span class=\"ph uicontrol\">true</span>, items are sorted after\n        grouping has occurred. The default value for the <span class=\"keyword parmname\">sortByStartDate</span>\n        property is <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, sort Timeline Items chronologically starting\n                with their earliest start date."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.sortByStartDate(true);","description":"","output":""}]},{"name":"sortByTimelineLabelText","description":"Specifies whether or not to sort the list of Timeline Items returned in alphabetical order \n    according to the text that was specified to show in the Timeline Pane.<p><span class=\"notetitle\">Note:</span> This sort order still applies even if the timeline text has been set\n          <span class=\"ph uicontrol\">false</span> via the <span class=\"keyword apiname\">showTimelineText()</span> method.\n        Additionally, if <span class=\"keyword apiname\">groupByParent()</span> is set <span class=\"ph uicontrol\">true</span>,\n        items will be sorted appropriately after grouping has occurred.</p><p>The default value for the <span class=\"keyword parmname\">sortByTimelineLabelText</span> property is\n          <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"b","type":"Boolean","description":"If true, sorts Timeline Items alphabetically by the text specified in each item's timeline span text."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"glideTimeline.sortByTimelineLabelText(true);","description":"","output":""}]}]},"GlideTimelineItem":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">GlideTimelineItem</span> extends the abstract\n   <span class=\"keyword apiname\">ScheduleItem</span> class to define additional properties that are specific to the\n  time line. A time line item is essentially any item that is displayed in a singular row across the time\n   line. A GlideTimelineItem has zero or more associated spans (TimelineSpan objects).","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor that sets the required table and <span class=\"keyword parmname\">sys_id </span>properties.<p>The rest of this object's properties should be set by the caller. By default, this object\n        instance is \"droppable\" since a table name is specified.</p>","params":[{"name":"tableName","type":"String","description":"The name of the table associated with current object."},{"name":"sys_id","type":"String","description":"The sys ID for the object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"constructor","description":"Create a \"dummy\" <span class=\"keyword apiname\">GlideTimelineItem</span> object.<p>This is useful for creating rows that do not allow any YMoving into; however, contain\n        nested children (e.g. The top-level \"Users\" row in the Group Resource Timeline). The\n          <span class=\"keyword parmname\">sys_id </span>needs to be unique for DOM level functions to parse correctly.\n        By default this object will not be \"droppable\" because a table name was not specified.</p>","params":[{"name":"tableName","type":"String","description":"The name of the table associated with current object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"createTimelineSpan","description":"Creates a new <span class=\"keyword apiname\">TimelineSpan</span> object associated with the current instance\n    object.<p>If no other <span class=\"keyword apiname\">TimelineSpan</span> objects exist, the newly created object will share\n        the same <span class=\"keyword parmname\">sys_id </span>as current instance object. Otherwise, a randomly\n        generated GUID will be used.</p>","params":[{"name":"tableName","type":"String","description":"The name of the table associated with current object."}],"returns":{"type":"Object","description":"The newly-created span object instance."},"example":[]},{"name":"createTimelineSpan","description":"Creates a new <span class=\"keyword apiname\">TimelineSpan</span> object associated with the current instance\n    object using the specified table and <span class=\"keyword parmname\">sysId</span>.","params":[{"name":"tableName","type":"String","description":"The name of the table associated with current object"},{"name":"sys_id","type":"String","description":"The sys ID for the object."}],"returns":{"type":"Object","description":"The newly-created span object instance."},"example":[]},{"name":"getImage","description":"Returns a string specifying the name of the image file associated with the current\n      <span class=\"keyword apiname\">GlideTimelineItem</span>.","params":[],"returns":{"type":"String","description":"The name of the image file associated with the current GlideTimelineItem. If no image is\n                associated with the current item, an empty string (\"\") is returned."},"example":[]},{"name":"getIsDroppable","description":"Indicates whether or not the current instance object should be allowed as a \"drop zone\" when moving timeline elements vertically.","params":[],"returns":{"type":"Boolean","description":"True if droppable; false otherwise."},"example":[]},{"name":"getLeftLabelText","description":"Returns the text to be displayed in the left pane (if enabled).","params":[],"returns":{"type":"String","description":"The value of the text to be displayed in the left pane."},"example":[]},{"name":"getParent","description":"Returns the unique <span class=\"keyword parmname\">sysId</span> of the current\n      <span class=\"keyword apiname\">GlideTimelineItem</span>'s parent object.","params":[],"returns":{"type":"String","description":"The unique sysId of the current GlideTimelineItem's parent object. If the parent does not\n                exist, this will return an empty string (\"\")."},"example":[]},{"name":"getTimelineSpans","description":"Returns all the <span class=\"keyword apiname\">TimelineSpan</span> objects associated with the current\n    instance in an ArrayList.","params":[],"returns":{"type":"Object Array","description":"The list of TimelineSpan objects associated with the current instance."},"example":[]},{"name":"isTextBold","description":"Indicates if the left pane text is set to be displayed using a bold style.","params":[],"returns":{"type":"Boolean","description":"True if the text should be bolded; otherwise\n                  false."},"example":[]},{"name":"setImage","description":"Sets the name of the image file (including it's path) to use as the icon for the item in the left pane.","params":[{"name":"strImageName","type":"String","description":"The name of the image, including its path."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setIsDraggable","description":"Sets whether or not the current instance object can be clicked and dragged into another\n      <span class=\"keyword apiname\">GlideTimelineItem</span>.","params":[{"name":"b","type":"Boolean","description":"True if item should be able to be moved with click and drag. Otherwise,\n                false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setLeftLabelText","description":"Specifies the text to display in the left pane for this item.","params":[{"name":"strText","type":"String","description":"The text to display in the left pane for this item."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setParent","description":"Sets the parent of the current <span class=\"keyword apiname\">GlideTimelineItem</span>.","params":[{"name":"sysId","type":"String","description":"The sysID of the GlideTimelineItem that should become the parent of the current\n                GlideTimelineItem."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTextBold","description":"Specifies whether or not to bold the text style of the item in the left pane.","params":[{"name":"b","type":"Boolean","description":"True if text in left pane should be bolded; otherwise false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideUser":{"meta":{"has_constructor":false,"description":"The GlideUser API provides access to information about the current user and current\n    user roles. Using the GlideUser API avoids the need to use the slower GlideRecord queries to obtain user\n      information.","example":""},"properties":{},"methods":[{"name":"getCompanyID","description":"Returns the current user's company sys_id.","params":[],"returns":{"type":"String","description":"Company sys_id"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getCompanyID());","description":"","output":""}]},{"name":"getDisplayName","description":"Returns the current user's display name.","params":[],"returns":{"type":"String","description":"User's display name"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getDisplayName());","description":"","output":""}]},{"name":"getDomainDisplayValue","description":"Returns the display value of the user's session domain.","params":[],"returns":{"type":"String","description":"The display value of the user's session domain."},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getDomainDisplayValue());","description":"","output":""}]},{"name":"getEmail","description":"Returns the user's email address.","params":[],"returns":{"type":"String","description":"User's email address"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getEmail());","description":"","output":""}]},{"name":"getFirstName","description":"Returns the user's first name.","params":[],"returns":{"type":"String","description":"User's first name"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getFirstName());","description":"","output":""}]},{"name":"getID","description":"Returns the sys_id of the current user.","params":[],"returns":{"type":"String","description":"User's sys_id"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getID());","description":"","output":""}]},{"name":"getLastName","description":"Returns the user's last name.","params":[],"returns":{"type":"String","description":"User's last name"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getLastName());","description":"","output":""}]},{"name":"getMyGroups","description":"Returns an iterator containing the list of all groups to which the user belongs. Only\n    active groups are returned.","params":[],"returns":{"type":"iterator","description":"A list of sys_ids for the active groups to which the user belongs."},"example":[{"code":"var groupsArray = gs.getUser().getMyGroups().toArray();\ngs.info(groupsArray[0]);","description":"An example","output":"cfcbad03d711110050f5edcb9e61038f"}]},{"name":"getName","description":"Returns the user ID, or login name, of the current user.","params":[],"returns":{"type":"String","description":"User ID"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getName());","description":"","output":""}]},{"name":"getRoles","description":"Returns a list of roles that includes explicitly granted roles, inherited roles, and\n    roles acquired by group membership.","params":[],"returns":{"type":"Array","description":"List of all roles available to the user"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getRoles());","description":"","output":""}]},{"name":"getUserByID ","description":"Returns the user object associated with the passed-in user ID (sys_id in sys_user) or\n    user_name.","params":[{"name":"id","type":"String","description":"Unique ID (sys_id) or user_name of the desired user record."}],"returns":{"type":"Object","description":"User object associated with the specified sys_id or user_name."},"example":[{"code":"var currentUser = gs.getUser();\ngs.info(currentUser.getFirstName()); // print the first name of the logged in user\nvar newUser = currentUser.getUserByID('abel.tuter'); // fetch a different user using the user_name field\ngs.info(newUser.getFirstName()); // print the first name of the Abel Tuter user \n","description":" using user name (user_name).","output":""},{"code":"var currentUser = gs.getUser();\ngs.info(currentUser.getFirstName()); // print the first name of the logged in user\nvar newUser = currentUser.getUserByID('62826bf03710200044e0bfc8bcbe5df1'); // fetch Abel Tuter user using sys_id from sys_user record\ngs.info(newUser.getFirstName()); // print the first name of the Abel Tuter user \n","description":" using user ID (sys_id).","output":""}]},{"name":"getUserRoles","description":"Returns the list of roles explicitly granted to the user.","params":[],"returns":{"type":"Array","description":"List of roles explicitly assigned to the user"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getUserRoles());","description":"","output":""}]},{"name":"hasRole","description":"Determines if the current user has the specified role.","params":[{"name":"role","type":"String","description":"Role to check"}],"returns":{"type":"Boolean","description":"True if the user has the role."},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.hasRole('admin'));","description":"","output":""}]},{"name":"isMemberOf","description":"Determines if the current user is a member of the specified group.","params":[{"name":"group","type":"String","description":"Group to check"}],"returns":{"type":"Boolean","description":"True if the user is a member of the group."},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.isMemberOf(­'Capacity Mgmt'));","description":"","output":""}]}]},"HostnameJS":{"meta":{"has_constructor":false,"description":"Formats host names according to property settings. Use with any server-side script when you need to format host names.","example":""},"properties":{},"methods":[{"name":"format","description":"Formats the specified host name according to the property settings.","params":[{"name":"hostname","type":"String","description":"The host name to format"},{"name":"source","type":"String","description":"The property settings source"}],"returns":{"type":"String","description":"The system name"},"example":[]},{"name":"getDomainName","description":"Returns the DNS domain name.","params":[],"returns":{"type":"String","description":"The domain name"},"example":[{"code":"var hjs = new HostnameJS();\nhjs.getDomainName();","description":"","output":""}]},{"name":"getSysName","description":"Returns the current system name.","params":[],"returns":{"type":"String","description":"The system name"},"example":[{"code":"var hjs = new HostnameJS();\nhjs.getSysName();","description":"","output":""}]}]},"ICalUtil":{"meta":{"has_constructor":false,"description":"The ICalUtil API is an extension of the ICalUtilSNC API. ","example":""},"properties":{},"methods":[]},"ICalUtilSNC":{"meta":{"has_constructor":false,"description":"The ICalUtilSNC API provides functions to generate iCalendar compliant\n    events. ","example":""},"properties":{},"methods":[{"name":"formatICalComponent","description":"Generates a formatted VCALENDAR component.","params":[{"name":"arrEvents","type":"Array","description":"Contains the properties that make up a  VCALENDAR component."}],"returns":{"type":"Array","description":"Contains properties needed to form a VCALENDAR."},"example":[]},{"name":"formatICalEvent","description":"Generates a formatted VEVENT.","params":[{"name":"arrEvent","type":"Array","description":"Contains the individual properties that make up a VEVENT."},{"name":"useAlarm","type":"Boolean","description":"If true, adds a VALARM to the VEVENT."}],"returns":{"type":"String","description":"The formatted VEVENT."},"example":[]},{"name":"formatRecurringRule ","description":"Formats the RRULE property for a VEVENT.","params":[{"name":"ruleObj","type":"Object","description":"Contains the properties for the RRULE property."}],"returns":{"type":"String","description":"The formatted RRULE property."},"example":[]},{"name":"getDateFromScheduleDateTime ","description":"Returns the date from the GlideScheduleDateTime.","params":[{"name":"scheduleDateTime","type":"GlideScheduleDateTime","description":"A GlideScheduleDateTime representation of the date and time."}],"returns":{"type":"String","description":"Formatted date."},"example":[]},{"name":"getSDT","description":"If provided with a formatted date time string, it returns a GlideScheduleDateTime\n    object.","params":[{"name":"sdtStr","type":"String","description":"Formatted ScheduleDateTime."},{"name":"timeZone","type":"String","description":"If provided, will be used for the generated GlideScheduleDateTime."}],"returns":{"type":"GlideScheduleDateTime","description":"A GlideScheduleDateTime representation of the sdtStr."},"example":[]},{"name":"getTimeFromScheduleDateTime ","description":"Returns the time from the GlideScheduleDateTime.","params":[{"name":"scheduleDateTime","type":"GlideScheduleDateTime","description":"A GlideScheduleDateTime representation of the date and time."}],"returns":{"type":"String","description":"Formatted time."},"example":[]}]},"IdentificationEngineScriptableApi":{"meta":{"has_constructor":false,"description":"The IdentificationEngineScriptableApi uses the Identification and Reconciliation\n  framework to minimize creation of duplicate CIs and to reconcile CI attributes by only accepting\n  information from authorized data sources when updating the CMDB. ","example":""},"properties":{},"methods":[{"name":"createOrUpdateCI","description":"Insert or update configuration items in the CMDB based on identification and\n    reconciliation rules. Use this API instead of updating the CMDB directly.","params":[{"name":"source","type":"String","description":"Identifies the data source of the CI information. These must be one of the\n                choice values defined for the discovery_source field of the cmdb_ci table."},{"name":"input","type":"String","description":"A JSON formatted string of configuration items to be added or updated. Each\n                input string is in the format  'items: [{}], relations:[{}], related[{}]', where\n                each item within the items,  relations, and related lists contains name-value pairs.\n                  <div class=\"p\">The possible name-value pairs within the items list are:<ul class=\"ul\" id=\"r_IdentificationEngineScriptableApi-createorUpdateCI_String_String__ul_jsz_zvl_jt\">\n                    <li class=\"li\">className - the sys_class_name of the CI to be created or updated.</li>\n\n                    <li class=\"li\">values:{} - the field information for the CI as name-value pairs, where the\n                      name is the field name. When updating reference fields, the value must be the\n                      referenced sys_id.</li>\n\n                    <li class=\"li\">lookup:[{}] - a list of records with each item having name-value pairs like\n                      the items list. </li>\n\n                    <li class=\"li\">related: [{}] - a list of records with each item having name-value pairs\n                      like the items list.</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"r_IdentificationEngineScriptableApi-createorUpdateCI_String_String__ul_nms_ywl_jt\">\n                    <li class=\"li\">parent - index of the parent item in the dependency relation</li>\n\n                    <li class=\"li\">child - index of the child item in the dependency relation</li>\n\n                    <li class=\"li\">type - the relationship type. This is one of the name field values from the\n                      cmdb_rel_type table.</li>\n\n                  </ul>\n</div>"}],"returns":{"type":"String","description":"A JSON formatted string that is a list of results for the configuration items\n                in the input string. Each result string is in the format  'items: [{}],\n                relations:[{}]',  where each item within the  items and relations lists contains\n                name-value pairs. <div class=\"p\">The possible name-value pairs within the items list are:  <ul class=\"ul\" id=\"r_IdentificationEngineScriptableApi-createorUpdateCI_String_String__ul_axv_x4h_1t\">\n                    <li class=\"li\">className- the sys_class_name for the CI that was updated or created.</li>\n\n                    <li class=\"li\">operation, which is one of INSERT, UPDATE, UPDATE_WITH_UPGRADE,\n                      UPDATE_WITH_DOWNGRADE, UPDATE_WITH_SWITCH, DELETE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the CI that was updated or created.</li>\n\n                    <li class=\"li\">relatedSysIds -  a list of sys_id values of CIs used during lookup based\n                      identification.</li>\n\n                    <li class=\"li\">maskedAttributes – a list of attributes whose update by a non-authoritative\n                      data source gets skipped as defined by the \n                      <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/configuration-management/task/t_CreateCIReconciliationRule.html\" target=\"_blank\">Reconciliation\n                        Rules</a>.</li>\n\n                    <li class=\"li\">identifierEntrySysId - sys_id of identifier entry used during matching.</li>\n\n                    <li class=\"li\">errors - a list of errors in the format of (error, message string), where\n                      error can be ABANDONED, INVALID_INPUT_DATA, IDENTIFICATION_RULE_MISSING,\n                      IDENTIFICATION_RULE_FOR_LOOKUP_MISSING, NO_LOOKUP_RULES_FOR_DEPENDENT_CI,\n                      NO_CLASS_NAME_FOR_INDEPENDENT_CI, MISSING_DEPENDENCY, MULTIPLE_DEPENDENCIES,\n                      MULTIPLE_DUPLICATE_RECORDS, RELATION_CHAIN_ENDS_AT_QUALIFIER,\n                      QUALIFICATION_LOOP, TYPE_CONFLICT_IN_QUALIFICATION, MULTI_MATCH,\n                      REQUIRED_ATTRIBUTE_EMPTY, RECLASSIFICATION_NOT_ALLOWED</li>\n\n                    <li class=\"li\">duplicateIndices - a list of indexes of items that are duplicates of the\n                      current item.</li>\n\n                    <li class=\"li\">identificationAttempts - a list of attempts in the format of (attributes,\n                      identiferName, attemptResult, searchOnTable) where <ul class=\"ul\" id=\"r_IdentificationEngineScriptableApi-createorUpdateCI_String_String__ul_fmx_3zl_jt\">\n                        <li class=\"li\">attributes - the attributes of identifier entry used during\n                          identification</li>\n\n                        <li class=\"li\">identiferName - the CI identifier to which this identifier entry\n                          belongs</li>\n\n                        <li class=\"li\">attemptResult - one of SKIPPED, NO_MATCH, MATCHED, MULTI_MATCH</li>\n\n                        <li class=\"li\">searchOnTable - the table searched during the identification\n                          process.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"r_IdentificationEngineScriptableApi-createorUpdateCI_String_String__ul_ajf_wzl_jt\">\n                    <li class=\"li\">className - the relationship CI's class name and is always cmdb_rel_ci</li>\n\n                    <li class=\"li\">operation - one of INSERT, UPDATE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the relationship CI inserted or updated</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var payload = {items: [{className:'cmdb_ci_linux_server', \n               values: {name:'stry0900844 CI 2',\n                        serial_number:'9876EFGH',\n                        mac_address:'4653XYZ',\n                        ip_address:'10.10.10.4',\n                        ram:'1238'}}]\n              };\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = SNC.IdentificationEngineScriptableApi.createOrUpdateCI('ServiceNow', input);\ngs.print(output);\n","description":"Identify an independent CI.","output":"{&quot;items&quot;:[{&quot;className&quot;:&quot;cmdb_ci_linux_server&quot;,&quot;operation&quot;:&quot;INSERT&quot;,\n&quot;sysId&quot;:&quot;33dd7e760f750200293f8fbce1050ee0&quot;,&quot;identifierEntrySysId&quot;:&quot;Unknown&quot;,\n&quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;serial_number&quot;],&quot;identifierName&quot;:&quot;Hardware Rule&quot;,\n&quot;attemptResult&quot;:&quot;NO_MATCH&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;},{&quot;attributes&quot;:[&quot;name&quot;],\n&quot;identifierName&quot;:&quot;Hardware Rule&quot;,&quot;attemptResult&quot;:&quot;NO_MATCH&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;}]}\n],&quot;relations&quot;:[]}"},{"code":"var payload = \n              {items: [ \n                    {className:'cmdb_ci_web_server', \n                     values: {name:'apache linux den 200', \n                              running_process_command: 'xyz',  \n                              running_process_key_parameters: 'abc', \n                              tcp_port:'3452'}}, \n                    {className:'cmdb_ci_linux_server', \n                     values: {name:'lnux100', ram:'2048'}}],\n               relations:[{parent: 0, child: 1, type: 'Runs on::Runs'}]\n              };\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = SNC.IdentificationEngineScriptableApi.createOrUpdateCI('ServiceWatch', input);\ngs.print(output);\n","description":"Identify a dependent CI.","output":"{&quot;items&quot;:[\n{&quot;className&quot;:&quot;cmdb_ci_web_server&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,\n       &quot;sysId&quot;:&quot;5f8af237c0a8010e01a932999468b83a&quot;,&quot;identifierEntrySysId&quot;:&quot;8985a23ec3f00200d8d4bea192d3ae08&quot;,\n       &quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;running_process_command&quot;,&quot;running_process_key_parameters&quot;],\n       &quot;identifierName&quot;:&quot;Application Rule&quot;,&quot;attemptResult&quot;:&quot;MATCHED&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_appl&quot;}]},\n{&quot;className&quot;:&quot;cmdb_ci_linux_server&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,&quot;sysId&quot;:&quot;53958ff0c0a801640171ec76aa0c8f86&quot;,\n       &quot;identifierEntrySysId&quot;:&quot;556eb250c3400200d8d4bea192d3ae92&quot;,\n       &quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;serial_number&quot;],&quot;identifierName&quot;:&quot;Hardware Rule&quot;,\n       &quot;attemptResult&quot;:&quot;SKIPPED&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;},{&quot;attributes&quot;:[&quot;name&quot;],\n       &quot;identifierName&quot;:&quot;Hardware Rule&quot;,&quot;attemptResult&quot;:&quot;MATCHED&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;}]}],\n&quot;relations&quot;:[{&quot;className&quot;:&quot;cmdb_rel_ci&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,\n               &quot;sysId&quot;:&quot;60bcdcebc0a8010e0124fb16964b989f&quot;}]}"},{"code":"var payload = {items: [\n           {className:'cmdb_ci_netgear', \n               values: {name:'ny8500-nbxs08',\n                        ports:'1200'}, \n               lookup: [{className:'cmdb_serial_number',\n                            values:{serial_number:'1234ABCD', serial_number_type:'uuid',absent:'false',valid:'true'}},\n                        {className:'cmdb_serial_number',\n                            values:{serial_number:'3456EFGH', serial_number_type:'system',absent:'false',valid:'true'}}]}]};\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = SNC.IdentificationEngineScriptableApi.createOrUpdateCI('ServiceNow', input);\ngs.print(output);\n","description":"Identify an independent CI with lookup based identification.","output":"{&quot;items&quot;:[{&quot;className&quot;:&quot;cmdb_ci_netgear&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,&quot;sysId&quot;:&quot;55b35562c0a8010e01cff22378e0aea9&quot;,\n                                &quot;relatedSysIds&quot;:[&quot;c9d5d426538202007c949096a11c0829&quot;,&quot;0dd5d426538202007c949096a11c0829&quot;],\n                                &quot;identifierEntrySysId&quot;:&quot;c12f9be8c3400200d8d4bea192d3aea6&quot;,\n                                &quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;serial_number&quot;,&quot;serial_number_type&quot;],\n                                                           &quot;identifierName&quot;:&quot;Hardware Rule&quot;,&quot;attemptResult&quot;:&quot;MATCHED&quot;,\n                                &quot;searchOnTable&quot;:&quot;cmdb_serial_number&quot;}]}],\n          &quot;relations&quot;:[]}"}]},{"name":"identifyCI","description":"Determines the operation (insert/update) that will be performed with the specified\n    payload without committing the operation in the database.<p>This works just like <span class=\"keyword apiname\">createOrUpdateCI()</span>, but does not commit the\n        result.</p>","params":[{"name":"jsonString","type":"String","description":"A JSON formatted string of configuration items to be added or updated. Each\n                input string is in the format  'items: [{}], relations:[{}]', where each item within\n                the items and relations lists contains name-value pairs. <div class=\"p\">The possible name-value\n                  pairs within the items list are:<ul class=\"ul\" id=\"IES-identifyCI_S__ul_jsz_zvl_jt\">\n                    <li class=\"li\">className - the sys_class_name of the CI to be created or updated.</li>\n\n                    <li class=\"li\">values:{} - the field information for the CI as name-value pairs, where the\n                      name is the field name.</li>\n\n                    <li class=\"li\">lookup:[{}] - a list of records with each item having name-value pairs like\n                      the items list. </li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IES-identifyCI_S__ul_nms_ywl_jt\">\n                    <li class=\"li\">parent - index of the parent item in the dependency relation</li>\n\n                    <li class=\"li\">child - index of the child item in the dependency relation</li>\n\n                    <li class=\"li\">type - the relationship type. This is one of the name field values from the\n                      cmdb_rel_type table.</li>\n\n                  </ul>\n</div>"}],"returns":{"type":"String","description":"A JSON formatted string that is a list of results. Each result string is in the\n                format  'items: [{}], relations:[{}]', where each item within the items and\n                relations lists contains name-value pairs. <div class=\"p\">The possible name-value pairs within\n                  the items list are: <ul class=\"ul\" id=\"IES-identifyCI_S__ul_axv_x4h_1t\">\n                    <li class=\"li\">className- the sys_class_name for the CI that was updated or created.</li>\n\n                    <li class=\"li\">operation, which is one of INSERT, UPDATE, UPDATE_WITH_UPGRADE,\n                      UPDATE_WITH_DOWNGRADE, UPDATE_WITH_SWITCH, DELETE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the CI that was updated or created.</li>\n\n                    <li class=\"li\">relatedSysIds - a list of sys_id values of CIs used during lookup based\n                      identification.</li>\n\n                    <li class=\"li\">identifierEntrySysId - sys_id of identifier entry used during matching.</li>\n\n                    <li class=\"li\">errors - a list of errors in the format of (error, message string), where\n                      error can be ABANDONED, INVALID_INPUT_DATA, IDENTIFICATION_RULE_MISSING,\n                      IDENTIFICATION_RULE_FOR_LOOKUP_MISSING, NO_LOOKUP_RULES_FOR_DEPENDENT_CI,\n                      NO_CLASS_NAME_FOR_INDEPENDENT_CI, MISSING_DEPENDENCY, MULTIPLE_DEPENDENCIES,\n                      MULTIPLE_DUPLICATE_RECORDS, RELATION_CHAIN_ENDS_AT_QUALIFIER,\n                      QUALIFICATION_LOOP, TYPE_CONFLICT_IN_QUALIFICATION, MULTI_MATCH,\n                      REQUIRED_ATTRIBUTE_EMPTY, RECLASSIFICATION_NOT_ALLOWED</li>\n\n                    <li class=\"li\">duplicateIndices - a list of indexes of items that are duplicates of the\n                      current item.</li>\n\n                    <li class=\"li\">identificationAttempts - a list of attempts in the format of (attributes,\n                      identiferName, attemptResult, searchOnTable) where <ul class=\"ul\" id=\"IES-identifyCI_S__ul_fmx_3zl_jt\">\n                        <li class=\"li\">attributes - the attributes of identifier entry used during\n                          identification</li>\n\n                        <li class=\"li\">identiferName - the CI identifier to which this identifier entry\n                          belongs</li>\n\n                        <li class=\"li\">attemptResult - one of SKIPPED, NO_MATCH, MATCHED, MULTI_MATCH</li>\n\n                        <li class=\"li\">searchOnTable - the table searched during the identification\n                          process.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IES-identifyCI_S__ul_ajf_wzl_jt\">\n                    <li class=\"li\">className - the relationship CI's class name and is always cmdb_rel_ci</li>\n\n                    <li class=\"li\">operation - one of INSERT, UPDATE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the relationship CI inserted or updated</li>\n\n                  </ul>\n</div>"},"example":[]},{"name":"runIdentificationAudit","description":"Run an identification audit against the specified CI to detect duplicates.<p>If duplicates are found, duplication tasks are created. Only use this method on CI types\n        with independent identification rules.</p>","params":[{"name":"gr","type":"GlideRecord","description":"The CI on which to run the audit to detect duplicates. The CI must have\n                independent identification rules."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"IDResult":{"meta":{"has_constructor":true,"description":"A container class for the result of a CI Identifier. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the IDResult class.","params":[{"name":"explore","type":"Boolean","description":"Set to true if the CI should be explored; otherwise, false."},{"name":"sysID","type":"String","description":"An existing CI's sys_id, or null if no existing CI could be found."}],"returns":{"type":"","description":""},"example":[]}]},"IPAddressFixup":{"meta":{"has_constructor":false,"description":"After a device has been successfully discovered, ensures that no other device has the\n  same IP address. If any duplicates are found, the IP address field is cleared. Use with any server-side Discovery script to validate IP addresses.","example":""},"properties":{},"methods":[{"name":"dedupe","description":"Removes duplicates of the specified IP address in the specified table.","params":[{"name":"tableName","type":"String","description":"The table to check for duplicates"},{"name":"ip","type":"String","description":"The IP address to check for"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"dedupeAll","description":"Removes all duplicate IP addresses from the tables.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"fix","description":"Removes all duplicate IP addresses and ensures that the parent ip_address record is set\n    to one of the NIC's IP addresses.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getParentIP","description":"Returns the parent IP address for the current device.","params":[],"returns":{"type":"String","description":"The parent IP address"},"example":[]},{"name":"setParentIP","description":"Sets the IP address field for the current CI.","params":[{"name":"ip","type":"String","description":"The IP address for the current CI."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"syncIP","description":"Ensures that the parent ip_address record is set to one of the NIC's IP addresses, or\n    leaves it alone if there were no NICs.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"IPService":{"meta":{"has_constructor":true,"description":"Encapsulates an IP Service. Use this class during the discovery scanning phase.","example":""},"properties":{"creates":{"description":"The table where this service creates entries.","type":"String"},"description":{"description":"Description of the IPService.","type":"String"},"name":{"description":"A short name or handle for the IPService.","type":"String"},"port":{"description":"The TCP or UDP port used by the service.","type":"String"},"protocol":{"description":"The protocol used by the service (\"UDP\", \"TCP\", or \"TCP/UDP\").","type":"String"},"serviceName":{"description":"A long, descriptive English name for the IPService.","type":"String"},"sysID":{"description":"The sys_id of this record.","type":"String"}},"methods":[{"name":"constructor","description":"Creates an instance of the IPService class.","params":[{"name":"source","type":"Object","description":"Either a GlideRecord instance or a sys_id string"}],"returns":{"type":"","description":""},"example":[]},{"name":"getFromArrayList","description":"Returns an array of IPService instances specified by a Java ArrayList of\n    sys_ids.","params":[{"name":"list","type":"Array","description":"List of sys_ids."}],"returns":{"type":"Array","description":"IPService instances"},"example":[]}]},"J2js":{"meta":{"has_constructor":false,"description":"2JS script include allows you to convert java objects to JavaScript objects. If the given value is a Java object that can be converted to an equivalent JavaScript object,\n   that conversion is performed and the result is returned. Otherwise the original Java object is\n   returned.<br/><br/>The <span class=\"keyword apiname\">j2js</span> class is available to server-side scripts.<br/><br/>The specific conversion performed in the order they are checked.<ul class=\"ul\" id=\"c_J2jsAPI__ul_sjv_xs1_4t\">\n    <li class=\"li\">Java String -&gt; JavaScript string </li>\n\n    <li class=\"li\">Java Boolean -&gt; JavaScript boolean </li>\n\n    <li class=\"li\">Java Integer -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java Long -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java Double -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java Byte -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java Float -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java Short -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java Character -&gt; JavaScript number </li>\n\n    <li class=\"li\">Java array -&gt; JavaScript Array with order preserved </li>\n\n    <li class=\"li\">Java List -&gt; JavaScript Array with order preserved </li>\n\n    <li class=\"li\">Java Map -&gt; JavaScript Object with the key/value pairs translated into property/value pairs </li>\n\n    <li class=\"li\">Java Set -&gt; JavaScript Array in arbitrary order</li>\n\n   </ul><br/><br/>Conversions are performed recursively on the elements of arrays, lists, or collections. For\n   example, given a Java ArrayList of ArrayLists of Strings, this will return a JavaScript Array of\n   Arrays of strings.","example":""},"properties":{},"methods":[{"name":"j2js","description":"Converts a java object from system code to a JavaScript object.","params":[{"name":"javaObject","type":"Object","description":"A Java object from system code such as a Packages call."}],"returns":{"type":"Object","description":"A JavaScript object if the parameter can be converted, otherwise it returns the\n                Java object."},"example":[{"code":"var tu = new TableUtils(\"cmdb_ci_win_server\");\nvar classes = tu.getHierarchy();\n//getHierarchy returns a Java ArrayList, which is not exactly like a JavaScript Array\n//for example you cannot get length\ngs.print(\"classes = \" + classes);\ngs.print(\"classes.length = \" + classes.length);\n \n//convert to a JavaScript Array\ngs.include(\"j2js\");\nvar jsClasses = j2js(classes);\ngs.print(\"jsClasses = \" + jsClasses);\ngs.print(\"jsClasses.length = \" + jsClasses.length);","description":"","output":""}]}]},"JavascriptProbe":{"meta":{"has_constructor":true,"description":"Provides methods for using the JavascriptProbe on the MID server. Use these methods in server scripts to send a probe to the MID server from JavaScript.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the JavascriptProbe.","params":[{"name":"midServer","type":"String","description":"The MID server name"}],"returns":{"type":"","description":""},"example":[]},{"name":"addParameter","description":"Adds a parameter with the specified value to the probe.","params":[{"name":"name","type":"String","description":"The parameter name"},{"name":"value","type":"String","description":"The parameter's value"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var jspr = new JavascriptProbe('msserv');\njspr.setName('jsprobe100');\njspr.setSource('jspr_source');\njspr.addParameter('support_feat', 'yes');","description":"","output":""}]},{"name":"create","description":"Creates the probe for the current MID server, puts it on the output queue, and sets its\n    state to \"ready\".","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var jspr = new JavascriptProbe('msserv');\njspr.setName('jsprobe100');\njspr.setSource('jspr_source');\njspr.setJavascript('jspr_script');\njspr.create();","description":"","output":""}]},{"name":"setJavascript","description":"Adds a script to the probe.","params":[{"name":"script","type":"String","description":"The script to add to the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var jspr = new JavascriptProbe('msserv');\njspr.setName('jsprobe100');\njspr.setSource('jspr_source');\njspr.setJavascript('jspr_script');","description":"","output":""}]},{"name":"setName","description":"Sets the name of the JavascriptProbe","params":[{"name":"name","type":"String","description":"The name to give the JavascriptProbe."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var jspr = new JavascriptProbe('msserv');\njspr.setName('jsprobe100');","description":"","output":""}]},{"name":"setSource","description":"Sets the source of the probe.","params":[{"name":"ip","type":"String","description":"The IP address of the target probe."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var jspr = new JavascriptProbe('msserv');\njspr.setName('jsprobe100');\njspr.setSource('100.100.100.1');","description":"","output":""}]}]},"JSON":{"meta":{"has_constructor":true,"description":"Provides methods to create JSON objects from a string, and to turn JSON objects into\n  strings. The JSON API has dynamic and static methods. You access the dynamic methods by creating a JSON\n   object. To use the dynamic methods in a scoped application, add the global prefix when calling\n   the constructor.  You access the static methods by using the static JSON object.<br/><br/>The JavaScript ES5 native JSON object is used instead of the JSON static methods. If your\n   script needs the old behavior, use the <span class=\"keyword apiname\">encode()</span> and\n    <span class=\"keyword apiname\">decode()</span> methods.<br/><br/>This example creates a JSON\n   object.<pre ng-prism='' source='// obj is a JSON formatted object\nvar parser = new JSON(); // encode() and decode() are dynamic methods.\nvar str = parser.encode(obj);' class='language-javascript monospaceing'></pre><br/><br/>The <span class=\"keyword apiname\">encode()</span> and <span class=\"keyword apiname\">decode()</span> methods are deprecated. Use the\n   JavaScript JSON object instead.<br/><br/>This example creates a JSON object in a scoped\n   script.<pre ng-prism='' source='// obj is a JSON formatted object\nvar parser = new global.JSON();\nvar str = parser.encode(obj);\n' class='language-javascript monospaceing'></pre><br/><br/>This example uses the static\n   methods.<pre ng-prism='' source='// obj is a JSON formatted object\nvar str =  JSON.stringify(obj);\n// str is a string containing content to be turned into a JSON formatted object\nvar obj = JSON.parse(str);\n' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the JSON class.<p>This class is deprecated. Use the JavaScript JSON object instead.</p>","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"decode","description":"Creates an object or primitive type from a JSON formatted string.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This class is deprecated. Use the JavaScript JSON object instead.</div></p>","params":[{"name":"str","type":"String","description":"A JSON formatted string."}],"returns":{"type":"Object","description":"An object created from the specified string."},"example":[{"code":"var str = ‘{“name\":\"George\",\"lastname\":\"Washington”}’;\nvar parser = new JSON();\nvar obj = parser.decode(str);\ngs.info(‘The first name is ’  + obj.name);","description":"","output":"The first name is George"},{"code":"var str = ‘{“name\":\"George\",\"lastname\":\"Washington”}’;\nvar parser = new global.JSON();\nvar obj = parser.decode(str);\ngs.info(‘The first name is ’  + obj.name);","description":"To use in a scoped script.","output":"The first name is George"}]},{"name":"encode","description":"Creates a string from a JSON object.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This class is deprecated. Use the JavaScript JSON object instead.</div></p>","params":[{"name":"jsonObject","type":"Object","description":"The JSON object to be turned into a string."}],"returns":{"type":"String","description":"A JSON formatted string."},"example":[{"code":"var obj = {“name\":\"George\",\"lastname\":\"Washington\"};\nvar parser = new JSON();\nvar str = parser.encode(obj);\ngs.info(‘The object ’  + str);","description":"","output":"The object {&quot;lastname&quot;:&quot;Washington&quot;,&quot;name&quot;:&quot;George&quot;}"},{"code":"var obj = {“name\":\"George\",\"lastname\":\"Washington\"};\nvar parser = new global.JSON();\nvar str = parser.encode(obj);\ngs.info(‘The object ’  + str);","description":"To use in a scoped script.","output":""}]},{"name":"parse","description":"Creates an object or primitive type from a JSON formatted string.<p>The JavaScript ES5 native JSON object is used instead of the JSON static methods. If your\n        script needs the old behavior, use the <span class=\"keyword apiname\">encode()</span> and\n          <span class=\"keyword apiname\">decode()</span> methods.</p>","params":[{"name":"str","type":"String","description":"A JSON formatted string."}],"returns":{"type":"Object","description":"An object created from the specified string."},"example":[{"code":"var str = ‘{“name\":\"George\",\"lastname\":\"Washington”}’;\nvar obj = JSON.parse(str);\ngs.info(‘The first name is ’  + obj.name);","description":"","output":"The first name is George"}]},{"name":"stringify","description":"Creates a string from a JSON object.<p>The <span class=\"keyword apiname\">JSON.stringify()</span> method can only convert numbers, strings, and Java\n        native objects to strings. It cannot convert user-defined objects to strings, unless those\n        objects provide a <span class=\"keyword apiname\">toJSON()</span> method. The call to\n          <span class=\"keyword apiname\">current.sys_id()</span> returns a GlideElement object which does not have a\n          <span class=\"keyword apiname\">toJSON()</span> method, so the return value for stringify is empty: \"{}\". The\n        JavaScript ES5 native JSON object is used instead of the JSON static methods. If your script\n        needs the old behavior, use the <span class=\"keyword apiname\">encode()</span> and <span class=\"keyword apiname\">decode()</span>\n        methods.</p><p><span class=\"keyword apiname\">JSON.stringify()</span> converts a value to JSON notation using the following\n        guidelines: <ul class=\"ul\" id=\"r_JSON-stringify_O__ul_wsq_4mf_pfb\">\n          <li class=\"li\">If the value has a <span class=\"keyword apiname\">toJSON()</span> method, it is responsible for defining\n            the data that is serialized.</li>\n\n          <li class=\"li\">Boolean, number, and string objects are converted to the corresponding primitive\n            values during stringification; in accordance with the traditional conversion\n            semantics.</li>\n\n          <li class=\"li\">If a function, undefined, or a symbol is encountered during conversion, it is either\n            omitted (when it is found in an object) or censored to null (when it is found in an\n            array). <span class=\"keyword apiname\">JSON.stringify()</span> also returns undefined when passing in\n            \"pure\" values, such as <samp class=\"ph codeph\">JSON.stringify(function(){})</samp> or\n              <samp class=\"ph codeph\">JSON.stringify(undefined)</samp>.</li>\n\n          <li class=\"li\">All symbol-keyed properties are ignored, even when using a\n              <var class=\"keyword varname\">replacer()</var> function.</li>\n\n          <li class=\"li\">Instances of Date implement the <span class=\"keyword apiname\">toJSON()</span> function by returning a\n            string (the same as <span class=\"keyword apiname\">date.toISOString()</span>), thus they are treated as\n            strings.</li>\n\n          <li class=\"li\">The numbers Infinity and NaN, as well as the value null, are all considered null. </li>\n\n          <li class=\"li\">For all other object instances, only their enumerable properties are serialized.</li>\n\n        </ul></p>","params":[{"name":"jsonObject","type":"Object","description":"JSON object to turn into a string."}],"returns":{"type":"String","description":"JSON formatted string."},"example":[{"code":"var obj = {“name\":\"George\",\"lastname\":\"Washington\"};\nvar str =  JSON.stringify(obj);\ngs.info(‘The object ’  + str);\n","description":"","output":"The object {&quot;name&quot;:&quot;George&quot;,&quot;lastname&quot;:&quot;Washington&quot;}"},{"code":"function replacer(name, val) {\n   // convert GlideElement to string\n   if ( val &amp;&amp; val.constructor === GlideElement ) {\n       return val.toString();\n   } else {\n       return val; // return as is\n   }\n};\n\nvar s = global.JSON.stringify(json_obj, replacer);\ngs.info(\"json=\"+s);\n","description":"It is also possible to define a <span class=\"keyword apiname\">replacer()</span> function and use that in the\n          <span class=\"keyword apiname\">stringify()</span> call. This function leverages the\n          <span class=\"keyword apiname\">GlideElement.toString()</span> method to provide a string representation of\n        the GlideElement object.","output":""}]}]},"JSONParser":{"meta":{"has_constructor":true,"description":"Provides a JSON parser that does not use the JavaScript <span class=\"keyword apiname\">eval()</span>\n  function. The methods of JSONParser do not validate the JSON string.<br/><br/>This class cannot be used in a scoped application. Use the JavaScript JSON object instead.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> This class is deprecated. Use the JavaScript JSON object instead.</div>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a JSONParser object.<p>This class cannot be used in a scoped application. Use the JavaScript JSON object\n        instead.</p><p>This class is deprecated. Use the JavaScript JSON object instead.</p>","params":[],"returns":{"type":"","description":""},"example":[]}]},"JSUtil":{"meta":{"has_constructor":false,"description":"JSUtil is a class of shortcuts for common JavaScript routines. Script includes and business rules that are marked as Application = \"global\" and Accessible\n   from = \"All applications\" can be used in scoped scripts.<br/><br/><span class=\"keyword apiname\">JSUtil</span> is not available in scoped scripts.<br/><br/>The <span class=\"keyword apiname\">JSUtil</span> API is available in server-side scripts.","example":""},"properties":{},"methods":[{"name":"doesNotHave","description":"Checks if item is null or is undefined.","params":[{"name":"item","type":"Object","description":"The object to check"}],"returns":{"type":"Boolean","description":"True if the specified object is null or undefined."},"example":[{"code":"var x = \"the quick brown fox\";\nvar y = \"\";\nvar z;\n \ngs.print(\"x = '\" + x + \"', JSUtil.doesNotHave(x) = \" + JSUtil.doesNotHave(x));\ngs.print(\"y = '\" + y + \"', JSUtil.doesNotHave(y) = \" + JSUtil.doesNotHave(y));\ngs.print(\"z = '\" + z + \"', JSUtil.doesNotHave(z) = \" + JSUtil.doesNotHave(z))","description":"","output":""}]},{"name":"escapeAttr","description":"Escape ampersands commonly used to define URL attributes.","params":[{"name":"text","type":"String","description":"The text"}],"returns":{"type":"String","description":"The text with ampersands properly escaped."},"example":[{"code":"var attr = \"sysparm_query=active=true&amp;sysparm_view=special\";\n \ngs.print(JSUtil.escapeAttr(attr));","description":"","output":""}]},{"name":"escapeText","description":"Escapes invalid XML characters such as \"< > &\".","params":[{"name":"text","type":"String","description":"The text"}],"returns":{"type":"String","description":"The text with escape characters added."},"example":[{"code":"var html = \"&lt;b&gt;This is my title&lt;/b&gt;\";\n \ngs.print(JSUtil.escapeText(html));","description":"","output":""}]},{"name":"getBooleanValue","description":"Returns the value in a boolean GlideRecord field.","params":[{"name":"gr","type":"GlideRecord","description":"A GlideRecord"},{"name":"field","type":"String","description":"The field from which to retrieve the boolean value."}],"returns":{"type":"Boolean","description":"Returns the value in a boolean GlideRecord field, returns true if value of\n                field is true, \"true\", 1, or \"1\"."},"example":[{"code":"var inc = new GlideRecord(\"incident\");\n//get an active incident\ninc.addActiveQuery();\ninc.setLimit(1);\ninc.query();\ninc.next();\n \ngs.print(JSUtil.getBooleanValue(inc, \"active\"));","description":"","output":"true"}]},{"name":"has","description":"Checks if item is not null and is not undefined.","params":[{"name":"item","type":"Object","description":"The Object to check"}],"returns":{"type":"Boolean","description":"True if the specified object is not null and is not undefined."},"example":[{"code":"var x = \"the quick brown fox\";\nvar y = \"\";\nvar z;\n \ngs.print(\"x = '\" + x + \"', JSUtil.has(x) = \" + JSUtil.has(x));\ngs.print(\"y = '\" + y + \"', JSUtil.has(y) = \" + JSUtil.has(y));\ngs.print(\"z = '\" + z + \"', JSUtil.has(z) = \" + JSUtil.has(z));","description":"","output":""}]},{"name":"instance_of","description":"Checks to see if the specified object is a member of the specified class.<p>For JavaScript objects, this method behaves exactly like the JavaScript operator\n        \"instanceof\", but also supports Java objects.</p>","params":[{"name":"item","type":"Object","description":"The object to check"},{"name":"class","type":"String","description":"The class to check"}],"returns":{"type":"Boolean","description":"True if the specified object is a member of the specified class."},"example":[{"code":"var a = ['a','b','c'];\nvar b = 10;\nvar c = new GlideRecord(\"incident\");\n \ngs.print(\"JSUtil.instance_of(a,'Array') = \" + JSUtil.instance_of(a,Array));\ngs.print(\"JSUtil.instance_of(a,'String') = \" + JSUtil.instance_of(a,String));\n \ngs.print(\"JSUtil.instance_of(b,'String') = \" + JSUtil.instance_of(b,String));\n \ngs.print(\"JSUtil.instance_of(c,'GlideRecord') = \" + JSUtil.instance_of(c,GlideRecord));","description":"","output":""}]},{"name":"isJavaObject","description":"Checks if the specified object is a Java class.","params":[{"name":"value","type":"Object","description":"The object to check"}],"returns":{"type":"Boolean","description":"True if the specified object is an instance of a Java class."},"example":[{"code":"var tu = new TableUtils(\"incident\");\nvar classes = tu.getHierarchy(); //Java ArrayList\nvar tables = [\"task, incident\"]; //JavaScript Array\n \ngs.print(\"JSUtil.isJavaObject(classes) = \" + JSUtil.isJavaObject(classes));\ngs.print(\"JSUtil.isJavaObject(tables) = \" + JSUtil.isJavaObject(tables));","description":"","output":""}]},{"name":"logObject","description":"Logs all the properties in the given object: name, type, and value.<p>Output is written to the console if you are running from a background script or have debug\n        logging enables. The output is also written to the system log.</p>","params":[{"name":"obj","type":"Object","description":"The object for which to enumerate properties"},{"name":"name","type":"String","description":"Optional name for the logged object"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var arr = [\"a\",\"b\",\"c\"];\n \nvar inc = new GlideRecord(\"incident\");\n//get an active incident\ninc.addActiveQuery();\ninc.setLimit(1);\ninc.query();\ninc.next();\n \nJSUtil.logObject(arr, \"arr\");\nJSUtil.logObject(inc, \"inc\");","description":"","output":""}]},{"name":"nil","description":"Checks if item is null, undefined, or evaluates to the empty string.","params":[{"name":"item","type":"Object","description":"The object to check"}],"returns":{"type":"Boolean","description":"True if the item is null, undefined, or evaluates to the empty string."},"example":[{"code":"var x = \"the quick brown fox\";\nvar y = \"\";\nvar z;\n \ngs.print(\"x = '\" + x + \"', JSUtil.nil(x) = \" + JSUtil.nil(x));\ngs.print(\"y = '\" + y + \"', JSUtil.nil(y) = \" + JSUtil.nil(y));\ngs.print(\"z = '\" + z + \"', JSUtil.nil(z) = \" + JSUtil.nil(z));","description":"","output":""}]},{"name":"notNil","description":"Checks if item is null, undefined, or evaluates to the empty string.","params":[{"name":"item","type":"Object","description":"The object to check"}],"returns":{"type":"Boolean","description":"True if the item exists and is not empty."},"example":[{"code":"var x = \"the quick brown fox\";\nvar y = \"\";\nvar z;\n \ngs.print(\"x = '\" + x + \"', JSUtil.notNil(x) = \" + JSUtil.notNil(x));\ngs.print(\"y = '\" + y + \"', JSUtil.notNil(y) = \" + JSUtil.notNil(y));\ngs.print(\"z = '\" + z + \"', JSUtil.notNil(z) = \" + JSUtil.notNil(z));","description":"","output":""}]},{"name":"toBoolean","description":"Converts the specified object to a Boolean.","params":[{"name":"item","type":"Object","description":"The object to convert"}],"returns":{"type":"Boolean","description":"If the specified object is a boolean, it is passed through. Non-zero numbers\n                return true. Null or undefined return false. Strings return true only if exactly\n                equal to 'true'."},"example":[{"code":"var zero = 0;\nvar one = 1;\nvar number = 12;\nvar trueBoolean = true;\nvar trueString = \"true\";\nvar otherString = \"random text\";\n \ngs.print(\"JSUtil.toBoolean(zero) = \" + JSUtil.toBoolean(zero));\ngs.print(\"JSUtil.toBoolean(one) = \" + JSUtil.toBoolean(one));\ngs.print(\"JSUtil.toBoolean(number) = \" + JSUtil.toBoolean(number));\ngs.print(\"JSUtil.toBoolean(trueBoolean) = \" + JSUtil.toBoolean(trueBoolean));\ngs.print(\"JSUtil.toBoolean(trueString) = \" + JSUtil.toBoolean(trueString));\ngs.print(\"JSUtil.toBoolean(otherString) = \" + JSUtil.toBoolean(otherString));","description":"","output":""}]},{"name":"type_of","description":"Determines the type of the specified object.","params":[{"name":"value","type":"Object","description":"The object to check"}],"returns":{"type":"String","description":"The type of the specified object. <ul class=\"ul\" id=\"r_JSUtil-type_of_O__ul_rjh_sj5_4t\">\n                  <li class=\"li\">'null' if the given value is null or undefined </li>\n\n                  <li class=\"li\">'string' if the given value is a primitive string or a String wrapper instance </li>\n\n                  <li class=\"li\">'number' if the given value is a primitive number or a Number wrapper instance </li>\n\n                  <li class=\"li\">'boolean' if the given value is a primitive boolean or a Boolean wrapper\n                    instance </li>\n\n                  <li class=\"li\">'function' if the given value is a function </li>\n\n                  <li class=\"li\">'object' otherwise</li>\n\n                </ul>"},"example":[{"code":"var a = [\"a\",\"b\",\"c\"];\nvar b = 10;\nvar c = new GlideRecord(\"incident\");\nvar d = true;\nvar e;\n \ngs.print(\"JSUtil.type_of(a) = \" + JSUtil.type_of(a));\ngs.print(\"JSUtil.type_of(b) = \" + JSUtil.type_of(b));\ngs.print(\"JSUtil.type_of(c) = \" + JSUtil.type_of(c));\ngs.print(\"JSUtil.type_of(d) = \" + JSUtil.type_of(d));\ngs.print(\"JSUtil.type_of(e) = \" + JSUtil.type_of(e));","description":"","output":""}]},{"name":"unescapeAttr","description":"Restore ampersands from escaped text.","params":[{"name":"text","type":"String","description":"The text"}],"returns":{"type":"String","description":"The text with escape characters removed."},"example":[{"code":"var attr = \"sysparm_query=active=true&amp;amp;sysparm_view=special\";\n \ngs.print(JSUtil.unescapeAttr(attr));","description":"","output":""}]},{"name":"unescapeText","description":"Removes escape characters.","params":[{"name":"text","type":"String","description":"The text to process."}],"returns":{"type":"String","description":"The the text without escape characters."},"example":[{"code":"var html = \"&amp;lt;b&amp;gt;This is my title&amp;lt;/b&amp;gt;\";\n \ngs.print(JSUtil.unescapeText(html));","description":"","output":""}]}]},"Legacy Notify API":{"meta":{"has_constructor":false,"description":"The legacy Notify API provides functionality for sending emails, sending SMS messages,\n  and setting up conference calls. Use this when you want to use Notify functionality with applications on your system.<div class=\"note note\"><span class=\"notetitle\">Note:</span> This\n    API is included with the legacy Notify functionality. For APIs included in the current Notify\n    feature, see the Notify, NotifyAction, NotifyPhoneNumber, and NotifyClient APIs.</div>","example":""},"properties":{},"methods":[{"name":"addConferenceCallParticipant","description":"Adds ad-hoc users to an ongoing conference call.<p>When the method is called with a phone number for the participant parameter and there is\n        exactly one sys_user record that matches the phone number, that sys_user record will be\n        related to the participant. The participant's phone number field will be left blank because\n        the phone number is in the sys_user record. If there are several sys_user records that match\n        the phone number, or if there are no results, the participant's phone number field will be\n        filled in, and there will be no stored reference to sys_user because the user is not\n        known.</p>","params":[{"name":"conferenceCall","type":"String or GlideRecord","description":"The sys_id or GlideRecord of an active conference call."},{"name":"participant","type":"String or GlideRecord","description":"The sys_id or GlideRecord of a user with an E.164-compliant phone number, or an\n                E.164-compliant phone number."}],"returns":{"type":"GlideRecord","description":"The participant record of the new participant that was added to the conference\n                call."},"example":[{"code":"// add a new participant by conference call sys_id (string) and phone number (string) \nvar nn = new SNC.NotifyNow();\ngs.log(nn.addConferenceCallParticipant('d193b242eb020100a04d4910f206fe39', '+31612345678'));","description":"","output":""},{"code":"// add a new participant by conference call sys_id (string) and user record (GlideRecord)\nvar user = new GlideRecord('sys_user');\nuser.query('user_name', 'myUserName');\nif (user.hasNext() &amp;&amp; user.next()) {\n    var nn = new SNC.NotifyNow();\n    gs.log(nn.addConferenceCallParticipant('d193b242eb020100a04d4910f206fe39', user));\n \n    // you could have added the user by sys_id as well:\n    // nn.addConferenceCallParticipant('d193b242eb020100a04d4910f206fe39', user.getValue('sys_id'));\n} else {\n    gs.log('no such user');\n}","description":"","output":""},{"code":"// add a new participant by conference call record (GlideRecord) and phone number (string)\nvar conferenceCall = new GlideRecord('notifynow_conference_call');\nconferenceCall.query('title', 'IA0001001');\nif (conferenceCall.hasNext() &amp;&amp; conferenceCall.next()) {\n    var nn = new SNC.NotifyNow();\n    gs.log(nn.addConferenceCallParticipant(conferenceCall, '+31612345678'));\n} else {\n    gs.log('no such conference call');\n}","description":"","output":""}]},{"name":"convertLocalPhoneNumberToE164","description":"Converts a local phone number to an E.164-compliant phone number based on a user's\n    location.","params":[{"name":"userID","type":"String","description":"The sys_id of a sys_user record to get location information from."},{"name":"phoneNumber","type":"String","description":"The phone number."}],"returns":{"type":"String","description":"The E.164-compliant phone number."},"example":[{"code":"var localPhoneNumber = '01784 221600';\nvar userName = 'Heath Vanalphen';\n \nvar user = new GlideRecord('sys_user');\nuser.get('name',userName);\nvar E164Number = new SNC.NotifyNow().convertLocalPhoneNumberToE164(user.getUniqueValue(), localPhoneNumber);\ngs.log('converted: ' + localPhoneNumber + ' to ' + E164Number + ' based on ' + user.getValue('name') + \n     '\\'s location (' + user.getValue('location') + ')');","description":"","output":""}]},{"name":"getConferenceCallParticipants","description":"Returns all participants for a conference call.","params":[{"name":"conferenceCallId","type":"String","description":"The ID of the conference call."},{"name":"isCallable","type":"Boolean","description":"An optional flag to return either only the users you can call (true) or those\n                you cannot call (false)."}],"returns":{"type":"GlideRecord","description":"The participants"},"example":[{"code":"var nn = new SNC.NotifyNow();\nvar user = nn.getConferenceCallParticipants('c2e91710eb120100f34087b9d106fe37');\n \nwhile (user.hasNext() &amp;&amp; user.next()) {\n    if (user.getValue('participant')) {\n        gs.log('user: ' + user.getValue('sys_id'));\n    } else {\n        gs.log('phone number: ' + user.getValue('phone_number'));\n    }\n}","description":"","output":""},{"code":"var nn = new SNC.NotifyNow();\nvar user = nn.getConferenceCallParticipants('c2e91710eb120100f34087b9d106fe37', true);\n \nwhile (user.hasNext() &amp;&amp; user.next()) {\n    if (user.getValue('participant')) {\n        gs.log('user: ' + user.getValue('sys_id'));\n    } else {\n        gs.log('phone number: ' + user.getValue('phone_number'));\n    }\n}","description":"","output":""},{"code":"var conferenceCallId = '32b11430eb1201003cf587b9d106feb8';\n \n// get all participants\ngs.log('all conference call participants:');\nvar nn = new SNC.NotifyNow();\nvar user = nn.getConferenceCallParticipants(conferenceCallId);\ngs.log(user);\n \n// get all callable participants\ngs.log('all conference call participants we can call:');\nuser = nn.getConferenceCallParticipants(conferenceCallId, true);\ngs.log(user);\n \n// get all un callable participants\ngs.log('all conference call participants that are already in an active session and whom we cannot call:');\nuser = nn.getConferenceCallParticipants(conferenceCallId, false);\ngs.log(user);","description":"","output":""}]},{"name":"getFrequentlyCalledUsers","description":"Returns a number of frequently-called users, up to the limit parameter, in alphabetical\n    order.","params":[{"name":"limit","type":"Number","description":"The maximum number of results."}],"returns":{"type":"GlideRecord","description":"The frequently called users in alphabetical order."},"example":[{"code":"var nn = new SNC.NotifyNow();\nvar fc = nn.getFrequentlyCalledUsers(10);\n \nwhile (fc.hasNext() &amp;&amp; fc.next()) {\n    gs.log(\"got user \" + fc.getValue('name') + ' - ' + fc.getValue('sys_id'));\n}","description":"","output":""}]},{"name":"getPreferredE164SMSNumber","description":"Returns a user's preferred E.164-compliant phone number for SMS messages.","params":[{"name":"user","type":"GlideRecord or String","description":"The user record or the sys_id of a user to get the E.164-compliant phone number\n                from."}],"returns":{"type":"String","description":"The E.164-compliant phone number or null."},"example":[{"code":"var userID = \"&lt;user sys_id&gt;\";\nvar E164Number = new SNC.NotifyNow().getPreferredE164SMSNumber(userID);\ngs.log('the preferred phone number for sending SMS notifications is ' + E164Number + ' for user with id: ' + userID);","description":"","output":""}]},{"name":"getPreferredE164VoiceNumber","description":"Returns a user's preferred E.164-compliant phone number for voice calls.","params":[{"name":"user","type":"GlideRecord or String","description":"The user record or the sys_id of a user to get the E.164-compliant phone number\n                from."}],"returns":{"type":"String","description":"The E.164-compliant phone number or null."},"example":[{"code":"var userID = \"&lt;user sys_id&gt;\";\nvar E164Number = new SNC.NotifyNow().getPreferredE164VoiceNumber(userID);\ngs.log('the preferred phone number for setting up voice calls is ' + E164Number + ' for user with id: ' + userID);","description":"","output":""}]},{"name":"getPreferredEmailAddress","description":"Returns a user's preferred email address","params":[{"name":"user","type":"GlideRecord or String","description":"The user record or the sys_id of a user to get the email address from."}],"returns":{"type":"String","description":"The email address or null."},"example":[{"code":"var userID = \"some user sys id\";\nvar email = new SNC.NotifyNow().getPreferredEmailAddress(userID);\ngs.log('the preferred email address for sending email notifications is ' + email + ' for user with id: ' + userID);","description":"","output":""}]},{"name":"getReadyState","description":"Indicates whether Notify is set up correctly or not.<p>This method can only be accessed by administrators or users with the notifynow_admin role.\n        Users with all other roles get the message False when trying to run the function in a\n        script.</p>","params":[],"returns":{"type":"Boolean","description":"True if Notify is set up correctly, otherwise false."},"example":[{"code":"var nn = new SNC.NotifyNow();\ngs.log(((nn.getReadyState()) ? \"OK\" :  \"NOT OK\"));","description":"","output":""}]},{"name":"getStatus","description":"Returns the current status of Notify configuration.<p>This method can only be accessed by administrators or users with the notifynow_admin role.\n        Users with all other roles get the message Unauthorized when trying to run the function in a\n        script.</p>","params":[],"returns":{"type":"String","description":"One of the possible status messages.<div class=\"p\">\n                  \n<div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table\" frame=\"border\" id=\"r_NN-getStatus__table_gdb_jc2_vt\" rules=\"all\" summary=\"\">\n                      \n                      \n                      <tbody class=\"tbody\">\n                        <tr class=\"row\">\n                          <td class=\"entry\" valign=\"top\">Status </td>\n\n                          <td class=\"entry\" valign=\"top\"> Description </td>\n\n                        </tr>\n\n                        <tr class=\"row\">\n                          <td class=\"entry\" valign=\"top\"> NO_NUMBER_MESSAGE </td>\n\n                          <td class=\"entry\" valign=\"top\"> The account does not have a telephone number set up. Ensure that\n                            you set up the telephone number for the account. </td>\n\n                        </tr>\n\n                        <tr class=\"row\">\n                          <td class=\"entry\" valign=\"top\"> NO_ENDPOINTS_MESSAGE </td>\n\n                          <td class=\"entry\" valign=\"top\"> The account does not have its endpoints set up correctly. Ensure\n                            that you set up the endpoints for the account. </td>\n\n                        </tr>\n\n                        <tr class=\"row\">\n                          <td class=\"entry\" valign=\"top\"> ACCOUNT_OK_MESSAGE </td>\n\n                          <td class=\"entry\" valign=\"top\"> The account is active and ready for use. </td>\n\n                        </tr>\n\n                        <tr class=\"row\">\n                          <td class=\"entry\" valign=\"top\"> ACCOUNT_NO_AUTH </td>\n\n                          <td class=\"entry\" valign=\"top\"> The Twilio AuthToken is not valid. </td>\n\n                        </tr>\n\n                        <tr class=\"row\">\n                          <td class=\"entry\" valign=\"top\"> ACCOUNT_NOT_CONFIGURED </td>\n\n                          <td class=\"entry\" valign=\"top\"> The Twilio AccountSID or AuthToken is not valid. </td>\n\n                        </tr>\n\n                      </tbody>\n\n                    </table>\n</div>\n\n                </div>"},"example":[{"code":"var nn = new SNC.NotifyNow();\ngs.log(nn.getStatus());","description":"","output":""}]},{"name":"initiateConferenceCall","description":"Initiate a new conference call.","params":[{"name":"conferenceCallParticipants","type":"String","description":"One or more users, conference call participants, identified by the sys_ids from\n                the sys_user table or E.164-compliant phone numbers."},{"name":"conferenceCallTitle","type":"String","description":"Title of the conference call. This parameter has a maximum length of 40\n                characters."}],"returns":{"type":"GlideRecord","description":"The conference call record, or null if there was an error."},"example":[{"code":"var participants = ['+31205655548', '+31205655552', '+31652825393'];\n// set up conference call\nvar nn = new SNC.NotifyNow();\nvar conferenceCall = nn.initiateConferenceCall(participants, \"testing12\");\ngs.log('started conference call: ' + conferenceCall.getUniqueValue());","description":"This initiates a conference call with E.164-compliant phone numbers for participants,\n        without the optional source record parameter and and does not send any conference call\n        details via SMS or email.","output":""}]},{"name":"initiateConferenceCall","description":"Initiate a new conference call.","params":[{"name":"conferenceCallParticipants","type":"String","description":"One or more users, conference call participants, identified by the sys_ids from\n                the sys_user table or E.164-compliant phone numbers."},{"name":"conferenceCallTitle","type":"String","description":"Title of the conference call. This parameter has a maximum length of 40\n                characters."},{"name":"sourceRecord","type":"GlideRecord","description":"Source record to associate to the conference call such as an incident or\n                problem number."},{"name":"private","type":"Boolean","description":"Value to control if a conference call is private. This value defaults to\n                false."}],"returns":{"type":"GlideRecord","description":"The conference call record, or null if there was an error."},"example":[{"code":"// define phone number participants\nvar participants = ['+31205655548', '+31205655552', '+31652825393'];\n \n// we also want to add two Dutch sys_user participants\nvar user = new GlideRecord('sys_user');\nuser.addNotNullQuery('mobile_phone');\nuser.addQuery('mobile_phone', 'STARTSWITH', '+316');\nuser.setLimit(2);\nuser.query();\n \n// add users to the participant array\nwhile (user.hasNext() &amp;&amp; user.next()) {\n\tgs.log('adding user ' + user.getValue('name') + ' with phone number ' + \n             user.getValue('mobile_phone') + ' to the participant array');\n\tparticipants.push(user.getUniqueValue());\n}\n \n// define a source record to associate with the conference call\nvar source = new GlideRecord(\"cmdb_ci\");\nsource.query(\"asset_tag\", \"P1000167\");\nif (source.hasNext() &amp;&amp; source.next()) {\n\t// set up conference call\n\tvar nn = new SNC.NotifyNow();\n\tvar conferenceCall = nn.initiateConferenceCall(participants, \"testing 1 2\", source);\n \n\t// check if the conference call was successfully created\n\tif (conferenceCall != null) {\n\t\tgs.log('started conference call: ' + conferenceCall.getUniqueValue());\n\t} else {\n\t\tgs.log('could not start the conference call :(');\n\t}\n}","description":"This initiates a conference call with participants that have a E.164-compliant phone number\n        and participants from the sys_user table and sends conference call details via SMS and email\n        to all participants.","output":""}]},{"name":"isCallable","description":"Determines whether a user is callable or not.<p>A user must have a valid phone number to be callable. A user who is already in an active\n        session is not callable.</p>","params":[{"name":"participant","type":"String or GlideRecord","description":"A sys_user or notifynow_participant record, or an E.164-compliant phone\n                number."}],"returns":{"type":"boolean","description":"Whether this participant can be called or not."},"example":[{"code":"var nn = new SNC.NotifyNow();\ngs.log('by number: ' + nn.isCallable('+31612345678'));\n \nvar user = GlideRecord('sys_user');\nuser.query('sys_id', '13d39544eb5201003cf587b9d106fea9');\nif (user.hasNext() &amp;&amp; user.next())\n  gs.log('by user: ' + nn.isCallable(user));\n \nvar participant = GlideRecord('notifynow_participant');\nparticipant.query('sys_id', '33b11430eb1201003cf587b9d106feb9');\nif (participant.hasNext() &amp;&amp; participant.next())\n  gs.log('by participant: ' + nn.isCallable(participant));","description":"","output":""}]},{"name":"isSMSCapable","description":"Checks if the telephone number associated with the Twilio account is capable of sending\n    SMS messages.","params":[],"returns":{"type":"Boolean","description":"Whether the telephone number associated with the Twilio account is capable of\n                sending SMS messages."},"example":[{"code":"gs.log('The twilio number is SMS capable: ' + ((new SNC.NotifyNow().isSMSCapable()) ? 'yes' : 'no'));","description":"","output":""}]},{"name":"isSMSCapable","description":"Checks if a user is able to send SMS messages.","params":[{"name":"userID","type":"String","description":"The sys_id of the user you want to check for an SMS-capable phone\n                number."}],"returns":{"type":"Boolean","description":"If the user can send SMS messages."},"example":[{"code":"gs.log('the user is able to send SMS messages (e.g. has a SMS device): ' + ((new SNC.NotifyNow().isSMSCapable('&lt;user sys_id&gt;')) ? \n     'yes' : 'no'));","description":"","output":""}]},{"name":"isVoiceCapable","description":"Checks if the telephone number associated with the Twilio account is capable of setting\n    up phone calls.","params":[],"returns":{"type":"Boolean","description":"Whether the telephone number associated with the Twilio account is capable of\n                setting up phone calls."},"example":[{"code":"gs.log('the Twilio number is Voice capable: ' + ((new SNC.NotifyNow().isVoiceCapable()) ? 'yes' : 'no'));","description":"","output":""}]},{"name":"isVoiceCapable","description":"Checks if a user is able to make voice calls.","params":[{"name":"userID","type":"String","description":"The sys_id of the user you want to check for a voice-call capable phone\n                number."}],"returns":{"type":"boolean","description":"Whether the user has a voice-call capable phone number."},"example":[{"code":"gs.log('the user is able to send SMS messages (e.g. has a SMS device): ' + \n     ((new SNC.NotifyNow().isVoiceCapable('someuserid')) ? 'yes' : 'no'));","description":"","output":""}]},{"name":"kick","description":"Removes a participant from a conference call.","params":[{"name":"participant","type":"GlideRecord","description":"The conference call participant to remove from the call."}],"returns":{"type":"Boolean","description":"True if the participant was removed, otherwise false."},"example":[{"code":"var participantId = \"&lt;participant sys_id&gt;\";\nvar participant = new GlideRecord('notifynow_participant');\nparticipant.get(participantId);\nif (participant.isValid()) {\n     // kick participant\n     result = new SNC.NotifyNow().kick(participant);\n     gs.log('participant kicked: ' + result);\n}","description":"","output":""}]},{"name":"mute","description":"Mutes a participant on a conference call.","params":[{"name":"participant","type":"GlideRecord","description":"The conference call participant to mute."}],"returns":{"type":"Boolean","description":"True if the participant was muted, otherwise false."},"example":[{"code":"var participantId = \"&lt;participant sys_id&gt;\";\nvar participant = new GlideRecord('notifynow_participant');\nparticipant.get(participantId);\nif (participant.isValid()) {\n     // mute participant\n     result = new SNC.NotifyNow().mute(participant);\n     gs.log('participant muted: ' + result);\n}","description":"","output":""}]},{"name":"sendEmailQuestion","description":"Send an email question to an email address.<p>The sendEmailQuestion method produces a question body and requires users to click a link to\n        indicate their choice.</p>","params":[{"name":"emailAddress","type":"String","description":"Email address to send the question to."},{"name":"question","type":"String or GlideRecord","description":"The question record to send or the sys_id of a question record."},{"name":"sourceRecord","type":"GlideRecord","description":"An optional source record to associate to the SMS question, such as an\n                incident."},{"name":"emailSubject","type":"String","description":"Optional text to override the default email subject."}],"returns":{"type":"String","description":"The conversation sys_id."},"example":[{"code":"var user = GlideRecord(\"sys_user\");\nuser.get(\"email\", \"someone@somedomain.com\");\n \nnew SNC.NotifyNow().sendEmailQuestion(user.getValue('email'), \"b6b34500bf3111003cf585ce2c0739ce\", user);","description":"This example demonstrates using the default email subject.","output":""},{"code":"new SNC.NotifyNow().sendEmailQuestion(\"someone@somedomain.com\", \"b6071733bf1111003cf585ce2c07390f\", current, \n        \"Please answer this question\");","description":"This example uses dot-walking and specifies a source record and email subject.","output":""},{"code":"new SNC.NotifyNow().sendEmailQuestion(\"someone@somedomain.com\", \"b6071733bf1111003cf585ce2c07390f\", \n        \"Please answer this question\");","description":"This example uses dot-walking and specifies an email subject but no source record.","output":""}]},{"name":"sendSMS","description":"Sends an SMS message to an E.164-compliant mobile phone number.<p>Notify supports international numbers. Using this method with a number that does not\n        support sending SMS messages results in an error being logged.</p>","params":[{"name":"phoneNumber","type":"String","description":"The E.164-compliant phone number to send the message to."},{"name":"smsBody","type":"String","description":"The message to send, maximum 1600 characters."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"new SNC.NotifyNow().sendSMS(\"+31612345678\", \"This is a message without source record\");","description":"","output":""}]},{"name":"sendSMS","description":"Sends an SMS message to an E.164-compliant mobile phone number.<p>Notify supports international numbers. Using this method with a number that does not\n        support sending SMS messages results in an error being logged.</p>","params":[{"name":"phoneNumber","type":"String","description":"The E.164-compliant phone number to send the message to."},{"name":"smsBody","type":"String","description":"The message to send, maximum 1600 characters."},{"name":"source","type":"GlideRecord","description":"The source record to associate with this SMS message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var source = new GlideRecord(\"my_table\");\nsource.query(\"my_field\", \"my_value\");\n\nif (source.hasNext() &amp;&amp; source.next()) {\n    // send a text message\n    var nn = new SNC.NotifyNow();\n    var message = \"this is just a test\";\n    var number = \"+31612345678\";\n    nn.sendSMS(number, message, source);\n}","description":"","output":""},{"code":"new SNC.NotifyNow().sendSMS(\"+31612345678\", \"this is a test\", current);","description":"This example uses dot-walking and the current record as the source record.","output":""}]},{"name":"sendSMSQuestion","description":"Sends an SMS question.","params":[{"name":"phoneNumber","type":" ","description":"An E.164-compliant phone number to send the message to."},{"name":"question","type":"String or GlideRecord","description":"The question record to send or the sys_id of a question record."},{"name":"sourceRecord","type":" ","description":"An optional source record to associate to the SMS question, such as an\n                incident."}],"returns":{"type":"String","description":"The conversation sys_id, or null if the SMS was not sent successfully."},"example":[{"code":"var question = new GlideRecord(\"notifynow_question\");\nquestion.query();\n \n// get the first question\nif (question.hasNext() &amp;&amp; question.next()) {\n\t// send the sms question\n        var number = \"+31612345678\";\n\tvar nn = new SNC.NotifyNow();\n\tnn.sendSMSQuestion(number, question.getUniqueValue(), current);\n}","description":"","output":""}]},{"name":"umute","description":"Unmutes a participant on a conference call.","params":[{"name":"participant","type":"GlideRecord","description":"The muted conference call participant to unmute."}],"returns":{"type":"Boolean","description":"True if the participant was unmuted, otherwise false."},"example":[{"code":"var participantId = \"&lt;participant sys_id&gt;\";\nvar participant = new GlideRecord('notifynow_participant');\nparticipant.get(participantId);\nif (participant.isValid()) {\n     // unmute participant\n     result = new SNC.NotifyNow().unmute(participant);\n     gs.log('participant unmuted: ' + result);\n}","description":"","output":""}]}]},"Logger":{"meta":{"has_constructor":false,"description":"Inbound email actions can use this JavaScript function to append messages to the email\n    log. The Logger class provides methods that add standard, warning, and error messages to the email\n      log. The added message has its source set to <samp class=\"ph codeph\">email.&lt;Sys ID of incoming\n        email&gt;</samp>.","example":""},"properties":{},"methods":[{"name":"log","description":"Appends the specified message to the email log.<p><pre class=\"pre codeblock\">\nlogger.log(\"Some information\");\n</pre></p>","params":[{"name":"msg","type":"String","description":"Text to append to the email log. These should be information type\n                messages."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"logError","description":"Appends the specified error message to the email log file.<p><pre class=\"pre codeblock\">logger.logError(\"Some error\");\n</pre></p>","params":[{"name":"msg","type":"String","description":"Error message to append to the email log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"logWarning","description":"Appends the specified warning message to the email log file.<p><pre class=\"pre codeblock\">logger.logWarning(\"Some warning\");\n</pre></p>","params":[{"name":"msg","type":"String","description":"Warning message to append to the email log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"LSOFParser":{"meta":{"has_constructor":false,"description":"Parses the output of the <span class=\"keyword cmdname\">lsof</span> command: <samp class=\"ph codeph\">lsof -i4TCP -n -P -F\n   pcnfT</samp> Use this API with a discovery script when you need to parse lsof output.","example":""},"properties":{},"methods":[{"name":"error","description":"Generates the specified error message.","params":[{"name":"msg","type":"String","description":"The error message"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"initFileDescriptor","description":"Initializes the file descriptor process.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"initProcess","description":"Initializes the parser process.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_c","description":"Sets the current command.","params":[{"name":"line","type":"String","description":"The command"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_endFileDescriptor","description":"Closes the file descriptor process.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_endProcess","description":"Closes the parser process.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_f","description":"Sets the current file descriptor.","params":[{"name":"line","type":"String","description":"The file descriptor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_n","description":"Sets the current address.","params":[{"name":"line","type":"String","description":"The address"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_p","description":"Sets the current PID.","params":[{"name":"line","type":"String","description":"The PID"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"on_T","description":"Sets the current state.","params":[{"name":"line","type":"String","description":"The state"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parse","description":"Parses the specified <samp class=\"ph codeph\">lsof</samp> output.<p>Results are available in connections and listeners arrays, and errors are recorded in\n          <span class=\"keyword apiname\">errorString()</span> and <span class=\"keyword apiname\">isValid()</span>.</p>","params":[{"name":"lsofOutput","type":"String","description":"The <samp class=\"ph codeph\">lsof</samp> output"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"MIDServer":{"meta":{"has_constructor":false,"description":"Encapsulates the notion of a MID server. Use these methods in server scripts to manage a MID server using Ajax.","example":""},"properties":{"hostname":{"description":"The name of the MID server's host .","type":"String"},"hostOS":{"description":"The operating system of the MID server's host.","type":"String"},"ip":{"description":"The IP address of the MID server's host .","type":"String"},"name":{"description":"Name of the MID server.","type":"String"},"network":{"description":"The network containing the MID server's host.","type":"String"},"routerIP":{"description":"The IP address of the MID server host's default router.","type":"String"},"status":{"description":"The MID server's status (\"Up\" or \"Down\").","type":"String"},"sysID":{"description":"The sys_id of the MID server record.","type":"String"},"url":{"description":"The URL the MID server uses to contact the instance.","type":"String"},"version":{"description":"Version of the MID server (WAR name).","type":"String"},"windowsDomain":{"description":"Windows domain of the MID server's host (if it is a Windows machine).","type":"String"}},"methods":[{"name":"getByName","description":"Returns the specified MID server.","params":[{"name":"name","type":"String","description":"The MID server name"}],"returns":{"type":"GlideRecord","description":"The record of the requested MID server."},"example":[]},{"name":"getDefault","description":"Returns the MID server associated with the specified schedule (the MID server with the\n    same name). If there is no associated MID server, gets the next MID server in the ecc_agent\n    table.","params":[{"name":"schedule","type":"DiscoverySchedule","description":"The discovery schedule"}],"returns":{"type":"GlideRecord","description":"The MID server"},"example":[]},{"name":"getForPing","description":"Returns the MID Server with the specified schedule and range set.","params":[{"name":"schedule","type":"DiscoverySchedule","description":"The discovery schedule"},{"name":"range","type":"DiscoveryRange","description":"The discovery range set"}],"returns":{"type":"GlideRecord","description":"The MID server"},"example":[]}]},"MIDServerAjax":{"meta":{"has_constructor":true,"description":"Provides AJAX functionality for sending a test probe to the MID server. Use in server scripts  to test a MID server using AJAX.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of MIDServerAjax.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"ajaxFunction_testProbe","description":"Sends a test probe to the MID server.","params":[],"returns":{"type":"Object","description":"Contains the agent name, test probe ID, topic, name, and source."},"example":[{"code":"var msaj = new MIDServerAjax();\nmsaj.ajaxFunction_testProbe();","description":"","output":""}]}]},"MIDServerCluster":{"meta":{"has_constructor":true,"description":"Finds the MID server clusters for a given MID server and reassigns the jobs if\n  necessary. If the MID server agent is up, this class gathers all MID servers (including the original\n   agent) in the load balance clusters that the original agent is part of. If the MID server agent\n   is down and the cluster is load balanced, the class gathers the other agents. If the server agent\n   is down, and the cluster is failover, it gathers the next failover agent. The class then randomly\n   returns the MID server in the final list of MID servers.<br/><br/>Use in server scripts to get MID server cluster information.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Brief description of the method.","params":[{"name":"agent","type":"GlideRecord","description":"The MID server agent"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"clusterExists","description":"Determines if a cluster exists.","params":[],"returns":{"type":"Boolean","description":"True if a cluster exists; otherwise, false."},"example":[{"code":"var midgr = new GlideRecord(\"ecc_agent\");\nmidgr.addQuery(\"name\", \"al1winmid\");\nmidgr.query();\nmidgr.next();\n \nvar mscl = new MIDServerCluster(midgr);\ngs.print(mscl.clusterExists());","description":"","output":"true"}]},{"name":"getClusterAgent","description":"Gets the cluster agent.","params":[],"returns":{"type":"String","description":"The agent name"},"example":[{"code":"// Assuming \"mid1\" and \"mid2\" are in a cluster\nvar midgr = new GlideRecord(\"ecc_agent\");\nmidgr.addQuery(\"name\", \"mid1\");\nmidgr.query();\nmidgr.next();\n \nvar mscl = new MIDServerCluster(midgr);\ngs.print(mscl.getClusterAgent());","description":"","output":"mid2"}]}]},"MIDServerFileSync":{"meta":{"has_constructor":true,"description":"Checks to see if there are any changes to attachments on tables that are instances of\n  MID server synchronized files (ecc_agent_sync_file) and, if so, notifies the MID servers of a\n  change. The tables that extend the sync tables are MID Server JAR file (ecc_agent_jar) and MID Server\n   MIB File (ecc_agent_mib).<br/><br/>Use in server scripts to notify MID servers.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of MIDServerFileSync.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"notifyMIDServers","description":"Checks for any changes to attachments on the specified table that are instances of MID\n    server synchronized files and, if so, notifies the MID servers of a change.","params":[{"name":"table","type":"String","description":"The table to check"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msfs = new MIDServerFileSync();\nmsfs.notifyMIDServers('ex.table.name');","description":"","output":""}]}]},"MIDServerFinder":{"meta":{"has_constructor":true,"description":"Finds a list of MID servers for given IP addresses. Use in server scripts to get the server list.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of MIDServerFinder.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getMIDServers","description":"Gets the names of MID servers available for a given range and capability.","params":[],"returns":{"type":"Array","description":"An array of MID server names. If no MID servers are available, returns an empty\n                array."},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setRanges('10.10.10.1-10.10.11.254');\nvar msnames = msf.getMIDServers();\n \nfor(var i=0; i&lt;msnames.length; i++) {\n  gs.print(msnames[i]);\n};","description":"","output":""}]},{"name":"getMIDServersBySysId","description":"Gets the sys_ids of MID servers available for a given range and capability.","params":[],"returns":{"type":"Array","description":"An array of MID server sys_ids. If no MID servers are available, returns an\n                empty array."},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setRanges('10.10.10.1-10.10.11.254');\nvar msids = msf.getMIDServersBySysId();\n \nfor(var i=0; i&lt;msids.length; i++) {\n  gs.print(msids[i]);\n};","description":"","output":""}]},{"name":"getStatusMessage","description":"Gets the state of the finder operation.","params":[],"returns":{"type":"String","description":"The status message"},"example":[{"code":"var msf = new MIDServerFinder();\ngs.print(msf.getStatusMessage());","description":"","output":""}]},{"name":"setActive","description":"Sets whether to look for active or inactive MID servers. By default, searches are for\n    active MID servers unless inactive is specified by this method.","params":[{"name":"flag","type":"Boolean","description":"If true, look for inactive MID servers. If false, do not look for inactive MID\n                servers."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setActive('true');","description":"","output":""}]},{"name":"setCapabilities","description":"Sets the technologies for which to look.","params":[{"name":"capabilities","type":"Array","description":"Contains a list of capabilities, for example - <samp class=\"ph codeph\">capabilities =\n                  [\"ssh\",\"wmi\",\"snmp\",{\"os_domain\":\"disco\"},{\"phase\":1}];</samp>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setRanges('10.10.10.1-10.10.11.254');\nvar capab = [\"ssh\",\"wmi\",\"snmp\"];\nmsf.setCapabilities(capab);","description":"","output":""}]},{"name":"setDebug","description":"Turns debugging on or off.","params":[{"name":"onOrOff","type":"Boolean","description":"True to turn on debugging; false to turn debugging off."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setDebug('true');","description":"","output":""}]},{"name":"setRanges","description":"Sets the range of IP addresses for which to look.","params":[{"name":"ranges","type":"String","description":"A comma-separated list in one of these formats. <ul class=\"ul\" id=\"r_MSFD-setRanges_S__ul_ipr_pfl_zt\">\n                  <li class=\"li\">IP addresses (10.10.10.1, 10.10.10.2) </li>\n\n                  <li class=\"li\">IP networks (10.10.10.0/23) </li>\n\n                  <li class=\"li\">IP ranges (10.10.10.1-10.10.11.254)</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setRanges('10.10.10.1-10.10.11.254');","description":"","output":""}]},{"name":"setRangesByIPOrHostname","description":"Determines if the input is a single IP or a hostname, and passes the IP or multiple IPs\n    to the setRanges() method.<p>If the value of ipOrHostname is an IP address, it is passed into the\n          <span class=\"keyword apiname\">setRanges()</span> method. It the value is a hostname, we look up the DNS\n        table (cmdb_ip_address_dns_name) to try resolving the hostname. The result, either an IP or\n        multiple IPs, is then passes into the <span class=\"keyword apiname\">setRanges()</span> method.</p>","params":[{"name":"ipOrHostname","type":"String","description":"The IP address, IP range, or host name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msf = new MIDServerFinder();\nmsf.setRangesByIPOrHostname('10.10.10.1-10.10.11.254');","description":"","output":""}]}]},"MIDServerManage":{"meta":{"has_constructor":true,"description":"Allows you to manage a MID server, by sending messages to start, stop, upgrade, get\n  logs, send test probes, and send system messages. Use in server scripts to send messages to a MID server.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of MIDServerManage.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"grab_logs","description":"Gets the logs for the specified MID server.","params":[{"name":"agentName","type":"String","description":"The MID server name"},{"name":"logs","type":"String","description":"The type of log to get (Optional)"}],"returns":{"type":"String","description":"The log message"},"example":[{"code":"var msm = new MIDServerManage();\nmsm.grab_logs('serv1');","description":"","output":"Background message, type:info, message: Grabbing MID Server Logs"}]},{"name":"restart","description":"Restarts the specified MID server.","params":[{"name":"agentName","type":"String","description":"The MID server name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msm = new MIDServerManage();\nmsm.restart('serv1');","description":"","output":""}]},{"name":"stop","description":"Stops the specified MID server.","params":[{"name":"agentName","type":"String","description":"The MID server name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msm = new MIDServerManage();\nmsm.stop('serv1');","description":"","output":""}]},{"name":"system_msg","description":"Creates a system message for the specified MID server.","params":[{"name":"agentName","type":"String","description":"The MID server name"},{"name":"cmd","type":"String","description":"The value of the probe source field"},{"name":"name","type":"String","description":"The name of the probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msm = new MIDServerManage();\nmsm.test_probe('mid.server.serv1', 'command', 'probe_id');","description":"","output":""}]},{"name":"text_probe","description":"Sends a test probe for the specified MID server.","params":[{"name":"agentName","type":"String","description":"The MID server name"},{"name":"probeId","type":"String","description":"The ID of the probe to send"},{"name":"topic","type":"String","description":"The information for the topic field"},{"name":"ename","type":"String","description":"The name for the probe"},{"name":"source","type":"String","description":"The information for the source field"}],"returns":{"type":"Object","description":"The probe for the specified MID server"},"example":[{"code":"var msm = new MIDServerManage();\nmsm.test_probe('mid.server.serv1', 'probe_id', 'topic text', 'name', 'source text');","description":"","output":""}]},{"name":"upgrade","description":"Upgrades the specified MID server.","params":[{"name":"agentName","type":"String","description":"The MID server name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var msm = new MIDServerManage();\nmsm.upgrade('serv1');","description":"","output":""}]}]},"MIDServerSelector":{"meta":{"has_constructor":true,"description":"Finds a MID server based on capabilities and target IP address. Use in server scripts to find a MID server with specific capabilities.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of MIDServerSelector.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"findAgent","description":"Finds the MID server based on the capabilities and target IP address.","params":[{"name":"target","type":"String","description":"The target IP address"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mss = new MIDServerSelector();\nvar capab = [\"ssh\",\"wmi\",\"snmp\"];\nmss.setCapabilities(capab);\nmss.findAgent('100.101.10.10');","description":"","output":""}]},{"name":"getError","description":"Gets the error messages for the current MID server.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mss = new MIDServerSelector();\nvar capab = [\"ssh\",\"wmi\",\"snmp\"];\nmss.setCapabilities(capab);\nmss.findAgent('100.101.10.10');\nmss.getError();","description":"","output":""}]},{"name":"getWarning","description":"Gets the warning messages for the current MID server.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mss = new MIDServerSelector();\nvar capab = [\"ssh\",\"wmi\",\"snmp\"];\nmss.setCapabilities(capab);\nmss.findAgent('100.101.10.10');\nmss.getWarning();","description":"","output":""}]},{"name":"setCapabilities","description":"Sets the technologies for which to look.","params":[{"name":"capabilities","type":"Array","description":"A list of capabilities, for example -  capabilities =\n                [\"ssh\",\"wmi\",\"snmp\",{\"os_domain\":\"disco\"},{\"phase\":1}];"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mss = new MIDServerSelector();\nvar capab = [\"ssh\",\"wmi\",\"snmp\"];\nmss.setCapabilities(capab);","description":"","output":""}]}]},"MLPredictor":{"meta":{"has_constructor":true,"description":"Provides utility methods for <span class=\"ph\">Predictive Intelligence</span>\n    predictions. The MLPredictor API requires the <span class=\"ph\">Predictive Intelligence</span> plugin\n      (com.glide.platform_ml) and is provided within the sn_ml namespace.<br/><br/>This class contains all methods necessary to get prediction results from input data.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new MLPredictor object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"function executeRule(current, previous /*null when async*/) {\n\tvar predictor = new MLPredictor();\n\tpredictor.recordFinalValuesInPredictionResults(current, \"On close\");\n\n}(current, previous);","description":"The following example shows how to use an MLPredictor object in a business rule to record\n        final values after a prediction.","output":""}]},{"name":"applyPrediction","description":"Sets predicted values from an array of specified solutions to a specified\n    record.","params":[{"name":"gr","type":"GlideRecord","description":"The record on which to apply the array of predicted solutions."},{"name":"solutions","type":"Array","description":"Specified solution objects associated with the GlideRecord."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function executeRule(current, previous /*null when async*/) {\n    var mlPredictor = new MLPredictor();\n    //Get the list of active solutions for the glide record table\n    var solutions = mlPredictor.findActiveSolutionsForRecord(current);\n    //Run prediction and apply predicted value to the record\n    mlPredictor.applyPrediction(current, solution);\n\n})(current, previous);","description":"The following example demonstrates using the applyPrediction() method in a business\n        rule.","output":""}]},{"name":"applyPredictionForSolution","description":"Applies a predicted value from a specified classification solution to the specified\n    GlideRecord.<p>For each solution in the GlideRecord, call this method to predict the results and set the\n        field value on the incident to those results.</p>","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord object containing values on which to run a prediction and apply the\n                results."},{"name":"solution","type":"Object","description":"Classification solution object to be executed."}],"returns":{"type":"Boolean","description":"True upon prediction success, error otherwise."},"example":[{"code":"\n(function executeRule(current, previous /*null when async*/) {\n\tvar solutionNames = [\"solution1\", \"solution2\", ...];\n\n\t/* For domain separation (MSP) use case */\n//\tvar solutionNames;\n//\tif (current.sys_domain == \"A\")\n//\t\tsolutionNames = [\"solution_A1\", \"solution_A2\", ...];\n//\telse if (current.sys_domain == \"B\")\n//\t\tsolutionNames = [\"solution_B1\", \"solution_B2\", ...];\n//\telse\n//\t\t...\n\n\tvar predictor = new MLPredictor();\n\tvar info = \"\";\n\tsolutionNames.forEach(function(solutionName) {\n\t\tvar solution = predictor.findActiveSolution(solutionName);\n\t\tif (!solution)\n\t\t\treturn;\n\n\t\t/* The next line of code is doing the prediction and updating current record. */\n\t\t/* If no prediction is done, we don't build prediction info message. */\n\t\tif (!predictor.applyPredictionForSolution(current, solution))\n\t\t\treturn;\n\n\t\t/* If user doesn't have 'itil' role, we don't build prediction info message. */\n\t\tif (!gs.hasRole('itil'))\n\t\t\treturn;\n\n\t\t/* Building prediction info message */\n\t\tvar fieldName = solution.getPredictedField();\n\t\tvar fieldLabel = current.getElement(fieldName).getED().getLabel();\n\t\tvar predictedDisplayValue = current.getDisplayValue(fieldName);\n\t\tvar msg = gs.getMessage(\"Predicted {0} for {1}.\", [predictedDisplayValue, fieldLabel]);\n\t\tif (info.length &gt; 0)\n\t\t\tinfo += \" \";\n\t\tinfo += msg;\n\t});\n\t/* Print out prediction info message on screen. */\n\tif (info.length &gt; 0) {\n\t\tvar incidentUrl = \"&lt;a href='\"+current.getLink()+\"'&gt;\"+current.number+\":&lt;/a&gt;\";\n\t\tgs.addInfoMessage(incidentUrl + \" \" + info);\n\t}\n})(current, previous);","description":"To use this template, copy the Incident Based Prediction (Template) business rule, make the\n        new record Active, and follow the commented instructions to initialize the solutionNames\n        variable.","output":""}]},{"name":"findActiveSolution","description":"Gets the solution object.<p>This method only returns the solutions if the ml_solution definition and solution are\n        active.</p>","params":[{"name":"solutionName","type":"String","description":"Name of the ml_solution record."}],"returns":{"type":"Object","description":"Solution object for the specified <samp class=\"ph codeph\">solutionName</samp> if the\n                ml_solution definition and solution is active, null otherwise."},"example":[{"code":"var solutionName = 'ml_incident_assignment';\n  var shortDescriptionValue = \"Unable to connect!\"\n  var input = {\n  short_description : shortDescriptionValue\n  };\n  var MLP = new MLPredictor();\n  var solution = MLP.findActiveSolution(solutionName);\n  var predictedOutcome = solution.predictText(input);\n  var outcome = predictedOutcome.predictedValue();\n  var confidence = predictedOutcome.confidence();\n  gs.info(\"Predicted value: \" + outcome)\n  gs.info(\"Confidence: \" + confidence)\n        ","description":"This example takes a hard-coded value and passes it to a specified Machine Learning model.\n        You can use the outcome and confidence variables to set values or other business logic.","output":"DxC_ML:\n        ******* Finished Prediction********* *** Script: Predicted value: Software *** Script:\n        Confidence: 80.78079080096245"}]},{"name":"findActiveSolutionsForRecord","description":"Gets active solutions for a table in a specified GlideRecord.","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord from which to collect active solution objects."}],"returns":{"type":"Array","description":"Array of active solution objects associated with the table that the specified\n                record is for."},"example":[{"code":"/* This is only to get a hard-coded GR */\n     var current = new GlideRecord('incident');\n     current.get('965c9e5347c12200e0ef563dbb9a7156');\n     var predictor = new MLPredictor();\n     var solutions = predictor.findActiveSolutionsForRecord(current);\n     solutions.forEach(function(solution) {\n         var outcome = solution.predict(current);\n         /* Use this to set the field to the predicted value in the GlideRecord */\n         var fieldName = solution.getPredictedField();\n         current[fieldName] = outcome.predictedValue();\n         current.update();\n\n         gs.info(\"Predicted value: \" + outcome.predictedValue())\n         gs.info(\"Confidence: \" + outcome.confidence())\n});","description":"This script passes a GlideRecord (such as an incident), and processes all solutions for the\n        GlideRecord, returning the values for each.","output":"DxC_ML:\n        ******* Finished Prediction********* *** Script: Predicted value: Software *** Script:\n        Confidence: 98.7172805135524"}]},{"name":"getPredictedValue","description":"Gets the predicted value for a specified solution based on the specified prediction\n    outcome.","params":[{"name":"solution","type":"Object","description":"Solution from which to get the predicted value."},{"name":"outcome","type":"Object","description":"Prediction outcome results for the specified solution (var outcome =\n                solution.predict(gr))."}],"returns":{"type":"String","description":"Predicted value for specified solution based on the specified outcome of the\n                prediction."},"example":[]},{"name":"getPredictions","description":"Gets predictions for a specified solution.","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord to be predicted."},{"name":"solution","type":"Object","description":"Solution object to be executed."},{"name":"options","type":"Object","description":"Optional JSON object key value pair with the following properties:<ul class=\"ul\" id=\"r_MLP-getPredictions_GR_O_S__ul_bw2_x1s_2gb\">\n                  <li class=\"li\">options.top_n: If provided, returns results up to the expected number of\n                    predictions, otherwise default is read from the <samp class=\"ph codeph\">\n                      glide.platform_ml.max_num_predictions</samp> system property.</li>\n\n                  <li class=\"li\">options.apply_threshold: Checks the threshold value (solution threshold for\n                    similarity, class level threshold for classification) for the solution and\n                    applies it to the result set. Default value is true.</li>\n\n                </ul>"}],"returns":{"type":"Array","description":"Array of predicted outcome objects"},"example":[{"code":"function printOutcomeArr(outcomeArr) {\ngs.print('################## Results ##################');\nfor (var i=0; i&lt;outcomeArr.length; i++) {\n    var outcome = outcomeArr[i];\n    gs.print((i+1) + ' : ' + outcome.predictedValue() + ', ' + outcome.predictedValueSysId() + ', ' + outcome.confidence());\n}\n}\n\nvar solutionName = 'ml_x_snc_global_prop_flip_test';\nvar predictor = new MLPredictor();\nvar solution = predictor.findActiveSolution(solutionName);\n\nvar gr = new GlideRecord('incident');\ngr.get('1c741bd70b2322007518478d83673af3');\n\nvar options = {};\noptions.top_n = '10';            // top_n is an integer between 1 and 1000\noptions.apply_threshold = false; // Value can be set to true or false\n\nprintOutcomeArr(predictor.getPredictions(gr, solution, options));","description":"The following example calls a specified solution and executes predictions on it.","output":""}]},{"name":"isClassificationSolution","description":"Identifies if a solution object is a classification type.","params":[{"name":"solution","type":"Object","description":"Name of the ML solution."}],"returns":{"type":"Boolean","description":"Returns true if the input solution is a classification type, false otherwise."},"example":[{"code":"var isClassificationSolution = this.isClassificationSolution(solution);\n \n\t//classification solution each class has different threshold\n\t//therefore needs to get all the results from ml engine\n\tif (applyThreshold &amp;&amp; isClassificationSolution) {\n\t\tvar maxClassificationTopN = 50;\n\t\toutcomeArr = solution.predictTopN(gr, maxClassificationTopN);\n\t}\n\telse  {\n\t\toutcomeArr = solution.predictTopN(gr, topN);\n\t}\n \n\tif (outcomeArr === null) {\n\t\t//instead of returning null returning empty array\n\t\treturn [];\n\t}","description":"","output":""}]},{"name":"isSimilaritySolution","description":"Identifies if a solution object is a similarity type.","params":[{"name":"solution","type":"Object","description":"Name of the ML solution; for example, ml_incident_categorization."}],"returns":{"type":"Boolean","description":"Returns true if the input solution is a similarity type, false otherwise."},"example":[]},{"name":"outcome.confidence","description":"Gets the confidence of the predicted value.","params":[],"returns":{"type":"String","description":"The estimated precision of the prediction as a percentage. For example,\n                  <strong class=\"ph b\">53.84615375762915</strong>."},"example":[{"code":"var MLP = new MLPredictor();\n  var solution = MLP.findActiveSolution(solutionName);\n  var predictedOutcome = solution.predictText(input);\n  var outcome = predictedOutcome.predictedValue();\n  var confidence = predictedOutcome.confidence();\n  gs.info(\"Predicted value: \" + outcome)\n  gs.info(\"Confidence: \" + confidence)","description":"","output":""}]},{"name":"outcome.predictedValue","description":"Gets the predicted value from the MLPredictor outcome object.","params":[],"returns":{"type":"String","description":"Predicted value from the Outcome object."},"example":[{"code":"var MLP = new MLPredictor();\n  var solution = MLP.findActiveSolution(solutionName);\n  var predictedOutcome = solution.predictText(input);\n  var outcome = predictedOutcome.predictedValue();\n  var confidence = predictedOutcome.confidence();\n  gs.info(\"Predicted value: \" + outcome)\n  gs.info(\"Confidence: \" + confidence)","description":"","output":""}]},{"name":"outcome.predictedValueSysId","description":"Gets the sys_id of the predicted value.","params":[],"returns":{"type":"String","description":"Predicted value sys_id."},"example":[{"code":"function printOutcomeArr(outcomeArr) {\ngs.print('################## Results ##################');\nfor (var i=0; i&lt;outcomeArr.length; i++) {\n    var outcome = outcomeArr[i];\n    gs.print((i+1) + ' : ' + outcome.predictedValue() + ', ' + outcome.predictedValueSysId() + ', ' + outcome.confidence());\n}","description":"","output":""}]},{"name":"recordFinalValuesInPredictionResults","description":"Sets final prediction result values to a specified GlideRecord with an optionally\n    specified reason.","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord on which to set the final prediction result values."},{"name":"reason","type":"String","description":"Optional. Reason for applying results."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function executeRule(current, previous /*null when async*/) {\n\tvar predictor = new MLPredictor();\n\tpredictor.recordFinalValuesInPredictionResults(current, \"On close\");\n\n})(current, previous);","description":"In following example, the recordFinalValuesInPredictionResults() method is called when the\n        incident is closed.","output":""}]},{"name":"solution.getCapability","description":"Gets the capability information of a trained solution.","params":[],"returns":{"type":"String","description":"Definition ID and version of the trained solution, error message\n                otherwise"},"example":[]},{"name":"solution.getName","description":"Gets the name of the solution used for prediction.","params":[],"returns":{"type":"String","description":"The name of the solution to use for predictions; for example,\n                  <samp class=\"ph codeph\">ml_incident_categorization</samp>"},"example":[]},{"name":"solution.getPredictedField","description":"Gets the predicted value of a solution.","params":[],"returns":{"type":"String","description":"Value of a solution's predicted output field"},"example":[{"code":"/* Get a hard-coded GR */\n     var current = new GlideRecord('incident');\n     current.get('965c9e5347c12200e0ef563dbb9a7156');\n     var predictor = new MLPredictor();\n     var solutions = predictor.findActiveSolutionsForRecord(current);\n     solutions.forEach(function(solution) {\n         var outcome = solution.predict(current);\n         /* Use this to set the field to the predicted value in the GlideRecord */\n\n         var fieldName = solution.getPredictedField();\n         current[fieldName] = outcome.predictedValue();\n         current.update();\n         gs.info(\"Predicted value: \" + outcome.predictedValue())\n         gs.info(\"Confidence: \" + outcome.confidence())\n});","description":"","output":""}]},{"name":"solution.getThreshold","description":"Gets the solution threshold.<p>The threshold represents a percentage reflecting the minimum prediction accuracy.</p>","params":[{"name":"className","type":"String","description":"A specified categorical value of the solution output field"}],"returns":{"type":"Number","description":"Value of the threshold represented as a percentage between 0 and 100."},"example":[]},{"name":"solution.getVersion","description":"Gets the version of the active solution.","params":[],"returns":{"type":"String","description":"Version of the active solution"},"example":[]},{"name":"solution.isActive","description":"Determines if the specified solution is active.","params":[],"returns":{"type":"Boolean","description":"True if the solution is active, false otherwise"},"example":[]},{"name":"solution.predict","description":"Gets solution prediction results as an Outcome object.","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord of the solution input table"},{"name":"threshold","type":"Object","description":"Threshold value (solution level threshold for similarity, class level threshold\n                for classification)"}],"returns":{"type":"Object","description":"Prediction outcome result of the specified solution (var outcome =\n                solution.predict(gr))"},"example":[{"code":"solutions.forEach(function(solution) {\n         var outcome = solution.predict(current);\n         /* Use this to set the field to the predicted value in the GlideRecord\n         var fieldName = solution.getPredictedField();\n         current[fieldName] = outcome.predictedValue();\n         current.update();\n         */\n         gs.info(\"Predicted value: \" + outcome.predictedValue())\n         gs.info(\"Confidence: \" + outcome.confidence())\n});","description":"","output":""}]},{"name":"solution.predictTopN","description":"Returns a list of outcome objects up to the expected number of predictions. Maximum\n    number 1000 predictions.","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord of the solution"},{"name":"topN","type":"Object","description":"Expected number of predictions, any number over 1000 returns 1000\n                results"}],"returns":{"type":"Array","description":"List of outcome objects in an array including GlideRecord, threshold, system\n                ID, and expected number of predictions (topN object)"},"example":[{"code":"var isClassificationSolution = this.isClassificationSolution(solution);\n \n\t//classification solution each class has different threshold\n\t//therefore needs to get all the results from ml engine\n\tif (applyThreshold &amp;&amp; isClassificationSolution) {\n\t\tvar maxClassificationTopN = 50;\n\t\toutcomeArr = solution.predictTopN(gr, maxClassificationTopN);\n\t}\n\telse  {\n\t\toutcomeArr = solution.predictTopN(gr, topN);\n\t}\n \n\tif (outcomeArr === null) {\n\t\t//instead of returning null returning empty array\n\t\treturn [];\n\t}","description":"","output":""}]}]},"MLSolutionResult":{"meta":{"has_constructor":true,"description":"Provides methods for managing cluster information and members of a clustering solution.\n    You can embed the results in business logic. See <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-performance-analytics-and-reporting/page/administer/predictive-intelligence/concept/predictive-intelligence.html#d238206e175\" target=\"_blank\">Predictive Intelligence clustering framework</a>.<br/><br/>The MLSolutionResult API requires the <span class=\"ph\">Predictive Intelligence</span> plugin\n      (com.glide.platform_ml) and is provided within the sn_ml namespace.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new MLSolutionResult object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"findActiveSolution","description":"Returns the solution object.<p>This method only returns the solutions if the ml_solution definition and solution are\n        active (that is, trained). For information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-performance-analytics-and-reporting/page/administer/predictive-intelligence/task/create-clustering-solution.html\" target=\"_blank\">Create and train a clustering\n          solution</a>.</p>","params":[{"name":"solutionName","type":"String","description":"Name of the clustering ml_solution record."}],"returns":{"type":"Object","description":"Clustering solution object for the specified <samp class=\"ph codeph\">solutionName</samp> if\n                the ml_solution definition and solution is active, null otherwise."},"example":[{"code":"var solutionName = 'ml_incident_assignment';\n  var MLS = new MLSolutionResult();\n  var solution = MLS.findActiveSolution(solutionName);\n  gs.print(solution);\n        ","description":"","output":""}]},{"name":"getClusterAssignments","description":"Returns all members of a clustering solution.","params":[{"name":"solutionName","type":"String","description":"Name of active cluster solution."},{"name":"options","type":"Object","description":"Optional. Narrows down the returned results by group and level within a\n                clustering solution. <p class=\"p\">Default: Return cluster memberships for all\n                clusters.</p>"},{"name":"options.segmentation_field","type":"String","description":"Optional. Identifies the segmentation field for which to retrieve cluster\n                memberships, for example, assignment group.<p class=\"p\">This field provides the same grouping\n                  as options provided via <span class=\"ph uicontrol\">Use Group By</span> check box in\n                    <span class=\"ph uicontrol\">Clustering Solution Definitions</span> table. Information\n                  provided varies by table selected in the <span class=\"ph uicontrol\">Table</span> field. For\n                  information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/administer/agent-intelligence/task/create-clustering-solution.html\" target=\"_blank\">Create and train a\n                    clustering solution</a>.</p>"},{"name":"options.cluster_id","type":"String","description":"Optional. Sys ID from the ml_cluster_summary table."},{"name":"options.rec_sys_id","type":"String","description":"Optional. Sys ID from the table record the cluster solution is based\n                on."}],"returns":{"type":"Array","description":"Array of outcome objects including:<div class=\"p\">\n                  <ul class=\"ul\" id=\"MLSR-getClusterAssignments_S_O__ul_oz5_tv5_rhb\">\n                    <li class=\"li\">segmentation – Field name by which to group data</li>\n\n                    <li class=\"li\">cluster_num – Unique cluster number within a solution of clusters  (that is,\n                      label)</li>\n\n                    <li class=\"li\">rec_sys_id – Sys ID from the table record the cluster solution is based\n                      on</li>\n\n                    <li class=\"li\">rec_display_id – Name of the record associated with the rec sys ID</li>\n\n                  </ul>\n\n                </div>"},"example":[{"code":"var solutionName = \"&lt;Name_of_Active_Cluster_Solution&gt;\";\nvar solutionResult = new MLSolutionResult();\nvar outcome_array = solutionResult.getClusterAssignments(solutionName);\nfor (var i = 0; i &lt; outcome_array.length; i++) {\n   gs.print(outcome_array [i].segmentation + ‘ ‘ + outcome_array [i].cluster_num + ‘ ‘ + outcome_array [i].rec_sys_id + ‘ ‘ + outcome_array [i].rec_display_id);\n}","description":"The following example shows how to return all cluster members for a solution without\n        setting values for the options object.","output":""},{"code":"var gr = new GlideRecord('incident');\ngr.get(‘sys_id’);\n\nvar solutionName = \"solution_example\";\nvar solutionResult = new MLSolutionResult();\nvar options = { “rec_sys_id”: gr.getUniqueValue() };\nvar outcome_array = solutionResult.getClusterAssignments(solutionName, options);\nfor (var i = 0; i &lt; outcome_array.length; i++) {\n   gs.print(outcome_array [i].segmentation + ‘ ‘ + outcome_array [i].cluster_num + ‘ ‘ + outcome_array [i].rec_sys_id + ‘ ‘ + outcome_array [i].rec_display_id);\n}","description":"The following example shows how to return all cluster members for one record using\n        options.rec_sys_id.","output":""}]},{"name":"getClusterInfo","description":"Returns all outcome information for a clustering solution.","params":[{"name":"solutionName","type":"String","description":"Name of active cluster solution."},{"name":"options","type":"Object","description":"Optional. Narrows down the returned results by group and level within a\n                clustering solution. <p class=\"p\">Default: Return cluster memberships for all\n                clusters.</p>"},{"name":"options.segmentation_field","type":"String","description":"Optional. Identifies the segmentation field for which to retrieve cluster\n                memberships, for example, assignment group.<p class=\"p\">This field provides the same grouping\n                  as options provided via <span class=\"ph uicontrol\">Use Group By</span> check box in\n                    <span class=\"ph uicontrol\">Clustering Solution Definitions</span> table. Information\n                  provided varies by table selected in the <span class=\"ph uicontrol\">Table</span> field. For\n                  information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/administer/agent-intelligence/task/create-clustering-solution.html\" target=\"_blank\">Create and train a\n                    clustering solution</a>.</p>"},{"name":"options.cluster_id","type":"String","description":"Optional. Sys ID from the ml_cluster_summary table."}],"returns":{"type":"Array","description":"Array of outcome objects including:<div class=\"p\">\n                  <ul class=\"ul\" id=\"MLSR-getClusterInfo_S_O__ul_oz5_tv5_rhb\">\n                    <li class=\"li\">segmentation – Field name by which to group data</li>\n\n                    <li class=\"li\">cluster_num – Unique cluster number within a solution of clusters  (that is,\n                      label)</li>\n\n                    <li class=\"li\">total_members – Number of records in cluster (that is, size)</li>\n\n                    <li class=\"li\">cluster_quality – Cluster quality percentile value</li>\n\n                  </ul>\n\n                </div>"},"example":[{"code":"var solutionName = \"solution_example\";\nvar solutionResult = new MLSolutionResult();\nvar outcome_array = solutionResult.getClusterInfo(solutionName);\nfor (var i = 0; i &lt; outcome_array.length; i++) {\ngs.print(outcome_array[i].segmentation + ‘ ‘ + outcome_array[i].cluster_num + ‘ ‘ + outcome_array[i].total_members + ‘ ‘ + outcome_array[i].cluster_quality);\n}","description":"","output":""}]}]},"MobileDeepLinkGenerator":{"meta":{"has_constructor":true,"description":"Embed a link to a mobile app list or form applet. Use this API in a global server-side script to create a link to a list or form applet within\n      these apps:<ul class=\"ul\" id=\"MobileDeepLinkGeneratorAPI__ul_krs_cfr_vhb\">\n        <li class=\"li\"><span class=\"ph\">Now Mobile</span></li>\n\n        <li class=\"li\"><span class=\"ph\">ServiceNow Agent</span></li>\n\n        <li class=\"li\"><span class=\"ph\">Mobile Onboarding</span></li>\n\n      </ul>\nFor example, create a link from an email, push notification, or <span class=\"ph\">Virtual Agent</span> conversation that\n      opens a record or list of records in the app. The form or list only includes data that the\n      user has access rights to view.<br/><br/>For an example of this API used in a push notification, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-mobile/page/administer/tablet-mobile-ui/task/sg-mobile-set-up-push-notifications.html\" target=\"_blank\">Set up push notifications for the mobile\n        app</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a MobileDeepLinkGenerator object for a specific mobile app.","params":[{"name":"clientType","type":"String","description":"Name of the app to create a link to. <p class=\"p\">Options include:</p>\n<div class=\"p\">\n                  <ul class=\"ul\" id=\"MDLG-MDLG_S__ul_vpl_pcs_vhb\">\n                    <li class=\"li\">agent: Creates a link to a list or screen in the <span class=\"ph\">ServiceNow Agent</span> app. </li>\n\n                    <li class=\"li\">request: Creates a link to a list or screen in the <span class=\"ph\">Now Mobile</span> app. </li>\n\n                    <li class=\"li\">onboarding: Creates a link to a list or screen in the <span class=\"ph\">Mobile Onboarding</span>\n                      app. </li>\n\n                  </ul>\n\n                </div>"}],"returns":{"type":"","description":""},"example":[{"code":"var g = new global.MobileDeepLinkGenerator('onboarding');","description":"","output":""}]},{"name":"getFormScreenLink","description":"Create a link to a form applet.","params":[{"name":"formScreenId","type":"String","description":"Sys ID of the applet record in the Applets [sys_sg_screen] table."},{"name":"tableName","type":"String","description":"Name of the table containing the record in the <span class=\"keyword parmname\">recordSysId</span>\n                parameter."},{"name":"recordSysId","type":"String","description":"Sys ID of the record to open in the applet."}],"returns":{"type":"String","description":"Link to the record in the mobile app form applet."},"example":[{"code":"var deepLinkGenerator = new global.MobileDeepLinkGenerator(\"agent\");\nvar link = deepLinkGenerator.getFormScreenLink(\"&lt;sys_id&gt;\", current.getTableName(), current.getValue(\"sys_id\"));","description":"","output":""}]},{"name":"getScreenLink","description":"Create a link to a list applet.","params":[{"name":"documentId","type":"String","description":"Sys ID of the applet record in the Applets [sys_sg_screen] table."},{"name":"uiParams","type":"Object","description":"Optional. JSON object containing any URL parameters to include in the link.\n                Determine which URL parameters to include by inspecting the URL you want to link to.\n                In general, URL parameters filter records in the list. For example, <samp class=\"ph codeph\">var\n                  param = {'&lt;company-sys-id&gt;': 'servicenow'}</samp>, where\n                  <samp class=\"ph codeph\">&lt;company-sys-id&gt;</samp> is the Sys ID of a company UI parameter from\n                the UI Parameters [sys_sg_ui_parameter] table for a specific mobile screen."}],"returns":{"type":"String","description":"Link to the mobile app list applet."},"example":[{"code":"var uiParams = {\n    \"b250294ab3c12300a0d56ad4c6a8dc8c\": \"servicenow\", \n    \"7250294ab3c12300a0d56ad4c6a8dc90\": \"santa clara\"}\n\nvar deepLinkGenerator = new global.MobileDeepLinkGenerator(\"request\");\nvar link = deepLinkGenerator.getScreenLink(\"a75df1920f2033001befa68ca8767e50\", uiParams);","description":"","output":""}]}]},"MonitorMIDServer":{"meta":{"has_constructor":true,"description":"Monitors MID servers using the heartbeat probe to check for MID servers that are down,\n  sends heartbeat requests, and kills old heartbeat requests. Use in a server script to monitor MID servers.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of MonitorMIDServer.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"killOldRequests","description":"If there are any heartbeat probe requests that haven't been processed, cancels them so\n    that they don't accumulate when a MID server is down for a while.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mmsv = new MonitorMIDServer();\nmmsv.killOldRequests();","description":"","output":""}]},{"name":"markDowners","description":"Marks any non-responding MID servers as being down, by determining when the most recent\n    heartbeat was sent and finding all non-responding servers.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mmsv = new MonitorMIDServer();\nmmsv.markDowners();","description":"","output":""}]},{"name":"monitor","description":"Performs the functions required for a scheduled MID server monitor cycle, including\n    killing old requests, marking the MID servers that are down, and sending heartbeat requests to\n    all servers.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mmsv = new MonitorMIDServer();\nmmsv.monitor();","description":"","output":""}]},{"name":"sendHeartbeatRequests","description":"Sends heartbeat requests to all MID servers and notes when by updating the server\n    status record.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var mmsv = new MonitorMIDServer();\nmmsv.sendHeartbeatRequests();","description":"","output":""}]}]},"NameValuePairs":{"meta":{"has_constructor":true,"description":"Converts between maps and strings representing the name/value pairs in the\n  map. The string form is: <name> = <value>, <name> = <value, ... where <name> is a\n   string name, optionally surrounded by double quotes (Microsoft-style), and <value> is a string\n   value, also optionally surrounded by double quotes.<br/><br/>The following are all examples of valid name/value strings: <ul class=\"ul\" id=\"c_NameValuePairsAPI__ul_utm_d3r_pt\">\n    <li class=\"li\">name = value </li>\n\n    <li class=\"li\">name = \"My Value\", name = value </li>\n\n    <li class=\"li\">\"My Name = this\" = \"My Value\", \"My Value, all the time\", name = value </li>\n\n    <li class=\"li\">\"My Name\" = \"This\" \"name\"\"\", name = value </li>\n\n   </ul>\nIn the third example, the quoted values contain equals and commas.  In the fourth example,\n   the quoted value contains a quote.<br/><br/>Instances have the following properties initialized: <ul class=\"ul\" id=\"c_NameValuePairsAPI__ul_etr_l3r_pt\">\n    <li class=\"li\">map: the map (JavaScript object being used as a hashmap) form of the name/value pairs, with\n     Microsoft-style quotes removed </li>\n\n    <li class=\"li\">string: the string form of the name/value pairs, with Microsoft-style quoting.</li>\n\n   </ul><br/><br/>Use with any server-side script where you need convert name/value pairs between maps and\n   strings.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the class initialized with the specified string.","params":[{"name":"stringForm","type":"String","description":"The values to use when creating the object."}],"returns":{"type":"","description":""},"example":[]},{"name":"constructor","description":"Creates an instance of the class initialized with the specified hash map.","params":[{"name":"mapForm","type":"Object","description":"The map to use when creating the object."}],"returns":{"type":"","description":""},"example":[]},{"name":"mapToString","description":"Produces <samp class=\"ph codeph\">this.string</samp> from <samp class=\"ph codeph\">this.map</samp>.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"quotify","description":"If the specified value contains double quotes, equals, commas, or spaces, this method\n    surrounds the value with double quotes and doubles up any enclosed double quotes.","params":[{"name":"value","type":"Object","description":"The value to process"}],"returns":{"type":"String","description":"The value with added quotes."},"example":[]},{"name":"stringToMap","description":"Produces <samp class=\"ph codeph\">this.map</samp> from <samp class=\"ph codeph\">this.string</samp>.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"NetwareHandler API":{"meta":{"has_constructor":false,"description":"Implements an SNMP handler for Netware OS. This handler is designed to be invoked by Classify.java as an interim step toward completely\n   moving the SNMP sensors into JavaScript.<br/><br/>Use this API for SNMP classification.","example":""},"properties":{},"methods":[{"name":"classifyAndIdentify","description":"Classifies and identifies the SNMP device.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"Notify":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">Notify</span> API allows you to interact with Notify calls and SMS\n  messages using scripts. Access the global <span class=\"keyword apiname\">Notify</span> class and its associated methods in the\n    <samp class=\"ph codeph\">SNC</samp> namespace.","example":""},"properties":{},"methods":[{"name":"call","description":"Calls the specified E.164-compliant telephone number.<p>In addition, this method can automatically add the specified phone number to a specified\n        conference call.</p>","params":[{"name":"notifyPhoneNumber","type":"String or NotifyPhoneNumber","description":"Notify phone number from which to make the call. When you initiate a call, the\n                outgoing call workflow for the number group associated with this number runs. Ensure\n                this workflow includes a <span class=\"ph uicontrol\">join conference call</span> activity to\n                connect the user to the conference call."},{"name":"toPhoneNumber","type":"String","description":"Phone number to call. Called numbers are added to the conference call."},{"name":"conferenceCall","type":"GlideRecord","description":"Optional. If this parameter is passed in, the callers identified in the\n                  <span class=\"keyword parmname\">toPhoneNumber</span> parameter are automatically joined into the\n                conference call identified by this record. <p class=\"p\">GlideRecord for the Notify Call\n                  [notify_call] table that identifies the conference call record. This record is\n                  automatically added to the outgoing call workflow scratchpad as the\n                  workflow.scratchpad.conference_call variable.</p>"},{"name":"userSysId","type":"String","description":"Optional. Unique identifier (sys_id) of the user associated with the\n                call."},{"name":"groupSysId","type":"String","description":"Optional. Unique identifier (sys_id) of the group associated with the\n                call."},{"name":"sourceRecord","type":"GlideRecord","description":"Optional. Source record that prompted this call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var from = '+14048007337';\nvar to = '+31646810495';\n\n// set up call\nnew SNC.Notify().call(from, to);","description":"This example illustrates how to initiate a call to another phone number.","output":""},{"code":"var notify = new SNC.Notify();\nvar from = '+14041234567';\nvar participants = ['+31612345678', '+31623456789', '+31687654321'];\n\n// set up a conference call\nvar conferenceCall = notify.conferenceCall();\n\n// set up the outbound calls for all conference call participants\nfor (var i in participants) {\n    var to = participants[i];\n    notify.call(from, to, conferenceCall);\n}","description":"This example illustrates how to initiate a call to list of telephone numbers and\n        automatically join those numbers into a new conference call.","output":""},{"code":"SNC.Notify.call('+15413970605', '+91406XXXXXXX', SNC.Notify.conferenceCall(), null, null, null);","description":"This example illustrates how to initiate a new conference call.","output":""},{"code":"var sysUserGr = new GlideRecord('sys_user');\nsysUserGr.get('active conference sys id');\n \nif (conferenceGr.isValid) {\n    SNC.Notify.call('+15413970605', '+91406XXXXXXX', SNC.Notify.conferenceCall(), sysUserGr.getUniqueValue(), null, null);\n}","description":"This example illustrates how to initiate new a conference call using a user record.","output":""},{"code":"var sysUserGr = new GlideRecord('sys_user');\nsysUserGr.get('active sys user sys id');\n \nvar sysUserGroupGr = new GlideRecord('sys_user_group');\nsysUserGroupGr.get('active sys user group sys id');\n \nvar incidentGr = new GlideRecord('incident');\nincidentGr.get('incident sys_id');\n \nif (conferenceGr.isValid) {\n    SNC.Notify.call('+15413970605', '+91406XXXXXXX',\n        SNC.Notify.conferenceCall(),\n        sysUserGr.getUniqueValue(),\n        sysUserGroupGr.getUniqueValue(),\n        incidentGr.getUniqueValue());\n}","description":"This example illustrates how to initiate a new conference call with a user, group, and\n        source record.","output":""}]},{"name":"conferenceCall","description":"Creates a new conference call GlideRecord.","params":[{"name":"sourceRecord","type":"GlideRecord","description":"Optional. Record that initiated the request to create the conference call. Used\n                to populate the source and table fields on notify_conference_call record."}],"returns":{"type":"GlideRecord","description":"New Notify conference call [notify_conference_call] record."},"example":[{"code":"var notify = new SNC.Notify();\nvar from = '+14041234567';\nvar participants = ['+31612345678', '+31623456789', '+31687654321'];\n\n// set up a conference call\nvar conferenceCall = notify.conferenceCall();\n\n// set up the outbound calls for all conference call participants\nfor (var i in participants) {\n    var to = participants[i];\n    notify.call(from, to, conferenceCall);\n}","description":"","output":""}]},{"name":"dequeueCall","description":"Resumes a call after it was put in a queue (on hold).<p>Use this method to resume calls that were put in a queue with the\n          <span class=\"keyword apiname\">queueCall()</span> method.</p>","params":[{"name":"callRecord","type":"GlideRecord","description":"A GlideRecord object on the Notify Call [notify_call] table with the  held call\n                you want to resume."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    SNC.Notify.dequeueCall(notifyCallGr);\n}","description":"The following example shows how to reactivate a call that was put on hold.","output":""}]},{"name":"forwardCall","description":"Forwards the specified call to a different call recipient.","params":[{"name":"call","type":"GlideRecord or String","description":"Notify call record or the telephony provider call ID, of the call to be\n                forwarded."},{"name":"destination","type":"GlideRecord or String","description":"Notify phone number record or an E.164-compliant phone number, of the caller to\n                which to forward the call."},{"name":"dtmf","type":"String","description":"Dual Tone - Multi Frequency (DTMF) code to send upon call connection."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var callID = 'CA92374b5aa561dab476a7001db6026edc'; // Twilio Call ID\nvar phoneNumber = '+91406xxxxxxx';\nvar dtmfTones = null;\n \nvar notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    SNC.Notify.forwardCall(notifyCallGr(or) callID, phoneNumber, dtmfTones)\n}","description":"The following example shows how to forward a call to another phone number.","output":""}]},{"name":"getAvailableClients","description":"Returns a list of client sessions that are available to receive calls.","params":[{"name":"notifyNumber","type":"String","description":"Valid Notify phone number."}],"returns":{"type":"GlideRecord","description":"GlideRecord from the notify_client_session table for the specified phone\n                number. <p class=\"p\">Returns \"0\" if there are no available client sessions.</p>"},"example":[{"code":"var clientSessionGr = SNC.Notify.getAvailableClients('+185xxxxxxxx'); \n// Here clientSessionGr is of type GlideRecord on 'notify_client_session' table.\n \nvar isLoggedInUserAvailable = false;\nwhile (clientSessionGr.next()) {\n  if (clientSessionGr.user == gs.getUserID())\n    isLoggedInUserAvailable = clientSessionGr.available;\n}\ngs.info('isLoggedInUserAvailable - ' + isLoggedInUserAvailable);","description":"The following example shows how to use the getAvailableClients() method to index into the\n        notify_client_session table and then iterate across all available Notify clients.","output":""}]},{"name":"getParentCallID","description":"Returns the sys_id of a specified call's parent call.<p>Any call started by forwarding another call, such as with the Forward\n        workflow activity, is considered a child of the original call. The original call is the\n        parent call.</p>","params":[{"name":"callRecord","type":"GlideRecord","description":"Record on the Notify Call [notify_call] table for which to return the call\n                status."}],"returns":{"type":"String","description":"Unique sys_id of the parent call record."},"example":[{"code":"var callRecord = new GlideRecord('notify_call');\ncallRecord.get(\"0f4f5863ff13310014ecffffffffff28\");\n\nvar notify = new SNC.Notify();\nvar parentCallID = notify.getParentCallID(callRecord);","description":"This example shows how to obtain the parent call of the specified call.","output":""}]},{"name":"getPhoneNumbers","description":"Returns all phone numbers and short codes available to Notify.","params":[],"returns":{"type":"List","description":"List of NotifyPhoneNumber objects, each object representing one phone number\n                available to Notify."},"example":[{"code":"var list = SNC.Notify.getPhoneNumbers();\nfor (var i = 0; i &lt; list.size(); i++) {\n    var num = list.get(i);\n    gs.info(num.getNumber())\n}","description":"","output":""}]},{"name":"getTokens","description":"Returns client tokens for any active telephony drivers for use in WebRTC or mobile\n    clients.","params":[{"name":"record","type":"GlideRecord","description":"GlideRecord to use to identify the Notify client, such as a group record or a\n                user record."}],"returns":{"type":"String","description":"Web RTC tokens for the supported drivers, as a JSON string with the following\n                format: {driverName1: “token1”, driverName2: “token2”}, such as\n                \"TwilioDirect\":\"eyJhxxxx.eyJleHAiOiIxxxx.7fejxxx_mbLxxx\""},"example":[{"code":"// get Notify client Tokens per active Notify driver for the currently logged in user\nvar json = new SNC.Notify().getTokens();\n \n// Parse the JSON that was return into a tokens object\nvar tokens = JSON.parse(json);\n\n// Log line\ngs.log('Notify client tokens for the currently logged in user');\n\n // iterate over the driver tokens\nfor (var driver in tokens) {\n \tgs.log(driver + ' Driver token: ' + tokens[driver]);\n}","description":"This example shows how to obtain the client tokens for the currently logged in user.","output":""},{"code":"// instantiate Notify\nvar notify = new SNC.Notify();\n \n// get all Notify Groups\nvar notifyGroup = new GlideRecord(\"notify_group\");\nnotifyGroup.query();\n \n// iterate over all notify groups\nwhile (notifyGroup.next()) {\n  // generate Notify Client tokens per active Notify Driver for this group\n  var json = notify.getTokens(notifyGroup);\n  var tokens = JSON.parse(json);\n \n  for (var driver in tokens) {\n    gs.log(gs.getMessage(\"Notify Client token for {0} driver and Notify Group '{1}': {2}\", [driver, notifyGroup.getValue('name'), tokens[driver]]));\n  }\n}","description":"This example shows how to obtain the client tokens for every Notify group.","output":""}]},{"name":"getTokenTTL","description":"Returns the maximum amount of time that a client session stays active for a specified\n    telephony driver before automatically timing out.","params":[{"name":"owner","type":"String","description":"Name of the telephony driver for which to retrieve the session length. <p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"Notify-getTokenTTL_S__ul_ql5_vgc_1gb\">\n                  <li class=\"li\">Twilio: for the old driver</li>\n\n                  <li class=\"li\">TwilioDirect: for the new driver</li>\n\n                </ul>"}],"returns":{"type":"Integer","description":"Maximum length of the session (in seconds). Default: 1800 seconds"},"example":[{"code":"var owner = \"TwilioDirect\";  // Valid driver\nvar ttl = SNC.Notify.getTokenTTL(owner);\ngs.info(\"Token TTL for \" + owner + \" --&gt; \" + ttl);\n \nowner = \"Abcxyz\";  // Invalid driver\nttl = SNC.Notify.getTokenTTL(owner);\n// For an invalid driver, we throw NoSuchNotifyDriverException saying that Abcxyzdriver is not available\n// and return the default value of TTL\ngs.info(\"Token TTL for \" + owner + \" --&gt; \" + ttl); ","description":"The following example shows how to properly call this method and the associated response.\n        It also shows what is returned if an invalid driver is passed.","output":""}]},{"name":"hasCapability","description":"Determines whether the specified phone number has the specified capability.<p>The telephony driver associated with the phone number contains a list of all of the\n        capabilities of the phone.<div class=\"note note\"><span class=\"notetitle\">Note:</span> In the base system, the Notify JS driver only has\n          'show_speakers' as a capability; this can be modified.</div></p>","params":[{"name":"notifyPhoneNumber","type":"String","description":"Phone number for which to check for the specified capability."},{"name":"capability","type":"String","description":"Capability to detect. The string text must be an exact match to what is in the\n                phone."}],"returns":{"type":"Boolean","description":"Flag that indicates whether the specified phone has the specified\n                  capability.<ul class=\"ul\" id=\"Notify-hasCapability_S_S__ul_ryg_y2g_yfb\">\n                  <li class=\"li\">true: phone has the capability</li>\n\n                  <li class=\"li\">false: phone does not have the capability</li>\n\n                </ul>"},"example":[{"code":"// Each driver has a defined set of capabilities.\n\nvar capability = 'show_speakers';\ngs.info(SNC.Notify.hasCapability('+185xxxxxxxx', capability)); // true\n \ncapability = 'send_sms';\ngs.info(SNC.Notify.hasCapability('+185xxxxxxxx', capability)); // false","description":"This example shows how to check if a phone has a specific capability.","output":""}]},{"name":"kick","description":"Removes the specified caller from the current Notify conference call.","params":[{"name":"participant","type":"GlideRecord","description":"GlideRecord object containing the Notify Participant [notify_participant]\n                record of the caller to remove from the conference call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\n    SNC.Notify.kick(notifyParticipantGr);\n}","description":"The following example shows how to remove a participant from a conference call.","output":""}]},{"name":"modifyCall","description":"Performs one or more actions on an active Notify phone call.<p>Available actions that you can perform on calls include queuing or dequeueing the call,\n        reading text, playing audio, or forwarding the call. You can also create custom actions Call\n        the <span class=\"keyword apiname\">modifyCall()</span> method after you have specified all the actions that you\n        want to apply to the specified call. Refer to the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#c_NotifyActionApi\" title=\"The NotifyAction API allows you to define actions to send to a telephony provider.\">NotifyAction</a> API documentation for more information about available actions.</p>","params":[{"name":"callRecord","type":"GlideRecord","description":"Notify Call [notify_call] record of the call for which to apply the\n                actions."},{"name":"notifyAction","type":"NotifyAction","description":"NotifyAction object describing one or more actions to perform on the call.\n                Create this object by calling one or more of the <span class=\"keyword apiname\">NotifyAction()</span>\n                methods."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// get the most recent call record\nvar callRecord = new GlideRecord('notify_call');\ncallRecord.orderByDesc('sys_created_on');\ncallRecord.query();\n \nif (callRecord.next()) {\n    // instantiate notify action container class\n    var notifyAction = new SNC.NotifyAction();\n    // The call is already in progress. Now, we want to modify the call behavior by putting this call in a queue.\n    // So, we add a queue action to queue the call\n    notifyAction.addQueue('my fancy queue');\n   \n    // modify the call by passing in the above action, putting the call in a queue\n    new SNC.Notify().modifyCall(callRecord, notifyAction);\n} else {\n    gs.log('no such call record');\n}","description":"This example shows how to modify a call.","output":""}]},{"name":"mute","description":"Mutes the specified conference call participant.","params":[{"name":"participantRecord","type":"GlideRecord","description":"GlideRecord from the notify_participant table for the participant to\n                mute."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\n    SNC.Notify.mute(notifyParticipantGr);\n}","description":"The following example shows how to mute a caller.","output":""}]},{"name":"queueCall","description":"Puts the specified call into a queue (on hold).<p>Resume a queued call using the <span class=\"keyword apiname\">dequeueCall()</span> method.</p>","params":[{"name":"callRecord","type":"GlideRecord","description":"GlideRecord object of the Notify Call  record (notify_call table) to put on\n                hold."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    SNC.Notify.queueCall(notifyCallGr);\n}","description":"The following example shows how to put a call on hold (in the queue).","output":""}]},{"name":"sendBulkSMS","description":"Sends a specified SMS message to the specified list of Notify clients (phone\n    numbers).","params":[{"name":"notifyPhoneNumber","type":"NotifyPhoneNumber","description":"Phone number from which the SMS message is being sent."},{"name":"toPhoneNumbers","type":"String","description":"Comma separated list of E.164-compliant phone numbers to which to send the SMS\n                message."},{"name":"messageBody","type":"String","description":"SMS text to send."},{"name":"source","type":"GlideRecord","description":"Source record that prompted this SMS message, such as an incident."}],"returns":{"type":"String","description":"Unique sys_id of the Notify Message [notify_message] record created by this\n                function."},"example":[{"code":"var incidentGr = new GlideRecord('incident');\nincidentGr.get(active incident sys_id');\nif (incidentGr.isValid()) {\n    SNC.Notify.sendBulkSMS('+15413970605', ['+919885XXXXXX', '+919775XXXXXX'], 'Test automation message', incidentGr);\n}","description":"The following example shows how to send a bulk SMS message.","output":""}]},{"name":"sendSMS","description":"Sends an SMS text message to an E.164-compliant phone number.<p>This method creates a new record on the Notify Message [notify_message] table and\n        associates it with the source record.</p>","params":[{"name":"notifyPhoneNumber","type":"NotifyPhoneNumber","description":"Notify phone number or short code to which to send this SMS message."},{"name":"toPhoneNumber","type":"String","description":"E.164-compliant phone number to which to send the SMS message."},{"name":"messageBody","type":"String","description":"Body of the SMS text message."},{"name":"source","type":"GlideRecord","description":"Source record that prompted this SMS message, such as an incident."}],"returns":{"type":"String","description":"Unique message SID; stored in the Notify Message [notify_message] record as\n                message_id."},"example":[{"code":"var incidentGr = new GlideRecord('incident');\nincidentGr.get(active incident sys_id');\nif (incidentGr.isValid()) {\n    SNC.Notify.sendSMS('+15413970605', '+919885XXXXXX', 'Test automation message', incidentGr);\n}","description":"The following example shows how to send an SMS message.","output":""}]},{"name":"unmute","description":"Unmutes the specified conference call participant.","params":[{"name":"participantRecord","type":"GlideRecord","description":"GlideRecord from the notify_participant table for the participant to\n                unmute."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\n    SNC.Notify.unmute(notifyParticipantGr);\n}","description":"The following example shows how to unmute a caller.","output":""}]}]},"NotifyAction":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">NotifyAction</span> API allows you to define actions to send to a\n  telephony provider. You add actions to a NotifyAction object by calling the respective add function for each type\n   of action. Each add function returns an Action object, such as a SayAction object for the\n    <span class=\"keyword apiname\">addSay()</span> function. Refer to each method example for information about\n   returned objects.<br/><br/><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">NotifyAction</span> API is only valid within global applications. To utilize\n   this type of functionality within scoped applications, you must create custom Notify workflow\n   activities. For additional information on creating these activities, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/administer/workflow-activities/concept/c_NotifyActivities.html\" target=\"_blank\">Notify workflow activities</a>.","example":""},"properties":{},"methods":[{"name":"addConference","description":"Adds a conference action to move the current call into the current conference\n    call.","params":[],"returns":{"type":"ConferenceAction","description":"Action added to the NotifyAction object. Use the ConferenceAction object to\n                define the conference call name, and the behavior of the conference call when a\n                participant joins or leaves."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set its name\nvar conference = notifyAction.addConference();\nconference.setName('Brown Bag: Week 3');","description":"This example demonstrates how to add a conference action and set the name of the\n        conference.","output":""}]},{"name":"addConference.setEndOnExit","description":"Defines whether the conference call should end when a specified caller exits the\n    conference call.","params":[{"name":"endOnExit","type":"Boolean","description":"Flag that indicates whether the conference call should end when the specified\n                caller exits the current conference call.<ul class=\"ul\" id=\"NotifyAction-addConference_setEndOnExit_B__ul_bcw_4fc_cgb\">\n                  <li class=\"li\">true: end the conference call when the specified caller exits the conference\n                    call</li>\n\n                  <li class=\"li\">false: Default. End the conference call once all participants exit</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set the caller that starts the meeting\nvar conference = notifyAction.addConference();\n\n// retrieve the participant for which the conference call should exit when they leave\nvar notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\nconference.setEndOnExit(true);\n}","description":"This example demonstrates how to add a conference call action and then set it so the\n        conference call ends when the specified caller exits.","output":""}]},{"name":"addConference.setHangupOnStar","description":"Defines whether the conference call should end when a participant presses the star (*)\n    key.","params":[{"name":"hangupOnStart","type":"Boolean","description":"Flag that indicates whether the conference call should end when a participant\n                presses the star (*) key.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NotifyAction-addConference_setHangupOnStar_B__ul_bcw_4fc_cgb\">\n                  <li class=\"li\">true: end the conference call</li>\n\n                  <li class=\"li\">false: Default. Don't end the conference call </li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set the hang up action\nvar conference = notifyAction.addConference();\nconference.setHangupOnStar(true);","description":"This example demonstrates how to add a conference action and then record the conference\n        call.","output":""}]},{"name":"addConference.setMuted","description":"Defines whether the specified caller should be muted in the current conference\n    call.<p>If you do not call this method, the caller is not muted by default.</p>","params":[{"name":"muted","type":"Boolean","description":"Flag that indicates whether the specified caller should be muted in the current\n                conference call.<ul class=\"ul\" id=\"NotifyAction-addConference_setMuted_B__ul_bcw_4fc_cgb\">\n                  <li class=\"li\">true: caller should be muted</li>\n\n                  <li class=\"li\">false: Default. Caller should not be muted</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set it to mute the specified participant\nvar conference = notifyAction.addConference();\n\nvar notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\nconference.setMuted(true);\n}","description":"This example demonstrates how to add a conference action and then mute a specified\n        caller.","output":""}]},{"name":"addConference.setName","description":"Sets the name of the current conference call to the specified name.","params":[{"name":"name","type":"String","description":"Name to associate with the current conference call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set its name\nvar conference = notifyAction.addConference();\n\nconference.setName('Brown Bag: Week 3');","description":"This example demonstrates how to add a conference action and set the name of the conference\n        call.","output":""}]},{"name":"addConference.setRecord","description":"Defines whether the associated conference call should be recorded.<p>If you do not call this method, the conference call is not recorded by default.</p>","params":[{"name":"record","type":"Boolean","description":"Flag that indicates whether the current conference call should be recorded.<ul class=\"ul\" id=\"NotifyAction-addConference_setRecord_B__ul_bcw_4fc_cgb\">\n                  <li class=\"li\">true: start recording the conference call</li>\n\n                  <li class=\"li\">false: Default. Conference call is not recorded. Recording is stopped if it is\n                    currently being recorded.</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set it to be recorded\nvar conference = notifyAction.addConference();\nconference.setRecord(true);","description":"This example demonstrates how to add a conference action and then record the conference\n        call.","output":""}]},{"name":"addConference.setStartOnEnter","description":"Defines whether the conference call should start when the specified caller joins the\n    conference call.<p>By default, whenever there are two or more callers, the conference call starts. To make it\n        so the conference call only starts when a specific caller joins, you must call this method\n        for each of the other callers and set the value to \"false\". By doing this, the conference\n        call will not start until the desired person joins the conference call.</p>","params":[{"name":"startOnEnter","type":"Boolean","description":"Flag that indicates whether the conference call should start when the selected\n                caller joins the current conference call.<ul class=\"ul\" id=\"NotifyAction-addConference_setStartOnEnter_B__ul_bcw_4fc_cgb\">\n                  <li class=\"li\">true: Default. Start the conference call when the specified caller joins the\n                    conference call.</li>\n\n                  <li class=\"li\">false: start the conference call once it is added</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a conference call action and set the caller that starts the meeting\nvar conference = notifyAction.addConference();\n\n// retrieve the participant for which the conference call should start when they arrive\nvar notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\nconference.setStartOnEnter(true);\n}","description":"This example demonstrates how to add a conference action and then set it so the conference\n        call does not start until the specified caller joins.","output":""}]},{"name":"addDial","description":"Forwards a call to a specified phone number or Notify Client.<p>Once the addDial action is created, the associated phone number\n          (<span class=\"keyword apiname\">setPhoneNumber()</span>) or Notify Client\n          (<span class=\"keyword apiname\">setClientRecord()</span>) must also be set.</p>","params":[],"returns":{"type":"DialAction","description":"Action added to the NotifyAction object."},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party – this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n \n// Invoke setRecord(Boolean record) to record the call to this new number +919765xxxxxxx\ndialAction.setRecord(true);","description":"This example shows how to make an outbound call and record the call.","output":""}]},{"name":"addDial.setCallerID","description":"Defines the caller ID for the outgoing call.","params":[{"name":"callerID","type":"String","description":"Caller identifier to set for the outgoing call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party – this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n \n// Set the caller ID\ndialAction.setCallerID('Planning Conf Call');","description":"This example shows how to make an outbound call and set a call timeout.","output":""}]},{"name":"addDial.setClientRecord","description":"Sets the current caller to a Notify caller by specifying the table in which to find the\n    Notify caller record and the caller's unique identifier.","params":[{"name":"tableName","type":"String","description":"Name of the table that contains the desired caller's information."},{"name":"sysID","type":"String","description":"Unique identifier (sys_id) of the desired Notify caller."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// set up a dial action to forward the\n// call to the specified client\nvar action = new SNC.NotifyAction();\nvar dial = action.addDial();\ndial.setClientRecord(notifyClientRecord.getTableName(), notifyClientRecord.getUniqueValue());\ndial.setTimeout(activity.vars.timeout);\ndial.setRecord(activity.vars.record);","description":"This example shows how to set the current caller to a Notify caller using\n        setClientRecord().","output":""}]},{"name":"addDial.setDTMF","description":"Defines the DTMF tones to play when the call connects.","params":[{"name":"value","type":"String","description":"Valid DTMF digits to play when the call connects."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party - this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n \n// DTMF tones to play when call connects\ndialAction.setDTMF(\"1246AF\");","description":"This example shows how to make an outbound call and defines the DTMF tones to play when the\n        call connects.","output":""}]},{"name":"addDial.setHangupOnStar","description":"Defines whether the call should end when the star (*) key is pressed.","params":[{"name":"hangupOnStar","type":"Boolean","description":"Flag that indicates whether the call should end when the star (*) key is\n                  pressed.<ul class=\"ul\" id=\"NotifyAction-addDial_setHangupOnStar_B__ul_bcw_4fc_cgb\">\n                  <li class=\"li\">true: end the call</li>\n\n                  <li class=\"li\">false: don't end the call </li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party – this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n \n// End call by pressing star\ndialAction.setHangupOnStar(true);","description":"This example shows how to make an outbound call and set the hang up key to star.","output":""}]},{"name":"addDial.setPhoneNumber","description":"Defines the phone number to call.","params":[{"name":"phoneNumber","type":"String","description":"E.164-compliant phone number to call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party – this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n","description":"This example shows how to make an outbound call and set a call timeout.","output":""}]},{"name":"addDial.setRecord","description":"Defines whether the outgoing call should be recorded.","params":[{"name":"record","type":" ","description":"Flag that indicates whether the outgoing call should be recorded.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"NotifyAction-addDial_setRecord_B__ul_z5r_22d_cgb\">\n                  <li class=\"li\">true: record the outgoing call</li>\n\n                  <li class=\"li\">false: do not record the outgoing call</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party – this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n \n// Record the call\ndialAction.setRecord(true);","description":"This example shows how to make an outbound call and record the call.","output":""}]},{"name":"addDial.setTimeout","description":"Sets the number of seconds after which the outgoing call times out.","params":[{"name":"timeout","type":"Integer","description":"Number of seconds after which the outgoing call times out. Default: 30"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addDial() to connect to another party – this returns an object of type DialAction\nvar dialAction = notifyAction.addDial();\n \n// Call setPhoneNumber(String phoneNumber)in DialAction.java to specify the phone number to dial\ndialAction.setPhoneNumber('+919765xxxxxxx');\n \n// Set the number of seconds to wait before timing out\ndialAction.setTimeout(45);","description":"This example shows how to make an outbound call and set a call timeout.","output":""}]},{"name":"addGather","description":"Presents a specified interactive phone menu to the caller.","params":[],"returns":{"type":"GatherAction","description":"Action added to the NotifyAction object. Use the GatherAction object to define\n                the menu settings and options to present to the user."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// present the user with a menu\nvar gather = notifyAction.addGather();\ngather.setNumberOfDigits(1);    // the user can type 1 digit\ngather.setFinishKey('#');       // # or *, useful for &gt; 1 digit\ngather.setTimeout(10);          // time to enter answer, in seconds\n\n// add first menu item\nvar usSay = gather.addSay();\nusSay.setText('Press 1 for english');\nusSay.setLanguage('en-US');\n\n// add second menu item\nvar nlSay = gather.addSay();\nnlSay.setText('Kies 2 voor Nederlands');\nnlSay.setLanguage('nl-NL');\n\n// add third menu item\nvar frSay = gather.addSay();\nfrSay.setText('Choisissez 3 pour le français.');\nfrSay.setLanguage('fr-FR');\n\n// and finish off with an applause\nvar play = gather.addPlay();\nplay.setURL('http://www.wavsource.com/snds_2015-04-12_5971820382841326/sfx/applause_y.wav');","description":"","output":""}]},{"name":"addGather.addPlay","description":"Plays an audio file on the call.<p>Refer to the NotifyAction <span class=\"keyword apiname\">addPlay()</span> method for a description of the\n        supported child methods.</p>","params":[],"returns":{"type":"PlayAction","description":"Action added to the NotifyAction object. Use the PlayAction object to define\n                the audio file URL and the number of times to loop the audio."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// Create the gather action object\nvar gather = notifyAction.addGather();\n\n// Play an audio file\nvar play = gather.addPlay();\nplay.setURL('http://www.wavsource.com/snds_2015-04-12_5971820382841326/sfx/applause_y.wav');","description":"","output":""}]},{"name":"addGather.addSay","description":"Defines the text-to-speech to read on the call.<p>Refer to the NotifyAction <span class=\"keyword apiname\">addSay()</span> method for a description of the\n        supported child methods.</p>","params":[],"returns":{"type":"SayAction","description":"Action added to the NotifyAction object. Use the SayAction object to define the\n                text and language to read."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// present the user with a menu\nvar gather = notifyAction.addGather();\ngather.setNumberOfDigits(1);    // the user can type 1 digit\ngather.setTimeout(20);          // time to enter answer, in seconds\n\n// add first menu item\nvar gatherSay = gather.addSay();\ngatherSay.setText('Press 1 for english');\ngatherSay.setLanguage('en-US');\n","description":"","output":""}]},{"name":"addGather.setFinishKey","description":"Defines the key that the caller inputs to denote the end of their input.","params":[{"name":"finishKey","type":"String","description":"Key that denotes the end of caller input.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NotifyAction-addGather_setFinishKey_S__ul_vv3_vhd_cgb\">\n                  <li class=\"li\">0-9</li>\n\n                  <li class=\"li\"> # (default)</li>\n\n                  <li class=\"li\"> *</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\nvar gather = notifyAction.addGather();\ngather.setNumberOfDigits(4);    // the user can type four digit\ngather.setFinishKey('#');       // # or *, useful for &gt; 1 digit","description":"This example shows how to add a gather action and define the key that denotes the end of\n        the caller input.","output":""}]},{"name":"addGather.setNumberOfDigits","description":"Defines the number of digits to collect.","params":[{"name":"numberOfDigits","type":"Integer","description":"Number of digits to collect. Zero is an invalid value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// present the user with a menu\nvar gather = notifyAction.addGather();\ngather.setNumberOfDigits(4);    // the user can type four digit\ngather.setFinishKey('#');       // # or *, useful for &gt; 1 digits\ngather.setTimeout(20);          // time to enter answer, in seconds\n","description":"This example shows how to add a gather action and define the number of key strokes to\n        collect.","output":""}]},{"name":"addGather.setTimeout","description":"Defines the amount of time after which gathering of input will timeout.","params":[{"name":"timeout","type":"Integer","description":"Number of seconds to wait for caller input before timing out. Default:\n                10"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// present the user with a menu\nvar gather = notifyAction.addGather();\ngather.setNumberOfDigits(4);    // the user can type 1 digit\ngather.setFinishKey('#');       // # or *, useful for &gt; 1 digits\ngather.setTimeout(20);          // time to enter answer, in seconds\n","description":"This example shows how to add a gather action and define the input timeout value.","output":""}]},{"name":"addHangUp","description":"Ends an active phone call.","params":[],"returns":{"type":"HangUpAction","description":"Action added to the NotifyAction object."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// hang up\nnotifyAction.addHangUp();","description":"","output":""}]},{"name":"addPlay","description":"Plays an audio file on the call.","params":[],"returns":{"type":"PlayAction","description":"Action added to the NotifyAction object. Use the PlayAction object to define\n                the audio file URL and number of times to loop the audio."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a play action\nvar play = notifyAction.addPlay();\nplay.setURL('http://www.moviesounds.com/2001/imsorry.wav');\nplay.setLoop(1);","description":"","output":""}]},{"name":"addPlay.setLoop","description":"Defines the number of times to play (loop through) the audio file.","params":[{"name":"loop","type":"Integer","description":"Number of times to play the audio file."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a play action\nvar play = notifyAction.addPlay();\nplay.setURL('http://www.moviesounds.com/2001/imsorry.wav');\nplay.setLoop(2);","description":"","output":""}]},{"name":"addPlay.setURL","description":"Defines the URL where to obtain the audio file to play.","params":[{"name":"url","type":"String","description":"URL of the audio file to play."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a play action\nvar play = notifyAction.addPlay();\nplay.setURL('http://www.moviesounds.com/2001/imsorry.wav');\nplay.setLoop(1);","description":"","output":""}]},{"name":"addQueue","description":"Queues the call, which puts the call on hold.","params":[],"returns":{"type":"QueueAction","description":"Action added to the NotifyAction object. Use the QueueAction object to define\n                the queue name, and queueing or dequeueing behavior."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// queue the call\nvar queue = notifyAction.addQueue();\nqueue.setName('my queue');","description":"This example shows how to add the call to the specified queue.","output":""},{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// dequeue the call\nvar queue = notifyAction.addQueue();\nqueue.setDequeue(true);","description":"This example shows how to remove the call from the queue.","output":""}]},{"name":"addQueue.setDequeue","description":"Removes the call from the current call queue (takes it off of \"hold\").","params":[{"name":"dequeue","type":"Boolean","description":"Flag that indicates whether to remove the current call from the queue.<ul class=\"ul\" id=\"NotifyAction-addQueue_setDequeue_B__ul_lph_gxd_cgb\">\n                  <li class=\"li\">true: remove the call from the queue</li>\n\n                  <li class=\"li\">false: call is put in the queue</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// dequeue the call\nvar queue = notifyAction.addQueue();\nqueue.setDequeue(true);","description":"This example shows how to remove the call from the queue.","output":""}]},{"name":"addQueue.setName","description":"Defines the name associated with a queue.","params":[{"name":"name","type":"String","description":"Name to associate with the queue."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// queue the call\nvar queue = notifyAction.addQueue();\nqueue.setName('my queue');","description":"This example shows how to define the name of a queue.","output":""}]},{"name":"addRecord","description":"Adds an action to record the call to the current NotifyAction object.<p>The recording automatically ends when the call is completed or when a specified terminate\n        is pressed (<span class=\"keyword apiname\">setFinishKey()</span>). The recording is then placed in the\n        notify_record table for the associated call.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// First we initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Call addRecord() of NotifyAction – This returns an object of type RecordAction\nvar recordAction = notifyAction.addRecord();\n \n// Optional. Define the key that callers use to stop the recording\nrecordAction.setFinishKey('#'); // Stop the call recording when caller presses the '#' key.","description":"This example demonstrates how to record a call.","output":""}]},{"name":"addRecord.setFinishKey","description":"Defines the key that terminates the recording.","params":[{"name":"finishKey","type":"String","description":"Key that terminates the recording.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NotifyAction-addRecord_setFinishKey_S__ul_vv3_vhd_cgb\">\n                  <li class=\"li\">0-9</li>\n\n                  <li class=\"li\"> # (default)</li>\n\n                  <li class=\"li\"> *</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// First we initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Then we call addRecord() of NotifyAction \nvar recordAction = notifyAction.addRecord();\n \n// Set the key that terminates the recording\nrecordAction.setFinishKey('#'); // This means that we stop the call recording when user presses the '#' key.","description":"This example demonstrates how to record a call and set the call termination key.","output":""}]},{"name":"addRecord.setMaxDuration","description":"Defines the maximum length of the recording.","params":[{"name":"seconds","type":"Integer","description":"Maximum length of the recording in seconds. Default: 3600"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// First we initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Then we call addRecord() of NotifyAction \nvar recordAction = notifyAction.addRecord();\n \n// Set the maximum length of the recording\nrecordAction.setMaxDuration(4800); ","description":"This example demonstrates how to record a call and set the call termination key.","output":""}]},{"name":"addRecord.setTimeout","description":"Sets the number of seconds of silence, after which, the recording ends.","params":[{"name":"timeout","type":"Integer","description":"Number of seconds of silence on the call, after which the recording ends.\n                Default: 10"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// First we initialize NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n \n// Then we call addRecord() of NotifyAction \nvar recordAction = notifyAction.addRecord();\n \n// Set the recoding timeout value\nrecordAction.setTimeout(360); ","description":"This example demonstrates how to record a call and set the recording timeout value.","output":""}]},{"name":"addReject","description":"Rejects an incoming call.","params":[],"returns":{"type":"RejectAction","description":"Action added to the NotifyAction object. Use the RejectAction object to define\n                the reason for rejecting the call."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// reject the call\nvar rejectAction = notifyAction.addReject();\nrejectAction.setReason('busy'); // 'busy' or 'rejected'","description":"","output":""}]},{"name":"addSay","description":"Defines the text-to-speech to read on the call.<p>Multiple languages are supported with text-to-speech. Available languages depend on the\n        telephony provider.</p>","params":[],"returns":{"type":"SayAction","description":"Action added to the NotifyAction object. Use the SayAction object to define the\n                text and language to read."},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a say action to say something in US English\nvar usSay = notifyAction.addSay();\nusSay.setText('Welcome. I can speak english');\nusSay.setLanguage('en-US');\n\n// add a say action to say something in Dutch\nvar nlSay = notifyAction.addSay();\nnlSay.setText('Ik spreek ook vloeiend nederlands');\nnlSay.setLanguage('nl-NL');\n\n// and german\nvar deSay = notifyAction.addSay();\ndeSay.setText('Und ich kan auch deutsch sprechen');\ndeSay.setLanguage('de-DE');","description":"This example demonstrates reading text in several languages.","output":""}]},{"name":"addSay.setLanguage","description":"Defines the language in which to speak the text.<p>Use this method in conjunction with the <span class=\"keyword apiname\">setText()</span> method to define the\n        verbiage to speak.</p>","params":[{"name":"language","type":"String","description":"ISO 3166 language code that defines the language in which to speak the\n                associated text. For example, \"en-US\" or \"nl-NL\"."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a say action to say something in US English\nvar usSay = notifyAction.addSay();\nusSay.setText('Welcome. I can speak english');\nusSay.setLanguage('en-US');\n\n// add a say action to say something in Dutch\nvar nlSay = notifyAction.addSay();\nnlSay.setText('Ik spreek ook vloeiend nederlands');\nnlSay.setLanguage('nl-NL');\n\n// and german\nvar deSay = notifyAction.addSay();\ndeSay.setText('Und ich kan auch deutsch sprechen');\ndeSay.setLanguage('de-DE');","description":"This example demonstrates reading text in several languages.","output":""}]},{"name":"addSay.setText","description":"Defines the text to be read within the current call.<p>Use this method in conjunction with the <span class=\"keyword apiname\">setLanguage()</span> method to define\n        the language in which to speak the provided text.</p>","params":[{"name":"text","type":"String","description":"Text to read aloud within the current call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// add a say action to say something in US English\nvar usSay = notifyAction.addSay();\nusSay.setText('Welcome. I can speak english');\nusSay.setLanguage('en-US');\n\n// add a say action to say something in Dutch\nvar nlSay = notifyAction.addSay();\nnlSay.setText('Ik spreek ook vloeiend nederlands');\nnlSay.setLanguage('nl-NL');\n\n// and german\nvar deSay = notifyAction.addSay();\ndeSay.setText('Und ich kan auch deutsch sprechen');\ndeSay.setLanguage('de-DE');","description":"This example demonstrates reading text in several languages.","output":""}]},{"name":"addSMS","description":"Sends an SMS message.<p><span class=\"notetitle\">Note:</span> When using this function with an active call, you do not need to call the\n          <span class=\"keyword apiname\">setTo</span> function on the returned SMSAction object. The SMS is\n        automatically sent to the caller.</p>","params":[],"returns":{"type":"SMSAction","description":"Action added to the NotifyAction object. Use the SMSAction object to define the\n                message text and the phone number to which to send the message."},"example":[{"code":"// Instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// Define where to send the SMS to\nvar number = new GlideElementPhoneNumber();\nnumber.setPhoneNumber('+31612345678', true);\n\n// Add an SMS action\nvar sms = notifyAction.addSMS();\nsms.setMessage('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');\nsms.setTo(number);","description":"","output":""}]},{"name":"addSMS.setMessage","description":"Defines the text of the SMS message to send.","params":[{"name":"message","type":"String","description":"Text of the SMS message to send."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// define where to send the sms to\nvar number = new GlideElementPhoneNumber();\nnumber.setPhoneNumber('+31612345678', true);\n\n// add a SMS action\nvar sms = notifyAction.addSMS();\nsms.setMessage('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');\nsms.setTo(number);","description":"","output":""}]},{"name":"addSMS.setTo","description":"Sets the phone number to which to sent the SMS message.","params":[{"name":"to","type":"String","description":"E.164-compliant phone number to which to send the SMS message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate NotifyAction\nvar notifyAction = new SNC.NotifyAction();\n\n// define where to send the sms to\nvar number = new GlideElementPhoneNumber();\nnumber.setPhoneNumber('+31612345678', true);\n\n// add a SMS action\nvar sms = notifyAction.addSMS();\nsms.setMessage('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');\nsms.setTo(number);","description":"","output":""}]},{"name":"append","description":"Appends the specified NotifyAction object to the current client's NotifyAction\n    object.<p>There are two types of NotifyActions: terminal and non-terminal. Once you append a terminal\n        action to a client's NotifyAction object, you cannot append any additional actions.\n        Non-terminal actions include:<ul class=\"ul\" id=\"NotifyAction-append_NA__ul_lfb_rqy_cgb\">\n          <li class=\"li\">PlayAction</li>\n\n          <li class=\"li\">RecordAction</li>\n\n          <li class=\"li\">SayAction</li>\n\n          <li class=\"li\">SMSAction</li>\n\n        </ul></p><p>All others NotifyActions are terminal. If you try to add another NotifyAction after a\n        terminal action, the call will fail.</p>","params":[{"name":"action","type":"NotifyAction","description":"NotifyAction object to append to the NotifyAction object of the current\n                caller."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"fromJson","description":"Deserialize a <span class=\"keyword apiname\">NotifyAction</span> object from a JSON string.","params":[{"name":"json","type":"String","description":"A JSON string representation of a <span class=\"keyword apiname\">NotifyAction</span>\n                object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var json = \".... some json obtained from toJson ....\";\n\n// instantiate notify action\nvar notifyAction = new SNC.NotifyAction();\n\n// deserialize and reconstruct the notify action instance\nnotifyAction.fromJson(json);","description":"This example demonstrates deserializing a NotifyAction object.","output":""},{"code":"// instantiate notify action\nvar notifyAction = new SNC.NotifyAction();\n\n// add a queue\nvar queue = notifyAction.addQueue();\nqueue.setName('myQueueName');\nqueue.setDequeue(false);\n\n// serialize to json\nvar json = notifyAction.toJson();\ngs.log('serialization result: ' + json);\n\n// instantiate a new notify action\nvar newAction = new SNC.NotifyAction();\n\n// deserialize the json generated above\nnewAction.fromJson(json);\n\n// serialize the new object and log the result\nnewJson = newAction.toJson();\ngs.log('new serialization result: ' + newJson);\ngs.log('the same: ' + (json == newJson));","description":"This example demonstrates both serializing and deserializing a NotifyAction object.","output":"*** Script: serialization result:\n        {&quot;fClassName&quot;:&quot;NotifyAction&quot;,&quot;fActions&quot;:[{&quot;fClassName&quot;:&quot;QueueAction&quot;,&quot;fDequeue&quot;:true,&quot;fQueueName&quot;:&quot;myQueueName&quot;}]}\n        *** Script: new serialization result:\n        {&quot;fClassName&quot;:&quot;NotifyAction&quot;,&quot;fActions&quot;:[{&quot;fClassName&quot;:&quot;QueueAction&quot;,&quot;fDequeue&quot;:true,&quot;fQueueName&quot;:&quot;myQueueName&quot;}]}\n        *** Script: the same: true"}]},{"name":"setCallRecord","description":"Defines the Notify call record in which to add subsequent actions.","params":[{"name":"callRecord","type":"GlideRecord","description":"GlideRecord containing the record of the caller (within the notify_call table)\n                for which to add actions. This caller stays in affect until this method is called\n                again with a different caller."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"public NotifyAction runIncomingCallWorkflow(NotifyPhoneNumber notifyPhoneNumber, GlideRecord callRecord) throws NoWorkflowConfiguredException, NoSuchNotifyGroupRecordException {\n   NotifyAction notifyAction = runWorkflow(notifyPhoneNumber, COL_INCOMING_CALL_WF, callRecord);\n   notifyAction.setCallRecord(callRecord);\n   return notifyAction;\n}","description":"This example shows how to set the caller to which you want to add actions.","output":""}]},{"name":"toJson","description":"Serialize the <span class=\"keyword apiname\">NotifyAction</span> object to a JSON string.","params":[],"returns":{"type":"String","description":"JSON representation of this NotifyAction object."},"example":[{"code":"// instantiate notify action\nvar notifyAction = new SNC.NotifyAction();\n\n// add one or more notify actions\n// ...\n\n// and serialize to json\nvar json = notifyAction.toJson();","description":"This example demonstrates serializing a NotifyAction object.","output":""},{"code":"// instantiate notify action\nvar notifyAction = new SNC.NotifyAction();\n\n// add a queue\nvar queue = notifyAction.addQueue();\nqueue.setName('myQueueName');\nqueue.setDequeue(false);\n\n// serialize to json\nvar json = notifyAction.toJson();\ngs.log('serialization result: ' + json);\n\n// instantiate a new notify action\nvar newAction = new SNC.NotifyAction();\n\n// deserialize the json generated above\nnewAction.fromJson(json);\n\n// serialize the new object and log the result\nnewJson = newAction.toJson();\ngs.log('new serialization result: ' + newJson);\ngs.log('the same: ' + (json == newJson));","description":"This example demonstrates both serializing and deserializing a NotifyAction object.","output":"*** Script: serialization result:\n        {&quot;fClassName&quot;:&quot;NotifyAction&quot;,&quot;fActions&quot;:[{&quot;fClassName&quot;:&quot;QueueAction&quot;,&quot;fDequeue&quot;:true,&quot;fQueueName&quot;:&quot;myQueueName&quot;}]}\n        *** Script: new serialization result:\n        {&quot;fClassName&quot;:&quot;NotifyAction&quot;,&quot;fActions&quot;:[{&quot;fClassName&quot;:&quot;QueueAction&quot;,&quot;fDequeue&quot;:true,&quot;fQueueName&quot;:&quot;myQueueName&quot;}]}\n        *** Script: the same: true"}]}]},"NotifyPhoneNumber":{"meta":{"has_constructor":false,"description":"The NotifyPhoneNumber API allows you to query information about a Notify phone\n  number. Access the global <span class=\"keyword apiname\">NotifyPhoneNumber</span> class and its associated methods in the\n    <samp class=\"ph codeph\">SNC</samp> namespace.","example":""},"properties":{},"methods":[{"name":"getDialCode","description":"Returns the international dialing code for a Notify phone number.","params":[],"returns":{"type":"String","description":"International phone code for a country."},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getDialCode());\n}","description":"This example shows how to obtain the dial code for a phone number.","output":""}]},{"name":"getID","description":"Returns the ID of this phone number as defined by the telephony provider.","params":[],"returns":{"type":"String","description":"Identifier of the number within the telephony provider."},"example":[{"code":"var numbers = SNC.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getID());\n}","description":"This example shows how to obtain the unique identifier for a phone number.","output":""}]},{"name":"getNumber","description":"Returns the numerical phone number for the current Notify caller.","params":[],"returns":{"type":"String","description":"E.164-compliant phone number."},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getNumber());\n}","description":"This example shows how to obtain a Notify caller's phone number.","output":""}]},{"name":"getOwner","description":"Returns the telephony provider associated with this phone number.","params":[],"returns":{"type":"String","description":"Telephony provider associated with the number: Twilio."},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getOwner());\n}","description":"This example shows how to obtain the telephony provide that owns the specified phone\n        number.","output":""}]},{"name":"getTerritory","description":"Returns the country associated with the phone number.","params":[],"returns":{"type":"String","description":"Name of the country to which the phone number belongs."},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getTerritory());\n}","description":"This example shows how to obtain the country of a Notify caller.","output":""}]},{"name":"isShortCode","description":"Determines whether the current Notify phone number is a short code.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the current Notify phone number is a short code.<ul class=\"ul\" id=\"NPN-isShortCode__ul_ghr_ksx_zfb\">\n                  <li class=\"li\">true: phone number is a short code.</li>\n\n                  <li class=\"li\">false: phone number is not a short code.</li>\n\n                </ul>"},"example":[{"code":"GlideRecord notifyNumber = new GlideRecord(TABLE_NOTIFY_NUMBER);\nnotifyNumber.query(COL_NUMBER, notifyPhoneNumber.getNumber());\n\nif (!notifyNumber.next()) {\n  notifyNumber.initialize();\n  notifyNumber.setValue(COL_OWNER, notifyPhoneNumber.getOwner());\n  if (notifyPhoneNumber.isShortCode()) {\n    notifyNumber.setValue(COL_SHORT_CODE, notifyPhoneNumber.getNumber());\n  } else {\n    notifyNumber.setValue(COL_PHONE_NUMBER, notifyPhoneNumber.getNumber());\n  }","description":"This example shows how to check if the current Notify phone number is a short code.","output":""}]},{"name":"supportsConferenceCall","description":"Determines if the Notify phone number supports conference calling.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports conference\n                  calling.<ul class=\"ul\" id=\"r_NPN-supportsConferenceCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support conference calling</li>\n\n                  <li class=\"li\">false: phone number does not support conference calling</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsConferenceCall());\n}","description":"This example shows how to determine if a Notify caller supports conference calls.","output":""}]},{"name":"supportsIncomingPhoneCall","description":"Determines if the Notify phone number supports receiving phone calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports incoming phone\n                  calls.<ul class=\"ul\" id=\"r_NPN-supportsIncomingPhoneCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support incoming phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support incoming phone calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsIncomingPhoneCall());\n}","description":"This example shows how to determine if a Notify caller can receive incoming phone\n        calls.","output":""}]},{"name":"supportsIncomingSMS","description":"Determines if the Notify phone number supports receiving SMS messages.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports receiving\n                incoming MMS messages. <ul class=\"ul\" id=\"r_NPN-supportsIncomingSMS__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support receiving incoming MMS messages</li>\n\n                  <li class=\"li\">false: phone number does not support receiving incoming MMS messages</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsIncomingSMS());\n}","description":"This example shows how to determine if a Notify caller can receive incoming SMS\n        messages.","output":""}]},{"name":"supportsOutgoingPhoneCall","description":"Determines if the Notify phone number supports initiating phone calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports initiating\n                outgoing phone calls.<ul class=\"ul\" id=\"r_NPN-supportsOutgoingPhoneCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support initiating outgoing phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support initiating outgoing phone calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsOutgoingPhoneCall());\n}","description":"This example shows how to determine if a Notify caller can make outgoing phone calls.","output":""}]},{"name":"supportsOutgoingSMS","description":"Determines if the Notify phone number supports sending SMS messages.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports sending SMS\n                  messages.<ul class=\"ul\" id=\"r_NPN-supportsOutgoingSMS__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support sending SMS messages</li>\n\n                  <li class=\"li\">false: phone number does not support sending SMS messages</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsOutgoingSMS());\n}","description":"This example shows how to determine if a Notify caller can initiate outgoing SMS\n        messages.","output":""}]},{"name":"supportsRecording","description":"Determines if the Notify phone number supports recording phone calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports recording phone\n                  calls.<ul class=\"ul\" id=\"r_NPN-supportsRecording__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support recording phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support recording phone calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsRecording());\n}","description":"This example shows how to determine if a Notify caller can record calls.","output":""}]},{"name":"supportsWebRTC","description":"Determines if the Notify phone number supports calls to a browser, such as in a WebRTC\n    implementation.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports calls to a\n                  browser.<ul class=\"ul\" id=\"r_NPN-supportsWebRTC__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support calls to a browser</li>\n\n                  <li class=\"li\">false: phone number does not support calls to a browser</li>\n\n                </ul>"},"example":[{"code":"var numbers = SNC.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsWebRTC());\n}","description":"This example shows how to determine if a Notify caller can initiate/accept\n        browser-to-browser calls.","output":""}]}]},"OAuthUtil":{"meta":{"has_constructor":false,"description":"This script include modifies request parameters and parses the token response during\n  runtime. If the external OAuth provider returns a response other than an application/JSON type response,\n   you can customize your own version of this script include to parse responses that are in\n   different format. Extend or copy this script include, and then reference your version from the\n    <span class=\"ph uicontrol\">OAuth API Script</span> field on the Application Registry form for third-party\n   OAuth providers. The custom script include name must start with <kbd class=\"ph userinput\">OAuth</kbd>.","example":""},"properties":{},"methods":[{"name":"interceptRequestParameters","description":"Adds a name:value pair to the request parameters.","params":[{"name":"requestParamMap","type":"String","description":"The name:value pair you want to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"parseTokenResponse","description":"Parses the token received into a parameter map.","params":[{"name":"accessTokenResponse","type":"String","description":"The access token response that you want to parse."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"OCRosterSpanApprovalUtil":{"meta":{"has_constructor":false,"description":"The OCRosterSpanApprovalUtil API for the PTO approval feature. ","example":""},"properties":{},"methods":[{"name":"approvePTOSpan ","description":"Changes the type of the roster_schedule_span to time-off from approval.","params":[{"name":"rosterSpanGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getContextualCalUrlPerSpanProposal ","description":"Returns a URL to the on-call calendar based on the rosterSpanProposalGr.","params":[{"name":"rosterSpanProposalGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"String","description":"A URL to the on-call calendar based on the rosterSpanProposalGr."},"example":[]},{"name":"getFromDateDisplayValuePerSpanProposal ","description":"Returns a formatted GlideScheduleDateTime string based on the start date of the\n    rosterSpanProposalGr.","params":[{"name":"rosterSpanProposalGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"String","description":"A formatted GlideScheduleDateTime string based on the start date of the\n                rosterSpanProposalGr."},"example":[]},{"name":"getPTOApproversList ","description":"Returns an array of group managers based on the user's rota groups.","params":[{"name":"rosterSpanProposalGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"Array","description":"An array of group managers based on the user's rota groups."},"example":[]},{"name":"getToDateDisplayValuePerSpanProposal ","description":"Returns a formatted GlideScheduleDateTime string based on the end date of the\n    rosterSpanProposalGr.","params":[{"name":"rosterSpanProposalGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"String","description":"A formatted GlideScheduleDateTime string based on the end date of the\n                rosterSpanProposalGr."},"example":[]},{"name":"getUserNamePerSpanProposal ","description":"Returns the user's name based on rosterSpanProposalGr.","params":[{"name":"rosterSpanProposalGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"String","description":"The user's name based on rosterSpanProposalGr."},"example":[]},{"name":"isPTOApprovalRequired ","description":"Checks whether the system property\n      <span class=\"keyword parmname\">com.snc.on_call_rotation.pto.approval.required</span> is true.","params":[],"returns":{"type":"Boolean","description":"Returns true if the system property\n                  <span class=\"keyword parmname\">com.snc.on_call_rotation.pto.approval.required</span> is\n                true.."},"example":[]},{"name":"rejectPTOSpan ","description":"Changes the type of the roster_schedule_span to rejected from approval.","params":[{"name":"rosterSpanGr","type":"GlideRecord","description":"A roster_schedule_span_proposal record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"OCRotaICalendar":{"meta":{"has_constructor":false,"description":"The OCRotaICalendar API is an extension of the OCRotaICalendarSNC API. ","example":""},"properties":{},"methods":[]},"OCRotaICalendarSNC":{"meta":{"has_constructor":false,"description":"The OCRotaICalendarSNC API provides iCal formatted events for the a specific user's\n    rotation. ","example":""},"properties":{},"methods":[{"name":"cleanExpiredCache ","description":"Records in the cmn_rota_resp_cache table that have a From date prior to\n    today.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"createCalendarEvents ","description":"Returns list of AJAXScheduleItems for the user's on-call.","params":[{"name":"groupId","type":"String","description":"The group sys id."},{"name":"rotaId","type":"String","description":"The rota sys id."},{"name":"userId","type":"String","description":"The user sys id."},{"name":"dateRangeObj","type":"Object","description":"Contains the from and to dates for the data set."}],"returns":{"type":"AJAXScheduleItem","description":"Java list of AJAXScheduleItems."},"example":[]},{"name":"createCustomEvent ","description":"Creates a VEVENT based on the scheduleItemSpan provided.","params":[{"name":"groupName","type":"String","description":"Name of the on-call group."},{"name":"scheduleItemSpan","type":"Object","description":"Span of time for the on-call period."},{"name":"calendarLink","type":"String","description":"A link back to the on-call calendar in the instance."}],"returns":{"type":"String","description":"A VEVENT based on the scheduleItemSpan provided."},"example":[]},{"name":"createPlaceholderCalendar ","description":"Creates a formatted iCalendar if the user has no upcoming on-call.","params":[{"name":"rotaGR","type":"GlideRecord","description":"The cmn_rota glide record."},{"name":"dateRangeObj","type":"Object","description":"Contains the from and to dates for the data set."},{"name":"calendarLink","type":"String","description":"A link to the on-call calendar for this user."}],"returns":{"type":"String","description":"Formatted iCalendar with a placeholder VEVENT."},"example":[]},{"name":"getCalendarEvents ","description":"Returns the formatted iCalendar for the user's rotation.","params":[{"name":"groupId","type":"String","description":"The group sys id."},{"name":"rotaId","type":"String","description":"The rota sys id."},{"name":"userId","type":"String","description":"The user sys id."},{"name":"dateRangeObj","type":"Object","description":"Contains the from and to dates for the data set."},{"name":"useCache","type":"Boolean","description":"If true, makes use of the cache table cmn_rota_resp_cache."}],"returns":{"type":"String","description":"Formatted iCalendar for the user's rotation."},"example":[]},{"name":"getEventsFromTable ","description":"Returns the formatted iCalendar for the user's rotation if found in the\n    cmn_rota_resp_cache table.","params":[{"name":"groupId","type":"String","description":"The group sys id."},{"name":"rotaId","type":"String","description":"The rota sys id."},{"name":"userId","type":"String","description":"The user sys id."},{"name":"dateRangeObj","type":"Object","description":"Contains the from and to dates for the data set."}],"returns":{"type":"String","description":"Formatted iCalendar for the user's rotation if found in the cmn_rota_resp_cache\n                table."},"example":[]},{"name":"getIntersectRotaSpanItem ","description":"Checks whether the provided timeSpan intersects with one of the rota span\n    items.","params":[{"name":"timeSpan","type":"ScheduleTimeSpan","description":"A single span for the user's on-call."},{"name":"rotaSpanItems","type":"Array","description":"Contains the user's standard on-call spans."}],"returns":{"type":"Object","description":"If the timeSpan intersects with one of the rota span items, returns an object\n                containing the rota span item and the span that it intersects with."},"example":[]},{"name":"getMemberCalendarURL ","description":"Creates the subscribable URL for the user's iCalendar.","params":[{"name":"groupId","type":"String","description":"The group sys id."},{"name":"rotaId","type":"Object","description":"The rota sys id."},{"name":"userId","type":"String","description":"The user sys id."}],"returns":{"type":"String","description":"The subscribable URL for the user's iCalendar."},"example":[]},{"name":"getOnCallCalendarURL ","description":"Returns a URL to the on-call calendar based on the rota record.","params":[{"name":"rotaGR","type":"GlideRecord","description":"A cmn_rota record."}],"returns":{"type":"String","description":"URL to the on-call calendar based on the rota record."},"example":[]},{"name":"handleOverrideMember ","description":"Returns an array of the user's overrides (extra coverage).","params":[{"name":"scheduleItem","type":"AJAXScheduleItem","description":"A list of AJAXScheduleItems."}],"returns":{"type":"Array","description":"An array of the user's overrides (extra coverage)."},"example":[]},{"name":"handleRotaMember ","description":"Returns an object containing the user's override (extra coverage) and excluded\n    spans.","params":[{"name":"scheduleItem","type":"AJAXSchedueItem","description":"A list of AJAXScheduleItems."},{"name":"rotaSpanItems","type":"Object","description":"Contains the user's standard on-call spans."},{"name":"definitionItems","type":"Object","description":"Contains the rota's standard on-call spans."},{"name":"repeatRotaSpanIdArr","type":"Array","description":"An array of rota span sys ids."}],"returns":{"type":"Object","description":"Contains the user's override (extra coverage) and excluded spans."},"example":[]},{"name":"invalRotaRespCache ","description":"Used by business rules on the cmn_rota_member, cmn_schedule_span, and\n    roster_schedule_span tables tp update the cmn_rota_resp_cache table.","params":[{"name":"rotaRespCacheGR","type":"GlideRecord","description":"Record that has been updated."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"matchRotaSpanRule","description":"Checks whether the provided timeSpan matches one of the rotaSpanItems.","params":[{"name":"timeSpan","type":"ScheduleTimeSpan","description":"A single span for the user's on-call."},{"name":"rotaSpanItems","type":"Array","description":"Contains the user's standard on-call spans."},{"name":"repeatRotaSpanIdArr","type":"Array","description":"An array of rota span sys ids."},{"name":"seriesStartTimes","type":"Object","description":"Start time of the rota spans."}],"returns":{"type":"Boolean","description":"Returns true if the timeSpan matches one of the rotaSpanItems."},"example":[]},{"name":"populateCalendarSubscriptionSettings ","description":"Used by fixed job to populate the calendar subscription fields on the cmn_rota\n    form","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"processSeriesEvent ","description":"Returns an object containing the user's rotations.","params":[{"name":"scheduleItems","type":"List","description":"The user's on-call rotation as an AJAXScheduleItem list."},{"name":"repeatRotaSpanIdArr","type":"Array","description":"An array of the cmn_rota schedule span record sys_ids."},{"name":"userId","type":"String","description":"The user sys id."}],"returns":{"type":"Object","description":"Contains the user's rotations."},"example":[]},{"name":"saveCalendarEvents ","description":"Inserts the user's iCalendar into the cmn_rota_resp_cache table.","params":[{"name":"groupId","type":"String","description":"The group sys id."},{"name":"rotaId","type":"String","description":"The rota sys id."},{"name":"userId","type":"String","description":"The user sys id."},{"name":"dateRangeObj","type":"Object","description":"Contains the from and to dates for the data set."},{"name":"result","type":"String","description":"The user's iCalendar."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"sendCalendarURL ","description":"Queues events to send an email to all members of the rotation.","params":[{"name":"rotaGR","type":"GlideRecord","description":"A cmn_rota record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"updateExceptionList ","description":"Returns an object that contains all of the timeSpans that need to be excluded from the\n    user's iCalendar.","params":[{"name":"scheduleItem","type":"AJAXScheduleItem","description":"One AJAXScheduleItem."},{"name":"timeSpan","type":"ScheduleTimeSpan","description":"A single user's standard on-call span."},{"name":"rotaSpanItems","type":"Array","description":"Contains the user's standard on-call spans."}],"returns":{"type":"Object","description":"Object that contains all of the timeSpans that need to be excluded from the\n                user's iCalendar."},"example":[]}]},"OCRotaMember":{"meta":{"has_constructor":false,"description":"The OCRotaMember API performs maintenance operations on the cmn_rota_member\n    table. ","example":""},"properties":{},"methods":[{"name":"deactivateUser ","description":"Deactivates the user's rota member records according to the deactivate\n    date.","params":[{"name":"userId","type":"String","description":"The sys id of the user."},{"name":"deactivateDate","type":"GlideDateTime","description":"The date from which the user's rotation is deactivated."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hasChanged ","description":"Checks whether the cmn_rota_member record has changed. Checks the Member, From, To, and\n    Order fields have changed.","params":[{"name":"current","type":"GlideRecord","description":"The latest changes made to the cmn_rota_member record."},{"name":"previous","type":"GlideRecord","description":"The original state of the cmn_rota_member record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hasOrderChanged ","description":"On update of a cmn_rota_member record, checks whether the order of the record has\n    changed.","params":[{"name":"current","type":"GlideRecord","description":"The latest changes made to the cmn_rota_member record."},{"name":"previous","type":"GlideRecord","description":"The original state of the cmn_rota_member record."}],"returns":{"type":"Boolean","description":"Returns true if the order has changed."},"example":[]},{"name":"recalculate ","description":"Recalculates the schedule for the cmn_rota_member record.","params":[{"name":"current","type":"GlideRecord","description":"The latest changes made to the cmn_rota_member record."},{"name":"previous","type":"GlideRecord","description":"The original state of the cmn_rota_member record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"validateDates ","description":"Ensures that the From date occurs before or on the same date as the To\n    date.","params":[{"name":"from","type":"String","description":"Formatted date/"},{"name":"to","type":"String","description":"Formatted date/"}],"returns":{"type":"Boolean","description":"Returns true if the From date is before or on same date as To date."},"example":[]}]},"OCRotation":{"meta":{"has_constructor":false,"description":"The core <span class=\"keyword apiname\">OCRotation</span> builds a data structure that is used to display\n  the calendar. The code builds up the GlideAJAXSchedulePage object which stores a list of span items. You can\n   use this type for the Gwt (legacy) calendar. See the OCRotationV2 API for other calender types.\n   This is part of On-Call Scheduling.","example":""},"properties":{},"methods":[{"name":"buildRotas","description":"Builds the on-call coverage based on your groups, rotas, and rosters. This is used by\n    the OCRotationV2 - getSpans method.","params":[],"returns":{"type":"Void","description":" "},"example":[]},{"name":"getEndDate","description":"Returns the end date for the time period for which you want to retrieve on-call\n    coverage.","params":[],"returns":{"type":"String","description":"End date for the time period for which you want to retrieve on-call\n                coverage."},"example":[]},{"name":"getGroupIds","description":"Returns a comma separated list of group sys_id (sys_user_group) values for an on-call\n    schedule.","params":[],"returns":{"type":"String","description":"Comma separated list of group sys_id (sys_user_group) values for an on-call\n                schedule."},"example":[]},{"name":"getRosterIds","description":"Returns the rosters according to the selected rotas.","params":[],"returns":{"type":"String","description":"Rosters according to the selected rotas."},"example":[]},{"name":"getRotaGr","description":"Returns a GlideRecord for the cmn_rota table filtered by groups, rota, users, and\n    roster.","params":[{"name":"rotaIds","type":"String","description":"Comma separated list of rota sys_id (cmn_rota) values for an on-call\n                schedule."},{"name":"groupIds","type":"String","description":"Comma separated list of group sys_id (sys_user_group) values for an on-call\n                schedule."},{"name":"rosterIds","type":"String","description":"Comma separated list of roster sys_id (cmn_rota_roster) values for an on-call\n                schedule."},{"name":"userIds","type":"String","description":"Comma separated list of user sys_id (sys_user) values for an on-call\n                schedule."}],"returns":{"type":"GlideRecord","description":"A GlideRecord for the cmn_rota table filtered by groups, rota, users, and\n                roster."},"example":[]},{"name":"getRotaIds","description":"Returns the rotas for the groups on your calendar.","params":[],"returns":{"type":"String","description":"Rotas for the groups on your calendar."},"example":[]},{"name":"getStartDate","description":"Returns the start date for the time period for which you want to retrieve on-call\n    coverage.","params":[],"returns":{"type":"String","description":"Start date for the time period for which you want to retrieve on-call\n                coverage."},"example":[]},{"name":"getTimezone","description":"Returns the timezone that your on-call calendar will use.","params":[],"returns":{"type":"String","description":"Timezone that your on-call calendar will use. For example,\n                  <span class=\"ph uicontrol\">Europe/Madrid</span> and\n                <span class=\"ph uicontrol\">US/Pacific</span>."},"example":[]},{"name":"getUserIDs","description":"This will filter the schedules return by users. Get comma separated list of user sys_id\n    (sys_user) values used to filter on-call schedules.","params":[],"returns":{"type":"String","description":"Comma separated list of user sys_id (sys_user) values used to filter on-call\n                schedules."},"example":[]},{"name":"setEndDate","description":"Set the end date for the time period for which you want to retrieve on-call coverage.\n    If the end date is not set, then the last day of the next month is applied by default. Use in\n    conjunction with OCRotationV2 - getSpans.","params":[{"name":"endDate","type":"String","description":"[Optional] End date of the on-call schedule."},{"name":"inclusive","type":"Boolean","description":"[Optional] When true, the end date is included in the time span. If not\n                specified, this value defaults to true."}],"returns":{"type":"Void","description":" "},"example":[]},{"name":"setGroupIds","description":"Filters the schedules return by groups. Set comma separated list of group sys_id\n    (sys_user_group) values for an on-call schedule. Use in conjunction with OCRotationV2 -\n    getSpans.","params":[{"name":"groupIds","type":"String","description":"Comma separated list of group sys_id (sys_user_group) values for an on-call\n                schedule."}],"returns":{"type":"Void","description":" "},"example":[]},{"name":"setRosterIds","description":"Sets the rosters according to the selected rotas. Use in conjunction with OCRotationV2\n    - getSpans.","params":[{"name":"RosterIds","type":"String","description":"Rosters according to the selected rotas."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setRotaIds","description":"Sets the rotas for the groups on your calendar. Use in conjunction with OCRotationV2 -\n    getSpans.","params":[{"name":"RotaIds","type":"String","description":"Rotas for the groups on your calendar."}],"returns":{"type":"Void","description":" "},"example":[]},{"name":"setStartDate","description":"Sets the start date for the time period for which you want to retrieve on-call\n    coverage. If the start date is not set, then the first day of the previous month is applied by\n    default. Use in conjunction with OCRotationV2 - getSpans.","params":[{"name":"startDate","type":"String","description":"[Optional] Start date for the time period for which you want to retrieve\n                on-call coverage."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTimezone","description":"Sets the timezone that your on-call calendar will use. Use in conjunction with\n    OCRotationV2 - getSpans.","params":[{"name":"Timezone","type":"String","description":"Timezone that your on-call calendar will use. For example,\n                  <span class=\"ph uicontrol\">Europe/Madrid</span> and\n                <span class=\"ph uicontrol\">US/Pacific</span>."}],"returns":{"type":"Void","description":" "},"example":[]},{"name":"setUserIds","description":"Sets comma separated list of user sys_id (sys_user) values used to filter on-call\n    schedules. Use in conjunction with OCRotationV2 - getSpans.","params":[{"name":"UserIds","type":"String","description":"Comma separated list of user sys_id (sys_user) values used to filter on-call\n                schedules."}],"returns":{"type":"Void","description":" "},"example":[]}]},"OCRotationV2":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">OCRotationV2</span> is an extension of <span class=\"keyword apiname\">OCRotation</span>, which\n  is used by Fullcalendar.io and the DHTMLX On-Call Calendar. <span class=\"keyword apiname\">OCRotationV2</span> is used to get the schedule time span between two dates that\n   are further filtered by groups, rotas, rosters, and users. You can also extend\n    <span class=\"keyword apiname\">OCRotationV2</span> to add or modify behavior. This is part of On-Call\n   Scheduling.","example":""},"properties":{},"methods":[{"name":"getGroups","description":"Returns an array of groups that have active rotas.","params":[],"returns":{"type":"Array","description":"An array of group objects. Each contains the following attributes: <ul class=\"ul\" id=\"r_OCRotationV2-getGroups__ul_brf_31x_55\">\n                  <li class=\"li\">sys_id of the sys_user_group record</li>\n\n                  <li class=\"li\">name of the sys_user_group record</li>\n\n                </ul>"},"example":[]},{"name":"getRostersByRotas","description":"Returns an array of active rosters for a given rota ID.","params":[{"name":"rotaSysIds","type":"String","description":"Comma separated list of rota sys_id (cmn_rota) values."}],"returns":{"type":"Array","description":"An array of rota objects. Each contains the following attributes:<ul class=\"ul\" id=\"r_OCRotationV2-getRostersByRotas_String__ul_svs_y1x_55\">\n                  <li class=\"li\">sys_id of the cmn_rota_roster record</li>\n\n                  <li class=\"li\">name of the cmn_rota_roster record</li>\n\n                  <li class=\"li\">rota sys_id of the cmn_rota record</li>\n\n                </ul>"},"example":[]},{"name":"getRotasByGroup","description":"Returns an array of active rotas for a given group ID.","params":[{"name":"groupSysIds","type":"String","description":"Comma separated list of group sys_id (sys_user_group) values."}],"returns":{"type":"Array","description":"An array of rota objects. Each contains the following attributes:<ul class=\"ul\" id=\"r_OCRotationV2-getRotasByGroup_String__ul_plv_p1x_55\">\n                  <li class=\"li\">sys_id of the cmn_rota record</li>\n\n                  <li class=\"li\">name of the cmn_rota record</li>\n\n                  <li class=\"li\">group sys_id of the sys_user_group record</li>\n\n                </ul>"},"example":[]},{"name":"getSpans","description":"Get the spans from the specified start date to the specified end date. If no start and\n    end dates are provided, the start date defaults to a month before and the end date defaults to a\n    month after the current time. You can also use the groups IDs, rota IDs, roster IDs, user IDs to\n    further filter the spans.","params":[],"returns":{"type":"Array","description":"An array of spans. Each contains the following attributes: id, sys_id, table,\n                rota_id, roster_id, user_id, text, description, color, textColor, start_date,\n                end_date."},"example":[]}]},"OCSeriesEventGenerator":{"meta":{"has_constructor":false,"description":"The OCSeriesEventGenerator API generates the repeating VEVENTS for a user's\n    iCalendar. ","example":""},"properties":{},"methods":[{"name":"getMemberCalendar ","description":"Returns an array of the repeating on-call events.","params":[{"name":"groupId","type":"String","description":"The group sys id."},{"name":"rotaId","type":"String","description":"The rota sys id."},{"name":"userId","type":"String","description":"The user sys id."},{"name":"dateRangeObj","type":"Object","description":"Contains the from and to dates for the data set."},{"name":"memberSchedules","type":"Object","description":"The user's schedule."},{"name":"calendarLink","type":"String","description":"A link back to the on-call calendar in the instance."}],"returns":{"type":"Array","description":"Array of the repeating on-call events."},"example":[]},{"name":"getRosterICalEvents ","description":"Returns an array of VEVENTs that represent the on-call for the provided\n    rotaScheduleSpanGR and the memberScheduleSpanGR.","params":[{"name":"rotaScheduleSpanGR","type":"GlideRecord","description":"A cmn_schedule_span glide record for a rota."},{"name":"memberScheduleSpanGR","type":"GlideRecord","description":"A cmn_schedule_span glide record for a rota member."},{"name":"seriesStartTimes","type":"Array","description":"An array of the repeating rota span start times."},{"name":"excludeItems","type":"Object","description":"The schedule items that need to be excluded."},{"name":"repeatUntil","type":"String","description":"A formatted ScheduleDateTime string."},{"name":"timeZone","type":"String","description":"Time zone for the on-call rota."},{"name":"calendarLink","type":"String","description":"A link to the on-call calendar for this user."}],"returns":{"type":"Array","description":"An array of VEVENTs that represent the on-call for the provided\n                rotaScheduleSpanGR and the memberScheduleSpanGR."},"example":[]},{"name":"getRosterMemberEvents ","description":"Returns an array of the repeating on-call VEVENTS.","params":[{"name":"rotaMemberGR","type":"GlideRecord","description":"A cmn_rota_member record."},{"name":"seriesStartTimes","type":"Array","description":"An array of the repeating rota span start times."},{"name":"excludeItems","type":"Object","description":"The schedule items that need to be excluded."},{"name":"repeatUntil","type":"String","description":"A formatted ScheduleDateTime string."},{"name":"calendarLink","type":"String","description":"A link to the on-call calendar for this user."}],"returns":{"type":"Array","description":"An array of the repeating on-call VEVENTS"},"example":[]}]},"OCTimer":{"meta":{"has_constructor":false,"description":"The OCTimer API provides the ability to track the length of time it takes for a\n    function to complete. ","example":""},"properties":{},"methods":[{"name":"log ","description":"Logs the entry based on the function name.","params":[{"name":"name","type":"String","description":"Function name."},{"name":"entry","type":"String","description":"Text that will be part of the output in the log."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"millisToTime ","description":"Takes a millisecond value and returns a formatted duration.","params":[{"name":"millis","type":"Integer","description":"Duration in miliseconds."}],"returns":{"type":"String","description":"A formatted duration."},"example":[]},{"name":"result ","description":"Calculates the time taken for each function registered.","params":[],"returns":{"type":"String","description":"Time taken for each function registered."},"example":[]},{"name":"start ","description":"Initializes a timer based on the name provided.","params":[{"name":"name","type":"String","description":"Function name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"stop ","description":"Registers the end of the timer for the provided name.","params":[{"name":"name","type":"String","description":"Function name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"OnCallRotation":{"meta":{"has_constructor":true,"description":"Use to manage on-call schedules. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the OnCallRotation class.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var oncall = new OnCallRotation();","description":"","output":""}]},{"name":"addCurrentToNotified","description":"Add the current escalation member to the list of notified users so that the API knows\n    who has been contacted. This API is applicable for a single shift, overlapping shifts, and\n    custom escalation.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"cancelEscalations","description":"Cancels any escalations for the GlideRecord that were started with the\n      <span class=\"keyword apiname\">startEscalations</span> API. This API is applicable for a single shift,\n    overlapping shifts, and custom escalation.","params":[{"name":"escalationGr","type":"GlideRecord","description":"GlideRecord of Rotation escalation(cmn_rota_escalation"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"continueEscalations","description":"Continue the escalations for a document(incident gr) and group. This API is applicable\n    for a single shift, overlapping shifts, and custom escalation.","params":[{"name":"escalationGr","type":"GlideRecord","description":"GlideRecord of Rotation escalation(cmn_rota_escalation"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getCatchAll","description":"Gets the sys_id of the catch all person. Use together with the\n      <span class=\"keyword apiname\">getCatchAllType()</span> method to determine the source of the returned id. This\n    API is applicable for a single shift, overlapping shifts, and custom escalation.","params":[{"name":"rotaID","type":"String","description":"The sys_id of the rota."}],"returns":{"type":"String","description":"The sys_id of a sys_user, a cmn_rota_roster, or null."},"example":[{"code":"\nvar rotaSysId = '349f399173062300e7af6238edf6a75e';\nvar onCallRotation = new OnCallRotation();\nvar catchAll = onCallRotation.getCatchAll(rotaSysId);\ngs.log(catchAll);\n","description":":","output":"46d44a23a9fe19810012d100cca80666"}]},{"name":"getCatchAllType","description":"Gets the type of _catch all_ that lives at the end of the escalation chain. When the\n    escalation chain finishes without assigning an on-call person, if configured, the incident is\n    assigned to the _catch all_. This API is applicable for a single shift, overlapping shifts, and\n    custom escalation.","params":[{"name":"rotaID","type":"String","description":"The sys_id of the rota."}],"returns":{"type":"String","description":"<ul class=\"ul\" id=\"r_OCR-getCatchAllType_S__ul_yw2_51g_2w\">\n                  <li class=\"li\">Null: invalid rota id or catch all is not available. </li>\n\n                  <li class=\"li\">Group_manager: the manager of the group linked to the rota is the catch all\n                    person. </li>\n\n                  <li class=\"li\">Individual: a configured user is the catch all person. </li>\n\n                  <li class=\"li\">All: all members of the configured roster are the catch all person.</li>\n\n                </ul>"},"example":[{"code":"var rotaSysId = '349f399173062300e7af6238edf6a75e';\nvar onCallRotation = new OnCallRotation();\nvar catchAllType = onCallRotation.getCatchAllType(rotaSysId);\ngs.log(catchAllType);\n","description":":","output":"group_manager"}]},{"name":"getEscalateeAt","description":"Gets an item to escalate to, either a user [sys_user], group, or notification device\n    [cmn_notif_device], for a group's shift at the specified date and time and at a certain position\n    in the escalation lineup. This API is applicable for a single shift.<p>The method returns null if an invalid position or group is passed as an argument.</p><p>You can use the <span class=\"keyword apiname\">getTableName()</span> method to check whether the returning\n        GlideRecord comes from the sys_user or cmn_notif_device table.</p>","params":[{"name":"groupID","type":"String","description":"The sys_id for the group from which to get the item to escalate."},{"name":"dateTime","type":"GlideDateTime","description":"The date and time when the escalation lineup should begin."},{"name":"position","type":"Number","description":"The position in the lineup to determine the item to escalate to (1-based, which\n                means the count starts with 1)."}],"returns":{"type":"GlideRecord","description":"The item to escalate to,that is, escalatees (either a user, group, or device\n                records depending on the notification rules) at a specific time and position.\n                Returns null if nothing is found."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar escalatee = onCallRotation.getEscalateeAt(groupSysId, currentTime, 1);\ngs.log(escalatee.name);\n","description":":","output":"Abel Tutor"}]},{"name":"getEscalatees","description":"Gets a list of escalatees that are on-call for a given time. If no time is specified,\n    then the current time is used. If no groupSysIds are provided, empty list is returned. This API\n    is applicable for a single shift, overlapping shifts, and custom escalation.","params":[{"name":"groupSysIds","type":"String","description":"Comma-separated list of sys_ids of the sys_user_group, to filter the records\n                by."},{"name":"rotaSysIds","type":"String","description":"Comma-separated list of cmn_rota sys_ids to filter the records by."},{"name":"rosterSysIds","type":"String","description":"Comma-separated list of cmn_rota_roster sys_ids  to filter the records\n                by."},{"name":"gdt","type":"GlideDateTime","description":"Date in the UTC timezone"}],"returns":{"type":"Object","description":"Escalatee information such as userIds, deviceIds, and escalationGroups."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.getEscalatees(groupSysId, \"\", \"\", currentTime);\ngs.log(JSON.stringify(result));\n","description":":","output":"[\n  {\n    &quot;memberId&quot;: &quot;&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;&quot;,\n    &quot;userIds&quot;: [\n      &quot;62826bf03710200044e0bfc8bcbe5df1&quot;,\n      &quot;46d44a23a9fe19810012d100cca80666&quot;\n    ],\n    &quot;roster&quot;: &quot;&quot;,\n    &quot;rota&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [\n      &quot;a715cd759f2002002920bde8132e7018&quot;\n    ],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 1,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;&quot;\n  },\n  {\n    &quot;memberId&quot;: &quot;&quot;,\n    &quot;memberIds&quot;: [\n      &quot;119f399173062300e7af6238edf6a7e7&quot;\n    ],\n    &quot;userId&quot;: &quot;&quot;,\n    &quot;userIds&quot;: [\n      &quot;62826bf03710200044e0bfc8bcbe5df1&quot;\n    ],\n    &quot;roster&quot;: &quot;9d9f399173062300e7af6238edf6a7e5&quot;,\n    &quot;rota&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 2,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;&quot;\n  }\n]"}]},{"name":"getEscalateesAt","description":"Gets the escalatees (either a user, group, or device records depending on the\n    notification rules) at a specific time and position. This API is applicable for a single shift,\n    overlapping shifts and custom escalation.","params":[{"name":"groupSysId","type":"String","description":"ys_id of the group."},{"name":"gdt","type":"GlideDateTime","description":"yyyy-MM-dd HH:mm:ss format in the UTC timezone. Default is now."},{"name":"position","type":"Number","description":"Position of the escalation step."}],"returns":{"type":"GlideRecord","description":"Array of escalatees (either a user, group, or device records depending on the\n                notification rules) at a specific time and position."},"example":[{"code":"var groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar escalatees = onCallRotation.getEscalateesAt(groupSysId, currentTime, 1);\nfor (var i = 0; i &lt; escalatees.length; i++) {\ngs.log(escalatees[i].name);\n}\n","description":":","output":"Abel Tuter\nBeth Anglin\nChange Management\nBarbara Hindley"}]},{"name":"getEscalationPlan","description":"Gets a list of objects to escalate to, escalation plans that consist of either a user\n    [sys_user] or notification device [cmn_notif_device], for a group's shift at the specified date\n    and time. This API is applicable for a single shift, overlapping shifts, and custom\n    escalation.<p>The Escalation object contains the following fields: <ul class=\"ul\" id=\"r_OCR-getEscalationPlan_S_GDT__ul_isy_tyf_2w\">\n          <li class=\"li\">Number order: the escalation order within the lineup </li>\n\n          <li class=\"li\">String userId: sys_id of the sys_user record or null </li>\n\n          <li class=\"li\">String deviceId: sys_id of the cmn_notif_device record or null </li>\n\n          <li class=\"li\">Boolean isDevice: true or false depending on whether the item to escalate to is a\n            device or user </li>\n\n          <li class=\"li\">GlideDuration timeBetweenReminders: the time between reminders being sent </li>\n\n          <li class=\"li\">Number reminderNum: number of reminders to be sent for each item to escalate to</li>\n\n        </ul></p>","params":[{"name":"groupID","type":"String","description":"sys_id for the group for which you need the escalation plan."},{"name":"gdt","type":"GlideDateTime","description":"Date and time when the escalation lineup should begin. Default is now.\n                yyyy-MM-dd HH:mm:ss is the format in UTC timezone."},{"name":"rotaSysIds","type":"String","description":"Comma-separated list of cmn_rota sys_ids to filter the records by."}],"returns":{"type":"Object","description":"A list of escalation objects to escalate to."},"example":[{"code":"var groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.getEscalationPlan(groupSysId, currentTime);\ngs.log(JSON.stringify(result));\n","description":":","output":"[\n  {\n    &quot;order&quot;: 1,\n    &quot;userId&quot;: &quot;&quot;,\n    &quot;userIds&quot;: [\n      &quot;62826bf03710200044e0bfc8bcbe5df1&quot;,\n      &quot;46d44a23a9fe19810012d100cca80666&quot;\n    ],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;escalationGroups&quot;: [\n      &quot;a715cd759f2002002920bde8132e7018&quot;\n    ],\n    &quot;isDevice&quot;: false,\n    &quot;timeBetweenReminders&quot;: {},\n    &quot;timeToNextStep&quot;: {},\n    &quot;cmnRotaEscStepDefId&quot;: &quot;655042d173062300e7af6238edf6a738&quot;,\n    &quot;reminderNum&quot;: 1,\n    &quot;rosterId&quot;: &quot;&quot;,\n    &quot;memberId&quot;: &quot;&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;isOverride&quot;: false,\n    &quot;additionalEscalatees&quot;: [],\n    &quot;forcedCommunicationChannel&quot;: &quot;&quot;,\n    &quot;rotaId&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;groupId&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;rotaScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;&quot;\n  },\n  {\n    &quot;order&quot;: 2,\n    &quot;userId&quot;: &quot;&quot;,\n    &quot;userIds&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;escalationGroups&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;timeBetweenReminders&quot;: {},\n    &quot;timeToNextStep&quot;: {},\n    &quot;cmnRotaEscStepDefId&quot;: &quot;8b6042d173062300e7af6238edf6a7f3&quot;,\n    &quot;reminderNum&quot;: 1,\n    &quot;rosterId&quot;: &quot;&quot;,\n    &quot;memberId&quot;: &quot;&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;isOverride&quot;: false,\n    &quot;additionalEscalatees&quot;: [],\n    &quot;forcedCommunicationChannel&quot;: &quot;&quot;,\n    &quot;rotaId&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;groupId&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;rotaScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;&quot;\n  }\n]"}]},{"name":"getEscalationType","description":"Gets the type of escalation based on a simple calculation. If there is one active\n    roster in the rota, rotate through members. If there is more than one active roster in the rota,\n    rotate through rosters. This API is applicable for a single shift, overlapping shifts, and\n    custom escalation.","params":[{"name":"rotaID","type":"String","description":"The sys_id for the rota to check for rosters."}],"returns":{"type":"String","description":"<ul class=\"ul\" id=\"r_OCR-getEscalationType_S__ul_kxq_xzf_2w\">\n                  <li class=\"li\">Member: if there is one roster in the rota. </li>\n\n                  <li class=\"li\">Roster: if there is more than one roster in the rota. </li>\n\n                  <li class=\"li\">No rosters in this rota: if none of the above.</li>\n\n                  <li class=\"li\">Custom: If the custom escalation is applicable.</li>\n\n                </ul>"},"example":[{"code":"var rotaSysId = '349f399173062300e7af6238edf6a75e';\nvar onCallRotation = new OnCallRotation();\nvar escalationType = onCallRotation.getEscalationType(rotaSysId);\ngs.log(escalationType);\n","description":":","output":"custom"}]},{"name":"getPrimaryUser","description":"Gets the sys_id of the current primary contact when there is a single\n    shift.","params":[],"returns":{"type":"String","description":"sys_id of the current primary contact."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.who(groupSysId, currentTime);\nvar primaryUser = onCallRotation.getPrimaryUser();\n","description":":","output":"62826bf03710200044e0bfc8bcbe5df1"}]},{"name":"getPrimaryUserByRota","description":"Gets the sys_id of the current primary user of the specified shift. This API is\n    applicable for a single shift and overlapping shifts.","params":[{"name":"rotaId","type":"String","description":"sys_id of the cmn_rota."}],"returns":{"type":"String","description":"sys_id of the current primary user of the specified shift."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar rotaId = '349f399173062300e7af6238edf6a75e';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.who(groupSysId, currentTime);\nvar primaryUser = onCallRotation.getPrimaryUserByRota(rotaId);\ngs.log(primaryUser);\n","description":":","output":"62826bf03710200044e0bfc8bcbe5df1"}]},{"name":"getPrimaryUserName","description":"Gets the name of the current primary contact. This API is applicable for a single\n    shift.","params":[],"returns":{"type":"String","description":"Name of the current primary contact."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.who(groupSysId, currentTime);\nvar primaryUser = onCallRotation.getPrimaryUserName();\ngs.log(primaryUser);\n","description":":","output":"Abel Tutor"}]},{"name":"getPrimaryUserNameByRota","description":"Gets the name of the current primary user of the specified shift. This API is\n    applicable for a single shift and overlapping shifts.","params":[{"name":"rotaId","type":"String","description":"sys_id of the cmn_rota."}],"returns":{"type":"String","description":"Name of the current primary user of the specified shift."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar rotaId = '349f399173062300e7af6238edf6a75e';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.who(groupSysId, currentTime);\nvar primaryUser = onCallRotation.getPrimaryUserNameByRota(rotaId);\ngs.log(primaryUser);\n","description":":","output":"Abel Tutor"}]},{"name":"getPrimaryUsers","description":"Gets the list of primary contacts for a shift. This API is applicable for a single\n    shift, overlapping shifts, and custom escalation.","params":[],"returns":{"type":"Object","description":"List of primary contacts."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.who(groupSysId, currentTime);\nvar primaryUser = onCallRotation.getPrimaryUser();\ngs.log(JSON.stringify(primaryUser));\n","description":":","output":"{\n  &quot;349f399173062300e7af6238edf6a75e&quot;: {\n    &quot;userSysId&quot;: &quot;62826bf03710200044e0bfc8bcbe5df1&quot;,\n    &quot;userName&quot;: &quot;Abel Tuter&quot;\n  },\n  &quot;35af799173062300e7af6238edf6a79e&quot;: {\n    &quot;userSysId&quot;: &quot;d2826bf03710200044e0bfc8bcbe5dc9&quot;,\n    &quot;userName&quot;: &quot;Barbara Hindley&quot;\n  }\n}"}]},{"name":"spansOverlap","description":"Checks if the parent span and child spans overlap.","params":[{"name":"parent","type":"ArrayList","description":"The parent spans to compare."},{"name":"child","type":"ArrayList","description":"The child spans to compare."},{"name":"timeZone","type":"String","description":"The name of the time zone."}],"returns":{"type":"Boolean","description":"Returns true if the parent and child spans overlap."},"example":[{"code":"var onCall = new OnCallRotation();\n \n// get a time range we are interested in\nvar timeZone = gs.getSession().getTimeZoneName();\nvar dateStart = new GlideDateTime();\nvar dateEnd = new GlideDateTime().addMonths(1);\n \n// convert glidedatime to scheduledatetime because it is required\n// by the function being called below\nvar scheduleStart = new GlideScheduleDateTime(dateStart);\nvar scheduleEnd =  new GlideScheduleDateTime(dateEnd);\nscheduleStart.setTimeZone(timeZone);\nscheduleEnd.setTimeZone(timeZone);\n \n// calculate rotation items based on the date and time given\n// for all the groups the currently logged in user is a member of\ngs.include(\"OnCallRotationPersonal\");\nvar rotation = new OnCallRotationPersonal();\nvar myGroups = gs.getUser().getMyGroups();\nvar groupIter = myGroups.iterator();\n \nwhile(groupIter.hasNext()){\n\tvar rotaItems = rotation.onCallDuringPeriod(groupIter.next(), scheduleStart, scheduleEnd);\n \n\t// loop through rotation schedules\n\tfor (var i = 0; i &lt; rotaItems.length - 1; i++) {\n\t\tvar parentItem = rotaItems[i];\n\t\tvar nextItem = rotaItems[i + 1];\n \n\t\t// check if previous and next time spans overlap\n\t\tvar overlaps = onCall.spansOverlap(parentItem.getTimeSpans(), nextItem.getTimeSpans(), \n\t\t\tgs.getSession().getTimeZoneName());\n\t}\n}","description":"","output":""}]},{"name":"startEscalations","description":"Start the escalations for a document(incident gr) and group, and specify the event name\n    for the escalation notifications. In addition, specify the name of the business rule to call\n    when an escalation occurs. This method should be used after a succesful call to\n      <span class=\"keyword apiname\">who</span> or <span class=\"keyword apiname\">whoAt</span> methods. This API is applicable for a\n    single shift, overlapping shifts, and custom escalation.","params":[{"name":"gr","type":"GlideRecord","description":"Document glide record. For example, Incident gr."},{"name":"eventName","type":"String","description":"Event name for the escalation notifications."},{"name":"escalationScriptName","type":"String","description":"Business rule to call when escalation occurs"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"whoAt","description":"Specifies if there is an on-call user, group, or device. This API is applicable for a\n    single shift, overlapping shifts, and custom escalation.","params":[{"name":"groupSysId","type":"String","description":"sys_id of the group to check for."},{"name":"gdt","type":"GlideDateTime","description":"yyyy-MM-dd HH:mm:ss format in the UTC timezone. Default is now."},{"name":"nullifyOverrideRoster","type":"Boolean","description":"Used to control whether rosterId should be returned in output for coverage\n                entries. (In the legacy behaviour, null  was returned.)"},{"name":"rotaSysIds","type":"String","description":"comma-seperated list of cmn_rota sys_ids to filter the records by."}],"returns":{"type":"Boolean","description":"Returns true if at least one match s found, else returns false."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.who(groupSysId, currentTime);\ngs.log(result);\n","description":":","output":"true"}]},{"name":"whoAt","description":"Specifies if there is an on-call user, group, or device. This API is applicable for a\n    single shift, overlapping shifts, and custom escalation.","params":[{"name":"groupSysId","type":"String","description":"sys_id of the group."},{"name":"gdt","type":"GlideDateTime","description":"yyyy-MM-dd HH:mm:ss format in the UTC timezone. Default is now."},{"name":"rotaSysIds","type":"String","description":"comma-seperated list of cmn_rota sys_ids to filter the records by."}],"returns":{"type":"Boolean","description":"Returns true if there is at least one on-call user, group, or device. Else\n                returns false."},"example":[{"code":"\nvar groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar result = onCallRotation.whoAt(groupSysId, currentTime);\ngs.log(result);\n","description":":","output":"true"}]},{"name":"whoIsNext","description":"Escalation business rules determine who in the shift should be contacted next. The\n    escalation record passed to the method tracks the escalation between invocations of the business\n    rule. This API is applicable for a single shift, overlapping shifts, and custom\n    escalation.","params":[{"name":"escalationGr","type":"GlideRecord","description":"GlideRecord of Rotation escalation(cmn_rota_escalation)"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"whoIsOnCall","description":"Gets the list of users that are on-call at a given time. If no time is specified, then\n    current time is used. This API is applicable for a single shift and overlapping\n    shifts.","params":[{"name":"groupSysIds","type":"String","description":"Comma-separated list of sys_ids of the sys_user_group, to filter the records\n                by."},{"name":"rotaSysIds","type":"String","description":"Comma-separated list of cmn_rota sys_ids to filter the records by."},{"name":"rosterSysIds","type":"String","description":"Comma-separated list of cmn_rota_roster sys_ids  to filter the records\n                by."},{"name":"gdt","type":"GlideDateTime","description":"Date in the UTC timezone"}],"returns":{"type":"Object","description":"List of users, groups, or devices that are on-call at a given time. For\n                example, information about userIds, deviceIds, and escalationGroups."},"example":[{"code":"var groupSysId = '096fb59173062300e7af6238edf6a783';\nvar currentTime = new GlideDateTime();\nvar onCallRotation = new OnCallRotation();\nvar escalatees = onCallRotation. whoIsOnCall(groupSysId, \"\", \"\", currentTime);\ngs.log(JSON.stringify(escalatees));\n","description":":","output":"[\n  {\n    &quot;memberId&quot;: &quot;119f399173062300e7af6238edf6a7e7&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;62826bf03710200044e0bfc8bcbe5df1&quot;,\n    &quot;userIds&quot;: [],\n    &quot;roster&quot;: &quot;9d9f399173062300e7af6238edf6a7e5&quot;,\n    &quot;rota&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 1,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;9d9f399173062300e7af6238edf6a7ec&quot;\n  },\n  {\n    &quot;memberId&quot;: &quot;7daf799173062300e7af6238edf6a7a2&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;d2826bf03710200044e0bfc8bcbe5dc9&quot;,\n    &quot;userIds&quot;: [],\n    &quot;roster&quot;: &quot;b5af799173062300e7af6238edf6a7a2&quot;,\n    &quot;rota&quot;: &quot;35af799173062300e7af6238edf6a79e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 1,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;3daf799173062300e7af6238edf6a79e&quot;,\n    &quot;memberScheduleId&quot;: &quot;06af799173062300e7af6238edf6a7cd&quot;\n  },\n  {\n    &quot;memberId&quot;: &quot;1d9f399173062300e7af6238edf6a7e8&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;a8f98bb0eb32010045e1a5115206fe3a&quot;,\n    &quot;userIds&quot;: [],\n    &quot;roster&quot;: &quot;9d9f399173062300e7af6238edf6a7e5&quot;,\n    &quot;rota&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 2,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;d99f399173062300e7af6238edf6a7ef&quot;\n  },\n  {\n    &quot;memberId&quot;: &quot;f5af799173062300e7af6238edf6a7c9&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;ee826bf03710200044e0bfc8bcbe5def&quot;,\n    &quot;userIds&quot;: [],\n    &quot;roster&quot;: &quot;b5af799173062300e7af6238edf6a7a2&quot;,\n    &quot;rota&quot;: &quot;35af799173062300e7af6238edf6a79e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 2,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;3daf799173062300e7af6238edf6a79e&quot;,\n    &quot;memberScheduleId&quot;: &quot;8aaf799173062300e7af6238edf6a7cf&quot;\n  },\n  {\n    &quot;memberId&quot;: &quot;dd9f399173062300e7af6238edf6a7e9&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;0a826bf03710200044e0bfc8bcbe5d7a&quot;,\n    &quot;userIds&quot;: [],\n    &quot;roster&quot;: &quot;9d9f399173062300e7af6238edf6a7e5&quot;,\n    &quot;rota&quot;: &quot;349f399173062300e7af6238edf6a75e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 3,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;119f399173062300e7af6238edf6a7df&quot;,\n    &quot;memberScheduleId&quot;: &quot;519f399173062300e7af6238edf6a7f2&quot;\n  },\n  {\n    &quot;memberId&quot;: &quot;8aaf799173062300e7af6238edf6a7ca&quot;,\n    &quot;memberIds&quot;: [],\n    &quot;userId&quot;: &quot;e2826bf03710200044e0bfc8bcbe5de0&quot;,\n    &quot;userIds&quot;: [],\n    &quot;roster&quot;: &quot;b5af799173062300e7af6238edf6a7a2&quot;,\n    &quot;rota&quot;: &quot;35af799173062300e7af6238edf6a79e&quot;,\n    &quot;group&quot;: &quot;096fb59173062300e7af6238edf6a783&quot;,\n    &quot;escalationGroups&quot;: [],\n    &quot;deviceId&quot;: &quot;&quot;,\n    &quot;deviceIds&quot;: [],\n    &quot;isDevice&quot;: false,\n    &quot;order&quot;: 3,\n    &quot;isOverride&quot;: false,\n    &quot;rotationScheduleId&quot;: &quot;3daf799173062300e7af6238edf6a79e&quot;,\n    &quot;memberScheduleId&quot;: &quot;02af799173062300e7af6238edf6a7d2&quot;\n  }\n]"}]}]},"PADomainUtils":{"meta":{"has_constructor":true,"description":"The PADomainUtils API enables you to copy <span class=\"ph\">Performance Analytics</span> configurations\n    between different domains on the same instance. Use this API in server scripts to copy <span class=\"ph\">Performance Analytics</span> configuration\n      records, such as indicators, breakdowns, and dashboards, to different domains. This API\n      enables you to create a Performance Analytics configuration in one domain and copy that\n      configuration to any number of additional domains.<div class=\"note note\"><span class=\"notetitle\">Note:</span> This API cannot copy records into the\n        Global domain.</div><br/><br/>To use PADomainUtils, you must satisfy these requirements:<ul class=\"ul\" id=\"c_PADomainUtils__ul_fyh_sjs_ht\">\n    <li class=\"li\"><span class=\"ph\">Performance Analytics</span> must\n          be enabled.</li>\n\n    <li class=\"li\">The user running the script must have the admin role.</li>\n\n    <li class=\"li\">The instance must use domain separation.</li>\n\n    <li class=\"li\">The script must be run from the global domain.</li>\n\n    <li class=\"li\">When moving or copying records, the source and target domains must be different.</li>\n\n   </ul>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new PADomainUtils object to move or copy <span class=\"ph\">Performance Analytics</span> configuration\n    records from the specified domain.<p>Use the <span class=\"keyword apiname\">PADomainUtils()</span> constructor instead when moving or copying from\n        the global domain.</p>","params":[{"name":"domainFrom","type":"String","description":"The domain to copy records from."}],"returns":{"type":"","description":""},"example":[{"code":"// c90d4b084a362312013398f051272c0d is the sys id of the ACME domain\nvar acmeUtils = new SNC.PADomainUtils('c90d4b084a362312013398f051272c0d');","description":"","output":""}]},{"name":"constructor","description":"Instantiates a new PADomainUtils object to move or copy <span class=\"ph\">Performance Analytics</span> configuration\n    records from the global domain.<p>Use the <span class=\"keyword apiname\">PADomainUtils(String domainFrom)</span> constructor instead when moving\n        or copying records from a domain other than the global domain.</p>","params":[],"returns":{"type":"","description":""},"example":[{"code":"// PADomainUtils initialized with the global domain\nvar globalUtils = new SNC.PADomainUtils();","description":"","output":""}]},{"name":"copy","description":"Copies <span class=\"ph\">Performance Analytics</span>\n    configuration records to a different domain.<p>To copy dashboards or scheduled jobs, see <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#PADU-copyDashboard_S_S\" title=\"Copy a dashboard to another domain.\">copyDashboard</a> and <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_PADU-copyJob_String_String\" title=\"Copies a Performance Analytics scheduled data collection job record to another domain.\">copyJob</a>.</p>","params":[{"name":"runAs","type":"String","description":"The user whose domain you want to copy records to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// copy all the Performance Analytics records from global to user's domain\nvar pa = new SNC.PADomainUtils();\npa.copy('09ff3d105f231000b12e3572f2b4775d');","description":"","output":""}]},{"name":"copyDashboard","description":"Copy a dashboard to another domain.","params":[{"name":"dashboardId","type":"String","description":"The sys_id of the dashboard to copy."},{"name":"runAs","type":"String","description":"The user whose domain you want to copy the dashboard to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Copy Incident Management dashboard from global to user's domain\nvar pa = new SNC.PADomainUtils();\npa.copyDashboard('a64b7031d7201100b96d45a3ce610335','09ff3d105f231000b12e3572f2b4775d');","description":"Optional example explanation","output":""}]},{"name":"copyJob","description":"Copies a <span class=\"ph\">Performance Analytics</span> scheduled data collection job record to another domain.","params":[{"name":"paJob","type":"String","description":"The sys_id of a <span class=\"ph\">Performance Analytics</span>\n                scheduled data collection job [sysauto_pa] record."},{"name":"runAs","type":"String","description":"The user whose domain you want to copy the job to."}],"returns":{"type":"String","description":"An error message if an error occurs, or an empty string if there is no\n                error."},"example":[{"code":"// No source domain needs to be set\nvar pa = new SNC.PADomainUtils();\n// copy the OOTB '[PA Incident] Daily Data Collection job'\n// set the 'run as' of the new record to be the 'acme.itil' user\n// first argument is the sys_id of the sysauto_pa record\n// the second is the sys_id of the acme.itil user record\npa.copyJob('82ba2023d7101100b96d45a3ce6103cd','797d14341f1310005a3637b8ec8b7010');","description":"","output":""}]},{"name":"isWriteable","description":"Evaluate if you can write to a specific record identified by table and\n    sys_id.","params":[{"name":"table","type":"String","description":"The name of the table containing the record to query, such as\n                pa_indicators."},{"name":"id","type":"String","description":"The sys_id of the record to query."}],"returns":{"type":"Boolean","description":"Indicates that you can write to the specified record. Returns true if the\n                record  exists within the domain of the current user. Returns false if the record\n                does not exist, or is in a different domain."},"example":[{"code":"var pa = new SNC.PADomainUtils();\npa.isWriteable('pa_incidents','cd8125b5140012007665a83e633b028d');","description":"","output":""}]},{"name":"move","description":"Moves <span class=\"ph\">Performance Analytics</span>\n    configuration records to a different domain.","params":[{"name":"runAs","type":"String","description":"The user whose domain you want to copy records to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// move all the Performance Analytics records from the global to the customers domain\nvar pa = new SNC.PADomainUtils();\npa.move('774190f01f1310005a3637b8ec8b70ef')","description":"","output":""}]},{"name":"setFoundation","description":"Use this method to move or copy only foundation records in a hybrid domain\n    configuration.<p>You can implement a hybrid configuration by maintaining some types of record in a parent\n        domain and some types in child domains. Records maintained in the parent domain are known as\n        foundation records. The following types of record are considered foundation records.<ul class=\"ul\" id=\"r_PADU-setFoundation_boolean__ul_ygw_ycf_ht\">\n          <li class=\"li\">Bucket groups</li>\n\n          <li class=\"li\">Buckets</li>\n\n          <li class=\"li\">Scripts</li>\n\n          <li class=\"li\">Breakdown sources</li>\n\n          <li class=\"li\">Indicator sources</li>\n\n          <li class=\"li\">Filters</li>\n\n          <li class=\"li\">Breakdowns</li>\n\n          <li class=\"li\">Managed sources</li>\n\n          <li class=\"li\">Manual breakdowns</li>\n\n          <li class=\"li\">Breakdown mappings</li>\n\n          <li class=\"li\">Breakdown relations</li>\n\n        </ul>\nOther <span class=\"ph\">Performance Analytics</span>\n        configuration records such as widgets and indicators are not foundation records. Set this\n        method to false to move or copy these additional records as well.</p>","params":[{"name":"foundation","type":"Boolean","description":"Indicates if only foundation records should be copied or moved by this\n                PADomainUtils object."}],"returns":{"type":"PADomainUtils","description":"The object calling this function."},"example":[{"code":"var pa = new SNC.PADomainUtils().setFoundation(true);\npa.copy('bb6b58b01f1310005a3637b8ec8b70dd');","description":"","output":""}]},{"name":"setOverrides","description":"Use this method before copying records to set the sys_override value of the new record\n    to the original parent record.<p>Using this method enables you to automatically override records in a parent domain. By\n        overriding the parent records, the parent records do not impact the child domain. If the\n        source domain is not the parent of the target domain when copying records, setting the\n        sys_override value will not have any impact on behavior. You can specify an override only\n        when copying records, not when moving records.</p>","params":[{"name":"overrides","type":"Boolean","description":"Indicates that copied records in a child domain should override the source\n                record in the parent domain. This value is true by default."}],"returns":{"type":"PADomainUtils","description":"The object calling this function."},"example":[{"code":"var pa = new SNC.PADomainUtils('c90d4b084a362312013398f051272c0d');\npa.setOverrides(false);\npa.copy('bb6b58b01f1310005a3637b8ec8b70dd');","description":"","output":""}]}]},"ProbeHandlerCim":{"meta":{"has_constructor":false,"description":"Configures a CIM probe. Use in any server-side script where you need to configure a CIM probe.","example":""},"properties":{},"methods":[{"name":"getCimQueries","description":"Returns a string containing the CIM fields to fetch","params":[],"returns":{"type":"String","description":"The CIM fields to fetch"},"example":[]},{"name":"getNamespace","description":"Returns the CIM name space.","params":[],"returns":{"type":"String","description":"The name space"},"example":[]},{"name":"getParameters","description":"Returns a hash map of the parameters added by this probe handler.","params":[],"returns":{"type":"String","description":"A hash map of the parameters"},"example":[]},{"name":"run","description":"Runs the probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setProbeParameters","description":"Sets the probe parameters.","params":[{"name":"params","type":"Object","description":"The parameters to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"ProbeHandlerMulti":{"meta":{"has_constructor":false,"description":"Probe handler for MultiProbes. This script include does not work with probe parameters that have value_scripts and does not\n   work with JavaScript probes.<br/><br/>Use in any server-side script where you need to configure a MultiProbe.","example":""},"properties":{},"methods":[{"name":"addParameters","description":"Adds the probe parameters to the given XML parent element, taken from the given probe's\n    parameter table.","params":[{"name":"parent","type":"String","description":"The XML parent element to add parameters to."},{"name":"sysID","type":"String","description":"The sys_id of the probe to get parameters from."},{"name":"probe","type":"GlideRecord","description":"Optional GlideRecord of the probe. If present, and there is a probe handler, it\n                is called."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addProbes","description":"Adds the probes for this multiprobe to the document.","params":[{"name":"parent","type":"String","description":"The XML parent element to add the probes to."},{"name":"sysID","type":"String","description":"The sys_id of the multi-probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"run","description":"Runs the probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"runProbeHandler","description":"If the given probe's GlideRecord is present and contains a probe handler, runs the\n    probe handler and adds any parameters it creates to the given parameter element.","params":[{"name":"params","type":"String","description":"The XML parameter element to add parameters to."},{"name":"sysID","type":"String","description":"The sys_id of the probe to get parameters from."},{"name":"probe","type":"GlideRecord","description":"Optional GlideRecord of the probe. If present, and there is a probe handler, it\n                is called."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setParameter","description":"Sets the value of a given XML parameter element.","params":[{"name":"parent","type":"String","description":"The XML parent element to add the parameter to."},{"name":"name","type":"String","description":"The name of the parameter to set"},{"name":"value","type":"String","description":"The value to set the parameter to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"ProbeHandlerSNMP":{"meta":{"has_constructor":false,"description":"Discovery probe handler for SNMP probes, invoked when an SNMP probe is about to be\n  created. Use in any server-side script where you need to configure an SNMP probe.","example":""},"properties":{},"methods":[{"name":"addBoolean","description":"Adds a boolean value to the parameter map.","params":[{"name":"dbName","type":"String","description":"The database name"},{"name":"paramName","type":"String","description":"The parameter name"},{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addDebug","description":"Adds debugging to the probe handler.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addJavascriptHandlers","description":"Adds a JavaScript handler.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addOIDAutoResolve","description":"Adds OID automatic resolution.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addOIDSpec","description":"Adds OID specifications to the parameter map.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addSensorHandler","description":"Adds a sensor handler.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addStage","description":"Adds the stage to the parameter map.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addTimingSpecs","description":"Adds timing specifications to the parameter map.","params":[{"name":"paramMap","type":"String","description":"The parameter map"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getParameters","description":"Returns the parameters added by this probe handler.","params":[],"returns":{"type":"String","description":"A hash map of the parameters added by this probe handler."},"example":[]},{"name":"run","description":"Runs the probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setProbeParameters","description":"Sets the value of a given XML parameter element.","params":[{"name":"params","type":"String","description":"The probe's parameters"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"ProbeHandlerWMI":{"meta":{"has_constructor":false,"description":"Discovery probe handler for WMI probes. Use in any server-side script where you need to configure an WMI probe.","example":""},"properties":{},"methods":[{"name":"getParameters","description":"Returns the parameters added by this probe handler.","params":[],"returns":{"type":"String","description":"A hash map of the parameters added by this probe"},"example":[]},{"name":"getWMIFields","description":"Generates a string containing the WMI fields to fetch.","params":[],"returns":{"type":"String","description":"The WMI fields to fetch."},"example":[]},{"name":"run","description":"Runs the probe.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setProbeParameters","description":"Sets the probe parameters.","params":[{"name":"params","type":"Object","description":"The probe parameters"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"Queue":{"meta":{"has_constructor":false,"description":"Use the Queue API (Advanced Work Assignment) to route a document to a\n    queue. The Queue API is provided within the sn_awa namespace.<br/><br/>Requires the following: <ul class=\"ul\" id=\"c_Queue_global__ul_mxn_2kp_2gb\">\n        <li class=\"li\">Advanced Work Assignment plugin (com.glide.awa)</li>\n\n        <li class=\"li\">Role: awa_integration_user or admin</li>\n\n      </ul>","example":""},"properties":{},"methods":[{"name":"get","description":"Gets a queue record by sys_id.","params":[{"name":"queue_id","type":"String","description":"Represents sys_id of  queue record from  awa_queue table"}],"returns":{"type":"Boolean","description":"True if queue record exists, false otherwise."},"example":[{"code":"var queue = sn_awa.Queue.get(\"&lt;queue_id&gt;\");\nvar workItem = queue.route({ \n    document_sys_id: \"&lt;sys_id&gt;\",\n    document_table: \"&lt;table&gt;\"\n});","description":"","output":""}]},{"name":"route","description":"Routes an active work item to the queue object.<p>If an active work item does not exist for the specified document, this method creates a\n        work item and set its fields accordingly.</p>","params":[{"name":"options","type":"Object","description":"Contains document sys_id and table associated with work item:<ul class=\"ul\" id=\"r_QueueAWA_route__ul_xjk_4qv_dgb\">\n                  <li class=\"li\">\n                    <samp class=\"ph codeph\">document_sys_id: \"&lt;sys_id&gt;\"</samp></li>\n\n                  <li class=\"li\">\n                    <samp class=\"ph codeph\">document_table: \"&lt;table&gt;\"</samp>, e.g., interaction</li>\n\n                </ul>"}],"returns":{"type":"Boolean","description":"True if successful, error message otherwise."},"example":[{"code":"var queue = sn_awa.Queue.get(\"&lt;queue_id&gt;\");\nvar workItem = queue.route({ \n    document_sys_id: \"&lt;sys_id&gt;\",\n    document_table: \"&lt;table&gt;\"\n});","description":"","output":""}]}]},"QuickRanges":{"meta":{"has_constructor":false,"description":"Generates IP network, range, and address entries from a convenient comma-separated input\n  field using conventional CIDR network notation, hyphenated range entries, or individual IP\n  addresses. Use with any server-side discovery script.","example":""},"properties":{},"methods":[{"name":"createItem","description":"Creates a new discovery range item.","params":[{"name":"table","type":"String","description":"The table where the item will be created."},{"name":"id","type":"String","description":"The identifier to use for the new item."},{"name":"type","type":"String","description":"The type of entries to generate: IP address, IP network, or IP range."}],"returns":{"type":"GlideRecord","description":"The created entry"},"example":[]},{"name":"onMakeRanges","description":"Returns the IP network, range, and address information to use when generating the\n    entries.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"RecordToHTML":{"meta":{"has_constructor":true,"description":"A utility class to turn a record into HTML. The RecordToHTML class is available to server-side scripts.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of RecordToHTML class.","params":[{"name":"table","type":"String","description":"The record's table name"},{"name":"sys_id","type":"String","description":"The sys_id of the record"},{"name":"pattern","type":"String","description":"The pattern of the string to generate. The pattern may include ${} escapes for\n                fields whose values should be included. For example, the pattern \"sys_id: ${sys_id}\"\n                would substitute the actual sys_id for the escape."},{"name":"link","type":"Boolean","description":" "}],"returns":{"type":"","description":""},"example":[{"code":"var r2html = new RecordToHTML(\"incident\",\"e8e875b0c0a80164009dc852b4d677d5\", \n        \"incident: ${number}-${short_description}\", true);\ngs.print(r2html.toString());","description":"","output":"incident: INC00005-CPU load high for over 10 minutes"}]},{"name":"setValue","description":"Sets the specified field to the specified value.","params":[{"name":"fieldName","type":"String","description":"Name of the field to change."},{"name":"value","type":"String","description":"Value to set the field to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var r2html = new RecordToHTML(\"incident\",\"e8e875b0c0a80164009dc852b4d677d5\", \"incident: ${number}-${short_description} (${user})\", true);\nr2html.setValue(\"user\",gs.getUserName());\ngs.print(r2html.toString())","description":"","output":"incident: INC00005-CPU load high for over 10 minutes (john.roberts)"}]},{"name":"toString","description":"Converts the record to a string.","params":[],"returns":{"type":"String","description":"HTML output of the record."},"example":[{"code":"var r2html = new RecordToHTML(\"incident\",\"e8e875b0c0a80164009dc852b4d677d5\", \n                          \"incident: ${number}-${short_description}\", true);\ngs.print(r2html.toString());","description":"","output":"incident: INC00005-CPU load high for over 10 minutes"}]}]},"RenderProperties":{"meta":{"has_constructor":false,"description":"The RenderProperties API provides methods about the current page and is available in\n  Jelly scripts and in UI-action conditions and scripts. Access <span class=\"keyword apiname\">RenderProperties</span> methods using the static variable\n    <samp class=\"ph codeph\">RP</samp>.","example":""},"properties":{},"methods":[{"name":"getEncodedQuery","description":"Returns the encoded query from the URL sent to the page.","params":[],"returns":{"type":"String","description":"Returns the encoded query from the URL sent to the form."},"example":[]},{"name":"getListControl","description":"Returns the list control object for the page.","params":[],"returns":{"type":"SysListControl object","description":"The list control object for the page."},"example":[]},{"name":"getParameterValue","description":"Returns the value of the specified URL parameter.","params":[{"name":"parameterName","type":"String","description":"Name of the parameter passed on the URL."}],"returns":{"type":"String","description":"The parameter's value."},"example":[]},{"name":"getReferringURL","description":"Returns the URL where the request originated.","params":[],"returns":{"type":"String","description":"The URL of the page where the request originated."},"example":[]},{"name":"getViewID","description":"Returns the view the page is using.<p>This method is not available in scoped applications.</p>","params":[],"returns":{"type":"String","description":"The sys_id of the view being used."},"example":[]},{"name":"getViewName","description":"Returns the name of the view in use.","params":[],"returns":{"type":"String","description":"The name of the view being used."},"example":[]},{"name":"getWindowProperties","description":"Returns the window's properties.","params":[],"returns":{"type":"Object","description":"The window's properties"},"example":[]},{"name":"isInDevStudio","description":"Returns true if the page is part of Studio.","params":[],"returns":{"type":"Boolean","description":"Returns true if the page is part of Studio."},"example":[]},{"name":"isInteractive","description":"Returns true if this is an interactive session. An interactive session is when a user\n    has logged in as opposed to a REST request.","params":[],"returns":{"type":"Boolean","description":"True if this is an interactive session."},"example":[]},{"name":"isManyToMany","description":"Returns true when the <samp class=\"ph codeph\">sysparm_collection_related_file</samp> URL parameter is\n    set.","params":[],"returns":{"type":"Boolean","description":"Returns true when the <samp class=\"ph codeph\">sysparm_collection_related_file</samp> URL\n                parameter is set."},"example":[]},{"name":"isRelatedList","description":"Returns true when the <samp class=\"ph codeph\">sys_is_related_list</samp> URL-parameter is true.\n    Returns false if the parameter is not present.","params":[],"returns":{"type":"Boolean","description":"True if the URL parameter <samp class=\"ph codeph\">sys_is_related_list</samp> is true."},"example":[]}]},"RoundingInterval":{"meta":{"has_constructor":true,"description":"Handles all the details of rounding intervals for CPU speed and RAM size. Use in any server-side Discovery script.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the RoundingInterval class.","params":[{"name":"type","type":"String","description":"Can be either CPU or RAM."}],"returns":{"type":"","description":""},"example":[]},{"name":"getRoundedValue","description":"Returns the value after applying the rounding interval.","params":[{"name":"value","type":"Number","description":"The value to round off"}],"returns":{"type":"Number","description":"The value after rounding"},"example":[]}]},"SerialNumberManager":{"meta":{"has_constructor":false,"description":"Manages the serial numbers for discovery devices. Use with a discovery script where you need to manage serial numbers.","example":""},"properties":{},"methods":[{"name":"add","description":"Adds the specified serial number.","params":[{"name":"sType","type":"Number","description":"The serial number type"},{"name":"value","type":"Number","description":"The serial number"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"get","description":"Returns the serial number.","params":[],"returns":{"type":"Number","description":"The serial number"},"example":[]},{"name":"getSerialsForCIData","description":"Returns serial number information for CI Data, including the type, serial number, and\n    validity.","params":[],"returns":{"type":"Array","description":"An array with the serial number information in the following order: serial\n                number type, serial number, and validity flag."},"example":[]},{"name":"isValid","description":"Checks if the number is a valid serial number.","params":[{"name":"value","type":"Number","description":"The number to check"}],"returns":{"type":"Boolean","description":"True if the number is valid; otherwise, false."},"example":[]}]},"ServiceRegistryQuery":{"meta":{"has_constructor":true,"description":"Maps Shazzam service registry query results against a port probe. Child classes provide\n  specifics on mapping. Use this API during the discovery scanning phase.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the ServiceRegistryQuery class.","params":[{"name":"source","type":"Object","description":"A GlideRecord or sys_id of the registry service."}],"returns":{"type":"","description":""},"example":[]},{"name":"findForPortProbe","description":"Parses an array of IDs for the given port probe.","params":[{"name":"portProbe","type":"PortProbe","description":"The port probe"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"get","description":"Retrieves a registry service by id, regardless of child class.","params":[{"name":"source","type":"Object","description":"The registry service GlideRecord or sys_id."}],"returns":{"type":"String","description":"The registry service"},"example":[]},{"name":"getShazzamQuerierClassname","description":"Returns the Shazzam! querier class name.","params":[],"returns":{"type":"String","description":"The class name"},"example":[]},{"name":"toPortProbeMap","description":"Retrieves the port probe XML and creates a map.","params":[],"returns":{"type":"String","description":"The port probe map"},"example":[]},{"name":"toPortProbeXml","description":"Creates XML output for Shazzam! port probes.","params":[],"returns":{"type":"String","description":"The XML output for the probe."},"example":[]}]},"ShazzamLaunch":{"meta":{"has_constructor":true,"description":"Handles the details of launching a Shazzam probe for a given discovery. Use this API to launch a Shazzam probe during the discovery scanning phase.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the Shazzamlaunch class.","params":[{"name":"status","type":"DiscoveryStatus","description":"The DiscoveryStatus instance for this discovery."},{"name":"schedule","type":"DiscoverySchedule","description":"The DiscoverySchedule instance for this discovery."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addPortProbe","description":"Adds a single port probe to our MID services collection.","params":[{"name":"midPPs","type":"String","description":"A hashmap with two properties. <ul class=\"ul\" id=\"r_SL-addPortProbe_S_S_IPIEC__ul_dxt_mjp_tt\">\n                  <li class=\"li\">midServer: a MIDServer instance</li>\n\n                  <li class=\"li\">portProbes: a hashmap (by port probe name) of DiscoveryPortProbe\n                    instances.</li>\n\n                </ul>"},{"name":"portProbes","type":"String","description":"A hashmap (byMIDServer name) that contains these properties. <ul class=\"ul\" id=\"r_SL-addPortProbe_S_S_IPIEC__ul_p4r_tjp_tt\">\n                  <li class=\"li\">range: An IPMetaCollection containing the ranges to be probed.</li>\n\n                  <li class=\"li\">midserver: A MIDServer instance for the MID server to be probed.</li>\n\n                  <li class=\"li\">portProbes: a hashmap (by port probe name) of DiscoveryPortProbe instances to\n                    be probed.</li>\n\n                </ul>"},{"name":"ipiec","type":"IPIncludeExcludeCollection","description":"The range to be probed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addRange","description":"Adds the specified range and this discovery's port probes to scan (as defined by\n    behavior) to the collection of MID servers and port probes that need to be probed.","params":[{"name":"ipc","type":"IPCollection","description":"The range to be discovered"},{"name":"portProbes","type":"String","description":"A hashmap (by MID server name) of hashmaps containing these properties. <ul class=\"ul\" id=\"r_SL-addRange_IPC_S_B__ul_nlk_t3p_tt\">\n                  <li class=\"li\">range: an IPMetaCollection containing the ranges to be probed. </li>\n\n                  <li class=\"li\">midServer: a Mid server instance for the MID server to be probed. </li>\n\n                  <li class=\"li\">portProbes: a hashmap (by port probe name) of DiscoveryPortProbe instances to\n                    be probed. </li>\n\n                </ul>"},{"name":"samePhase","type":"Boolean","description":"True if this should use the same phase as is currently running."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"fireShazzamProbe","description":"Fires a Shazzam probe for the MID server and services in the given hash\n    map.","params":[{"name":"portProbe","type":"String","description":"A hashmap containing these properties.<ul class=\"ul\" id=\"r_SL-fireShazzamProbe_S_S_S__ul_i5b_pkp_tt\">\n                  <li class=\"li\">range: an IPMetaCollection containing the ranges to be probed.</li>\n\n                  <li class=\"li\">midServer: a MIDServer instance for the MID server to be probed.</li>\n\n                </ul>"},{"name":"ip","type":"String","description":"A comma-separated list of IPs to fire probes for."},{"name":"sensor","type":"String","description":"The sys_id of the sensor that launched this probe (network discovery\n                only)."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"launch","description":"Launches Shazzam probes as necessary, depending on the current phase of each behavior\n    used.","params":[{"name":"ip","type":"String","description":"A comma-separated list of IPs to fire probes for."},{"name":"samePhase","type":"Boolean","description":"True if this launch should use the same phase as is currently running."},{"name":"sensor","type":"String","description":"The sys_id of the sensor that launched this (only in network\n                discovery)."}],"returns":{"type":"Boolean","description":"True if any probes are launched."},"example":[]},{"name":"makeProbeSpec","description":"Makes an XML port probe spec for the given port probe hashmap.","params":[{"name":"portProbe","type":"String","description":"A hashmap containing these properties.<ul class=\"ul\" id=\"r_SL-makeProbeSpec_S__ul_cmc_xlp_tt\">\n                  <li class=\"li\">range: an IPMetaCollection containing the ranges to be probed.</li>\n\n                  <li class=\"li\">midServer: a MIDServer instance for the MID server to be probed.</li>\n\n                  <li class=\"li\">portProbes: a hashmap (by port probe name) of DiscoveryPortProbe instances to\n                    be probed.</li>\n\n                </ul>"}],"returns":{"type":"String","description":"An XML port probe specification"},"example":[]}]},"ShazzamResult":{"meta":{"has_constructor":false,"description":"Encapsulates a Shazzam result. Use this API during the discovery scanning phase.","example":""},"properties":{"active":{"description":"Property that shows if the IP address is active","type":"Boolean"},"alive":{"description":"Property is true if this IP address is alive, which means no ports are open, but at\n    least one responded.","type":"Boolean"},"domainName":{"description":"The Windows domain name for the IP.","type":"String"},"hostName":{"description":"Host name for the IP.","type":"String"},"ip":{"description":"IP address of the results.","type":"String"},"scanners":{"description":"A JavaScript array of ShazzamScanner instances.","type":"Array"}},"methods":[]},"ShazzamScanner":{"meta":{"has_constructor":false,"description":"Encapsulates a Shazzam scanner. Use this API during the discovery scanning phase.","example":""},"properties":{"contents":{"description":"A hash map of any nodes contained within the scanner, by name.","type":"Hash map"},"domainName":{"description":"The Windows domain name, if one was resolved by the scanner.","type":"String"},"hostName":{"description":"The IP hostname, if one was resolved by the scanner.","type":"String"},"name":{"description":"The scanner name.","type":"String"},"port":{"description":"The port being scanned.","type":"String"},"portProbe":{"description":"The port probe name.","type":"String"},"protocol":{"description":"The scanner protocol.","type":"String"},"result":{"description":"The scanner result.","type":"String"},"service":{"description":"The scanner service name.","type":"String"}},"methods":[]},"SLARepair":{"meta":{"has_constructor":false,"description":"The SLARepair API first deletes the existing SLAs and then recreates them from each\n  task's history. ","example":""},"properties":{},"methods":[{"name":"repairByFilter","description":"Repair the task SLAs associated with the passed-in filter and source table.","params":[{"name":"filter","type":"string","description":"Specify an encoded query that is used to retrieve a set of records from the\n                source table."},{"name":"sourceTable","type":"string","description":"Specify the name of a table that is (or extends) contract_sla, task_sla, or\n                task."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord(\"problem\");\ngr.addQuery(\"sys_created_on\", \"ON\", \"Last Month@javascript:gs.beginningOfLastMonth()@javascript:gs.endOfLastMonth()\");\ngr.addQuery(\"priority\", \"2\");\ngr.query();\n\nvar repair = new SLARepair();\nwhile (gr.next()) \n    repair.repairByFilter(gr.getEncodedQuery(), gr.getRecordClassName());","description":"Repair SLAs for problems created last month with a priority of 2.","output":""}]},{"name":"repairByGlideRecord","description":"Repair the task SLAs associated with the passed in GlideRecord.","params":[{"name":"gr","type":"GlideRecord","description":"Specify a GlideRecord for a table that is (or extends) contract_sla, task_sla,\n                or task."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord(\"problem\");\ngr.addQuery(\"sys_created_on\", \"ON\", \"Last Month@javascript:gs.beginningOfLastMonth()@javascript:gs.endOfLastMonth()\");\ngr.addQuery(\"priority\", \"2\");\ngr.query();\n\nvar repair = new SLARepair(); \nwhile (gr.next()) \n    repair.repairByGlideRecord(gr);","description":"Repair SLAs for problems created last month with a priority of 2.","output":""}]},{"name":"repairBySysId","description":"Repair the task SLAs associated with the passed in sys_id and source table.","params":[{"name":"sysId","type":"string","description":"Specify the ID of a table that is (or extends) contract_sla, task_sla, or\n                task."},{"name":"sourceTable","type":"string","description":"Specify the name of a table that is (or extends) contract_sla, task_sla, or\n                task."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord(\"problem\");\ngr.addQuery(\"sys_created_on\", \"ON\", \"Last Month@javascript:gs.beginningOfLastMonth()@javascript:gs.endOfLastMonth()\");\ngr.addQuery(\"priority\", \"2\");\ngr.query();\n\nvar repair = new SLARepair();\nwhile (gr.next())\n    repair.repairBySysId(gr.sys_id + \"\",  gr.getRecordClassName());\n","description":"Find problems created last month with a priority of 2","output":""}]},{"name":"setAuditEnabled","description":"Enables or disables auditing when running a repair.<p>By default, auditing is set to the value in the property\n          <span class=\"keyword parmname\">com.snc.sla.repair.audit</span>. You can override this with passing in true\n        to enable or false to disable auditing.</p>","params":[{"name":"onOrOff","type":"Boolean","description":"Determines whether to enable or disable auditing."}],"returns":{"type":"this","description":"A self-reference to allow for method chaining."},"example":[{"code":"var builder = new SLARepair();\n  builder.setAuditEnabled(true);\n","description":"","output":""}]},{"name":"setRunWorkflow","description":"Enables or disables running a workflow for each of the Task SLA records being repaired.<p>By default, when a Task SLA is repaired the workflow will be run during the repair process.\n        To override this, you can pass in false to disable running of the workflow or true to enable\n        it.</p>","params":[{"name":"onOrOff","type":"Boolean","description":"Determines whether to enable or disable workflow."}],"returns":{"type":"this","description":"A self-reference to allow for method chaining."},"example":[{"code":"var repair = new SLARepair();\nrepair.setRunWorkflow(false);","description":"","output":""}]},{"name":"setValidateOnly","description":"Validates the repair request.<p>If false is passed in, the task SLAs will be repaired. If true is passed in, calls to\n        repair will not alter any task SLAs but only validate the supplied parameters and generate a\n        count of records to be repaired.</p>","params":[{"name":"onOrOff","type":"Boolean","description":"Determines whether to enable or disable validation."}],"returns":{"type":"this","description":"A self-reference to allow for method chaining."},"example":[{"code":"var repair = new SLARepair();\n  repair.setValidateOnly(true);","description":"","output":""}]}]},"SLPServiceRegistryQuery":{"meta":{"has_constructor":false,"description":"Maps Shazzam! SLP query results to port probes. Use this API during the discovery scanning phase.","example":""},"properties":{},"methods":[{"name":"getShazzamQuerierClassname","description":"Returns the Shazzam querier class name.","params":[],"returns":{"type":"String","description":"The class name"},"example":[]},{"name":"toPortProbeMap","description":"Creates a scalar map for port probes to use in XML output to Shazzam!.","params":[],"returns":{"type":"Object","description":"The scalar map"},"example":[]}]},"SNMPGatherDocParts":{"meta":{"has_constructor":false,"description":"Handles gathering the parts of an SNMP response document for JavaScript SNMP\n  sensors. Use with a discovery script when you need to gather the parts of an SNMP response document.","example":""},"properties":{},"methods":[{"name":"gather","description":"Returns the given XML document with any data gathered by prior SNMP probes.","params":[{"name":"doc","type":"String","description":"The XML document for this sensor"},{"name":"probe","type":"Object","description":"The probe instance"}],"returns":{"type":"String","description":"The XML document with the gathered data."},"example":[]}]},"SNMPNetworkInterfaces":{"meta":{"has_constructor":false,"description":"Creates network interfaces for JavaScript SNMP sensors. Use with a discovery script when you need to create network interfaces for JavaScript SNMP\n   sensors.","example":""},"properties":{},"methods":[{"name":"process","description":"Analyzes the SNMP data and reconciles the discovered NICs to the CMDB's\n    NICs.","params":[{"name":"cmdb_ci","type":"String","description":"The sys_id of the CI"},{"name":"doc","type":"String","description":"The SNMP data in XML form"},{"name":"isComputer","type":"Boolean","description":"If true, this is a computer; otherwise, false."},{"name":"agentName","type":"String","description":"Name of the MID server"},{"name":"ecc_sys_id","type":"String","description":"The sys_id of the ECC queue record with the input."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"SNMPResponse":{"meta":{"has_constructor":false,"description":"Wraps an SNMP payload response instance with methods to safely and easily retrieve SNMP\n  singleton fields or tables. Use to retrieve SNMP singleton fields or tables.","example":""},"properties":{},"methods":[{"name":"buildIndex","description":"Builds an index to all SNMP entities in the current object.","params":[{"name":"cur","type":"Object","description":"The current object"},{"name":"name","type":"String","description":"The index name"},{"name":"extName","type":"String","description":"The index extension"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"buildReferences","description":"Builds references to actual instances for all identified indexes (in the\n    discovery_snmp_ref table) that can be resolved.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAmbiguousOIDs","description":"Returns an array of OIDs that match the given ref_base and which have a defined,\n    non-null ref_leaf.<p>The last character of ref_base may be a question mark; in that case, if the parent node is\n        a table then all table entries are returned.</p>","params":[{"name":"refBase","type":"String","description":"The reference base"},{"name":"refLeaf","type":"String","description":"The reference leaf"}],"returns":{"type":"Array","description":"An array of OIDs that match the given ref_base and which have a defined,\n                non-null ref_leaf."},"example":[]},{"name":"getOIDInt","description":"Returns the integer contained in the OID object with the given MIB name.","params":[{"name":"name","type":"String","description":"The MIB name"}],"returns":{"type":"Number","description":"The integer contained in the OID object, or zero if the object could not be\n                found or is empty."},"example":[]},{"name":"getOIDObj","description":"Retrieves the OID object with the given MIB name from the response.<p>This method does not work with numeric OID strings, only MIB names.</p>","params":[{"name":"name","type":"String","description":"The MIB name"}],"returns":{"type":"OID object","description":"The OID object with the given MIB name, or null if the object could not be\n                found or if any table entries are encountered while walking down the named\n                elements."},"example":[]},{"name":"getOIDTable","description":"Returns a hashmap of table entries under the given parent MIB name, with the given\n    entry MIB names.","params":[{"name":"parentName","type":"String","description":"The parent MIB name"},{"name":"entryName","type":"String","description":"The entry MIB name"}],"returns":{"type":"Hashmap","description":"A hashmap of table entries under the given parent MIB name, with the given\n                entry MIB names, or null if the parent does not exist."},"example":[]},{"name":"getOIDText","description":"Returns the text contained in the OID object with the given MIB name.","params":[{"name":"name","type":"String","description":"The MIB name"}],"returns":{"type":"String","description":"The text contained in the OID object. Returns null if the object could not be\n                found, or if it has no text."},"example":[]},{"name":"normalize","description":"Resolves SNMP tables into hashmaps and OID values into primitives.<p>All SNMP numeric types convert to a JavaScript number. An SNMP null type converts to a\n        JavaScript null. An SNMP IP Address value converts to a Java IPAddressV4 instance. All other\n        values convert to a JavaScript string.</p>","params":[{"name":"cur","type":"Object","description":"The SNMP table or OID value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"StartDiscovery":{"meta":{"has_constructor":false,"description":"Starts discovery jobs. Use this API during the discovery scanning phase.","example":""},"properties":{},"methods":[{"name":"addAdditionalIP","description":"Adds an IP (or comma-separated list of IPs) to an existing discovery (used by networks\n    discovery).","params":[{"name":"status","type":"String","description":"The discovery status"},{"name":"ip","type":"String","description":"An IP address, or a comma-separated list of IP addresses."},{"name":"sensor","type":"String","description":"The discovery sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"discoverFromSchedule","description":"Handles discovery of devices (whether basic or advanced) from a schedule.","params":[{"name":"ip","type":"String","description":"An IP address, or a comma-separated list of IP addresses."},{"name":"samePhase","type":"Boolean","description":" "},{"name":"sensor","type":"String","description":"The discovery sensor"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getCancelScript","description":"Returns the cancel script.","params":[],"returns":{"type":"String","description":"The cancel script"},"example":[]},{"name":"scheduleCancelJob","description":"If the schedule specifies a cancel time, schedules a job to cancel if\n    necessary.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"startFromIP","description":"Starts a discovery for a single IP using the specified schedule to get information such\n    as MID servers and behaviors.","params":[{"name":"schedule","type":"DiscoverySchedule","description":"A DiscoverySchedule instance for the schedule to use."},{"name":"ip","type":"String","description":"The IP address to discover in a dot-formatted string."}],"returns":{"type":"String","description":"The sys_id of the status record created."},"example":[]},{"name":"startFromSchedule","description":"Invoked by the discovery script include to kick off a scheduled (or discover now)\n    discovery.","params":[{"name":"schedule","type":"GlideRecord","description":"The instance of discovery_schedule that this discovery is based on."},{"name":"job","type":"GlideRecord","description":"The instance of sys_trigger that triggered this discovery."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"StateManagementScriptableApi":{"meta":{"has_constructor":false,"description":"Provides a set of methods for manipulating CI operational states and applying CI\n  actions. The StateManagementScriptableApi methods adhere to restrictions and allowances specified by not\n   allowed CI actions, compatible CI actions, and not allowed operational transitions. If a method\n   attempts to perform a restricted operation, the operation is blocked, an error is logged, and a\n   task is created if appropriate.<br/><br/>The StateManagementScriptableApi methods are static methods. You access the methods using the\n    <samp class=\"ph codeph\">SNC.StateManagementScriptableApi</samp> global object.","example":""},"properties":{},"methods":[{"name":"addBulkCIAction","description":"Add a CI action to a list of CIs.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."},{"name":"sysIdList","type":"String","description":"A list comma separated list of CI sys_ids."},{"name":"ciActionName","type":"String","description":"The CI action name."},{"name":"ciActionListOld","type":"String","description":"(Optional) A comma separated list of old CI actions that all CIs should be\n                in."},{"name":"leaseTime","type":"String","description":"(Optional) Time duration for which the lease is valid for specified CI Action.\n                In the format HH:MM:SS."}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-addBulkCIAction_S_S_S_S_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if the action is set for all CIs in the list; otherwise,\n                    false.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"extendCIActionLease","description":"Extend the CI-action-lease time for the registered user. If the previous lease has\n    expired, the new lease time starts now.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."},{"name":"ciSysId","type":"String","description":"The CI's sys_id."},{"name":"ciActionName","type":"String","description":"The CI action name."},{"name":"leaseTime","type":"String","description":"Time duration for which the lease is valid for specified CI Action. In the\n                format HH:MM:SS."}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-extendCIActionLease_S_S_S_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if the lease time has been set.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"getCIActions","description":"Returns a list of active CI actions for the specified CI.","params":[{"name":"ciSysId","type":"String","description":"The sys_id of the CI"}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-getCIActions_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">ciActions - a comma separated list of active CI actions for the CI, or\n                    NO_ACTIVE_ACTION.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"getOperationalState","description":"Returns the CI's operational state.","params":[{"name":"ciSysId","type":"String","description":"Sys_id of the CI"}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-getCIOperationalState_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">operationalStates - one of the string choice values of the operational_status\n                    field, or UNKNOWN. </li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"isCompatibleCIAction","description":"Determines if the two specified actions are compatible.","params":[{"name":"actionName","type":"String","description":"A CI action name"},{"name":"otherActionName","type":"String","description":"A CI action name"}],"returns":{"type":"Boolean","description":"Returns true if the two specified CI actions are compatible."},"example":[]},{"name":"isLeaseExpired","description":"Determines if the lease has expired for the requestor of a specified CI\n    Action.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."},{"name":"ciSysId","type":"String","description":"The CI's sys_id."},{"name":"ciActionName","type":"String","description":"Name of the CI action."}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-isLeaseExpired_S_S_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if the user's lease has expired.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"isNotAllowedAction","description":"For a type of CI, determine if a CI action is not allowed for an operational\n    state.","params":[{"name":"ciType","type":"String","description":"The CI type"},{"name":"opsLabel","type":"String","description":"The operational state"},{"name":"actionName","type":"String","description":"The CI action name"}],"returns":{"type":"Boolean","description":"Returns true if the action is not allowed on the specified CI type in the\n                specified operational state."},"example":[]},{"name":"isNotAllowedOpsTransition","description":"For a type of CI, determine if an operational state transition is not\n    allowed.","params":[{"name":"ciType","type":"String","description":"The CI type"},{"name":"opsLabel","type":"String","description":"The label of the beginning operational state."},{"name":"transitionOpsLabel","type":"String","description":"The label of the ending operational state."}],"returns":{"type":"Boolean","description":"Returns true if specified operational state transition is not allowed on the\n                specified CI type."},"example":[]},{"name":"isValidRequestor","description":"Determine if the specified requestor is a valid active workflow user or a registered\n    user.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMA-isValidRequestor_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if the requestorId is valid.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"registerOperator","description":"Register an operator for a non-workflow user.","params":[],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-registerOperator__ul_ewf_5vl_px\">\n                  <li class=\"li\">requestorid - Registered user GUID that is used to set CI Action/operational\n                    states.</li>\n\n                  <li class=\"li\">result - true if successfully registered.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[{"code":"\nvar output = SNC.StateManagementScriptableApi.registerOperator();\nvar jsonUntil = new JSON();\nvar result = jsonUntil.decode(output);\nvar requestorId = result.requestorId;\n","description":"","output":""}]},{"name":"removeBulkCIAction","description":"Removes a CI action for a list of CIs.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."},{"name":"sysIdList","type":"String","description":"A comma separated list of CI sys_ids"},{"name":"ciActionName","type":"String","description":"The CI action name"}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-removeBulkCIAction_S_S_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if the action is removed for all CIs in the list; otherwise,\n                    false.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]},{"name":"setBulkCIOperationalState","description":"Set the operational state for list of CIs.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."},{"name":"sysIdList","type":"String","description":"A comma separated list of CI sys_ids."},{"name":"opsLabel","type":"String","description":"This is the string label of an operational_status choice."},{"name":"opsStateListOld","type":"String","description":"(Optional) A comma separated list of old CI states that all CIs should be\n                in."}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-setBulkCIOpState_S_S_S_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if the state is set for all CIs in the list; otherwise,\n                    false.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[{"code":"var output = SNC.StateManagementScriptableApi.registerOperator();\nvar jsonUntil = new JSON();\nvar result = jsonUtil.decode(output);\nvar requestorId = result.requestorId;\n\n// list of sys_ids to update\nvar sys_ids;\n\n// Set list of sys_ids's Operational State to 'Repair in Progress'\noutput = SNC.StateManagementScriptableApi.setBulkCIOperationalState(requestorId, sys_ids,'Repair in Progress');\ngs.print(output);\n","description":"","output":""}]},{"name":"unregisterOperator","description":"Unregister an operator for non-workflow users.","params":[{"name":"requestorId","type":"String","description":"A sys_id of a workflow context, or the GUID returned from the\n                  <span class=\"keyword apiname\">registerOperator()</span> method."}],"returns":{"type":"String","description":"A JSON formatted string with name-value pairs for <ul class=\"ul\" id=\"SMSA-unregisterOperator_S__ul_ewf_5vl_px\">\n                  <li class=\"li\">result - true if successfully unregistered.</li>\n\n                  <li class=\"li\">errors - list of errors. </li>\n\n                </ul>"},"example":[]}]},"SummaryTableWriter":{"meta":{"has_constructor":true,"description":"The SummaryTableWriter script include enables the creation of summary sets for reports\n    that can be generated with standard queries and trending. This script provides methods that enable you to customize the output of the summary sets for\n      reports, such as adding a title, defining a query on which to base the report data, and\n      specifying the stack column and X axis.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Produces a summary set for the COUNT of all incidents grouped by category.<p>The custom chart definition table contains a field named <span class=\"ph uicontrol\">Table</span> that\n        is hidden by default. If the field is set, which it is in some of the base custom charts,\n        then, no matter what is defined within the custom chart scripts, clicking on the chart\n        points you to this table.</p><p>For example, if you create a custom chart against the <samp class=\"ph codeph\">[task]</samp> table through\n        a script, but you copied the custom chart from a custom chart that contains Table =\n        incident, then clicking on any bar in the custom script will go to incident.do rather than\n        to task.do.</p><p>To check the value of the <span class=\"ph uicontrol\">Table</span> field, click the additional actions\n        icon and select <span class=\"ph menucascade\"><span class=\"ph uicontrol\">Configure</span> &gt; <span class=\"ph uicontrol\">Form Layout</span></span> and move the <span class=\"ph uicontrol\">Table</span> field from\n          <span class=\"ph uicontrol\">Available</span> to <span class=\"ph uicontrol\">Selected</span>. Open the custom chart\n        definition and set the <span class=\"ph uicontrol\">Table</span> field to\n        <span class=\"ph uicontrol\">none</span>.</p>","params":[{"name":"tableName","type":"String","description":"<p class=\"p\">Table used in the query to generate the data.</p>"},{"name":"columnName","type":"String","description":"Field that is used to determine the X axis values."}],"returns":{"type":"","description":""},"example":[{"code":"var summarySet = new SummaryTableWriter('incident', 'category');\nsummarySet.generate();","description":"","output":""}]},{"name":"generate","description":"Creates the summary set of records for reports.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var opened = new SummaryTableWriter('incident', '');\nopened.generate();","description":"","output":""}]},{"name":"setQuery","description":"Defines the query to use to load the data for the summary record set.","params":[{"name":"query","type":"String","description":"Query to use to load the summary data."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var summarySet = new SummaryTableWriter('incident', 'category');\nsummarySet.setQuery(\"active=true\");\nsummarySet.generate();","description":"","output":""}]},{"name":"setStackOn","description":"Defines the column on which to stack the incident records.","params":[{"name":"column","type":"String","description":"Column that is used to stack the incident records."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var summarySet = new SummaryTableWriter('incident', 'category');\nsummarySet.setQuery(\"active=true\");\nsummarySet.setStackOn('priority');\nsummarySet.generate();","description":"","output":""}]},{"name":"setTitle","description":"Sets the title of the summary set, which is also the chart title.","params":[{"name":"title","type":"String","description":"Title given to the summary set that is used as the chart title. Also used as\n                the key field for chart generators to determine whether the data was\n                generated."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var opened = new SummaryTableWriter('incident', '');\nopened.setTitle(\"Trend of Open Incidents\");\nopened.setTrend('opened_at', 'month');\nopened.generate();","description":"","output":""}]},{"name":"setTrend","description":"Sets the time field used for the X axis or stacking field; can also set the time\n    interval used to calculate the trend.","params":[{"name":"field","type":"String","description":"Time field that is used for X axis values if grouping is not used. If grouping\n                is used, then this is the stacking field."},{"name":"interval","type":"String","description":"Time interval that is used to calculate the trend."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var opened = new SummaryTableWriter('incident', '');\nopened.setTitle(\"Trend of Open Incidents\");\nopened.setTrend('opened_at', 'month');\nopened.generate();","description":"","output":""}]}]},"TableUtils":{"meta":{"has_constructor":true,"description":"TableUtils is a class of shortcuts for accessing table related information. The <span class=\"keyword apiname\">TableUtils</span> class is available to server-side scripts.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of a TableUtils class.","params":[{"name":"tableName","type":"String","description":"The table name"}],"returns":{"type":"","description":""},"example":[{"code":"var tu = new TableUtils(\"incident\");","description":"","output":""}]},{"name":"drop","description":"Drops a database table.<p><span class=\"notetitle\">Note:</span> Use with extreme caution. Dropping a table permanently deletes the table and all its\n        data. If the table is extended, use <span class=\"keyword apiname\">dropTableAndExtensions</span>.</p>","params":[{"name":"tableName","type":"String","description":"Name of the table to drop"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var tu = new TableUtils();\ntu.drop(\"table_that_will_be_lost_forever\");","description":"","output":""}]},{"name":"dropAndClean","description":"Drops a database table and cleans up references to the table.<p><span class=\"notetitle\">Note:</span> Use with extreme caution. Dropping a database table permanently deletes the table and\n        all its data. If the table is extended, use\n        <span class=\"keyword apiname\">dropTableAndExtensions</span>.</p>","params":[{"name":"tableName","type":"String","description":"Name of the table to drop"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var tu = new TableUtils();\ntu.dropAndClean(\"table_that_will_be_lost_forever\");","description":"","output":""}]},{"name":"dropTableAndExtensions","description":"Drops a database table, all of it's extended tables, and cleans up references to the\n    tables.<p><span class=\"notetitle\">Note:</span> Use with extreme caution. Dropping a database table permanently deletes the table and\n        all of its data.</p>","params":[{"name":"tableName","type":"String","description":"The table to drop"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var tu = new TableUtils();\ntu.dropAndClean(\"table_that_will_be_lost_forever\");","description":"","output":""}]},{"name":"getAbsoluteBase","description":"Returns the base table name from which the table was extended.<p><span class=\"notetitle\">Note:</span> For any table under the cmdb_ci hierarchy, this method returns cmdb_ci and not cmdb,\n        which is the actual base table.</p>","params":[],"returns":{"type":"String","description":"Base table name"},"example":[{"code":"var table = new TableUtils(\"cmdb_ci_server\");\ngs.print(table.getAbsoluteBase());","description":"","output":"cmdb_ci"}]},{"name":"getAllExtensions","description":"Returns the list of tables that extend a table, includes the base table.","params":[],"returns":{"type":"ArrayList","description":"A list of tables that extend the table, includes the base table."},"example":[{"code":"var table = new TableUtils(\"task\");\ngs.print(table.getAllExtensions());","description":"","output":""}]},{"name":"getHierarchy","description":"Returns a list of all classes participating in the hierarchy of the specified\n    table.","params":[],"returns":{"type":"ArrayList","description":"A list of all classes in the specified table's hierarchy."},"example":[{"code":"var table = new TableUtils(\"cmdb_ci_server\");\ngs.print(table.getHierarchy());","description":"","output":"[cmdb_ci_server, cmdb_ci_computer, cmdb_ci_hardware, cmdb_ci, cmdb_ci_mainframe,\n        cmdb_ci_linux_server, cmdb_ci_mainframe_lpar, cmdb_ci_esx_server, cmdb_ci_unix_server,\n        cmdb_ci_solaris_server, cmdb_ci_hpux_server, cmdb_ci_aix_server, cmdb_ci_osx_server,\n        cmdb_ci_netware_server, cmdb_ci_win_server]"}]},{"name":"getTableExtensions","description":"Returnss a list of tables that extend a table.","params":[],"returns":{"type":"ArrayList","description":"A list of table names that extend the table."},"example":[{"code":"var table = new TableUtils(\"task\");\ngs.print(table.getTableExtensions());","description":"","output":""}]},{"name":"getTables","description":"Returns the table hierarchy.","params":[],"returns":{"type":"ArrayList","description":"A list of table names in the parent hierarchy."},"example":[{"code":"var table = new TableUtils(\"incident\");\ngs.print(table.getTables());","description":"","output":"[incident, task]"}]},{"name":"hasExtensions","description":"Determines if a table has been extended.","params":[],"returns":{"type":"Boolean","description":"True if the table has extensions."},"example":[{"code":"var table = new TableUtils(\"cmdb_ci_server\");\ngs.print(table.hasExtensions());","description":"","output":"true"}]},{"name":"isBaseClass","description":"Determines if a table is a base class, meaning it has no parents and has\n    extensions.<p>For example, Task is a base class since it is not extended from another table and has\n        tables extended from it. Sys_user is not a base class because it has no parents, but does\n        not have extensions.</p>","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether a table is a base class table meaning it has no\n                parents but has extensions.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_TU-isBaseClass__ul_wp1_hjt_43b\">\n                    <li class=\"li\">true: Table is a base class.</li>\n\n                    <li class=\"li\">false: Table is not a base class.</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var table = new TableUtils(\"task\");\ngs.print(\"Task is base class: \" + table.isBaseClass());\n \nvar table = new TableUtils(\"sys_user\");\ngs.print(\"User is base class: \" + table.isBaseClass());","description":"","output":""}]},{"name":"isSoloClass","description":"Determines if the table has no parents and no extensions.","params":[],"returns":{"type":"Boolean","description":"True if the table has no parent and no table is extended from it."},"example":[{"code":"var table = new TableUtils(\"task\");\ngs.print(\"task is solo class: \" + table.isSoloClass());\n \nvar table = new TableUtils(\"cmdb_ci_win_server\");\ngs.print(\"cmdb_ci_win_server is solo class: \" + table.isSoloClass());\n \nvar table = new TableUtils(\"sys_user\");\ngs.print(\"sys_user is solo class: \" + table.isSoloClass());","description":"","output":""}]},{"name":"tableExists","description":"Checks to see if a table exists.","params":[],"returns":{"type":"Boolean","description":"True if the table exists."},"example":[{"code":"var table = new TableUtils(\"my_table\");\ngs.print(\"Does 'my_table' exist? \" + table.tableExists());","description":"","output":"Does 'my_table' exist? false"}]}]},"TaskStateUtil":{"meta":{"has_constructor":true,"description":"The TaskStateUtil API is in the task state management utility script include and is used\n  for working with task-type table state attributes. The TaskStateUtil API is primarily used by the Task Active State Management business rule to\n   set the active field based on state changes. Configurations are defined in the task.state\n   dictionary element, usually using dictionary overrides since state values vary by table.<br/><br/>The TaskStateUtil API can be called by any server script to determine inactive states, default\n   work, or default close states for a table.<br/><br/>The required attributes are defined on the planned_task table so all planned task types are\n   supported. We will eventually add the attributes to other task types and eventually the base task\n   table. You are free to do this if you want to leverage this feature now.<br/><br/>These attributes can be defined on the task.state dictionary element or a dictionary override\n   for extended task tables.\n<div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table\" frame=\"border\" id=\"c_TaskStateUtil__table_hv2_51h_1s\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 1. Related Attributes</span></caption>\n     \n     \n     <thead align=\"left\" class=\"thead\">\n      <tr class=\"row\">\n       <th class=\"entry\" id=\"d291924e62\" valign=\"top\" width=\"50%\">Attribute</th>\n\n       <th class=\"entry\" id=\"d291924e65\" valign=\"top\" width=\"50%\">Definition</th>\n\n      </tr>\n\n     </thead>\n\n     <tbody class=\"tbody\">\n      <tr class=\"row\">\n       <td class=\"entry\" headers=\"d291924e62\" valign=\"top\" width=\"50%\">close_states</td>\n\n       <td class=\"entry\" headers=\"d291924e65\" valign=\"top\" width=\"50%\">Semicolon delimited list of state values that are inactive, used to identify whether\n        the task should be set to active or inactive. This is a required attribute to use the\n        TaskStateUtil functionality.</td>\n\n      </tr>\n\n      <tr class=\"row\">\n       <td class=\"entry\" headers=\"d291924e62\" valign=\"top\" width=\"50%\">default_close_state</td>\n\n       <td class=\"entry\" headers=\"d291924e65\" valign=\"top\" width=\"50%\">Optional attribute to define the state value of the default close state if you want to\n        define business rules that automatically close a task. Defaults to 3, typically Closed\n        Complete if attribute is not defined.</td>\n\n      </tr>\n\n      <tr class=\"row\">\n       <td class=\"entry\" headers=\"d291924e62\" valign=\"top\" width=\"50%\">default_work_state</td>\n\n       <td class=\"entry\" headers=\"d291924e65\" valign=\"top\" width=\"50%\">Optional attribute to define the state value of the default working state if you want\n        to define business rules that automatically set a task for working. Defaults to 2, typically\n        Work in Progress if the attribute is not defined.</td>\n\n      </tr>\n\n     </tbody>\n\n    </table>\n</div>","example":""},"properties":{"ATTR_DEFAULT_CLOSE":{"description":"The name of the attribute that identifies the default close state.","type":"String"},"ATTR_DEFAULT_WORK":{"description":"The name of the attribute that identifies default work state.","type":"String"},"ATTR_INACTIVE_STATES":{"description":"The name of the attribute that identifies inactive states.","type":"String"},"SYSTEM_DEFAULT_CLOSE":{"description":"The value of the default close state is Closed Complete on the Task table.","type":"Integer"},"SYSTEM_DEFAULT_WORK":{"description":"The value of the default work state is Work in progress on the Task table.","type":"Integer"},"SYSTEM_INACTIVE_STATES":{"description":"The values of the default inactive states: Closed Complete, Closed Incomplete, Closed\n    Skipped on the Task table.","type":"Integer array"}},"methods":[{"name":"constructor","description":"Creates a TaskStateUtil object.","params":[{"name":"task","type":"GlideRecord","description":"This must be a GlideRecord from a task table."}],"returns":{"type":"","description":""},"example":[{"code":"var stateUtil = new TaskStateUtil(current);","description":"","output":""}]},{"name":"getDefaultCloseState","description":"Returns the value for the default closed state.<p>The default closed state value is 3 if the default_close_state attribute has not been\n        specified.</p>","params":[],"returns":{"type":"Number","description":"State value representing the closed state."},"example":[{"code":"var stateUtil = new TaskStateUtil(current);\n//get the close state\nvar defaultCloseState =  stateUtil.getDefaultCloseState();\ncurrent.state = defaultCloseState;","description":"","output":""}]},{"name":"getDefaultWorkState","description":"Returns the value for the default work state.<p>The default work state value is 2 if the default_work_state attribute has not been\n        specified.</p>","params":[],"returns":{"type":"Number","description":"The state value representing the working state."},"example":[{"code":"var stateUtil = new TaskStateUtil(current);\n//get the work state\nvar defaultWorkState =  stateUtil.getDefaultWorkState();\ncurrent.state = defaultWorkState;","description":"","output":""}]},{"name":"getInactiveStates","description":"Returns a list of the inactive state values.","params":[],"returns":{"type":"Array","description":"Array of state values that are inactive."},"example":[{"code":"var stateUtil = new TaskStateUtil(current);\n//get the inactive state values\nvar inactiveStates = stateUtil.getInactiveStates();","description":"","output":""}]},{"name":"isStateInactive","description":"Returns the active status of the specified state.","params":[{"name":"state","type":"String","description":"The state value to check."}],"returns":{"type":"Boolean","description":"True if the state is inactive."},"example":[{"code":"var stateUtil = new TaskStateUtil(current);\nvar previousStateInactive = stateUtil.isStateInactive(previous.state);\nvar currentStateInactive = stateUtil.isStateInactive(current.state);","description":"","output":""}]},{"name":"runMarkClosed","description":"Decides whether the <span class=\"keyword parmname\">mark closed</span> business rule should be run or\n    not.","params":[],"returns":{"type":"Boolean","description":"Whether the business rule should be allowed to run or not."},"example":[]},{"name":"runTaskCloser","description":"Decides whether the <span class=\"keyword parmname\">task closer</span> business rule should be run or\n    not.","params":[],"returns":{"type":"Boolean","description":"Determines whether the business rule should be allowed to run or not."},"example":[]},{"name":"runTaskReopener","description":"Decides whether the <span class=\"keyword parmname\">task reopener</span> business rule should be run or\n    not.","params":[],"returns":{"type":"Boolean","description":"Whether the business rule should be allowed to run or not."},"example":[]},{"name":"setDefaultWorkState","description":"Enables the user to specify their own default work state.","params":[{"name":"defaultWorkState","type":"String","description":"The value to use for the default work state."}],"returns":{"type":"TaskStateUtil","description":"A self-reference to allow for method chaining."},"example":[]}]},"TimelineSpan":{"meta":{"has_constructor":false,"description":"This class defines a set of properties that describe the characteristics and interactive\n    behavior of an element rendered within a <span class=\"keyword apiname\">TimelineItem</span>. Since it is extremely important for all of a <span class=\"keyword apiname\">TimelineItem'</span>s collection of\n      spans to be unique, the creation of a new instance should be performed via the\n        <span class=\"keyword apiname\">createTimelineItem method</span> of an existing\n        <span class=\"keyword apiname\">TimelineIteminstance</span>.","example":""},"properties":{},"methods":[{"name":"addPredecessor","description":"Adds multiple relationships between the current instance and other\n      <span class=\"keyword apiname\">TimelineSpan</span> objects by enumerating through the array of JavaScript\n    objects.<p>Each object should have an internal property <span class=\"keyword parmname\">relationship_sys</span>_id and\n          <span class=\"keyword parmname\">predecessor_sys_id</span> specified.</p>","params":[{"name":"objArray","type":"Object Array","description":"JavaScript object array that contains two internal properties:<span class=\"keyword parmname\">\n                  relationship_sys_id</span> and\n                <span class=\"keyword parmname\">predecessor_sys_id</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addPredecessor","description":"Adds the specified relationship between the current instance and another\n      <span class=\"keyword apiname\">TimelineSpan</span> with sys ID <span class=\"keyword parmname\">strPredecessorSysId</span>.<p>The drawn line will not have any double click handlers associated with it.</p>","params":[{"name":"strPredecessorSysId","type":"String","description":"The sys ID of the planned task that is the predecessor of the\n                relationship."},{"name":"strRelationshipSysId","type":"String","description":"The sys ID of the relationship of the relationship."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addPredecessor","description":"Adds the specified relationship between the current instance and another\n      <span class=\"keyword apiname\">TimelineSpan</span>  and allows the relationship to open a\n      <span class=\"keyword apiname\">GlideWindow</span> to display information about the relationship.","params":[{"name":"strPredecessorSysId","type":"String","description":"The sys ID of the planned task that is the predecessor of the\n                relationship."},{"name":"strRelationshipSysId","type":"String","description":"The sys ID of the relationship of the relationship."},{"name":"strTableName","type":"String","description":"The name of the table for the relationship."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAllowXDragLeft","description":"Returns the boolean value of the <span class=\"keyword parmname\">AllowXDragLeft</span>\n    property.","params":[],"returns":{"type":"Boolean","description":"True if the object's start time can be adjusted;\n                  False otherwise."},"example":[]},{"name":"getAllowXDragRight","description":"Returns the boolean value of the <span class=\"keyword parmname\">AllowXDragRight</span>\n    property.","params":[],"returns":{"type":"Boolean","description":"True if the object's end time can be adjusted;\n                  false otherwise."},"example":[]},{"name":"getAllowXMove","description":"Returns the boolean value of the <span class=\"keyword parmname\">AllowXMove</span> property.","params":[],"returns":{"type":"Boolean","description":"True if the object can be moved; false\n                otherwise."},"example":[]},{"name":"getAllowYMove","description":"Returns the boolean value of the <span class=\"keyword parmname\">AllowYMove</span> property.","params":[],"returns":{"type":"Boolean","description":"True if the object can be moved vertically;\n                  false otherwise."},"example":[]},{"name":"getAllowYMovePredecessor","description":"Returns the boolean value of the <span class=\"keyword parmname\">AllowYMovePredecessor</span>\n    property.","params":[],"returns":{"type":"Boolean","description":"True if the a dashed relationship line can be drawn from the current\n                object to a new successor; false otherwise."},"example":[]},{"name":"getInnerSegmentClass","description":"Returns the name of the current inner segment class for the\n      <span class=\"keyword apiname\">TimelineSpan</span>.","params":[],"returns":{"type":"String","description":"The name of the class for the current inner segment style."},"example":[]},{"name":"getInnerSegmentEndTimeMs","description":"Returns the time in milliseconds of the end time of the inner segment portion of the\n      <span class=\"keyword apiname\">TimelineSpan </span>.","params":[],"returns":{"type":"Number","description":"The end time of the TimelineSpan inner segment portion in milliseconds."},"example":[]},{"name":"getInnerSegmentStartTimeMs","description":"Returns the time in milliseconds of the start time of the inner segment portion of the\n      <span class=\"keyword apiname\">TimelineSpan</span>.","params":[],"returns":{"type":"Number","description":"The start time of the TimelineSpan inner segment portion in milliseconds."},"example":[]},{"name":"getIsChanged","description":"Returns a boolean that specifies whether or not the current timeline item has been modified after initialization.","params":[],"returns":{"type":"Boolean","description":"True if the current span has been marked as changed; otherwise\n                  false."},"example":[]},{"name":"getPointIconClass","description":"Returns a string that specifies the name of the icon class to use for displaying the\n    element on the timeline if the current instance has zero duration.","params":[],"returns":{"type":"String","description":"The name of the icon class to use for displaying the current\n                  TimelineSpan if the duration is zero."},"example":[]},{"name":"getPredecessors","description":"Returns an array of all the predecessor objects associated with the current instance.\n    Each array object is a HashMap that contains a <span class=\"keyword parmname\">predecessor_sys_id</span> and\n      <span class=\"keyword parmname\">relationship_sys_id</span> property.","params":[],"returns":{"type":"Object Array","description":"List of HashMaps that contain two internal properties:\n                  predecessor_sys_id and\n                relationship_sys_id."},"example":[]},{"name":"getSpanColor","description":"Returns the string name of the color specified for displaying this span.","params":[],"returns":{"type":"String","description":"The HTML color name to use as the background color for the element."},"example":[]},{"name":"getSpanText","description":"Returns the string that specifies the text to display adjacent to the time element.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This text will only display if the <span class=\"keyword apiname\">GlideTimeline</span> object has enabled\n          timeline text via <samp class=\"ph codeph\">glideTimeline.showTimelineText(true)</samp>.</div></p>","params":[],"returns":{"type":"String","description":"Text displayed adjacent to the element."},"example":[]},{"name":"getStartTimeMs","description":"Returns the start time in milliseconds of the current <span class=\"keyword apiname\">TimelineSpan</span>\n    object.","params":[],"returns":{"type":"Number","description":"The start time of the element in milliseconds."},"example":[]},{"name":"getSysId","description":"Returns the sys ID of the current object.<p>This method is useful for returning the sys Id when the current object instance was created without a specific sys Id to obtain the dynamically generated GUID.</p>","params":[],"returns":{"type":"String","description":"The unique system ID of the current element."},"example":[]},{"name":"getTable","description":"Returns the name of the table where the sys ID is referenced.","params":[],"returns":{"type":"String","description":"The table name."},"example":[]},{"name":"getTooltip","description":"Returns the text/html to display in the tooltip when the <span class=\"keyword apiname\">TimelineSpan</span>\n    element is being hovered over.","params":[],"returns":{"type":"String","description":"The tooltip text."},"example":[]},{"name":"setAllowXDragLeft","description":"Sets a flag that determines whether the element's start date can be dragged left or right\n    therefore adjusting the duration of the task.<p>The effect of this behavior is controlled by the script include that handles the appropriate\n        event. The default value for this property is <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"bFlag","type":"Boolean","description":"<span class=\"ph uicontrol\">True</span> to enable the element's start date to be adjusted;\n                  <span class=\"ph uicontrol\">false</span> otherwise."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setAllowXDragRight","description":"Sets a flag that determines whether the element's end date can be dragged left or right\n    therefore adjusting the duration of the task.<p>The effect of this behavior is controlled by the script include that handles the appropriate\n        event. The default value for this property is <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"bFlag","type":"Boolean","description":"<span class=\"ph uicontrol\">True</span> to enable the element's end date to be adjusted;\n                  <span class=\"ph uicontrol\">false</span> otherwise."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setAllowXMove","description":"Sets a flag that determines whether the element can be moved to start at a different\n    time.<p>The effect of this behavior is controlled by the script include that handles the appropriate event. The default value for this property is false.</p>","params":[{"name":"bFlag","type":"Boolean","description":"<span class=\"ph uicontrol\">True</span> to enable the element to be moved horizontally;\n                  <span class=\"ph uicontrol\">false</span> otherwise."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setAllowYMove","description":"Sets a flag that determines whether the element can be dragged vertically on the\n    timeline.<p>The effect of this behavior is controlled by the script include that handles the appropriate\n        event. The default value for this property is <span class=\"ph uicontrol\">false</span>.</p>","params":[{"name":"bFlag","type":"Boolean","description":"<span class=\"ph uicontrol\">True</span> to enable the element to be moved vertically;\n                  <span class=\"ph uicontrol\">false</span> otherwise."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setAllowYMovePredecessor","description":"Sets a flag that determines whether a dashed relationship line can be drawn from this\n    element interactively on the timeline.<p>The effect of this behavior is controlled by the script include that handles the appropriate event. The default value for this property is false.</p>","params":[{"name":"bFlag","type":"Boolean","description":"<span class=\"ph uicontrol\">True</span> to enable a relationship line to be drawn from this\n                element; <span class=\"ph uicontrol\">false</span> otherwise."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setInnerSegmentClass","description":"Specifies the name of the class to use for stylizing the inner segment if it exists.<p>The default value is <span class=\"ph uicontrol\">green</span>.</p>","params":[{"name":"styleClass","type":"String","description":"One of the following values: <span class=\"ph uicontrol\">green</span>,\n                  <span class=\"ph uicontrol\">blue</span>, or <span class=\"ph uicontrol\">silver</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setInnerSegmentTimeSpan","description":"Creates an inner segment to show within the current timespan defined by the range specified.","params":[{"name":"startTimeMs","type":"Number","description":"The start time in milliseconds."},{"name":"endTimeMs","type":"Number","description":"The end time in milliseconds."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setPointIconClass","description":"Sets the icon class to use for displaying the current element on the timeline if the current instance has zero duration.<p><span class=\"notetitle\">Note:</span> This only affects the current <span class=\"keyword apiname\">TimelineSpan</span> object and will take\n        precedence over the <span class=\"keyword apiname\">defaultPointIconClass</span> specified by the\n          <span class=\"keyword apiname\">GlideTimeline</span>.</p>","params":[{"name":"iconClassName","type":"String","description":"String that specifies one of the following values: <ul class=\"ul\">\n                  <li class=\"li\"><samp class=\"ph codeph\">milestone</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">blue_square </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">sepia_square </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">green_square</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">red_square </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">black_square</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">blue_circle</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">sepia_circle </samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">green_circle</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">red_circle</samp></li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">black_circle </samp></li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSpanColor","description":"Sets the color for displaying this span.","params":[{"name":"strColor","type":"String","description":"The HTML color name for the color of this span."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSpanText","description":"Sets the text to display adjacent to the time element.<p><span class=\"notetitle\">Note:</span> This text will only be displayed if the <span class=\"keyword apiname\">GlideTimeline</span> object has\n        enabled timeline text via<samp class=\"ph codeph\"> glideTimeline.showTimelineText(true).</samp></p>","params":[{"name":"strSpanText","type":"String","description":"The text to display next to the time element."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTimeSpan","description":"Sets the start and end dates for the current span.","params":[{"name":"nStartTime","type":"Number","description":"The start time in milliseconds."},{"name":"nEndTimeMs","type":"Number","description":"The end time in milliseconds."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTimeSpan","description":"Sets the start and end times for the current span.","params":[{"name":"strStartTime","type":"String","description":"The start time in milliseconds."},{"name":"strEndTimeMs","type":"String","description":"The end time in milliseconds."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTooltip","description":"Sets the text to display in the tooltip when the <span class=\"keyword apiname\">TimelinSpan</span> element\n    is being hovered over.<p><span class=\"notetitle\">Note:</span> You can specify valid HTML in the string that sets the tooltip.</p>","params":[{"name":"strTooltipText","type":"String","description":"The text to display in the tooltip."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"UPSHandler":{"meta":{"has_constructor":false,"description":"Handles SNMP classification and identification for UPSs. Use this API for SNMP-related discovery.","example":""},"properties":{},"methods":[{"name":"classifyAndIdentify","description":"Classifies and identifies the UPSs.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"UserSkillAnalyzer":{"meta":{"has_constructor":true,"description":"Analyzes user skills against skills required to complete work items. Requires the <span class=\"ph\">Skills Management</span>\n      plugin (com.snc.skills_management), which you can activate if you have the admin role.<br/><br/>See <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/skills-management/task/assign-work-based-on-skills.html\" target=\"_blank\">Qualify and rank users based on skills\n        and skill levels</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new UserSkillAnalyzer object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"\nvar userSkillAnalyzer = new SNC.UserSkillAnalyzer();","description":"","output":""}]},{"name":"analyzeUserByID","description":"Analyzes user skills against the required skills and sets the number of matching\n    skills, skill level gap, and qualification that can be collected from an instance.<p>Analyzes whether an agent is qualified to work on a task by verifying if the agent has the\n        skills and skill levels required to complete the task. If an agent is qualified to work on a\n        task, the API analyzes the level gap between required skills and user's skill level which\n        can be further used by the application to choose the best agent based on level gap. It also\n        analyzes the total number of skills with and without skill levels the agent has to execute\n        that task.</p>","params":[{"name":"requiredSkillsJson","type":"String","description":"List of required skills to compare with user.<div class=\"p\">Each skill is listed as a JSON\n                  entry in the following format:<ul class=\"ul\" id=\"analyzeUserById_S_S_B__ul_q2f_xsw_33b\">\n                    <li class=\"li\">sys_id: String. Sys ID of skill from the Skills [cmn_skill] table.</li>\n\n                    <li class=\"li\">is_mandatory: Boolean. Flag that indicates whether the skill is\n                      mandatory.</li>\n\n                    <li class=\"li\">level: String. Sys ID from the Skill Levels [cmn_skill_level] table.</li>\n\n                  </ul>\n</div>"},{"name":"userID","type":"String","description":"Sys ID from the User [sys_user] table."},{"name":"isSkillLevelEnforced","type":"Boolean","description":"True if user must have a minimum skill level for all required mandatory skills,\n                false otherwise. Default: false."}],"returns":{"type":"String","description":"JSON that contains all the required information about the user based on the\n                analyzer skills map as follows:<ul class=\"ul\" id=\"analyzeUserById_S_S_B__d716e116\">\n                  <li class=\"li\">sys_id: String. Sys ID from the User [sys_user] table.</li>\n\n                  <li class=\"li\">is_qualified: Boolean. Flag that indicates whether the user is qualified for\n                    the required skills. <ul class=\"ul\" id=\"analyzeUserById_S_S_B__d716e123\">\n                      <li class=\"li\">True if user has all the mandatory skills and skill level is\n                        enforced.</li>\n\n                      <li class=\"li\">False if user does not have all mandatory skills or does not meet level\n                        requirements.</li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">num_skills: Number. Skills matched against the required skills.</li>\n\n                  <li class=\"li\">num_skills_matching_level: Number. User skills matching the required skill\n                    level.</li>\n\n                  <li class=\"li\">total_skill_level_gap: Number. Skill level gap helps ranking algorithm find\n                    optimal user meeting minimum skill level requirements. Calculated based on\n                    overall gap between task skill level and user skill level. User must have\n                    required skill level for mandatory skills.</li>\n\n                  <li class=\"li\">optional_skill_level_gap: Number. Provides skill level gap for optional skills\n                    only. Assists the end points in distinguishing between total skill level and\n                    optional skill level gap.</li>\n\n                </ul>\n<p class=\"p\">Error if inaccurate parameters or malformed JSON provided.</p>"},"example":[{"code":"var skills = [{\"sys_id\":\"48c9f873c0a8018b65c3814608b201e6\", \"is_mandatory\": true, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"},\n\t\t\t  {\"sys_id\":\"48c9fdddc0a8018b04bd8d7914c82c9d\", \"is_mandatory\": false, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"}];\nvar userSysID = \"a8f98bb0eb32010045e1a5115206fe3a\";\nvar userSkillAnalyzer = new SNC.UserSkillAnalyzer();\nvar result = userSkillAnalyzer.analyzeUserById(JSON.stringify(skills), userSysID, true);\ngs.info('Results: ' + result);","description":"","output":"Calling user analyzer\n*** Script: Results: {&quot;sys_id&quot;:&quot;a8f98bb0eb32010045e1a5115206fe3a&quot;,&quot;is_qualified&quot;:false,&quot;num_skills&quot;:0,&quot;num_skills_matching_level&quot;:0,&quot;total_skill_level_gap&quot;:0,&quot;optional_skill_level_gap&quot;:0}"}]},{"name":"analyzeUserBySkills","description":"Analyzes user skills against the required skills and sets the number of matching\n    skills, skill-level gap, and qualification that can be collected from an instance.","params":[{"name":"requiredSkillsJson","type":"String","description":"List of required skills to qualify the users against.<div class=\"p\">Each skill is listed as\n                  a JSON entry in the following format:<ul class=\"ul\" id=\"USA-analyzeUserById_S_S_B__ul_imx_vsw_33b\">\n                    <li class=\"li\">sys_id: String. Sys ID of skill from the Skills [cmn_skill] table.</li>\n\n                    <li class=\"li\">is_mandatory: Boolean. Flag that indicates whether the skill is\n                      mandatory.</li>\n\n                    <li class=\"li\">level: String. Sys ID from the Skill Levels [cmn_skill_level] table.</li>\n\n                  </ul>\n</div>"},{"name":"userSkillsJson","type":"String","description":"List of user skills to determine qualification for required skills.<div class=\"p\">Each\n                  skill is listed as a JSON entry in the following format:<ul class=\"ul\" id=\"USA-analyzeUserById_S_S_B__ul_kj3_h1c_j3b\">\n                    <li class=\"li\">sys_id: String. Sys ID of skill from the Skills [cmn_skill] table.</li>\n\n                    <li class=\"li\">is_mandatory: Boolean. Flag that indicates whether the skill is\n                      mandatory.</li>\n\n                    <li class=\"li\">level: String. Sys ID from the Skill Levels [cmn_skill_level] table.</li>\n\n                  </ul>\n</div>"},{"name":"isSkillLevelEnforced","type":"Boolean","description":"True if user must have minimum skill level for all required mandatory skills,\n                false otherwise. Default: false."}],"returns":{"type":"String","description":"JSON that contains all the required information about the user based on the\n                analyzer skills map as follows:<ul class=\"ul\" id=\"USA-analyzeUserById_S_S_B__d716e116\">\n                  <li class=\"li\">sys_id: String. Sys ID from the User [sys_user] table.</li>\n\n                  <li class=\"li\">is_qualified: Boolean. Flag that indicates whether the user is qualified for\n                    the required skills. <ul class=\"ul\" id=\"USA-analyzeUserById_S_S_B__d716e123\">\n                      <li class=\"li\">True if user has all the mandatory skills and skill level is\n                        enforced.</li>\n\n                      <li class=\"li\">False if user does not have all mandatory skills or does not meet level\n                        requirements.</li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">num_skills: Number. Skills matched against the required skills.</li>\n\n                  <li class=\"li\">num_skills_matching_level: Number. User skills matching the required skill\n                    level.</li>\n\n                  <li class=\"li\">total_skill_level_gap: Number. Skill level gap helps ranking algorithm find\n                    optimal user meeting minimum skill level requirements. Calculated based on\n                    overall gap between task skill level and user skill level. User must have\n                    required skill level for mandatory skills.</li>\n\n                  <li class=\"li\">optional_skill_level_gap: Number. Provides skill level gap for optional skills\n                    only. Assists the end points in distinguishing between total skill level and\n                    optional skill level gap.</li>\n\n                </ul>\n<p class=\"p\">Error if inaccurate parameters or malformed JSON provided.</p>"},"example":[{"code":"var skills = [{\"sys_id\":\"48c9f873c0a8018b65c3814608b201e6\", \"is_mandatory\": true, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"},\n\t\t\t\t{\"sys_id\":\"48c9fdddc0a8018b04bd8d7914c82c9d\", \"is_mandatory\": false, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"}];\nvar userSkills = [{\"sys_id\":\"48c9f873c0a8018b65c3814608b201e6\", \"is_mandatory\": true, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"},\n\t\t    {\"sys_id\":\"k, th\", \"is_mandatory\": false, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"}];\nvar userSkillAnalyzer = new SNC.UserSkillAnalyzer();\nvar result = userSkillAnalyzer.analyzeUserBySkills(JSON.stringify(skills), JSON.stringify(userSkills));\ngs.info('Results: ' + result);","description":"","output":""}]}]},"UserSkillRanking":{"meta":{"has_constructor":true,"description":"Used  to configure options for choosing the right user and getting a sorted list of\n    qualified users based on number of matching skills and skill-level gap. Requires the <span class=\"ph\">Skills Management</span>\n      plugin (com.snc.skills_management), which you can activate if you have the admin role.<br/><br/>See <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/skills-management/task/assign-work-based-on-skills.html\" target=\"_blank\">Qualify and rank users based on skills and skill levels</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a UserSkillRanking object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getQualifiedRankedUsers","description":"Provides a list of qualified users based on matching mandatory skills and levels if the\n      <samp class=\"ph codeph\">isSkillLevelEnforced</samp> parameter is true).","params":[{"name":"requiredSkillsJson","type":"String","description":"List of required skills to qualify users.<div class=\"p\">Each skill is listed as a JSON\n                  entry in the following format: <ul class=\"ul\" id=\"SR-getQualifiedRankedUsers_S_S_S_B__ul_qrj_c5w_33b\">\n                    <li class=\"li\">sys_id: String. Sys ID of skill from the Skills [cmn_skill] table.</li>\n\n                    <li class=\"li\">is_mandatory: Boolean. Flag that indicates whether the skill is\n                      mandatory.</li>\n\n                    <li class=\"li\">level: String. Sys ID from the Skill Levels [cmn_skill_level] table.</li>\n\n                  </ul>\n</div>"},{"name":"usersJson","type":"String","description":"List of user Sys IDs from sys_user table (in JSON format) representing users to\n                be qualified against required skills."},{"name":"rankType","type":"String","description":"<p class=\"p\">Enables sorting qualified users based on ranking type. Possible values are\n                  comparators to provide sorted list of qualified users based on number of matching\n                  skills and skill level gap:</p>\n\n                <div class=\"p\">\n                  <ul class=\"ul\" id=\"SR-getQualifiedRankedUsers_S_S_S_B__ul_rw2_byz_vhb\">\n                    <li class=\"li\">NO_RANKING (default) – Used if empty value provided.</li>\n\n                    <li class=\"li\">NUM_SKILLS – Number of skills matched against required skills.</li>\n\n                    <li class=\"li\">NUM_SKILL_ MATCHING_LEVEL – Number of user skills matching the required\n                      skill level.</li>\n\n                    <li class=\"li\">LEAST_SKILL_ LEVEL_GAP – Finds user skill that most closely meets minimum\n                      skill level requirements.</li>\n\n                    <li class=\"li\">MOST_SKILL_ LEVEL_GAP – Finds user that least meets minimum skill level\n                      requirements.</li>\n\n                    <li class=\"li\">BEST_OPTIMUM_ USER – Finds optimum user for all skill levels.</li>\n\n                  </ul>\n\n                </div>"},{"name":"isSkillLevelEnforced","type":"Boolean","description":"True if user must have minimum skill level for all required mandatory skills,\n                false otherwise. Default: false."}],"returns":{"type":"String","description":"List of qualified users as JSON.<p class=\"p\">Error if inaccurate parameters or malformed\n                  JSON provided.</p>"},"example":[{"code":"var skills = [{\"sys_id\":\"48c9f873c0a8018b65c3814608b201e6\", \"is_mandatory\": true, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4e\"},\n\t\t\t\t{\"sys_id\":\"48c9fdddc0a8018b04bd8d7914c82c9d\", \"is_mandatory\": false, \"level\":\"4e0ac4d6b3332300290ea943c6a8dc4eS\"}];\nvar users = [\"a8f98bb0eb32010045e1a5115206fe3a\", \"62826bf03710200044e0bfc8bcbe5df1\"];\nvar userSkillRanking = new SNC.UserSkillRanking();\nvar qualifiedUsers = userSkillRanking.getQualifiedRankedUsers(JSON.stringify(skills), JSON.stringify(users), \"BEST_OPTIMUM_USER\", true);","description":"","output":""}]}]},"VMUtils":{"meta":{"has_constructor":false,"description":"Provides utility functions for discovery and provisioning of virtual\n  machines. The <span class=\"keyword apiname\">VMUtils</span> class is available in server-side scripts to convert between\n   UUID and Correlation ID formats.","example":""},"properties":{},"methods":[{"name":"turnCorrelationIdToUuid","description":"Converts a correlation ID into a UUID for a virtual machine in the ServiceNow\n    system.","params":[{"name":"correlationId","type":"String","description":"The correlation ID to convert"}],"returns":{"type":"String","description":"The UUID, or an empty string if invalid."},"example":[{"code":"var vmu = new VMUtils();\ngs.print(vmu.turnCorrelationIdToUuid('42 10 82 82 62 35 ca 68-b5 1c 1e f8 5c 0a 0d 5b'));","description":"","output":""}]},{"name":"turnUuidToCorrelationId","description":"Converts a WMware universal unique identifier (UUID) to a format that matches the\n    original format in the ServiceNow system.<p>vCenter works with UUIDs where the ESXi Linux console worked with this format.</p>","params":[{"name":"uuid","type":"String","description":"The UUID to convert."}],"returns":{"type":"String","description":"The identifier converted to the ServiceNow format."},"example":[{"code":"var vmu = new VMUtils();\nvmu.turnUuidToCorrelationId('13eb78d0-d504-11e1-9b23-0800200c9a66');","description":"","output":""}]}]},"WalkWorkflow":{"meta":{"has_constructor":true,"description":"Walks the workflow and gets the list of successors for each activity along with a\n    shortest path order that indicates the activity depth in the workflow. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor for <span class=\"ph uicontrol\">Walkworkflow</span> class.","params":[{"name":"workflowVersion","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> on table wf_workflow_version of the workflow\n                version to analyze."}],"returns":{"type":"Workflow","description":"Workflow object just created."},"example":[]},{"name":"computeFullSequences","description":"Computes the full sequence for every path.<p>Does not combine paths at Join activities. After calling this method,  call\n          <span class=\"keyword apiname\">getSequences()</span> to yield the computed sequences.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"computeSequences","description":"Computes the sequences of activities.<p>All sequences leading up to a join end at the join and then a single sequence from the join is\n        computed. This ensures that all sequences can be walked up to a join, and then the sequence\n        can be walked from the join. After calling this method a call to\n          <span class=\"keyword apiname\">getSequences()</span> will yield the computed sequences.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"dump","description":"Outputs the internal state of this class to <span class=\"keyword apiname\">gs.print()</span>.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"dumpSequences","description":"Outputs the sequences internal to this class to\n    <span class=\"keyword apiname\">gs.print()</span>.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"dumpShortestPathOrders","description":"Outputs the shortest path orders internal to this object to\n    <span class=\"keyword apiname\">gs.print()</span>.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getActivitiesAtOrder","description":"Returns all the activities at the specified shortest path order.","params":[{"name":"order","type":"Number","description":"The order number the client is interested in."}],"returns":{"type":"String Array","description":"An array of activity sys_ids at the specified order. If an empty array is returned, there are no more activities."},"example":[]},{"name":"getSequences","description":"Returns the activity sequences.<p>The <span class=\"keyword apiname\">walk()</span> method must have been called prior to calling this method.</p>","params":[],"returns":{"type":"String","description":"A string of |-delimited sequences. Each sequence is a comma-delimited list of activity ids (table wf_workflow_activity)."},"example":[]},{"name":"walk","description":"Walks the workflow and sets up the activity shortest path ordering.<p>After calling this method the client would call the various accessor methods to obtain relevant data about the workflow.</p>","params":[{"name":"fullSequences","type":"Boolean","description":"(Optional) If <span class=\"ph uicontrol\">true</span>, computes the full sequences. Default\n                is false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"WFActivityHandler":{"meta":{"has_constructor":false,"description":"The base class for all workflow activities. As the base class for all workflow activities, this code always executes as part of an activity.<br/><br/>When developing your own workflow activities, create your script object by deriving from this\n      class and overriding methods as necessary to get the functionality you want. Client code must\n      override method <span class=\"keyword apiname\">onExecute()</span> to perform meaningful activity processing.","example":""},"properties":{},"methods":[{"name":"debug","description":"Logs a debug message.","params":[{"name":"msg","type":"String","description":"Message to send to the log."},{"name":"args","type":"Array","description":"Array of values to send to the log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"debug","description":"Logs a debug message.","params":[{"name":"msg","type":"String","description":"Message to send to the log."},{"name":"args","type":"String","description":"String to send to the log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"generate","description":"Handles pre-generation of tasks and approvals (and other objects as needed).<p>Allows objects to be generated at the start of a workflow in a <span class=\"ph uicontrol\">pending</span>\n        state and not requested until the workflow gets to the activity, thereby providing a preview\n        of the work to be done in the future. To pre-generate objects, an activity's\n          <span class=\"keyword apiname\">_generate()</span> method is called. This method typically returns a\n        pre-generation object that is saved in the workflow scratchpad. (For example, the object\n        might be an array of approval ids that were generated.) When the activity runs\n          <span class=\"keyword apiname\">onExecute</span> it may request the pre-generation object and determine if the\n        approvals have already been created in a pending state or if it needs to create the\n        approvals in the <span class=\"keyword apiname\">onExecute</span> method. Internal method\n          <span class=\"keyword apiname\">_generate</span> needs to be overridden and needs to return an object with\n        information that it can retrieve later on when the activity's onExecute() method is called.\n        The object must contain a <span class=\"keyword parmname\">duration</span> property that contains the duration\n        of the task(s) or approval(s) that were generated by the activity. See activity\n          <span class=\"keyword parmname\">Generate</span> for example usage.</p>","params":[{"name":"activityId","type":"String","description":"sys_id of this running activity (table wf_activity)."},{"name":"order","type":"String","description":"The order number associated with the task or approval."},{"name":"startAtDspValue","type":"GlideDateTime","description":"The starting time for the task or approval"},{"name":"noCreateFlag","type":"Boolean","description":""}],"returns":{"type":"Number","description":"The <span class=\"keyword parmname\">duration</span> property of the <span class=\"keyword apiname\">_generate</span> return value\n              is returned by this method.."},"example":[]},{"name":"info","description":"Logs an information message.","params":[{"name":"msg","type":"String","description":"Message to send to the log."},{"name":"args","type":"Array","description":"Array of values to send to the log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"info","description":"Logs an information message.","params":[{"name":"msg","type":"String","description":"Message to send to the log."},{"name":"args","type":"String","description":"String to send to the log."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"js","description":"Evaluates activity variables in the script.<p>Used to evaluate strings that contain el such as <samp class=\"ph codeph\">${some script}</samp> or strings\n        starting with <samp class=\"ph codeph\">javascript:</samp>. See almost any existing activity for example\n        usage.</p>","params":[{"name":"str","type":"String","description":"String that possibly contains embeded el."}],"returns":{"type":"String","description":"The evaluated string."},"example":[]},{"name":"onCancel","description":"Event handler for <span class=\"keyword parmname\">cancel</span> event.<p>The base class for the activity script sets this activity to be cancelled. Derived classes\n        (activities) can override this method if additional processing is required to cancel this\n        activity. Activity <span class=\"keyword parmname\">Manual Approvals</span> is an example of overriding this\n        method to perform additional processing to cancel this activity.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"onExecute","description":"Virtual method. Activity subclasses must override this method to perform work appropriate to the activity.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"runScript","description":"Enables activities to run a script contained in an activity variable of type script.<p>Example activities that use this method include If, <span class=\"keyword parmname\">Wait for condition</span>, and\n          <span class=\"keyword parmname\">Approval - User</span>.</p>","params":[{"name":"script","type":"String","description":"String containing valid Javascript."}],"returns":{"type":"variable","description":"If the script set the workflow variable <var class=\"keyword varname\">answer</var> then this value is\n              returned. If not, then the result of the script execution is returned."},"example":[]},{"name":"setActivityOutput","description":"Sets the activity output property.<p>See activity <span class=\"keyword parmname\">SOAP Message</span>.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setResultFailed","description":"Sets the activity result as failed with an optional reason string.<p>See Activity <span class=\"keyword parmname\">SOAP Message</span>.</p>","params":[{"name":"reason","type":"String","description":"(Optional) Description of the reason this activity failed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setResultSucceeded","description":"Sets the result of this activity as successful.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"warn","description":"Logs a warning message.","params":[{"name":"msg","type":"String","description":"Message to send to the log."},{"name":"args","type":"Array","description":"Array of values to send to the log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"warn","description":"Logs a warning message.","params":[{"name":"msg","type":"String","description":"Message to send to the log."},{"name":"args","type":"String","description":"String to send to the log"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"WindowsOSNameHelper":{"meta":{"has_constructor":false,"description":"Handles the formatting of Windows OS names. Use in any server-side discovery scripts where you need to format OS names.","example":""},"properties":{},"methods":[{"name":"formatWindowsOSName","description":"Formats the given Windows OS name.","params":[{"name":"name","type":"String","description":"The name to format"}],"returns":{"type":"String","description":"The formatted name"},"example":[]},{"name":"makeOSChoiceValid","description":"Ensures that the OS choice is valid.","params":[{"name":"value","type":"String","description":"The value to validate"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"osCleanupName","description":"Cleans up the specified Windows OS name by stripping out incorrect characters,\n    incorrect capitalization, extra spaces, or trailing spaces.","params":[{"name":"name","type":"String","description":"The name to clean up."}],"returns":{"type":"String","description":"The cleaned up name"},"example":[]}]},"Workflow":{"meta":{"has_constructor":true,"description":"Workflow scripts provide an interface with the workflow engine. Use these methods to manipulate workflows.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor for <span class=\"keyword apiname\">Workflow</span> class.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var w = new Workflow();","description":"","output":""}]},{"name":"broadcastEvent","description":"Sends the specified event (message) into the workflow context to pass along to the\n    executing activities.<p>Typical use of this method is to enable activities that wait for some action to occur\n        before proceeding. For additional information on using <span class=\"keyword apiname\">broadcastEvent</span>,\n        refer to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/administer/workflow-administration/reference/r_WorkflowEventSpecificFunctions.html\" target=\"_blank\">Workflow event-specific\n          functions</a>.</p><p>For a list of the available OOB events, refer to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/administer/workflow-administration/reference/r_WorkflowEventsInTheBaseSystem.html\" target=\"_blank\">Workflow events in the base\n            system</a>.</p>","params":[{"name":"contextId","type":"String","description":"The context ID."},{"name":"eventName","type":"String","description":"The name of the event."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//where current is a task record with a workflow context\n      var wf = new Workflow().getRunningFlows(current);\n      while(wf.next()) {     \n          new Workflow().broadcastEvent(wf.sys_id, 'resume');\n      }","description":"","output":""}]},{"name":"cancel","description":"Cancels all running workflows on this record by broadcasting the\n      <span class=\"keyword parmname\">cancel</span> event to activities in all running workflows on this\n    record.","params":[{"name":"record","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> on any table. All workflows running on this\n                record will be cancelled."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//get workflow helper\n      var workflow = new Workflow();\n      //cancel all the workflows, where current is a task record with a workflow context\n      workflow.cancel(current);\n      gs.addInfoMessage(gs.getMessage(\"Workflows for {0} have been cancelled\", current.getDisplayValue()));","description":"","output":""}]},{"name":"cancelContext","description":"Cancels this running context by broadcasting a <span class=\"keyword parmname\">cancel</span> event to\n    activities in this workflow context.","params":[{"name":"context","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> of the running context to cancel."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// If a workflow has started for this item, cancel it, where current is a task record with a workflow context\n      if ((current.stage == 'Request Cancelled') &amp;&amp; current.context \n          &amp;&amp; !current.context.nil()) {\n      var w = new Workflow();\n      var gr = new GlideRecord('wf_context');\n      \n      if (gr.get(current.context)) \n          w.cancelContext(gr);\n      }","description":"","output":""}]},{"name":"deleteWorkflow","description":"Deletes all the workflows on the record.","params":[{"name":"current","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> for which the caller wants to delete all\n                workflows. This can be any record on any table."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//where current is a task record with a workflow context\n      var wkfw = new Workflow();\n      wkfw.deleteWorkflow(current);\n    ","description":"","output":""}]},{"name":"fireEvent","description":"Fires the named event on the input record.<p>Used in Activities<span class=\"ph uicontrol\"> Approval Coordinator</span>,\n          <span class=\"ph uicontrol\">Timer</span>, <span class=\"ph uicontrol\">Lock</span>, and some others.</p>","params":[{"name":"eventRecord","type":"GlideRecord","description":"The event record."},{"name":"eventName","type":"String","description":"The name of the event to send to the executing workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"////where current is a task record with a workflow context\n      var w = new Workflow(); \n      w.fireEvent(current, 'execute');","description":"","output":""}]},{"name":"fireEventById","description":"Fires the named event on the record specified by record ID.<p>Used in Activities <span class=\"ph uicontrol\"> Approval Coordinator</span>,\n          <span class=\"ph uicontrol\">Timer</span>, <span class=\"ph uicontrol\">Lock</span>, and some others.</p>","params":[{"name":"eventRecordId","type":"String","description":"The sys_id of the glide record."},{"name":"eventName","type":"String","description":"The name of the event to send to the executing workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var wkfw = new Workflow();\n      wkfw.fireEventById('f2400ec10b0a3c1c00ca5bb5c6fae427','Timer');","description":"","output":""}]},{"name":"getContexts","description":"Gets all workflow contexts for the input record.<p>The input record is any record on any table for which the caller wants the running workflow\n        contexts.</p>","params":[{"name":"record","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> for which the caller wants a list of all\n                workflow contexts ."}],"returns":{"type":"GlideRecord","description":"GlideRecord on table wf_context filtered for all\n                workflow contexts for the input record (in any state, e.g. running, cancelled,\n                finished)."},"example":[{"code":"//where current is a task record with a workflow context\n      var wkfw = new Workflow();\n      gs.print(wkfw.getContexts(current).started);","description":"","output":""}]},{"name":"getEstimatedDeliveryTime","description":"Gets the estimated time for a workflow to complete.","params":[{"name":"workflowId","type":"String","description":"Sys_id of the workflow (table wf_workflow) to get the estimated run\n                time."}],"returns":{"type":"String","description":"Display value from a GlideDuration (e.g., 3 days), or blank if unknown."},"example":[{"code":"var wkfw = new Workflow();\n      gs.print(wkfw.getEstimatedDeliveryTime('b99a866a4a3623120074c033e005418f'));","description":"","output":"2 Days"}]},{"name":"getEstimatedDeliveryTimeFromWFVersion","description":"Get the estimated elapsed execution time for the workflow version.","params":[{"name":"wfVersion","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> on table wf_workflow_version of a specific\n                workflow version for which the caller wants the estimated during of\n                executing."}],"returns":{"type":"String","description":"Display value from a GlideDuration (e.g., 3 days),\n                or blank if unknown."},"example":[{"code":"//where current is a task record with a workflow context\n      var wkfw = new Workflow();\n      var context = wkfw.getContexts(current);\n      gs.print(wkfw.getEstimatedDeliveryTimeFromWFVersion(context.wf_version));","description":"","output":""}]},{"name":"getReturnValue","description":"Gets the appropriate workflow return value for the input workflow ID. \n    This is either the workflow checked out by the current user or the published workflow with the most recent date.<p>This is either the workflow checked out by the current user or the published workflow with\n        the most recent date. This method is available starting with the Fuji release.</p>","params":[{"name":"workflowID","type":"String","description":"The sys_id of the workflow (table wf_workflow)"},{"name":"amount","type":"Number","description":"amount"},{"name":"result","type":"Boolean","description":"<span class=\"ph uicontrol\">True</span>, if true"}],"returns":{"type":"???","description":"The return value of the workflow as specified by the Return Value activity.\n                Workflows without a Return Value activity return a null value."},"example":[{"code":"var wkfw = new Workflow();\n      wkfw.getReturnValue('context');","description":"","output":""}]},{"name":"getRunningFlows","description":"Gets all the currently running workflow contexts for the input record.<p>The input record is any record on any table for which the caller wants the running workflow\n        contexts.</p>","params":[{"name":"record","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> of the record for which the caller wants a list\n                of all running workflows."}],"returns":{"type":"GlideRecord","description":"GlideRecord on table wf_context and filtered for all executing workflow\n                contexts."},"example":[{"code":"//where current is a task record with a workflow context\n      var wf = new Workflow().getRunningFlows(current);\n      while(wf.next()) {     \n          new Workflow().broadcastEvent(wf.sys_id, 'pause');\n      }","description":"","output":""}]},{"name":"getVersion","description":"Gets the appropriate workflow version for the input workflow ID.  \n    This is either the workflow checked out by the current user or the published workflow with the most recent date.<p>This is either the workflow checked out by the current user or the published workflow with\n        the most recent date.</p>","params":[{"name":"workflowID","type":"String","description":"The sys_id of the workflow (table wf_workflow)"}],"returns":{"type":"none","description":" "},"example":[{"code":"var wkfw = new Workflow();\n      wkfw.getVersion('b99a866a4a3623120074c033e005418f');","description":"","output":""}]},{"name":"getVersionFromName","description":"Returns the appropriate workflow version for the input workflow name.<p>See <span class=\"keyword apiname\">getVersion()</span> for more information.</p>","params":[{"name":"workflowName","type":"String","description":"Name of the workflow (table wf_workflow)"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var wkfw = new Workflow();\n      wkfw.getVersionFromName('Emergency Change');","description":"","output":""}]},{"name":"getWorkflowFromName","description":"Returns the sys_id of the workflow associated with the specified workflow\n    name.","params":[{"name":"workflowName","type":"String","description":"Name of the workflow."}],"returns":{"type":"String","description":"The sys_id of the workflow associated with the passed in name."},"example":[{"code":"var wflw = new Workflow();\n      gs.print(wflw.getWorkflowFromName('Emergency Change'));","description":"","output":""}]},{"name":"hasWorkflow","description":"Determines if a specified record has any workflow contexts associated to it.<p>This includes running and completed workflow contexts.</p>","params":[{"name":"record","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> under scrutiny. This\n                  <span class=\"keyword apiname\">GlideRecord</span> can be from any table."}],"returns":{"type":"Boolean","description":"True, if record has associated workflow; otherwise, returns False."},"example":[{"code":"var wkfw = new Workflow();\n      gs.print(wkfw.hasWorkflow('f2400ec10b0a3c1c00ca5bb5c6fae427'));","description":"","output":"false"}]},{"name":"restartWorkflow","description":"Recalculates the approvals and tasks for a workflow by adding new approvals and tasks\n    while not resetting current approvals and tasks.<p>Use this script to add an additional company to a change request, without reseting current\n        approvals for companies already in the workflow.</p>","params":[{"name":"current","type":"GlideRecord","description":"<span class=\"keyword apiname\">GlideRecord</span> of the record this workflow is executing. This\n                can by any record on any table."},{"name":"maintainStateFlag","type":"Boolean","description":"If <span class=\"ph uicontrol\">True</span>, maintains all approvals and tasks in their\n                current state."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//mark all existing approvals for the change as 'cancelled' and restart the workflow to create new approvals\n      //where current is a task record with a workflow context\n      new WorkflowApprovalUtils().cancelAll(current, comment);\n      new Workflow().restartWorkflow(current);\n    ","description":"","output":""}]},{"name":"runFlows","description":"Runs all workflows for a given record in a given table and its descendant tables.\n    Sample usage can be seen in the Script Includes \"SNC - Run parent workflows\", and \"SNC - Run parent workflows (Approval)\".","params":[{"name":"record","type":"GlideRecord","description":"The record to run workflows against."},{"name":"operation","type":"String","description":"Database operation. One of <span class=\"ph uicontrol\">insert</span>,\n                  <span class=\"ph uicontrol\">update</span>, <span class=\"ph uicontrol\">delete</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var wkfw = new Workflow();\n      wkfw.runFlows('f2400ec10b0a3c1c00ca5bb5c6fae427','update');","description":"","output":""}]},{"name":"startFlow","description":"Starts a specified workflow.<p>See script include WorkflowScheduler and Business Rule \"Start Workflow\" on table\n        sc_req_item for examples of use.</p>","params":[{"name":"workflowId","type":"String","description":"The sys_id of the workflow to start. This sys_id refers to table\n                wf_workflow."},{"name":"current","type":"GlideRecord","description":"The record to use as current in this workflow. This is normally from the\n                  <span class=\"keyword parmname\">Table</span> field of the workflow properties for this\n                workflow."},{"name":"operation","type":"String","description":"The operation to perform on <span class=\"keyword parmname\">current</span>. Possible values:\n                  <span class=\"ph uicontrol\">insert</span>, <span class=\"ph uicontrol\">update</span>,\n                  <span class=\"ph uicontrol\">delete</span>."},{"name":"vars","type":"Array","description":"Collection of variables to add to the workflow"}],"returns":{"type":"","description":""},"example":[{"code":"////where current is a task record with a workflow context\n      var w = new Workflow();\n      var context = w.startFlow(id, current, current.operation(), getVars());","description":"","output":""}]},{"name":"startFlowFromContextInsert","description":"Helper method for business rule <span class=\"keyword parmname\">Auto start on context</span>.","params":[{"name":"context","type":"GlideRecord","description":"GlideRecord on table wf_context of a new record (the \"current\" record in the\n                business rule)."},{"name":"operation","type":"String","description":"Database operation being performed. One of <span class=\"keyword parmname\">insert</span>,\n                  <span class=\"keyword parmname\">update</span>, <span class=\"keyword parmname\">delete</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//where current is a task record with a workflow context\n      current.name = current.workflow_version.name;\n      current.started_by.setValue(gs.userID());\n      \n      if (gs.nil(current.id)) {\n        var gr = new GlideRecord('wf_workflow_execution');\n        gr.name = current.name;\n        gr.insert();\n      \n        current.table = 'wf_workflow_execution';\n        current.id = gr.sys_id;\n      }\n      \n      var wf = new Workflow();\n      wf.startFlowFromContextInsert(current, current.operation())","description":"","output":""}]},{"name":"startFlowRetroactive","description":"Used by business rule <span class=\"keyword parmname\">Start Workflow</span> on table task_sla. This starts\n    a workflow and the extra arguments to this method are used by activity \"Timer\" to pause the\n    execution of the workflow for some duration.","params":[{"name":"workflowID","type":"String","description":"The sys_id of the workflow to start. This sys_id refers to table\n                wf_workflow."},{"name":"retroactiveMSecs","type":"Number","description":"Delay in milliseconds used by Activity <span class=\"ph uicontrol\">Timer</span>."},{"name":"current","type":"GlideRecord","description":"GlideRecord of the record to use as current in this workflow. This is normally\n                from the <span class=\"keyword parmname\">Table</span> field of the workflow properties for this\n                workflow"},{"name":"operation","type":"String","description":"Database operation being performed.One of <span class=\"keyword parmname\">insert</span>,\n                  <span class=\"keyword parmname\">update</span>, <span class=\"keyword parmname\">delete</span>."},{"name":"vars","type":"Array","description":"Collection of variables to add to the workflow."},{"name":"withSchedule","type":"???","description":"Schedule used by Activity <span class=\"ph uicontrol\">Timer</span>"}],"returns":{"type":"GlideRecord","description":"A GlideRecord on table wf_context on the inserted record for this newly\n                created workflow context."},"example":[{"code":"// is this a retroactive start?\n      ////where current is a task record with a workflow context\n      var msecs = new GlideDateTime().getNumericValue() - current.start_time.getGlideObject().getNumericValue();\n      \n      // treat this as a retroactive workflow start if the SLA started more than 5 seconds ago\n      var w = new Workflow();\n      if (msecs &lt;= 5000)\n        w.startFlow(id, current, current.operation());\n      else\n        w.startFlowRetroactive(id, msecs, current, current.operation());\n      \n      // update the record in case the workflow changed some values\n      current.update();\n      \n    ","description":"","output":""}]}]},"WorkflowDuration":{"meta":{"has_constructor":false,"description":"This class calculates the duration (in seconds) based on the variables of a workflow\n  activity. It is an interface between <span class=\"keyword apiname\">Workflow Timer()</span> and\n   <span class=\"keyword apiname\">DurationCalculator()</span>. ","example":""},"properties":{},"methods":[{"name":"addSeconds","description":"Adds the number of seconds to the specified start date/time.","params":[{"name":"record","type":"GlideRecord","description":"description"},{"name":"amount","type":"Number","description":"amount"}],"returns":{"type":"Boolean","description":"True, if object was successfully created."},"example":[]},{"name":"calculate","description":"Calculates the number of seconds and the due date.","params":[{"name":"record","type":"GlideRecord","description":"The record that contains the fields with the schedule, timezone, and date/time\n                information. This is almost always\n                <span class=\"keyword parmname\">activity.vars.__var_record__</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"calculateTimeLeft","description":"Calculates the number of seconds remaining to the specified end date/time.","params":[{"name":"record","type":"GlideRecord","description":"The record that contains the fields with the schedule, timezone, and date/time\n                information. This is almost always\n                <span class=\"keyword parmname\">activity.vars.__var_record__</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getEndDateTime","description":"Returns the end date/time set by a call to\n    <span class=\"keyword apiname\">calculate(record)</span>.","params":[],"returns":{"type":"GlideDateTime","description":"The end date/time."},"example":[]},{"name":"getSeconds","description":"Returns the seconds value that was set by a call to\n    <span class=\"keyword apiname\">calculate(record)</span>.","params":[],"returns":{"type":"Number","description":"The number of seconds set by a call to calculate(record)."},"example":[]},{"name":"getTotalSeconds","description":"Returns the totalSeconds value that was set by a call to calculate(record).","params":[],"returns":{"type":"Number","description":"The total number of seconds set by a call to calculate(record)."},"example":[]},{"name":"setEndDateTime","description":"Sets the end date/time to use when calculating the remaining time.<p>To convert the value into the GlideDateTime internal format, use\n          <span class=\"ph uicontrol\">GlideDateTime.getValue()</span>.</p>","params":[{"name":"dt","type":"GlideDateTime","description":"The end date/time to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setEndDateTime","description":"Sets the end date/time to use when calculating the remaining time.<p>To convert the value into the GlideDateTime internal format, use\n          <span class=\"keyword apiname\">GlideDateTime.getValue()</span>.</p>","params":[{"name":"dt","type":"String","description":"The end date/time to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setStartDateTime","description":"Sets the start date/time to use in the calculations.<p>To convert the value into the GlideDateTime internal format, use\n          <span class=\"keyword apiname\">GlideDateTime.getValue()</span>.</p>","params":[{"name":"dt","type":"GlideDateTime","description":"The start date/time to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setStartDateTime","description":"Sets the start date/time to use in the calculations.","params":[{"name":"dt","type":"String","description":"The start date/time to use, in GMT."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setUsedSecs","description":"Sets the <span class=\"keyword parmname\">used seconds</span> compensation, where the number of seconds is\n    the number of seconds inside of any schedule.<p>Can be a -ve number, which extends the duration.</p>","params":[{"name":"secs","type":"Number","description":"The number of used seconds to set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setWorkflow","description":"Sets the workflow schedule/timezone. \n    Used for <span class=\"keyword parmname\">schedule_type</span> \n    <span class=\"ph uicontrol\">workflow_schedule</span> and <span class=\"keyword parmname\">timezone_type</span> <span class=\"ph uicontrol\">workflow_timezone</span>).","params":[{"name":"schedule","type":"Object","description":"The schedule to use. Usually from the workflow\n                  <span class=\"keyword parmname\">context.schedule</span>."},{"name":"timezone","type":"Object","description":"The timezone to use. Usually from the workflow\n                  <span class=\"keyword parmname\">context.timezone</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"WorkflowModelManager":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">WorkflowModelManager</span> class provides a way to query the workflow\n    model, to step backwards and forwards between specified <span class=\"keyword parmname\">wf_history items</span>,\n    and to query the history for activity and transition-specific information. The interaction with the <span class=\"keyword apiname\">WorkflowModelManager</span> class is through the\n        <span class=\"keyword apiname\">ActivityHistoryRecord</span> data object. The\n        <span class=\"keyword apiname\">ActivityHistoryRecord</span> is an inner class and is only used while\n      interacting with <span class=\"keyword apiname\">WorkflowModelManager</span>.<br/><br/>To acquire the executed history of the workflow\n      activities:<pre ng-prism='' source='var model = new WorkflowModelManager(&#39;myContextId&#39;);\nvar activities = model.getExecutedHistory();\n' class='language-javascript monospaceing'></pre><br/><br/>To output the playback of the\n      workflow:<pre ng-prism='' source='var model = new WorkflowModelManager(&#39;myContextId&#39;);\nmodel.getExecutedHistory();\nmodel.playBack();\n' class='language-javascript monospaceing'></pre><br/><br/>At this time, the playBack is required to load the executed transitions. This will also play\n      a role in walking backwards on a model to rollback to a specific activity.<br/><br/>To see the details of the cached model:\n      <pre ng-prism='' source='var model = new WorkflowModelManager(&#39;myContextId&#39;);\n model.getExecutedHistory();\n model.dump();' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a new WorkflowModelManager object (constructor) within the specified\n    context.","params":[{"name":"contextId","type":"String","description":"The ID for the context in which you want the WorkflowModelManager\n                created."}],"returns":{"type":"ActivityHistoryRecord","description":"The ActivityHistoryRecord JavaScript object requested."},"example":[{"code":"var model = new WorkflowModelManager('MyContextId');","description":"","output":""}]},{"name":"getActivityHistoryRecordById","description":"Retrieves the history activity that is cached by the <span class=\"keyword parmname\">wf_history.sys_id\n    </span>provided in the argument.","params":[{"name":"haRecordSysId","type":"String","description":"The sys_id of the activity history (table wf_history)."}],"returns":{"type":"ActivityHistoryRecord","description":"The ActivityHistoryRecord JavaScript object requested."},"example":[]},{"name":"getAllTransitionedIntoActivity","description":"Retrieves the history activities that executed and transitioned into the one represented\n    by the <span class=\"keyword parmname\">sys_id</span> in the argument.<p>The <span class=\"ph uicontrol\">next</span> status is based on the <span class=\"keyword parmname\">wf_activity.sys_id</span>\n        associated with the activity represented in the haRecord existing as a TO in a transition\n        associated with any ActivityHistoryRecords that executed in the workflow's history. (This\n        differs from <span class=\"keyword apiname\">getPreviousByTransition</span>, which only returns TO transitions\n        that come before the haRecord in the execution sequence (by time).) The return value is a\n        collection of ActivityHistoryRecords that identify the argument haRecord.wfaId as their TO\n        activity. The return values are based on all transitions in the executed history collection\n        that transition To get the activity that executed prior to this activity in time use\n          <span class=\"keyword apiname\">getPreviousByExecutedOrder</span>.</p>","params":[{"name":"description","type":"Object","description":"ActivityHistoryRecord JavaScript object."}],"returns":{"type":"Object Array","description":"Array of ActivityHistoryRecord JavaScript objects."},"example":[]},{"name":"getAllTransitionedIntoActivityId","description":"Retrieves the history activities that executed and transitioned into the one represented\n    by the <span class=\"keyword parmname\">sys_id</span> in the argument. \n    The <span class=\"keyword parmname\">next</span> status is based on the <span class=\"keyword parmname\">wf_activity.sys_id</span>\n      associated with the activity represented in the haRecord existing as a TO in a transition\n      associated with any ActivityHistoryRecords that executed in the workflow's history. (This\n      differs from <span class=\"keyword apiname\">getPreviousByTransition</span>, which returns only TO transitions\n      that come before the haRecord in the execution sequence (by time).) The return value is a\n      collection of ActivityHistoryRecords that identify the argument haRecord.wfaId as their TO\n      activity.<p>The <span class=\"keyword parmname\">next</span> status is based on the <span class=\"keyword parmname\">wf_activity.sys_id</span>\n        associated with the activity represented in the haRecord existing as a TO in a transition\n        associated with any ActivityHistoryRecords that executed in the workflow's history. (This\n        differs from <span class=\"keyword apiname\">getPreviousByTransition</span>, which returns only TO transitions\n        that come before the haRecord in the execution sequence (by time).) The return value is a\n        collection of ActivityHistoryRecords that identify the argument haRecord.wfaId as their TO\n        activity.</p>","params":[{"name":"haRecordSysId","type":"String","description":"The sys_id of the activity history (table wf_history)."}],"returns":{"type":"Object Array","description":"Array of ActivityHistoryRecord JavaScript objects requested."},"example":[{"code":"var model = new WorkflowModelManager('a143585c3b001000dada82c09ccf3d44');\n      model.getExecutedHistory();\n      var activity = model.begin;\n      gs.print('activity: ' + activity.wfaName + ', transitions: ' + activity.transitions.length);\n      while( activity != null){    \n          gs.print('activity: ' + activity.wfaName + ', transitions: ' + activity.transitions.length);    \n          var parents = model.getAllTransitionedIntoActivity(activity);\n          for( var i = 0; i &lt; parents.length; i++ ){\n              gs.print(' ---------------  parent activity: ' + parents[i].wfaName );\n            }\n           activity = model.getNextByExecutedOrder( activity );\n      }\n    ","description":"","output":""}]},{"name":"getExecutedHistory","description":"This is the worker method that must be called to initialize the\n    <span class=\"keyword apiname\">WorkflowModelManager</span> object.   In the process of initializing the\n      WorkflowModelManager object, <span class=\"keyword apiname\">getExecutedHistory()</span> creates and populates\n      the <span class=\"keyword apiname\">activityHistoryRecord</span> data object array (which is a member of the\n      <span class=\"keyword apiname\">WorkflowModelManager</span> class). Most\n      <span class=\"keyword apiname\">WorkflowModelManager</span> methods return a subset of the\n      <span class=\"keyword apiname\">activityHistoryRecord</span> array. Your script can then call one or more of\n      the <span class=\"keyword apiname\">activityHistoryRecord</span> methods to accomplish further\n      work.","params":[],"returns":{"type":"String Array","description":"An ordered array of sys_ids from table wf_history. It is unlikely client code would use the\n              return value; it is kept internally to this object for use by subsequent method\n              calls."},"example":[{"code":"var model = new WorkflowModelManager('myContextId');\nvar activities = model.getExecutedHistory();\nvar current = model.getActivityHistoryRecordById('d6681d573b130000dada82c09ccf3d10');","description":"","output":""}]},{"name":"getFinalExecutedActivityIdList","description":"Gets the list of <span class=\"keyword parmname\">wf_history.sys_ids</span> of all activities that\n    successfully executed and were not rolled back or skipped up to the moment the function was\n    called.","params":[],"returns":{"type":"String Array","description":"Array of wf_history.sys_id values for executed activities."},"example":[{"code":"var model = new WorkflowModelManager('ee3e0a053b101000dada82c09ccf3d7c');\n      model.getExecutedHistory();\n      var finals = model.getFinalExecutedActivityIdList();\n      gs.print(' EXECUTION PATH IDs --------------- : '  + finals.length);\n      \n      for ( var x = 0; x &lt; finals.length; x++ ) {\n          gs.print(finals[x] );\n      }","description":"","output":""}]},{"name":"getFinalExecutedActivityList","description":"Queries the wf_history table by context and retrieves all the activities executed in the\n    workflow given by the context set in the construction of this object.<p>This function produces a list of executed activities in the exact order each activity passed\n        through the server side ActivityManager.java using the new activity_index to force the order\n        coming out of the database. On its this call will not give the full picture; it needs to\n        load and map the transitions.</p>","params":[],"returns":{"type":"Object Array","description":"Array of ActivityHistoryRecord javascript objects."},"example":[]},{"name":"getNextByExecutedOrder","description":"Retrieves the history activity that executed just after to the one provided in the\n    argument.<p>The <span class=\"keyword parmname\">next</span> status is based on the activity index reflecting the nearest prior\n        activity in time and not necessarily the nearest next wf_activity the provided activity\n        transitioned to. To get the nearest next activity that transitioned to this haRecord passed\n        in, use <span class=\"keyword apiname\">getNextByTransitionOrder( haRecord ).</span>\n        <div class=\"note note\"><span class=\"notetitle\">Note:</span> In the process of assembling the execution order array, blanks are left in the array\n          where history objects have been deleted. This is done to ensure the index in the array and\n          the activity_index of the object remain in synch. For that reason, all objects coming out\n          of the execution order array should be tested for nil() and not assumed to be the previous\n          record based on activity_index or array index value alone.</div></p>","params":[{"name":"haRecord","type":"Object","description":"ActivityHistoryRecord JavaScript object."}],"returns":{"type":"Object","description":"The ActivityHistoryRecord JavaScript object requested."},"example":[]},{"name":"getNextByExecutedOrderId","description":"Retrieves the history activity that is cached by the\n      <span class=\"keyword parmname\">wf_history.sys_id</span> provided in the argument and then calls into\n      <span class=\"keyword apiname\">getNextByExecutedOrder()</span> with the retrieved JavaScript object.","params":[{"name":"haRecordSysId","type":"String","description":"The sys_id of the activity history (table wf_history)."}],"returns":{"type":"Object","description":"The ActivityHistoryRecord JavaScript object requested."},"example":[{"code":"var model = new WorkflowModelManager('7b3e01573b130000dada82c09ccf3dcf');\n      model.getExecutedHistory();\n      var current = model.getActivityHistoryRecordById('d6681d573b130000dada82c09ccf3d10');\n      current.debugDump();\n      \n      var results = model.getNextByExecutedOrderId(current.sys_id);\n      results.debugDump();","description":"","output":""}]},{"name":"getNextByTransitionId","description":"Retrieves the history activity that executed just after to the one identified by the\n    <span class=\"keyword parmname\">sys_id</span> provided in the argument. This function retreives the cached history record associated with the provided\n      <span class=\"keyword parmname\">wf_history.sys_id</span> and then calls\n      <span class=\"keyword apiname\">getNextByTransition</span>. The return values are based on which transitions\n      came before the <span class=\"keyword parmname\">haRecord</span> submitted and not necessarily the activities\n      that executed just prior to the <span class=\"keyword parmname\">haRecord</span> in time. To get the activity\n      that executed prior to this activity in time, use\n      <span class=\"keyword apiname\">getNextByExecutedOrder</span>.<p>This function retreives the cached history record associated with the provided\n          <span class=\"keyword parmname\">wf_history.sys_id</span> and then calls\n          <span class=\"keyword apiname\">getNextByTransition</span>. The return values are based on which transitions\n        came before the <span class=\"keyword parmname\">haRecord</span> submitted and not necessarily the activities\n        that executed just prior to the <span class=\"keyword parmname\">haRecord</span> in time. To get the activity\n        that executed prior to this activity in time, use\n        <span class=\"keyword apiname\">getNextByExecutedOrder</span>.</p>","params":[{"name":"haRecordSysId","type":"String","description":"sys_id of the activity history (table wf_history)."}],"returns":{"type":"Object Array","description":"Array of ActivityHistoryRecord JavaScript objects."},"example":[{"code":"var model = new WorkflowModelManager('7b3e01573b130000dada82c09ccf3dcf');\n      model.getExecutedHistory();\n      model.playBack();\n      \n      var current = model.getActivityHistoryRecordById('d6681d573b130000dada82c09ccf3d10');\n      current.debugDump();\n      var results = model.getNextByTransitionId(current.sys_id);\n      gs.print('COMPLETED NEXT' + results.length );\n      for( var i = 0; i &lt; results.length; i++){\n          results[i].debugDump();\n      }","description":"","output":""}]},{"name":"getPreviousByExecutedOrder","description":"Retrieves the history activity that executed just previous to the one provided in the\n    argument.<p>The <span class=\"ph uicontrol\">previous</span> status is based on the activity index reflecting the nearest\n        prior activity in time and not necessarily the nearest prior activity with a valid\n        transition to this activity. To get the nearest prior activity that transitioned to this\n        haRecord passed in use <span class=\"keyword apiname\">getPreviousByTransition( haRecord)</span>. <div class=\"note note\"><span class=\"notetitle\">Note:</span> In the\n          process of assembling the execution order array, blanks are left in the array where\n          history objects have been deleted. This ensures that the index in the array and the\n          activity_index of the object remain in sync. For that reason, all objects coming out of\n          the execution order array should be tested for nil() and not assumed to be the previous\n          record based on activity_index or array index value.</div></p>","params":[{"name":"haRecord","type":"Object","description":"ActivityHistoryRecord JavaScript object"}],"returns":{"type":"Object","description":"The ActivityHistoryRecord JavaScript object requested."},"example":[]},{"name":"getPreviousByExecutedOrderId","description":"Retrieves the history activity cached by the <span class=\"keyword parmname\">wf_history.sys_id</span>\n    provided in the argument, then calls <span class=\"keyword apiname\">getPreviousByExecutedOrder()</span> with the\n    retrieved JavaScript object.","params":[{"name":"haRecordSysId","type":"String","description":"Workflow history system ID (wf_history.sys_id)"}],"returns":{"type":"ActivityHistoryRecord","description":"The ActivityHistoryRecord JavaScript object requested."},"example":[{"code":"var model = new WorkflowModelManager('contextId');\n      model.getExecutedHistory();\n      var current = model.getActivityHistoryRecordById('wf_history.sys_id');\n      current.debugDump();\n      \n      var results = model.getPreviousByExecutedOrderId(current.sys_id);\n      results.debugDump();","description":"","output":""}]},{"name":"getPreviousByTransition","description":"Retrieves the history activities that executed just prior to the one provided in the\n    argument.<p>The <span class=\"ph uicontrol\">next</span> status is based on the wf_activity.sys_id associated with the\n        activity represented in the haRecord existing as a TO in a transition associated with any\n        ActivityHistoryRecords that come before the haRecord in the execution sequence. (This\n        differs from <span class=\"keyword apiname\">getAllTransitionedIntoActivity</span>, which returns all TO\n        transitions up to the given haRecord in the execution sequence .) The return value is a\n        collection of ActivityHistoryRecords that identify the argument haRecord.wfaId as their TO\n        activity. The return values are based on which transitions came before the haRecord\n        submitted and not necessarily the activities that executed just prior to the haRecord in\n        time. To get the activity that executed prior to this activity in time, use\n          <span class=\"keyword apiname\">getPreviousByExecutedOrder</span>.</p>","params":[{"name":"haRecord","type":"Object","description":"ActivityHistoryRecord JavaScript object."}],"returns":{"type":"Object Array","description":"Array of ActivityHistoryRecord JavaScript objects requested."},"example":[]},{"name":"getPreviousByTransitionId","description":"Retrieves the history activities that executed just prior to the one provided in the\n    argument.<p>The <span class=\"keyword parmname\">next</span> status is based on the <span class=\"keyword parmname\">wf_activity.sys_id</span>\n        associated with the activity represented in the haRecord existing as a TO in a transition\n        associated with any ActivityHistoryRecords that come before the haRecord in the execution\n        sequence. The return value is a collection of ActivityHistoryRecords that identify the\n        argument haRecord.wfaId as their TO activity. The return values are based on which\n        transitions came before the haRecord sumbitted and not not necessarily the activities that\n        executed just prior to the haRecord in time. To get the activity that executed prior to this\n        activity in time use <span class=\"keyword apiname\">getPreviousByExecutedOrder</span>.</p>","params":[{"name":"haRecordSysId","type":"String","description":"The sys_id of the activity history (table wf_history)."}],"returns":{"type":"Object","description":"Array of ActivityHistoryRecord JavaScript objects requested."},"example":[]}]},"WorkflowModelManagerAjax":{"meta":{"has_constructor":false,"description":"Provides an AjaxProcessor wrapper for the <span class=\"keyword apiname\">WorkflowModelManager</span>. This\n    class derives from <span class=\"keyword apiname\">AbstractAjaxProcessor</span>. Use this class in the\n      Workflow Debug context menus.","example":""},"properties":{},"methods":[{"name":"getExecutedHistory","description":"Puts the execution history into the return parameter based on the query\n      string.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getFinalExecutedActivityIdList","description":"Puts the final execution activity list into the return parameter based on the query\n      string.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getRolledBackActivityIdList","description":"Puts the rollback activity list into the return parameter based on the query\n      string.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"WorkflowScheduler":{"meta":{"has_constructor":false,"description":"This code is executed in business rule <span class=\"keyword parmname\">Set workflow scheduler script\n    </span>on table wf_workflow_schedule. ","example":""},"properties":{},"methods":[{"name":"run","description":"Starts the workflow specified in current, which is a record in table\n    wf_workflow_schedule.<p>This method is called from the Business Rule Set <span class=\"keyword parmname\">workflow scheduler script</span>\n        on table wf_workflow_schedule.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"WorkflowTimeline":{"meta":{"has_constructor":false,"description":"Generates a view that shows a workflow context on the timeline. ","example":""},"properties":{},"methods":[{"name":"getitems","description":"Generates the Ajax response for the timeline.<p>This method is called by the Prototype JavaScript Framework. See the\n          <span class=\"keyword apiname\">AbstractTimelineSchedulePage</span> script include for more details.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"XMLUtilJS":{"meta":{"has_constructor":false,"description":"Provides XML utilities for JavaScript to be used with Discovery scripts. Use this script include in any server-side discovery script where you need XML utilities.<br/><br/>Access these methods using the static variable <span class=\"keyword apiname\">XMLUtilJS</span>.","example":""},"properties":{},"methods":[{"name":"escapeForXMLText","description":"Provides escape text for a given string.","params":[{"name":"text","type":"String","description":"The text to format."}],"returns":{"type":"String","description":"The formatted text."},"example":[]},{"name":"stringToValue","description":"Converts a string to an XML value.","params":[{"name":"str","type":"String","description":"The string to convert"}],"returns":{"type":"String","description":"The specified string converted to XML."},"example":[]},{"name":"unescapeForXMLText","description":"Provides un-escaped text for a given string.","params":[{"name":"text","type":"String","description":"The text to clean up."}],"returns":{"type":"String","description":"The cleaned up string."},"example":[]},{"name":"valueToString","description":"Converts an XML value to a string.","params":[{"name":"XMLvalue","type":"String","description":"The XML to convert"}],"returns":{"type":"String","description":"The XML value converted to a string."},"example":[]}]}},"scoped":{"CartJS":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">CartJS</span> API enables you to access the shopping cart for a user. To\n    use this class in a scoped application, use the sn_sc namespace identifier. The Service Catalog\n    Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api) that is enabled by default is\n    required to access the <span class=\"keyword apiname\">CartJS</span> API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the CartJS class with the name of a defined cart for the user\n    who is currently logged in.","params":[{"name":"cartName","type":"String","description":"Name of a defined cart for the user who is currently logged in."}],"returns":{"type":"","description":""},"example":[{"code":"var cart = new sn_sc.CartJS(cart1);","description":"","output":""}]},{"name":"constructor","description":"Creates an instance of the CartJS class for the default cart of the user who is\n    currently logged in.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var cart = new sn_sc.CartJS();","description":"","output":""}]},{"name":"addToCart","description":"Adds the request for a catalog item to the current cart.","params":[{"name":"request","type":"Map","description":"A JSON object that contains the details of the catalog item to be added to the\n                  cart.<p class=\"p\">The structure of the request object\n                  is:</p>\n<pre class=\"pre codeblock\">{\n'sysparm_id': item_id,\n'sysparm_quantity': item_quantity,\n'variables':{\n'var_name': 'var_value',\n...\n}\n}</pre>\n<ul class=\"ul\" id=\"r_CJSS-addToCart_O__ul_tdn_1ly_5z\">\n                  <li class=\"li\">item_id: sys_id of the item to be added to the cart</li>\n\n                  <li class=\"li\">item_quantity: Number of items to be added. Default value is 1.</li>\n\n                  <li class=\"li\">var_name: Name of the question.</li>\n\n                  <li class=\"li\">var_value: Value of the answer (Not the display value).</li>\n\n                </ul>"}],"returns":{"type":"JSON","description":"Structure of the current\n                cart.<pre class=\"pre codeblock\">{\n'subtotal': value,\n'items':[\n{\nitemName:'',\nquantity:'', \nprice:'', \nrecurring_price:''\n} ...]\n}</pre>"},"example":[{"code":"\nvar cart = new sn_sc.CartJS();\nvar item =\n{\n'sysparm_id': '0d08837237153000158bbfc8bcbe5d02',\n'sysparm_quantity': '1',\n'variables':{\n'carrier': 'at_and_t_mobility',\n'data_plan': '500MB',\n'duration': 'eighteen_months',\n'color': 'slate',\n'storage': 'sixtyfour' \n}};\nvar cartDetails = cart.addToCart(item);\ngs.info(cartDetails);","description":"","output":"{ \n&quot;cart_id&quot;:&quot;35ec9e8947a13200e0ef563dbb9a7109&quot;,\n&quot;items&quot;:[ \n{ \n&quot;cart_item_id&quot;:&quot;35ec9e8947a13200e0ef563dbb9a710a&quot;,\n&quot;catalog_item_id&quot;:&quot;0d08837237153000158bbfc8bcbe5d02&quot;,\n&quot;item_name&quot;:&quot;Apple iPhone 5&quot;,\n&quot;localized_price&quot;:&quot;$799.99&quot;,\n&quot;localized_recurring_price&quot;:&quot;$30.00&quot;,\n&quot;price&quot;:&quot;$799.99&quot;,\n&quot;quantity&quot;:&quot;1&quot;,\n&quot;recurring_frequency&quot;:&quot;Monthly&quot;,\n&quot;recurring_price&quot;:&quot;$29.00&quot;\n}\n]\n&quot;subtotal&quot;:&quot;$799.99&quot;\n}"}]},{"name":"canViewRF","description":"Specifies if the current user has the required role to edit the <span class=\"ph uicontrol\">Request\n      for</span> field.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user has the required role to edit the\n                requested for field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"CJSS-canViewRF__ul_uzz_1hw_shb\">\n                  <li class=\"li\">true: user has the required role</li>\n\n                  <li class=\"li\">false: user does not have the required role</li>\n\n                </ul>"},"example":[{"code":"var cart=new sn_sc.CartJS();\nconsole.log(cart.canViewRF());","description":"This example checks if the user has the role needed to edit the requested for field.","output":"true"}]},{"name":"checkoutCart","description":"Performs the cart checkout. If the two-step checkout is enabled, returns the order\n    summary. If the two-step checkout is disabled, the cart is submitted and details of the\n    generated request are returned.","params":[],"returns":{"type":"JSON","description":"If the two-step checkout is enabled, the summary of the items in the cart is\n                  returned.<pre class=\"pre codeblock\">{ \"subtotal_price\":\"\",\n  \"subtotal_recurring_frequency\":\"\",\n  \"delivery_address\":\"\",\n  \"special_instructions\":\"\",\n  \"total_title\":\"\",\n  \"requested_for_user\":\"System Administrator\",\n  \"requested_for\":\"6816f79cc0a8016401c5a33be04be441\",\n  “daily”: [\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], …],\n  “monthly”:[\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], …],\n  “annually”:[\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], …],\n  \"none\":[\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], …],\n}</pre>\n<div class=\"p\">If\n                  the two-step checkout is\n                  disabled:<pre class=\"pre codeblock\">{\n  'request_id' : \"sys_id of the generated request\",\n  \"request_number\" : \"Number of the generated request\"\n}</pre>\n</div>"},"example":[{"code":"var cart = new sn_sc.CartJS();\nvar checkoutInfo = cart.checkoutCart();\ngs.info(checkoutInfo);\n","description":"","output":"If two step checkout enabled:\n{&quot;subtotal_price&quot;:&quot;$2,748.49&quot;,&quot;subtotal_recurring_frequency&quot;:&quot;&quot;,&quot;delivery_address&quot;:&quot;&quot;,&quot;special_instructions&quot;:&quot;&quot;,&quot;total_title&quot;:&quot;Total&quot;,&quot;requested_for_user&quot;:&quot;System Administrator&quot;,&quot;requested_for&quot;:&quot;6816f79cc0a8016401c5a33be04be441&quot;,&quot;weekly&quot;:{&quot;subtotal_price&quot;:&quot;$399.50&quot;,&quot;subtotal_recurring_frequency&quot;:&quot;Weekly&quot;,&quot;subtotal_recurring_price&quot;:&quot;$0.00&quot;,&quot;total_title&quot;:&quot;Total&quot;,&quot;items&quot;:[{&quot;catalog_item_id&quot;:&quot;e90a0f7237153000158bbfc8bcbe5d7f&quot;,&quot;variables&quot;:{},&quot;quantity&quot;:&quot;1&quot;,&quot;localized_price&quot;:&quot;$399.50&quot;,&quot;price&quot;:&quot;$399.50&quot;,&quot;recurring_frequency&quot;:&quot;Weekly&quot;,&quot;localized_recurring_price&quot;:&quot;$0.00&quot;,&quot;recurring_price&quot;:&quot;$0.00&quot;,&quot;item_name&quot;:&quot;Brother Network-Ready Color Laser Printer&quot;,&quot;cart_item_id&quot;:&quot;f3f5c9b3c322320076173b0ac3d3ae00&quot;,&quot;delivery_time&quot;:&quot;2 Days&quot;}],&quot;show_subtotal_price&quot;:&quot;true&quot;,&quot;subtotal_title&quot;:&quot;Subtotal&quot;},&quot;show_subtotal_price&quot;:&quot;true&quot;,&quot;cart_id&quot;:&quot;251c0562c326320076173b0ac3d3aeb4&quot;,&quot;subtotal_recurring_price&quot;:&quot;$131.00&quot;,&quot;monthly&quot;:{&quot;subtotal_price&quot;:&quot;$849.99&quot;,&quot;subtotal_recurring_frequency&quot;:&quot;Monthly&quot;,&quot;subtotal_recurring_price&quot;:&quot;$31.00&quot;,&quot;total_title&quot;:&quot;Total&quot;,&quot;items&quot;:[{&quot;catalog_item_id&quot;:&quot;d82ea08510247200964f77ffeec6c4ee&quot;,&quot;variables&quot;:{&quot;Monthly data allowance&quot;:&quot;500MB&quot;,&quot;Storage&quot;:&quot;64GB&quot;,&quot;Color&quot;:&quot;Space Gray&quot;,&quot;Is this a replacement for a lost or broken iPhone?&quot;:&quot;No&quot;,&quot;What was the original phone number?&quot;:&quot;&quot;},&quot;quantity&quot;:&quot;1&quot;,&quot;localized_price&quot;:&quot;$799.99&quot;,&quot;price&quot;:&quot;$849.99&quot;,&quot;recurring_frequency&quot;:&quot;Monthly&quot;,&quot;localized_recurring_price&quot;:&quot;$30.00&quot;,&quot;recurring_price&quot;:&quot;$31.00&quot;,&quot;item_name&quot;:&quot;Apple iPhone 6s Plus&quot;,&quot;cart_item_id&quot;:&quot;18c509b3c322320076173b0ac3d3aef4&quot;,&quot;delivery_time&quot;:&quot;2 Days&quot;}],&quot;show_subtotal_price&quot;:&quot;true&quot;,&quot;subtotal_title&quot;:&quot;Subtotal&quot;},&quot;yearly&quot;:{&quot;subtotal_price&quot;:&quot;$1,499.00&quot;,&quot;subtotal_recurring_frequency&quot;:&quot;Annually&quot;,&quot;subtotal_recurring_price&quot;:&quot;$100.00&quot;,&quot;total_title&quot;:&quot;Total&quot;,&quot;items&quot;:[{&quot;catalog_item_id&quot;:&quot;774906834fbb4200086eeed18110c737&quot;,&quot;variables&quot;:{&quot;Adobe Photoshop&quot;:&quot;false&quot;,&quot;Adobe Acrobat&quot;:&quot;false&quot;,&quot;Optional Software&quot;:&quot;&quot;,&quot;Additional software requirements&quot;:&quot;&quot;,&quot;Eclipse IDE&quot;:&quot;true&quot;},&quot;quantity&quot;:&quot;1&quot;,&quot;localized_price&quot;:&quot;$1,499.00&quot;,&quot;price&quot;:&quot;$1,499.00&quot;,&quot;recurring_frequency&quot;:&quot;Annually&quot;,&quot;localized_recurring_price&quot;:&quot;$100.00&quot;,&quot;recurring_price&quot;:&quot;$100.00&quot;,&quot;item_name&quot;:&quot;Developer Laptop (Mac)&quot;,&quot;cart_item_id&quot;:&quot;6306c9b3c322320076173b0ac3d3ae89&quot;,&quot;delivery_time&quot;:&quot;5 Days&quot;}],&quot;show_subtotal_price&quot;:&quot;true&quot;,&quot;subtotal_title&quot;:&quot;Subtotal&quot;},&quot;subtotal_title&quot;:&quot;Subtotal&quot;}\nIf two step checkout disabled:\n{&quot;request_number&quot;:&quot;REQ0010001&quot;,&quot;request_id&quot;:&quot;2f2789f3c322320076173b0ac3d3ae62&quot;}"}]},{"name":"empty","description":"Deletes the current cart.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var cart = new sn_sc.CartJS();\n      cart.empty();","description":"","output":""}]},{"name":"getCartDetails","description":"Returns the cart details.","params":[],"returns":{"type":"Object","description":"Object pointing to the current cart details."},"example":[{"code":"var cart=new sn_sc.CartJS();\n\tconsole.log (cart.getCartDetails());","description":":","output":"delivery_address:&quot;Brasilia,Brasil&quot;\n        name:&quot;DEFAULT&quot;\n        requested_for:&quot;62826bf03710200044e0bfc8bcbe5df1&quot;\n        requested_for_display_name:&quot;Abel Tuter&quot;\n        special_instructions:&quot;&quot;\n        sys_id:&quot;c2ac090087150300318d05a888cb0bd7&quot;"}]},{"name":"getCartID","description":"Returns the cart id of the current cart.","params":[],"returns":{"type":"String","description":"sys_id for the current cart."},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.getCartID(); \n      gs.info(cartId);\n","description":"","output":"039c516237b1300054b6a3549dbe5dfc"}]},{"name":"getCartItems","description":"Returns the GlideRecord for the cart item (sc_cart_item) in the current\n    cart.","params":[],"returns":{"type":"GlideRecord","description":"GlideRecord pointing to cart items in the current cart."},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.getCartItems(); \n      gs.info(CartItems)\n","description":"","output":"Apple iPhone 6s Plus\nApple iPhone 6s\nApple MacBook Pro 15&quot;"}]},{"name":"getDeliveryAddress","description":"Gets the delivery address for the current cart.","params":[],"returns":{"type":"String","description":"Delivery address for the current cart."},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.setDeliveryAddress(\"Brasilia, Brasil\");\n      cart.getDeliveryAddress(); \n      gs.info(DeliveryAddress);\n","description":"","output":"Brasilia, Brasil"}]},{"name":"getRequestedFor","description":"Gets the sys_id from the sys_user record of the user for whom the cart is\n    requested.","params":[],"returns":{"type":"String","description":"sys_id from the sys_user record of the user for whom the cart is\n                requested."},"example":[{"code":"\nvar cart = new sn_sc.CartJS();\ncart.setRequestedFor(\"039c516237b1300054b6a3549dbe5dfc\")\ncart.getRequestedFor(); \ngs.info(cartId);\n","description":"","output":"039c516237b1300054b6a3549dbe5dfc"}]},{"name":"getRequestedForDisplayName","description":"Gets the name from the user record of the user for whom the current cart is\n    requested.","params":[],"returns":{"type":"String","description":"Name from the user record of the user for whom the current cart is\n                requested."},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.getRequestedForDisplayName(); \n      gs.info(DisplayName);\n","description":"","output":"Abel Tutor"}]},{"name":"getSpecialInstructions","description":"Gets the special instructions for the current cart.","params":[],"returns":{"type":"String","description":"Special instructions for the current cart."},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.setSpecialInstructions(\"Delivery before 8 AM.\");\n      cart.getSpecialInstructions(); \n      gs.info(SpecialInstructions);\n","description":"","output":"Delivery before 8 AM."}]},{"name":"orderNow","description":"Orders a single item. If two-step checkout is enabled, the method adds the specified\n    item to the cart and returns the sys_id of the cart. If two-step checkout is disabled, the\n    method completes the purchase of the specified item and returns the sys_id of the generated\n    request.","params":[{"name":"request","type":"Map","description":"JSON object that contains details of the catalog item to order."},{"name":"request.delivery_address","type":"String","description":"Address to which to deliver the items.<p class=\"p\">Default: Address of user</p>"},{"name":"request.sysparm_id","type":"String","description":"Required. The sys_id of the item to purchase."},{"name":"request.special_instructions","type":"String","description":"Instructions to follow when processing the order."},{"name":"request.sysparm_quantity","type":"Number","description":"Quantity of the specified item to purchase.<p class=\"p\">Default: 1</p>"},{"name":"request.sysparm_requested_for","type":"String","description":"The sys_id of the user for whom the item is requested.<p class=\"p\">Default: Session\n                  user</p>"},{"name":"request.variables","type":"Array","description":"Questions and customer answers associated with the item."},{"name":"request.variables.var_name","type":"String","description":"Name of the question."},{"name":"request.variables.var_value","type":"String","description":"Customer's response to the associated question."}],"returns":{"type":"JSON key/value pairs","description":"Output if two-step checkout is\n                  enabled:<pre class=\"pre codeblock\">{\n  'cart_id' : '&lt;sys_id of the cart to which the items were added&gt;'\n}</pre>\n<p class=\"p\">Output\n                  if two-step checkout is\n                disabled:</p>\n<pre class=\"pre codeblock\">{\n  'request_id' : '&lt;sys_id of the generated request&gt;',\n  'request_number' : '&lt;Number of the generated request&gt;'\n}</pre>"},"example":[{"code":"\nvar cart = new sn_sc.CartJS();\nvar request =\n{\n  'sysparm_id': '0d08837237153000158bbfc8bcbe5d02',\n  'sysparm_quantity': '1',\n  'variables':{\n    'carrier': 'at_and_t_mobility',\n    'data_plan': '500MB',\n    'duration': 'eighteen_months',\n    'color': 'slate',\n    'storage': 'sixtyfour'\n  }\n}\nvar cartDetails = cart.orderNow(request);\ngs.info(cartDetails);","description":"","output":"// If two-step checkout is enabled:\n{&quot;cart_id&quot;:&quot;55384df3c322320076173b0ac3d3aec5&quot;}\n\n// If two-step checkout is disabled:\n{&quot;request_id&quot;:&quot;4c690137c322320076173b0ac3d3ae03&quot;, &quot;request_number&quot;: &quot;REQ0010003&quot;}"}]},{"name":"setDeliveryAddress","description":"Sets the delivery address for the current cart.","params":[{"name":"address","type":"String","description":"Delivery address for the current cart."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.setDeliveryAddress(\"Brasilia, Brasil\"); \n      ","description":"","output":""}]},{"name":"setRequestedFor","description":"Sets the sys_id in the sys_user record of the user for whom the cart is\n    requested.","params":[{"name":"user","type":"String","description":"sys_id to be set in the sys_user record of the user for whom the cart is\n                requested."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\nvar cart = new sn_sc.CartJS();\ncart.setRequestedFor(\"039c516237b1300054b6a3549dbe5dfc\")\n","description":"","output":""}]},{"name":"setSpecialInstructions","description":"Sets the special instructions for the current cart.","params":[{"name":"specialInstructions","type":"String","description":"Special instructions for the current cart."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\n      var cart = new sn_sc.CartJS();\n      cart.setSpecialInstructions(\"Delivery before 8 AM.\"); \n   ","description":"","output":""}]},{"name":"submitOrder","description":"Updates special instructions, requested for, and delivery address from the\n      <span class=\"keyword parmname\">request</span> parameter and performs the cart checkout. Use this API to modify\n    the mentioned parameters of the cart and perform the cart checkout simultaneously. Missing\n    parameters in the <span class=\"keyword parmname\">request</span> object will have their default value.","params":[{"name":"request","type":"Map","description":"A JSON object that contains details of the cart to be submitted.<p class=\"p\">The\n                  structure of the request object\n                  is:</p>\n<pre class=\"pre codeblock\">{\n  'special_instructions' : 'instructions',\n  'sysparm_requested_for' : requested_for,\n  'delivery_address' : 'address'\n}</pre>\n<ul class=\"ul\" id=\"r_CJSS-submitOrder-O__ul_iky_vrd_zz\">\n                  <li class=\"li\">instructions: Special instructions for the request.</li>\n\n                  <li class=\"li\">requested_for : sys_id of the requested_for user.</li>\n\n                  <li class=\"li\">address: Delivery address for the request.</li>\n\n                </ul>"}],"returns":{"type":"JSON","description":"Structure of the\n                cart.<pre class=\"pre codeblock\">{\n  'request_id' : 'sys_id of the generated Request',\n  'request_number' : 'Number of the generated Request'\n}</pre>"},"example":[{"code":"var cart = new sn_sc.CartJS();\nvar request =\n{\n  'special_instructions' : 'Delivery only in working hours',\n  'requested_for' : '62826bf03710200044e0bfc8bcbe5df1',\n  'delivery_address' : \"Brasilia, Brasil\",\n};\nvar requestDetails = cart.submitOrder(request);\ngs.info(requestDetails);","description":"","output":"{&quot;request_id&quot;:&quot;6eed229047801200e0ef563dbb9a71c2&quot;, &quot;request_number&quot;: &quot;REQ0000001&quot;}"}]},{"name":"updateItem","description":"Updates an item in the cart.","params":[{"name":"request","type":"Map","description":"A JSON object that contains details of the catalog item to be updated.<p class=\"p\">The\n                  structure of the request object\n                  is:</p>\n<pre class=\"pre codeblock\">{\n    'sysparm_quantity' : item_quantity,\n  'sysparm_requested_for' : requested_for,\n  'variables' : {\n    'var_name' : 'var_value',\n    ...\n  }\n}</pre>\n<ul class=\"ul\" id=\"r_CJSS-updateItem_M_S__ul_agy_ypd_zz\">\n                  <li class=\"li\">item_quantity: Number of items to be added. Default value is 1.</li>\n\n                  <li class=\"li\">var_name: Name of the question.</li>\n\n                  <li class=\"li\">var_value: Value of the answer (Not the display value).</li>\n\n                </ul>"},{"name":"cart_item_id","type":"String","description":"sys_id of the cart item to be modified."}],"returns":{"type":"JSON","description":"Details of the\n                cart.<pre class=\"pre codeblock\">{\n  'subtotal': value,\n  'items':[\n    {\n    itemName:'',\n    quantity:'',\n    price:'',\n    recurring_price:''\n    }\n    ...],\n  ...\n}</pre>"},"example":[{"code":"var cart = new sn_sc.CartJS();\nvar request =\n{\n  'sysparm_quantity': '1',\n  'variables':{\n    'carrier': 'at_and_t_mobility',\n    'data_plan': '500MB',\n    'duration': 'eighteen_months',\n    'color': 'slate',\n    'storage': 'sixtyfour'\n  }\n};\nvar cart_item_id = \"4d69b672c322320076173b0ac3d3ae79\";\nvar cartDetails = cart.updateItem(request, cart_item_id);\ngs.info(cartDetails);\n","description":"","output":"{ &quot;cart_id&quot;:&quot;35ec9e8947a13200e0ef563dbb9a7109&quot;, &quot;items&quot;:[ { &quot;cart_item_id&quot;:&quot;35ec9e8947a13200e0ef563dbb9a710a&quot;, &quot;catalog_item_id&quot;:&quot;0d08837237153000158bbfc8bcbe5d02&quot;, &quot;item_name&quot;:&quot;Apple iPhone 5&quot;, &quot;localized_price&quot;:&quot;$799.99&quot;, &quot;localized_recurring_price&quot;:&quot;$30.00&quot;, &quot;price&quot;:&quot;$799.99&quot;, &quot;quantity&quot;:&quot;1&quot;, &quot;recurring_frequency&quot;:&quot;Monthly&quot;, &quot;recurring_price&quot;:&quot;$29.00&quot; } ] &quot;subtotal&quot;:&quot;$799.99&quot; }"}]}]},"CatalogClientScript":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">CatalogClientScript</span> API enables you to create, modify, or delete\n  catalog client script records. To use this class in a scoped application, use the sn_sc namespace\n  identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api)\n  that is enabled by default is required to access the <span class=\"keyword apiname\">CatalogClientScript\n  </span>API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the CatalogClientScript class.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();","description":"","output":""}]},{"name":"addScript","description":"Adds a script to the catalog client script.","params":[{"name":"script","type":"String","description":"Script to be added to the catalog client script."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.addScript(\"function onLoad(){Enter the script}\");","description":"","output":""}]},{"name":"appliesToCatalogItem","description":"Specifies if the catalog client script runs on a catalog item.","params":[{"name":"flag","type":"Boolean","description":"If true, the catalog client script runs on the catalog item. If false, the\n                catalog client script does not run on the catalog item."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToCatalogItem(true);","description":"","output":""}]},{"name":"appliesToCatalogTask","description":"Specifies if the catalog client script runs on a catalog task.","params":[{"name":"flag","type":"Boolean","description":"If true, the catalog client script runs on the catalog task. If false, the\n                catalog client script does not run on the catalog task."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToCatalogTask(true);","description":"","output":""}]},{"name":"appliesToRequestedItem","description":"Specifies if the catalog client script runs on a requested item.","params":[{"name":"flag","type":"Boolean","description":"If true, the catalog client script runs on the requested item. If false, the\n                catalog client script does not run on the requested item."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToRequestedItem(true);","description":"","output":""}]},{"name":"appliesToTargetRecord","description":"Specifies if the catalog client script runs on a requested item.","params":[{"name":"flag","type":"Boolean","description":"If true, the catalog client script runs on the target record. If false, the\n                catalog client script does not run on the target record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToTargetRecord(true);","description":"","output":""}]},{"name":"create","description":"Inserts the defined catalog client script in the catalog_script_client table.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"String","description":"sys_id of the catalog client script."},"example":[{"code":"\n        var catalogClientScript = new sn_sc.CatalogClientScript();\n        catalogClientScript.setAttributes({\"name\": \"My Catalog Item\", \"applies_to\": \"item\", \"ui_type\": \"desktop\", \"type\": \"onLoad\"});\n        catalogClientScript.appliesToCatalogItem(true);\n        catalogClientScript.appliesToRequestedItem(true);\n        catalogClientScript.appliesToCatalogTask(true);\n        catalogClientScript.appliesToTargetRecord(true);\n        var catalogClientScriptId = catalogClientScript.create();\n        gs.info(catalogClientScriptId);\n      \n      \n      \n      ","description":"","output":"039c516237b1300054b6a3549dbe5dfc"}]},{"name":"deleteRecord","description":"Deletes the defined catalog client script.","params":[{"name":"sys_id","type":"String","description":"sys_id of the catalog client script."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\n        var sys_id = \"039c516237b1300054b6a3549dbe5dfc\"; \n        var catalogClientScript = new sn_sc.CatalogClientScript();\n        catalogClientScript.deleteRecord(\"039c516237b1300054b6a3549dbe5dfc\");","description":"","output":""}]},{"name":"setAttributes","description":"Defines attribute values for the catalog client script.","params":[{"name":"attributes","type":"Map","description":"A JSON object that has mapping for the field and value pairs."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setAttributes({\"name\": \"My Catalog Item\", \"applies_to\": \"catalog_item\", \"ui_type\": \"desktop\", \"type\": \"onLoad\"});","description":"","output":""}]},{"name":"setCatalogItem","description":"Associates a catalog item with the catalog client script.","params":[{"name":"sys_id","type":"String","description":"sys_id of the catalog item."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setCatalogItem(\"039c516237b1300054b6a3549dbe5dfc\");","description":"","output":""}]},{"name":"setOnChangeVariable","description":"Runs the catalog client script when a variable value is updated.","params":[{"name":"sys_id","type":"String","description":"sys_id of the variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setOnChangeVariable(\"039c516237b1300054b6a3549dbe5dfc\");","description":"","output":""}]},{"name":"setVariableSet","description":"Associates a variable set with the catalog client script.","params":[{"name":"sys_id","type":"String","description":"sys_id of the variable set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setVariableSet(\"039c516237b1300054b6a3549dbe5dfc\");","description":"","output":""}]}]},"CatalogItemVariable":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">CatalogItemVariable</span> API enables you to create and modify service\n  catalog item variables using scripts. ","example":""},"properties":{},"methods":[{"name":"create","description":"Insert the defined catalog item variable.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"String","description":"Return the sys_id of the inserted variable record."},"example":[]},{"name":"deleteRecord","description":"Delete the defined catalog item variable.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"read","description":"Get a mapping of catalog item variable attribute values.","params":[{"name":"columns","type":"Object","description":"Specify the set of columns that you would like the values for."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"Object","description":"An object mapping column names to values."},"example":[]},{"name":"setAttributes","description":"Define attribute values for this catalog item variable.","params":[{"name":"attributes","type":"Object","description":"An object mapping column names to values."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"update","description":"Use to update current catalog item variable with set values.","params":[{"name":"columnValues","type":"Object","description":"An object mapping column names to values."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CatalogItemVariableSet":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">CatalogItemVariableSet</span> API enables you to create and modify service\n  catalog item variable sets using scripts. ","example":""},"properties":{},"methods":[{"name":"create","description":"Insert the defined catalog item variable set.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"String","description":"Return the sys_id of the inserted variable record."},"example":[]},{"name":"deleteRecord","description":"Delete the defined catalog item variable.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"read","description":"Get a mapping of catalog item variable set attribute values.","params":[{"name":"columns","type":"Object","description":"Specify the set of columns that you would like the values for."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"Object","description":"An object mapping column names to values."},"example":[]},{"name":"setAttributes","description":"Define attribute values for this catalog item variable set.","params":[{"name":"attributes","type":"Object","description":"An object mapping column names to values."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"update","description":"Use to update current catalog item variable set with set values.","params":[{"name":"columnValues","type":"Object","description":"An object mapping column names to values."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CatalogItemVariableSetM2M":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">CatalogItemVariableSetM2M</span> API enables you to create and modify\n  service catalog item variable set many-to-many (M2Ms) using scripts. ","example":""},"properties":{},"methods":[{"name":"create","description":"Insert the defined catalog item variable set M2M.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"String","description":"Return the sys_id of the inserted variable record."},"example":[]},{"name":"deleteRecord","description":"Delete the defined catalog item variable set M2M.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"read","description":"Get a mapping of catalog item variable set M2M attribute values.","params":[{"name":"columns","type":"Object","description":"Specify the set of columns that you would like the values for."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"Object","description":"An object mapping column names to values."},"example":[]},{"name":"setAttributes","description":"Define attribute values for this catalog item variable set M2M.","params":[{"name":"attributes","type":"Object","description":"An object mapping column names to values."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"update","description":"Updates current catalog item variable set M2M with set values.<p>Consistency across all API ref topics is critical. Follow the template exactly or the\n        importer script will fail.</p>","params":[{"name":"columnValues","type":"Object","description":"An object mapping column names to values."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CatalogJS - Scoped":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">CatalogJS</span> API enables you to use methods to check and retrieve\n    catalog-specific properties. To use this class in a scoped application, use the sn_sc namespace\n    identifier. The Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api) that\n    is enabled by default is required to access the <span class=\"keyword apiname\">CatalogJS</span> API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the Catalog class with the specified sys_id.","params":[{"name":"sys_id","type":"String","description":"sys_id of the Catalog."}],"returns":{"type":"","description":""},"example":[{"code":"new sn_sc.Catalog(catalog_sys_id);\nvar Catalog = new sn_sc.Catalog(\"31bea3d53790200044e0bfc8bcbe5dec\");\n\n","description":":","output":""}]},{"name":"constructor","description":"Creates an instance of the catalog class for the specified glide record\n    object.","params":[{"name":"gr","type":"Object","description":"Glide Record pointing to the sc_catalog table."}],"returns":{"type":"","description":""},"example":[{"code":"var gr = new GlideRecord('sc_catalog');\n gr.addQuery('sys_id','e0d08b13c3330100c8b837659bba8fb4');\ngr.query();\nvar Catalog = new sn_sc.Catalog(gr);","description":":","output":""}]},{"name":"canView","description":"Specifies if the catalog is viewable for the user.","params":[{"name":"mobile","type":"Boolean","description":"True if the view is mobile view. Else, false."}],"returns":{"type":"Boolean","description":"Returns true if the catalog is viewable for the user."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");;\t\n\t         console.log (catalog.canView(true));","description":":","output":"true"}]},{"name":"getAvailableCatalog","description":"If only one active catalog exists, that catalog is returned. Else, the earliest catalog\n    created is returned, from the list of the catalogs that the user can view. If no catalog is\n    available, null is returned.","params":[],"returns":{"type":"Object","description":"Object pointing to the earliest catalog that the user can view."},"example":[{"code":"var catalog = sn_sc.Catalog. getAvailableCatalog()","description":":","output":"catalog is the CatalogJS object"}]},{"name":"getBackgroundColor","description":"Returns the catalog background color.","params":[],"returns":{"type":"String","description":"Background color of the catalog."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\nconsole.log(catalog.getBackgroundColor());","description":":","output":"#FFFFFF"}]},{"name":"getCatalogCount","description":"Specifies the number of catalogs active in the catalog table.","params":[],"returns":{"type":"Integer","description":"Number of catalogs available in the catalog table."},"example":[{"code":"console.log (sn_sc.Catalog.getCatalogCount());","description":":","output":"3"}]},{"name":"getCategories","description":"Returns the categories for the specified catalog.","params":[],"returns":{"type":"ArrayList","description":"Returns the categories for the specified catalog."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\t\n\t         console.log(catalog.getCategories());","description":":","output":".\t0:{header_image: &quot;&quot;, sys_id: &quot;e15706fc0a0a0aa7007fc21e1ab70c2f&quot;, description: &quot;Your IT gateway. Report issues and submit requests.&quot;, title: &quot;Can We Help You?&quot;}\n        1:{header_image: &quot;&quot;, sys_id: &quot;95fc11615f1211001c9b2572f2b477c6&quot;, description: &quot;Services offered by different departments in the organization&quot;, title: &quot;Departmental Services&quot;}\n        2:{header_image: &quot;&quot;, sys_id: &quot;900682363731300054b6a3549dbe5d5f&quot;, description: &quot;Desktop computers for your work area.&quot;, title: &quot;Desktops&quot;}\n        3:{header_image: &quot;&quot;, sys_id: &quot;d2f716fcc611227a015a142fa0b262c1&quot;, description: &quot;Order new furniture, and fixtures, or request for cubicle modifications can also be ordered here.&quot;, title: &quot;Furniture and Decor&quot;}\n        4:{header_image: &quot;&quot;, sys_id: &quot;d258b953c611227a0146101fb1be7c31&quot;, description: &quot;Order from a variety of hardware to meet your business needs, including phones, tablets and laptops.&quot;, title: &quot;Hardware&quot;}"}]},{"name":"getCategoryIds","description":"Specifies the sys_ids of the categories in the specified catalog.","params":[],"returns":{"type":"ArrayList","description":"Returns the sys_ids of the categories in the specified catalog."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getCategoryIds());","description":":","output":"0:&quot;e15706fc0a0a0aa7007fc21e1ab70c2f&quot;\n        1:&quot;95fc11615f1211001c9b2572f2b477c6&quot;\n        2:&quot;900682363731300054b6a3549dbe5d5f&quot;\n        3:&quot;d2f716fcc611227a015a142fa0b262c1&quot;"}]},{"name":"getDescription","description":"Specifies the catalog description.","params":[],"returns":{"type":"String","description":"Catalog description."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getDescription());","description":":","output":"Service Catalog - IT Now"}]},{"name":"getDesktopImageSRC","description":"Returns the catalog desktop image value.","params":[],"returns":{"type":"String","description":"Catalog desktop image value."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getDesktopImageSRC());","description":":","output":"adbcc271475211002ee987e8dee49001.iix"}]},{"name":"getGr","description":"Returns the catalog gliderecord.","params":[],"returns":{"type":"GlideRecord","description":"GlideRecord of the catalog."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\t\n\tdata.history=catalog.getGr();","description":":","output":"{}\n        background_color\n        :{}\n        description\n        :\n        {}\n        desktop_continue_shopping\n        :\n        {}\n        desktop_home_page\n        :\n        {}desktop_image\n        :\n        {}\n        editors\n        :\n        {}\n        enable_wish_list\n        :\n        {}\n        manager\n        :\n        {}\n        sys_class_name\n        :\n        {}\n        sys_created_by\n        :\n        {}\n        sys_created_on\n        :\n        {}\n        sys_id\n        :\n        {}\n        sys_meta\n        :\n        {calculation: &quot;&quot;, matchable: &quot;1&quot;, dynamic_ref_qual: &quot;&quot;, choice_field: &quot;&quot;, multi_text: &quot;0&quot;, …}\n        sys_mod_count\n        :\n        {}\n        sys_name\n        :\n        {}\n        sys_package\n        :\n        {}\n        sys_policy\n        :\n        {}\n        sys_scope\n        :\n        {}\n        sys_tags\n        :\n        {}sys_update_name\n        :\n        {}\n        sys_updated_by\n        :\n        {}\n        sys_updated_on\n        :\n        {}\n        title\n        :\n        {}"}]},{"name":"getHeaderIconSRC","description":"Returns the catalog header icon.","params":[],"returns":{"type":"String","description":"Catalog header icon."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\nconsole.log(catalog.getHeaderIconSRC());","description":":","output":"null"}]},{"name":"getID","description":"Specifies the sys_id of the catalog.","params":[],"returns":{"type":"String","description":"sys_id of the catalog."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getId());","description":":","output":"e0d08b13c3330100c8b837659bba8fb4"}]},{"name":"getTitle","description":"Returns the title of the catalog.","params":[],"returns":{"type":"String","description":"Title of the catalog"},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getTitle());","description":":","output":"Service Catalog"}]},{"name":"hasCategories","description":"Specifies if the catalog has categories.","params":[],"returns":{"type":"Boolean","description":"Returns true if the catalog has categories. Else returns false."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.hasCategories());","description":":","output":"false"}]},{"name":"hasItems","description":"Specifies if the catalog has catalog items.","params":[],"returns":{"type":"Boolean","description":"Returns true if the catalog has catalog items. Else returns false."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.hasItems());\n","description":":","output":"true"}]},{"name":"isWishlistEnabled","description":"Specifies if the wish list is enabled for a catalog.","params":[],"returns":{"type":"Boolean","description":"Returns true if wish list is enabled for a catalog. Else returns false."},"example":[{"code":"var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\t\n\tconsole.log(catalog.isWishlistEnabled());\n","description":":","output":"true"}]}]},"CatalogSearch":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">CatalogSearch</span> API enables you to search catalog item. To use this\n    class in a scoped application, use the sn_sc namespace identifier. The Service Catalog Scoped\n    API plugin (ID: com.glideapp.servicecatalog.scoped.api) that is enabled by default is required\n    to access the CatalogSearch API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the CatalogSearch class.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var gr = new sn_sc.CatalogSearch();","description":"","output":""}]},{"name":"search ","description":"Searches a catalog item based on a search term. The search can be narrowed down to a\n    catalog category level.","params":[{"name":"catalogID","type":"String","description":"Identifier of the catalog that is searched."},{"name":"categoryID","type":"String","description":"Identifier of the catalog category that is searched."},{"name":"term","type":"String","description":"Search term."},{"name":"mobile","type":"Boolean","description":"If true, only catalog items exposed for mobile are searched."},{"name":"depthSearch","type":"Boolean","description":"If true,  subcategories are also searched."}],"returns":{"type":"GlideRecord","description":"Returns the GlideRecord on sc_cat_item matching the search result."},"example":[{"code":"\nvar gr = new sn_sc.CatalogSearch().search('', '', 'Apple', false, true);\ngr.query()\nwhile(var gr = new sn_sc.CatalogSearch().search('', '', 'Apple', false, true);\ngr.query()\nwhile(gr.next()) {\ngs.log(gr.name)\n})","description":"","output":"Apple iPhone 6s Plus\nApple iPhone 6s\nApple MacBook Pro 15&quot;\nApple Watch\nApple Watch Series 2\nApple iPhone 5\nApple iPad 3\nApple iPhone 4 Cable\nApple iPhone 5 Cable \nQuickTime Pro\nOS X Yosemite\nApple Thunderbolt to Ethernet Adapter\nMicrosoft Surface Pro 3\nOS X Mavericks\nSpigen iPhone 6 Case\nMacBook Pro Power Adapter\nMacBook Air Power Adapter\nSpigen iPhone 5/5s Case\nDeveloper Laptop (Mac)"}]}]},"CatCategory":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">CatCategory</span> API enables you to create and modify service catalog\n  categories using scripts. ","example":""},"properties":{},"methods":[{"name":"availableForUserCriteria","description":"Adds the <span class=\"keyword parmname\">Available For</span> user criteria to a catalog\n    category.","params":[{"name":"action","type":"String","description":"Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Available For</span> list.</p>"},{"name":"criteriaIDs","type":"Array","description":"Array of the user criteria sys_ids."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\nvar item = new sn_sc.CatCategory(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. availableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n","description":"","output":""}]},{"name":"canView","description":"Determines whether a specified user can view a specified category on a mobile device or\n    desktop.","params":[{"name":"isMobile","type":"Boolean","description":"Flag that indicates whether to verify the user for access on a mobile device or\n                  desktop.<ul class=\"ul\" id=\"CCS-canView_B_S__ul_zpd_3nk_chb\">\n                  <li class=\"li\">true: validate for mobile.</li>\n\n                  <li class=\"li\">false: validate for desktop.</li>\n\n                </ul>"},{"name":"userSysId","type":"String","description":"Unique identifier of the user to validate."}],"returns":{"type":"Boolean","description":"Flag that indicates whether the user can view the associated category.<ul class=\"ul\" id=\"CCS-canView_B_S__ul_iwk_ynk_chb\">\n                  <li class=\"li\">true: user can view the category.</li>\n\n                  <li class=\"li\">false: user cannot view the category.</li>\n\n                </ul>"},"example":[{"code":"var scopedCategoryObj = new sn_sc.CatCategory('7b1262b9530033007444ddeeff7b12ae');\nscopedCategoryObj.canView(false, '62826bf03710200044e0bfc8bcbe5df1');","description":"","output":""}]},{"name":"create","description":"Insert the defined category.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"String","description":"Return the sys_id of the inserted variable record."},"example":[{"code":"var categoryCreate = new sn_sc.CatCategory();\ncategoryCreate.setAttributes({\"title\" : \"test a scoped category\", \"sc_catalog\" : \"e0d08b13c3330100c8b837659bba8fb4\"});\nvar categorySysId = categoryCreate.create();\nvar isValidSysId = categorySysId.match(/^[0-9a-fA-F]{32}$/) == null ? false : true;\nglobal.Assert.assertEquals(true, isValidSysId,\"CategorySysId: [\"+ categorySysId +\"] is not valid\", true, isValidSysId);","description":"","output":""}]},{"name":"deleteRecord","description":"Deletes the category record on which the CatCategory class was initially\n    instantiated.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var categoryDelete = new sn_sc.CatCategory(categorySysId);\ncategoryDelete.deleteRecord();\nvar category = new sn_sc.CatCategory(categorySysId);\nvalues = category.read({\"title\" : \"\", \"sc_catalog\":\"\"}, false);\nglobal.Assert.assertEquals(\"\", values.title,\"Category should title\");","description":"","output":""}]},{"name":"getID","description":"Returns the sys_id of the category.","params":[],"returns":{"type":"String","description":"sys_id of the category."},"example":[{"code":"var cart = new sn_sc.CatCategory(\"2809952237b1300054b6a3549dbe5dd4\");\nvar categoryID = cart.getID();\ngs.info(categoryID);","description":":","output":"2809952237b1300054b6a3549dbe5dd4"}]},{"name":"notAvailableForUserCriteria","description":"Adds the <span class=\"keyword parmname\">Not Available For</span> user criteria to a catalog\n    category.","params":[{"name":"action","type":"String","description":"Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Not Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Not Available For</span> list.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\nvar item = new sn_sc.CatCategory(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. notAvailableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n","description":"","output":""}]},{"name":"read","description":"Get a mapping of the category.","params":[{"name":"columns","type":"Object","description":"Specify the set of columns that you would like the values for."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"Object","description":"An object mapping column names to values."},"example":[{"code":"var category = new sn_sc.CatCategory(\"a96277509f300200b407b89a442e704e\");\nvar values = category.read({\"title\" : \"\"}, true);\ngs.log(values.title);","description":"","output":""}]},{"name":"setAttributes","description":"Define attribute values for this category.","params":[{"name":"attributes","type":"Object","description":"Set the attributes for new field and value pairs."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var categoryCreate = new sn_sc.CatCategory();\ncategoryCreate.setAttributes({\"title\" : \"test a scoped category\", \"sc_catalog\" : \"e0d08b13c3330100c8b837659bba8fb4\"});\nvar categorySysId = categoryCreate.create();\nvar isValidSysId = categorySysId.match(/^[0-9a-fA-F]{32}$/) == null ? false : true;\nglobal.Assert.assertEquals(true, isValidSysId,\"CategorySysId: [\"+ categorySysId +\"] is not valid\", true, isValidSysId);","description":"","output":""}]},{"name":"setTableName","description":"Define the table name for this category.","params":[{"name":"tableName","type":"String","description":"Specify the name of the table that extends sc_category."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var categoryRead = new sn_sc.CatCategory(categorySysId);\ncategoryRead.setTableName(\"test_category\");\nvar values = categoryRead.read({\"title\" : \"\", \"sc_catalog\":\"\", \"test\": \"\"}, false);\ngs.info(categorySysId);\ngs.info(values.title);\ngs.info(values.test);\nglobal.Assert.assertEquals(\"testValue\", values.test,\"Category extends sc_category and stores its extended value\");","description":"","output":""}]},{"name":"update","description":"Use to update current category.","params":[{"name":"columnValues","type":"Object","description":"Object mapping column names to values."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var categoryUpdate = new sn_sc.CatCategory(categorySysId);\ncategoryUpdate.update({\"title\" : \"test changed scoped category\"}, true);\nvalues = categoryUpdate.read({\"title\" : \"\", \"sc_catalog\":\"\"}, false);\nglobal.Assert.assertEquals(\"test changed scoped category\", values.title,\"Category should title\");","description":"","output":""}]}]},"CatItem":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">CatItem</span> API enables you to create and modify service catalog items\n  using scripts. ","example":""},"properties":{},"methods":[{"name":"availableForUserCriteria","description":"Adds the <span class=\"keyword parmname\">Available For</span> user criteria to a catalog\n    item.","params":[{"name":"action","type":"string","description":"Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Available For</span> list.</p>"},{"name":"criteriaIDs","type":"Array","description":"Array of the user criteria sys_ids."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\nvar item = new sn_sc.CatItem(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. availableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n","description":"","output":""}]},{"name":"canViewInDomain","description":"Verifies whether the current catalog item is viewable in the selected domain (domain\n    selected in the domain picker).<p>Catalog items in the global domain are available across all domains.</p>","params":[],"returns":{"type":"Boolean","description":"Flag that validates whether the current catalog item is viewable in the\n                selected domain.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"CI-canViewInDomain__ul_sfm_gdy_shb\">\n                  <li class=\"li\">true: catalog item is viewable in the domain</li>\n\n                  <li class=\"li\">false: catalog item is not viewable in the domain</li>\n\n                </ul>"},"example":[{"code":"var catItem = new sn_sc.CatItem(\"060f3afa3731300054b6a3549dbe5d3e\");\ngs.info(catItem.canViewInDomain());","description":"This example shows how to verify whether a catalog item is viewable in the currently\n        selected domain.","output":""}]},{"name":"canViewOnSearch","description":"Specifies if the user has access to view the catalog item on global search.","params":[{"name":"isMobile","type":"Boolean","description":"True if the search is in mobile view. Else, false."}],"returns":{"type":"Boolean","description":"Returns true if the user has access to view the catalog item on global search.\n                Else, returns false."},"example":[{"code":"var cart=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tdata.history=cart.canViewOnSearch('false');","description":":","output":"false"}]},{"name":"create","description":"Insert the defined catalog item.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"deleteRecord","description":"Delete the defined catalog item.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getFirstAccessibleCategoryForSearch","description":"Specifies the first category that the user can view in a catalog.","params":[{"name":"catalogId","type":"String","description":"sys_id of the catalog."}],"returns":{"type":"String","description":"sys_id of the first category that the user can view in a catalog."},"example":[{"code":"var CatItem=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tconsole.log(CatItem.getFirstAccessibleCategoryForSearch(\"e0d08b13c3330100c8b837659bba8fb4”));","description":":","output":"d258b953c611227a0146101fb1be7c31"}]},{"name":"getRecordClass","description":"Returns the class name for the current catalog item record.","params":[],"returns":{"type":"String","description":"Class name for the current catalog item record."},"example":[{"code":"var CatItem=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tconsole.log(CatItem.getRecordClass());","description":":","output":"sc_cat_item"}]},{"name":"isVisibleServicePortal","description":"Specifies if the catalog item is available in service portal.","params":[],"returns":{"type":"Boolean","description":"Returns true if the catalog item is available in service portal.  Else, returns\n                false."},"example":[{"code":"var CatItem=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tdata.history=CatItem.isVisibleServicePortal();","description":":","output":"true"}]},{"name":"notAvailableForUserCriteria","description":"Adds the <span class=\"keyword parmname\">Not Available For</span> user criteria to a catalog\n    item.","params":[{"name":"action","type":"String","description":"Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Not Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Not Available For</span> list.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\nvar item = new sn_sc.CatItem(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. notAvailableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n","description":"","output":""}]},{"name":"read","description":"Get a mapping of catalog item attribute values.","params":[{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."},{"name":"columns","type":"Object","description":"Specify the set of columns that you would like the values for."}],"returns":{"type":"Object","description":"An object mapping column names to values."},"example":[]},{"name":"setAttributes","description":"Define attribute values for this catalog item.","params":[{"name":"attributes","type":"Object","description":"An object mapping column names to values."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setCatalogs","description":"Define the catalogs that this catalog item is associated with.","params":[{"name":"catalogs","type":"String","description":"Specify comma-separated list of catalogs that you would like the item to be\n                associated with."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setCategories","description":"Define the categories that this catalog item is associated with.","params":[{"name":"categories","type":"String","description":"Specify comma-separated list of categories that you would like the item to be\n                associated with."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setImage","description":"Set the image of a catalog item to a database image record.","params":[{"name":"dbImageSysId","type":"String","description":"sys_id of an attachment referencing the db_image."},{"name":"type","type":"String","description":"Type can be picture or an icon."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTableName","description":"Define the table name for this catalog item.","params":[{"name":"tableName","type":"String","description":"Specify the name of the table that extends sc_cat_item."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"update","description":"Use to update current catalog item with set values.","params":[{"name":"columnValues","type":"Object","description":"An object mapping column names to values."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CertificateEncryption":{"meta":{"has_constructor":true,"description":"APIs available for encrypting certificates in scoped applications. Use these methods to generate a hash for the certificate, sign data using a private key, and\n   generate a message authentication code.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a CertificateEncryption object in a scoped application.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"generateMac","description":"Generates the Message Authentication Code (MAC), which is used to authenticate a\n    message.","params":[{"name":"key","type":"String","description":"Key to use to sign the message. Must be Base64 encoded."},{"name":"algorithm","type":"String","description":"Algorithm to use to generate the MAC: HmacSHA256, HmacSHA1, HmacMD5, and so\n                on."},{"name":"data","type":"String","description":"Data to process."}],"returns":{"type":"String","description":"MAC in base64 format."},"example":[{"code":"var mac = new CertificateEncryption;\nvar key = \"sample_key\"; \nkey = GlideSystem.base64Encode(key);\nmac.generateMac(key, \"HmacSHA256\", \"sample_data\");","description":"","output":""}]},{"name":"getThumbPrint","description":"Generates a hash (SHA-1, SHA-256, and so on) for the certificate from Trust Store\n    Cert.","params":[{"name":"certificateID","type":"String","description":"sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."},{"name":"algorithm","type":"String","description":"SHA-1, SHA-256, and so on"}],"returns":{"type":"String","description":"Thumbprint in base64 format."},"example":[]},{"name":"getThumbPrintFromKeystore","description":"Generates a hash (SHA-1, SHA-256, and so on) for the certificate from the keystore\n    entry.","params":[{"name":"certificateID","type":"String","description":"sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."},{"name":"alias","type":"String","description":"Alias name for the certificate."},{"name":"algorithm","type":"String","description":"SHA-1, SHA-256, and so on."}],"returns":{"type":"String","description":"Thumbprint in base64 format."},"example":[]},{"name":"sign","description":"Signs the data using the private key and the given algorithm.","params":[{"name":"certificateID","type":"String","description":"sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."},{"name":"alias","type":"String","description":"Private key name."},{"name":"aliaspassword","type":"String","description":"Password for the private key."},{"name":"datatosign","type":"String","description":"Data to sign."},{"name":"algorithm","type":"String","description":"SHA-1, SHA-256, and so on."}],"returns":{"type":"String","description":"Signed data in base64 format."},"example":[{"code":"var ce = new CertificateEncryption;\nce.sign(\"recordID\", \"alias\", \"password\", \"SHA-1\", \"sign this data\");","description":"","output":""}]}]},"Client":{"meta":{"has_constructor":true,"description":"Provides methods to add data to the <span class=\"ph\">MetricBase</span> database, to execute\n    transforms on the <span class=\"ph\">MetricBase</span>\n    database, and to receive the results of the transforms. The Client class can be used in scoped and global server scripts. When using the Client\n      class, use the sn_clotho namespace identifier.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Create an instance of the client class to access the <span class=\"ph\">MetricBase</span> database.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var client = new sn_clotho.Client();","description":"","output":""}]},{"name":"deleteSeries","description":"Remove the data in the <span class=\"ph\">MetricBase</span> database associated with\n    the specified metric in the specified GlideRecord. Use this method for removing test data.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method deletes data from the <span class=\"ph\">MetricBase</span> database. There is no\n          recovery mechanism. </div></p>","params":[{"name":"gr","type":"GlideRecord","description":"The records whose time series data for the specified metric is to be\n                deleted."},{"name":"metric","type":"String","description":"The name of the metric."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var client = new sn_clotho.Client();\n//query drones of a specific model\nvar drones = new GlideRecord(\"mb_demo_drone\");\ndrones.addQuery(\"model\", \"Kingfisher Phantom\");\ndrones.query();\n\nclient.deleteSeries(drones, 'mb_demo_mt_speed');","description":"","output":""}]},{"name":"put","description":"Save metric data to the <span class=\"ph\">MetricBase</span> database.","params":[{"name":"metricData","type":"DataBuilder","description":"A DataBuilder object containing metric data."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"CMDBGroupAPI":{"meta":{"has_constructor":false,"description":"The CMDBGroupAPI provided methods for performing actions on CMDB groups. The CMDBGroupAPI is a scoped static class. To use the class you must include the namespace\n   identifier sn_cmdbgroup before the CMDBGroupAPI object. For\n   example:<pre ng-prism='' source='var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, false);' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"getAllCI","description":"Returns all CIs for this group. This includes all manual CIs and the list of CIs from\n    the Query Builder's saved query.","params":[{"name":"groupId","type":"String","description":"The sysId of the CMDB group."},{"name":"requireCompleteSet","type":"Boolean","description":"When true, returns an empty string if any CIs are filtered out by ACL\n                restrictions."}],"returns":{"type":"String","description":"A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-getAllCI_S_B__d72354e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"},"example":[{"code":"// Script example:\nvar getAllCIFunc = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getAllCI(groupSysId, false);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to retrieve ci list: \" + parsed.idList);\n    } else {\n        gs.print(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupContainsInvalidSavedQuery = \"e685a2c3d7012200de92a5f75e610387\";\ngetAllCIFunc(groupExists);\ngetAllCIFunc(groupContainsInvalidSavedQuery);","description":"","output":"succeed to retrieve ci list: 539747cac0a801640163e60735fbbf6e,\n3a5dd3dbc0a8ce0100655f1ec66ed42c,6b43105c37301000deeabfc8bcbe5db2,\n3a290cc60a0a0bb400000bdb386af1cf,53958ff0c0a801640171ec76aa0c8f86,\n2dfd7c8437201000deeabfc8bcbe5d56\nfail to retrieve list, errors: [{&quot;message&quot;:&quot;Query Builder process status\n is failed for processing query id 6d85a683d7012200de92a5f75e6103c0&quot;,\n&quot;error&quot;:&quot;ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY&quot;}]"}]},{"name":"getAllCIFromQueryBuilder","description":"Returns all CIs returned from all saved query builder's query IDs for the specified\n    group.","params":[{"name":"groupId","type":"String","description":"The sysId of the CMDB group."},{"name":"requireCompleteSet","type":"Boolean","description":"When true, returns an empty string if any CIs are filtered out by ACL\n                restrictions."}],"returns":{"type":"String","description":"A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-getAllCIFromQBuild_S_B__d72354e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"},"example":[{"code":"// Script example:\nvar getAllCIFromQueryBuilderFunc = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getAllCIFromQueryBuilder(groupSysId, false);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to retrieve ci list: \" + parsed.idList);\n    } else {\n        gs.print(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupContainsInvalidSavedQuery = \"e685a2c3d7012200de92a5f75e610387\";\ngetAllCIFromQueryBuilderFunc(groupExists);\ngetAllCIFromQueryBuilderFunc(groupContainsInvalidSavedQuery);","description":"","output":"succeed to retrieve ci list: 539747cac0a801640163e60735fbbf6e,\n3a5dd3dbc0a8ce0100655f1ec66ed42c,3a290cc60a0a0bb400000bdb386af1cf,\n53958ff0c0a801640171ec76aa0c8f86\nfail to retrieve list, errors: [{&quot;message&quot;:&quot;Query Builder process \nstatus is failed for processing \nquery id 6d85a683d7012200de92a5f75e6103c0&quot;,\n&quot;error&quot;:&quot;ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY&quot;}]"}]},{"name":"getManualCIList","description":"Returns the CMDB group's manual CI list.","params":[{"name":"groupId","type":"String","description":"The sysId of the CMDB group."},{"name":"requireCompleteSet","type":"Boolean","description":"When true, returns an error string if any CIs are filtered out by ACL\n                restrictions."}],"returns":{"type":"String","description":"A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-getManualCIList_S_B__d72354e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"},"example":[{"code":"// Script example for requireCompleteSet being false:\n    var getManualCIList = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, false);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to retrieve ci list: \" + parsed.idList);\n    } else {\n        gs.print(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\n// create a group in cmdb_group, and add CIs to this group in Edit Manual CI form\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\n// use a non-exist group\nvar groupDoesNotExists = \"d0d2d25113152200eef2dd828144b0e4111\";\ngetManualCIList(groupExists);\ngetManualCIList(groupDoesNotExists);\n ","description":"","output":"succeed to retrieve ci \nlist: 6b43105c37301000deeabfc8bcbe5db2,2dfd7c8437201000deeabfc8bcbe5d56\nfail to retrieve list, errors: \n[{&quot;message&quot;:&quot;Group does not exist&quot;,&quot;error&quot;:&quot;GROUP_SYS_ID_IS_NOT_FOUND&quot;}]"},{"code":"// Script example for requireCompleteSet being true\n    var getManualCIList = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, true);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to retrieve ci list: \" + parsed.idList);\n    } else {\n        gs.print(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\n// create a group in cmdb_group, and add CIs to this group in Edit Manual CI form\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\ngetManualCIList(groupExists);","description":"","output":"fail to retrieve list, errors: \n[{&quot;message&quot;:&quot;Some CI(s) not visible due to security constraint&quot;,\n&quot;error&quot;:&quot;SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT&quot;}]"}]},{"name":"getSavedQueryIdList","description":"Returns the query builder's query IDs for the specified CMDB group.","params":[{"name":"groupId","type":"String","description":"The sysId of the CMDB group."},{"name":"requireCompleteSet","type":"Boolean","description":"When true, returns an empty string if any CIs are filtered out by ACL\n                restrictions."}],"returns":{"type":"String","description":"A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-getSavedQueryIdList_S_B__d72354e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"},"example":[{"code":"// Script example:\nvar getSavedQueryIdList = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getSavedQueryIdList(groupSysId, false);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to retrieve saved query id list: \" + parsed.idList);\n    } else {\n        gs.print(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupDoesNotExists = \"d0d2d25113152200eef2dd828144b0e4111\";\ngetSavedQueryIdList(groupExists);\ngetSavedQueryIdList(groupDoesNotExists);","description":"","output":"succeed to retrieve saved query id list: 5d498532d7c12200de92a5f75e6103ce\nfail to retrieve list, errors:\n [{&quot;message&quot;:&quot;Group does not exist&quot;,&quot;error&quot;:&quot;GROUP_SYS_ID_IS_NOT_FOUND&quot;}]"}]},{"name":"setManualCIList","description":"Sets the manual CI list for the specified group. The existing manual CI list is\n    overwritten. CI sysIds not found in the cmdb_ci table are ignored.","params":[{"name":"groupId","type":"String","description":"The sysId of the CMDB group."},{"name":"ciSysIds","type":"String","description":"Comma separated list of CI sysIds."}],"returns":{"type":"String","description":"A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-setManualCIList_S_S__ul_hb5_4sp_mx\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"},"example":[{"code":"// Script example:\nvar setManualCIListFunc = function(groupSysId, manualCIList) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.setManualCIList(groupSysId, manualCIList);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to set manual ci list\");\n    } else {\n        gs.print(\"fail to set manual ci list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar group = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupDoesNotExist = \"1234\";\nvar manualCIList = \"b4fd7c8437201000deeabfc8bcbe5dc1, affd3c8437201000deeabfc8bcbe5dc3\";\nsetManualCIListFunc(group, manualCIList);\nsetManualCIListFunc(groupDoesNotExist, manualCIList);","description":"","output":"succeed to set manual ci list\nfail to set manual ci list, errors: [{&quot;message&quot;:&quot;Group does not exist&quot;,&quot;error&quot;:\n&quot;GROUP_SYS_ID_IS_NOT_FOUND&quot;}]"}]},{"name":"setSavedQueryIdList","description":"Sets the saved query ID list for the specified group. The existing query ID list is\n    overwritten. Query sysIds not found in the qb_saved_query table are ignored.","params":[{"name":"groupId","type":"String","description":"The sysId of the CMDB group."},{"name":"queryIds","type":"String","description":"Comma separated list of saved query sysIds."}],"returns":{"type":"String","description":"A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-setSavedQueryIdList_S_S__d72354e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"},"example":[{"code":"// Script example:\nvar setSavedQueryIdListFunc = function(groupSysId, queryIdList) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.setSavedQueryIdList(groupSysId, queryIdList);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.print(\"succeed to set saved query id list\");\n    } else {\n        gs.print(\"fail to set saved query id list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar group = \"d0d2d25113152200eef2dd828144b0e4\";\nvar savedQueryBuilderIdList = \"394585fed7812200de92a5f75e6103e8\";\nvar savedQueryBuilderIdNotExistList = \"b4fd7c8437201000deeabfc8bcbe5dc1,\n   affd3c8437201000deeabfc8bcbe5dc3\";\n \nsetSavedQueryIdListFunc(group, savedQueryBuilderIdList);\nsetSavedQueryIdListFunc(group, savedQueryBuilderIdNotExistList);\n","description":"","output":"succeed to set saved query id list\nfail to set saved query id list, errors: [{&quot;message&quot;:\n&quot;Saved query id(b4fd7c8437201000deeabfc8bcbe5dc1) is not found for \ngroup(d0d2d25113152200eef2dd828144b0e4)&quot;,&quot;error&quot;:\n&quot;SAVED_QUERY_ID_NOT_FOUND&quot;},{&quot;message&quot;:\n&quot;Saved query id(affd3c8437201000deeabfc8bcbe5dc3) is not found for \ngroup(d0d2d25113152200eef2dd828144b0e4)&quot;,&quot;error&quot;:&quot;SAVED_QUERY_ID_NOT_FOUND&quot;}]"}]}]},"ConnectionInfo":{"meta":{"has_constructor":false,"description":"Use ConnectionInfo API to get connection attribute information through the connection\n    and credential alias. You can use this API in scoped applications, or within the global scope. In scoped scripts,\n      use the <samp class=\"ph codeph\">sn_cc</samp> namespace identifier.<br/><br/>This function retrieves connection attribute information identified by the given connection\n      and credential alias.<br/><br/><pre ng-prism='' source='var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the current domain with the alias ID\n//     \"6219afbf9f03320021dd7501942e70fc\"\nvar connectionInfo = provider.getConnectionInfo(\"6219afbf9f03320021dd7501942e70fc\");\nif (connectionInfo != null) {\n  // get data map\n  var datamap = connectionInfo.getDataMap();\n  gs.info(datamap[\"name\"]);\n  gs.info(datamap[\"connection_url\"]);\n\n  // get the same values using getAttribute\n  gs.info(connectionInfo.getAttribute(\"name\"));\n  gs.info(connectionInfo.getAttribute(\"connection_url\"));\n\n  // get credential attributes\n  gs.info(connectionInfo.getCredentialAttribute(\"user_name\"));\n  gs.info(connectionInfo.getCredentialAttribute(\"password\")); \n\n  // get extended attributes\n  var extendedAttributes = connection.getExtendedAttributes();  \n  gs.info(extendedAttributes[\"name1\"]);\n }\n\n // get a jdbc connection in the ACME domain with the alias ID\n //      \"cd5923ff9f03320021dd7501942e70bb\"\n connectionInfo = provider.getConnectionInfoByDomain(\"cd5923ff9f03320021dd7501942e70bb\",\n        \"c90d4b084a362312013398f051272c0d\");\n if (connectionInfo != null) {\n   // get data map\n   var datamap = connectionInfo.getDataMap();\n   gs.info(datamap[\"name\"]);\n }\n' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"getAttribute","description":"Returns the value of a connection info attribute with the specified name.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"  // get the same values using getAttribute\n  gs.info(connectionInfo.getAttribute(\"name\"));\n  gs.info(connectionInfo.getAttribute(\"connection_url\"));\n","description":"","output":""}]},{"name":"getCredentialAttribute","description":"Returns the value of credential attributes for a specified connection.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":" // get credential attributes\n  gs.info(connectionInfo.getCredentialAttribute(\"user_name\"));\n  gs.info(connectionInfo.getCredentialAttribute(\"password\")); \n","description":"","output":""}]},{"name":"getDataMap","description":"Returns the connection attributes as a collection of key-value pairs.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":" // get data map\n  var datamap = connectionInfo.getDataMap();\n  gs.info(datamap[\"name\"]);\n  gs.info(datamap[\"connection_url\"]);\n","description":"","output":""}]},{"name":"getExtendedAttributes","description":"Returns the extended attributes as a collection of key-value pairs.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// get extended attributes\n  var extendedAttributes = connection.getExtendedAttributes();  \n  gs.info(extendedAttributes[\"name1\"]);\n }\n","description":"","output":""}]}]},"ConnectionInfoProvider":{"meta":{"has_constructor":true,"description":"Use ConnectionInfoProvider API to select connection information through the connection\n    alias. You can use this API in scoped applications, or within the global scope. In scoped scripts,\n      use the <samp class=\"ph codeph\">sn_cc</samp> namespace identifier.<br/><br/>This function retrieves connection information identified by the given connection alias.<br/><br/><pre ng-prism='' source='var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the current domain with the alias ID\n//     \"6219afbf9f03320021dd7501942e70fc\"\nvar connectionInfo = provider.getConnectionInfo(\"6219afbf9f03320021dd7501942e70fc\");\nif (connectionInfo != null) {\n  // get data map\n  var datamap = connectionInfo.getDataMap();\n  gs.info(datamap[\"name\"]);\n  gs.info(datamap[\"connection_url\"]);\n\n  // get the same values using getAttribute\n  gs.info(connectionInfo.getAttribute(\"name\"));\n  gs.info(connectionInfo.getAttribute(\"connection_url\"));\n\n  // get credential attributes\n  gs.info(connectionInfo.getCredentialAttribute(\"user_name\"));\n  gs.info(connectionInfo.getCredentialAttribute(\"password\")); \n\n  // get extended attributes\n  var extendedAttributes = connection.getExtendedAttributes();  \n  gs.info(extendedAttributes[\"name1\"]);\n }\n\n // get a jdbc connection in the ACME domain with the alias ID\n //      \"cd5923ff9f03320021dd7501942e70bb\"\n connectionInfo = provider.getConnectionInfoByDomain(\"cd5923ff9f03320021dd7501942e70bb\",\n        \"c90d4b084a362312013398f051272c0d\");\n if (connectionInfo != null) {\n   // get data map\n   var datamap = connectionInfo.getDataMap();\n   gs.info(datamap[\"name\"]);\n }\n' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Use ConnectionInfoProvider() to select connection information through the connection\n    alias.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getConnectionInfo","description":"This function retrieves a ConnectionInfo object identified by the given aliasID in the\n    current domain.","params":[{"name":"aliasID","type":"String","description":"The sys_id of a connection alias."}],"returns":{"type":"ConnectionInfo","description":"Information about the connection."},"example":[{"code":"var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the current domain with the alias ID\n//     \"6219afbf9f03320021dd7501942e70fc\"\nvar connectionInfo = provider.getConnectionInfo(\"6219afbf9f03320021dd7501942e70fc\");","description":"","output":""}]},{"name":"getConnectionInfoByDomain","description":"This function retrieves a ConnectionInfo object identified by the given aliasID for a\n    specific domain.","params":[{"name":"aliasID","type":"String","description":"The sys_id of a connection alias."},{"name":"domainID","type":"String","description":"The sys_id of a domain or global."}],"returns":{"type":"ConnectionInfo","description":"Connection information."},"example":[{"code":"var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the ACME domain with the alias ID\n //      \"cd5923ff9f03320021dd7501942e70bb\"\n connectionInfo = provider.getConnectionInfoByDomain(\"cd5923ff9f03320021dd7501942e70bb\",\n        \"c90d4b084a362312013398f051272c0d\");","description":"","output":""}]}]},"Conversation":{"meta":{"has_constructor":false,"description":"Conversation API enables you to create or modify Connect conversations. To use this class in a scoped application, use the sn_connect namespace identifier. The\n      Connect Scriptable APIs plugin (ID: com.glide.connect.scriptable) should be enabled to access\n      the <span class=\"keyword apiname\">Conversation</span> API.","example":""},"properties":{},"methods":[{"name":"addSubscriber","description":"Add a user to a conversation.","params":[{"name":"sysID","type":"String","description":"The sys_ID of the user you want to add to a conversation."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var conversation = sn_connect.Conversation.get(\"7caf49111309030034bb58a12244b06c\");\nconversation.addSubscriber(\"a8f98bb0eb32010045e1a5115206fe3a\");","description":"","output":""}]},{"name":"create","description":"Create a <span class=\"ph\">Connect</span>\n    conversation.","params":[{"name":"name","type":"String","description":"Create a conversation with a specific name."},{"name":"type","type":"String","description":"Include a specific conversation type. The type is determined by the type choice\n                list. The base system includes the following type options: <ul class=\"ul\" id=\"conversation-create_String_String__ul_ut2_4df_wbb\">\n                  <li class=\"li\">connect</li>\n\n                  <li class=\"li\">support</li>\n\n                  <li class=\"li\">group</li>\n\n                  <li class=\"li\">peer</li>\n\n                  <li class=\"li\">qanda</li>\n\n                  <li class=\"li\">team</li>\n\n                </ul>"}],"returns":{"type":"Object","description":"Scriptable Conversation"},"example":[{"code":"var conversation = sn_connect.Conversation.create({\n    name: \"Hello world\",\n    type: \"connect\"\n});","description":"","output":""}]},{"name":"get","description":"Get an existing Connect conversation by sys_id.","params":[{"name":"sysID","type":"String","description":"The sys_id of the conversation record."}],"returns":{"type":"Object","description":"Conversation object"},"example":[{"code":"var conversation = sn_connect.Conversation.get(\"27b9844c1385030034bb58a12244b037\");","description":"","output":""}]},{"name":"removeSubscriber","description":"Remove a user from a conversation.","params":[{"name":"SysID","type":"String","description":"The sys_id of the user you want to remove from a conversation."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var conversation = sn_connect.Conversation.get(\"7caf49111309030034bb58a12244b06c\");\nconversation.removeSubscriber(\"a8f98bb0eb32010045e1a5115206fe3a\");","description":"","output":""}]},{"name":"sendMessage","description":"Send a message to a conversation.","params":[{"name":"Body","type":"String","description":"The main text of the message."},{"name":"Field","type":"String","description":"The field you want the message to appear as. Only use this option if adding a\n                message to a record conversation. Choose from work_notes, comments, or system. Using\n                the field system treats the message as a system message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var conversation = sn_connect.Conversation.get(\"2064fa3919010300964f5270e9840fbb\");\nconversation.sendMessage(body: \"Hello world\", field: \"work_notes\");","description":"","output":""}]}]},"Data":{"meta":{"has_constructor":false,"description":"A Data object contains the results of transform performed by a\n      <span class=\"keyword apiname\">sn_clotho.Client.transform()</span> method. Do not use a constructor to create an instance of this class, instead use the object returned\n      by the <span class=\"keyword apiname\">sn_clotho.Client.transform()</span> method.<br/><br/>The Data class can be used in scoped and global server scripts. When using the Data class,\n      use the sn_clotho namespace identifier.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.","example":""},"properties":{},"methods":[{"name":"getEnd","description":"Returns the end time for data in the Data object.","params":[],"returns":{"type":"GlideDateTime","description":"The end of the time period."},"example":[]},{"name":"getLabel","description":"Returns the label assigned by the <span class=\"keyword apiname\">\n      sn_clotho.ClothoTransform.label()</span> method.","params":[],"returns":{"type":"String","description":"The label assigned to the data."},"example":[]},{"name":"getMetricName","description":"Returns the name of the metric of the data series. Returns null when the data object is\n    associated with multiple data series.","params":[],"returns":{"type":"String","description":"Name of the metric field. Returns null when the data object is associated with\n                multiple data series."},"example":[]},{"name":"getPeriod","description":"Returns the time period in milliseconds.","params":[],"returns":{"type":"Number","description":"The elapsed time in seconds."},"example":[]},{"name":"getStart","description":"Returns the start time for data in the Data object.","params":[],"returns":{"type":"GlideDateTime","description":"The time for the first data point."},"example":[]},{"name":"getSubject","description":"Returns the subject of the data series. Returns null when the data object is associated\n    with multiple data series.","params":[],"returns":{"type":"String","description":"The subject field value of the subject GlideRecord. This is generally the\n                sys_id of the subject GlideRecord."},"example":[]},{"name":"getTableName","description":"Returns the name of the table assigned in the DataSelector class constructor. Returns\n    null when the data object is associated with multiple data series.","params":[],"returns":{"type":"String","description":"Table name. Returns null when the data object is associated with multiple data\n                series."},"example":[]},{"name":"getValues","description":"Returns an array of values.","params":[],"returns":{"type":"Array","description":"An array of numbers."},"example":[]},{"name":"size","description":"Returns the number of values in the Data object.","params":[],"returns":{"type":"Number","description":"The number of values in the object."},"example":[]}]},"DataBuilder":{"meta":{"has_constructor":true,"description":"Use the DataBuilder class to create a series of data points for a metric. Use the\n      <span class=\"keyword apiname\">sn_clotho.Client.put()</span> method to save the values. The DataBuilder class can be used in scoped and global server scripts. When using the\n      DataBuilder class, use the sn_clotho namespace identifier.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the DataBuilder class.","params":[{"name":"glideRecord","type":"Object","description":"GlideRecord from which to obtain the domain."},{"name":"subject","type":"String","description":"The sys_id of the GlideRecord associated with this series."},{"name":"metric","type":"String","description":"The field name of the metric."}],"returns":{"type":"","description":""},"example":[{"code":"// Where cpu_percentage is the name of the metric\nvar dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');","description":"","output":""}]},{"name":"add","description":"Add a series of data points to the DataBuilder object. Each data point is a time stamp\n    and a value.<p>Uses the start parameter and the retention policy collection period to calculate the time\n        stamp for each value in the array. The first value has the start parameter as the time\n        stamp. This method does not save the data in the MetricBase database. Use the\n          <span class=\"keyword apiname\">sn_clotho.Client.put()</span> method to save the values.</p>","params":[{"name":"start","type":"GlideDateTime","description":"The time stamp for the first data point. Subsequent time stamps are calculated\n                using the retention policy collection period."},{"name":"value","type":"Array","description":"An array of numbers."}],"returns":{"type":"DataBuilder","description":"The same DataBuilder object."},"example":[{"code":"\nvar points = [7,0.5,273];\nvar dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');\n// this creates a GlideDateTime object set to the current date and time\nvar time = new GlideDateTime();\ndataBuilder.add(time, points);","description":"","output":""}]},{"name":"add","description":"Add a data point to the DataBuilder object. Each data point is a time stamp and a\n    value. This method does not save the data point in the metric. Use the\n      <span class=\"keyword apiname\">sn_clotho.Client.put()</span> method to save the values.","params":[{"name":"start","type":"GlideDateTime","description":"The time stamp for the data point."},{"name":"value","type":"Number","description":"The value of the data point."}],"returns":{"type":"DataBuilder","description":"The DataBuilder object."},"example":[{"code":"var dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');\n// this creates a GlideDateTime object set to the current date and time\nvar time = new GlideDateTime();\ndataBuilder.add(time, 0.6);","description":"","output":""}]}]},"DecisionTableAPI":{"meta":{"has_constructor":true,"description":"Use the DecisionTableAPI class to access <span class=\"ph\">Decision Tables</span> data in scoped and\n    global server-side scripts. Access DecisionTableAPI methods using the <samp class=\"ph codeph\">sn_dt</samp> namespace. To learn more\n      about <span class=\"ph\">Decision Tables</span>, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/administer/decision-table/concept/decision-table.html\" target=\"_blank\">Decision Tables</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a DecisionTableAPI object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();","description":"","output":""}]},{"name":"getAll","description":"Returns all decision tables from the Decision Tables [sys_decision] table.","params":[],"returns":{"type":"Object","description":"All decision tables and their fields from the Decision Tables [sys_decision]\n                table. Each decision table contains these key-value pairs: <ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_vvz_psd_h3b\">\n        <li class=\"li\">distinctAnswers: Array. Answer records associated with the decision table. Each record\n         contains these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_ppz_npd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">referenceQualifier: String. Used for internal purposes. </li>\n\n        <li class=\"li\">inputs: Array. Decision inputs from the Decision Inputs [sys_decision_input] table\n         associated with the decision table. Each record contains these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_n4g_spd_h3b\">\n        <li class=\"li\">searchField: String. Used for internal purposes.</li>\n\n        <li class=\"li\">defaultValue: String. Default value for the input. </li>\n\n        <li class=\"li\">show_ref_finder: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">use_dependent: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">type: String. Input data type.</li>\n\n        <li class=\"li\">mandatory: Boolean. True if the input is mandatory; otherwise false. </li>\n\n        <li class=\"li\">extended: Boolean. True if the input extends another field; otherwise false. </li>\n\n        <li class=\"li\">local: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">sys_class_name: String. Used for internal purposes.</li>\n\n        <li class=\"li\">reference: String. Reference table used if the input type is reference. </li>\n\n        <li class=\"li\">dependent_on: String. Field that document ID and choice inputs depend on.</li>\n\n        <li class=\"li\">data_structure: String. Used for internal purposes.</li>\n\n        <li class=\"li\">readonly: Boolean. True if the input is read-only; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the input from the Decision Inputs [sys_decision_input]\n         table.</li>\n\n        <li class=\"li\">type_label: String. Input data type label. </li>\n\n        <li class=\"li\">table: String. Reference field table if the input type is reference.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates inputs.</li>\n\n        <li class=\"li\">ref_qual: String. Condition applied to the reference table. </li>\n\n        <li class=\"li\">reference_display: String. Used for internal purposes.</li>\n\n        <li class=\"li\">choiceOption: String. Method for users to see a list of suggested values.</li>\n\n        <li class=\"li\">label: String. Label of the input record.</li>\n\n        <li class=\"li\">hint: String. Hint text used to help users understand the input required. </li>\n\n        <li class=\"li\">name: String. Internal name of the input record. </li>\n\n        <li class=\"li\">attributes: Array. Field attributes that apply to the input record.</li>\n\n        <li class=\"li\">maxsize: Number. Maximum number of characters allowed in the field. </li>\n\n        <li class=\"li\">columnName: String. Name of the input.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision table is visible.</li>\n\n        <li class=\"li\">answerType: String. Used for internal purposes.</li>\n\n        <li class=\"li\">questions: Array. Decision records from the Decision [sys_decision_question] table\n         associated with the decision table. Decision records contain these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_t4r_nyd_h3b\">\n        <li class=\"li\">defaultAnswer: Boolean. True if this decision is the default for the decision table;\n         otherwise false.</li>\n\n        <li class=\"li\">condition: String. Conditions required to reach this decision. The fields available for\n         the condition are the decision inputs that are associated with this decision table.</li>\n\n        <li class=\"li\">answer: Object. Answer record associated with the decision. Answer objects contain these\n         key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_myc_2rd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">decisionTable: String. Sys ID of the decision table from the Decision Tables\n         [sys_decision] table associated with the decision.</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision is visible.</li>\n\n        <li class=\"li\">active: Boolean. True if the decision record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision record from the Decision [sys_decision_question]\n         table.</li>\n\n        <li class=\"li\">label: String. Label for the decision record.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates decisions.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">accessibleFrom: String. Scopes that have access to the record.</li>\n\n        <li class=\"li\">name: String. Internal name of the decision table record. </li>\n\n        <li class=\"li\">active: Boolean. True if the decision table record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision table record.</li>\n\n        <li class=\"li\">label: String. Label of the decision table record.</li>\n\n        <li class=\"li\">answerTable: Object. Answer table associated with the decision table. <ul class=\"ul\" id=\"DecisionTableAPI-getAll__d72622e229\">\n          <li class=\"li\">displayValue: String. Display name of the table that contains answer records.</li>\n\n          <li class=\"li\">value: String. Internal name of the table that contains answer records.</li>\n\n         </ul>\n</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getAll();\ngs.print(JSON.stringify(response));\n","description":"","output":"{&quot;result&quot;: [\n  {\n    &quot;distinctAnswers&quot;: [{\n      &quot;valid&quot;: true,\n      &quot;label&quot;: &quot;Assignment Group Manager Approval&quot;,\n      &quot;value&quot;: &quot;5684821db701230034d1da23ee11a94d&quot;,\n      &quot;table&quot;: &quot;chg_approval_def&quot;\n    }],\n    &quot;referenceQualifier&quot;: &quot;&quot;,\n    &quot;inputs&quot;: [\n      {\n        &quot;searchField&quot;: null,\n        &quot;defaultValue&quot;: &quot;0&quot;,\n        &quot;show_ref_finder&quot;: false,\n        &quot;use_dependent&quot;: false,\n        &quot;type&quot;: &quot;integer&quot;,\n        &quot;mandatory&quot;: false,\n        &quot;extended&quot;: false,\n        &quot;local&quot;: false,\n        &quot;sys_class_name&quot;: &quot;&quot;,\n        &quot;reference&quot;: &quot;&quot;,\n        &quot;dependent_on&quot;: &quot;&quot;,\n        &quot;data_structure&quot;: &quot;&quot;,\n        &quot;readonly&quot;: false,\n        &quot;id&quot;: &quot;eca52ca7b701230034d1da23ee11a95a&quot;,\n        &quot;type_label&quot;: &quot;Integer&quot;,\n        &quot;table&quot;: &quot;&quot;,\n        &quot;order&quot;: 100,\n        &quot;ref_qual&quot;: &quot;&quot;,\n        &quot;reference_display&quot;: &quot;&quot;,\n        &quot;choiceOption&quot;: &quot;&quot;,\n        &quot;label&quot;: &quot;CI Count&quot;,\n        &quot;hint&quot;: &quot;&quot;,\n        &quot;name&quot;: &quot;ci_count&quot;,\n        &quot;attributes&quot;: {&quot;element_mapping_provider&quot;: &quot;com.glide.decision_table.data.DecisionTableVariableMapper&quot;},\n        &quot;maxsize&quot;: 40,\n        &quot;columnName&quot;: &quot;&quot;\n      },\n      {\n        &quot;searchField&quot;: &quot;number&quot;,\n        &quot;defaultValue&quot;: &quot;&quot;,\n        &quot;show_ref_finder&quot;: false,\n        &quot;use_dependent&quot;: false,\n        &quot;type&quot;: &quot;reference&quot;,\n        &quot;mandatory&quot;: false,\n        &quot;extended&quot;: false,\n        &quot;local&quot;: false,\n        &quot;sys_class_name&quot;: &quot;&quot;,\n        &quot;reference&quot;: &quot;change_request&quot;,\n        &quot;dependent_on&quot;: &quot;&quot;,\n        &quot;data_structure&quot;: &quot;&quot;,\n        &quot;readonly&quot;: false,\n        &quot;id&quot;: &quot;1395e8a7b701230034d1da23ee11a9b6&quot;,\n        &quot;type_label&quot;: &quot;Reference&quot;,\n        &quot;table&quot;: &quot;&quot;,\n        &quot;order&quot;: 100,\n        &quot;ref_qual&quot;: &quot;&quot;,\n        &quot;reference_display&quot;: &quot;Change Request&quot;,\n        &quot;choiceOption&quot;: &quot;&quot;,\n        &quot;label&quot;: &quot;Change request&quot;,\n        &quot;hint&quot;: &quot;&quot;,\n        &quot;name&quot;: &quot;change_request&quot;,\n        &quot;attributes&quot;: {&quot;element_mapping_provider&quot;: &quot;com.glide.decision_table.data.DecisionTableVariableMapper&quot;},\n        &quot;maxsize&quot;: 32,\n        &quot;columnName&quot;: &quot;&quot;\n      }\n    ],\n    &quot;domain&quot;: &quot;global&quot;,\n    &quot;answerType&quot;: &quot;reference&quot;,\n    &quot;questions&quot;: [{\n      &quot;defaultAnswer&quot;: false,\n      &quot;condition&quot;: &quot;ci_count&gt;=1000^EQ&quot;,\n      &quot;answer&quot;: {\n        &quot;valid&quot;: true,\n        &quot;label&quot;: &quot;Assignment Group Manager Approval&quot;,\n        &quot;value&quot;: &quot;5684821db701230034d1da23ee11a94d&quot;,\n        &quot;table&quot;: &quot;chg_approval_def&quot;\n      },\n      &quot;decisionTable&quot;: &quot;e49568a7b701230034d1da23ee11a913&quot;,\n      &quot;domain&quot;: &quot;global&quot;,\n      &quot;active&quot;: true,\n      &quot;state&quot;: null,\n      &quot;id&quot;: &quot;2a36eca7b701230034d1da23ee11a961&quot;,\n      &quot;label&quot;: &quot;Mandatory Approval if 1000 CIs or more&quot;,\n      &quot;order&quot;: 0\n    }],\n    &quot;accessibleFrom&quot;: &quot;public&quot;,\n    &quot;name&quot;: &quot;Example Standard Change Policy&quot;,\n    &quot;active&quot;: true,\n    &quot;id&quot;: &quot;e49568a7b701230034d1da23ee11a913&quot;,\n    &quot;label&quot;: &quot;&quot;,\n    &quot;answerTable&quot;: {\n      &quot;displayValue&quot;: &quot;Change Approval Definition&quot;,\n      &quot;value&quot;: &quot;chg_approval_def&quot;\n    }\n  },\n  {\n    &quot;distinctAnswers&quot;: [\n      {\n        &quot;valid&quot;: true,\n        &quot;label&quot;: &quot;CAB Approval&quot;,\n        &quot;value&quot;: &quot;45358a5db701230034d1da23ee11a938&quot;,\n        &quot;table&quot;: &quot;chg_approval_def&quot;\n      },\n      {\n        &quot;valid&quot;: true,\n        &quot;label&quot;: &quot;Assignment Group Manager Approval&quot;,\n        &quot;value&quot;: &quot;5684821db701230034d1da23ee11a94d&quot;,\n        &quot;table&quot;: &quot;chg_approval_def&quot;\n      },\n      {\n        &quot;valid&quot;: true,\n        &quot;label&quot;: &quot;Assignment Group Approval&quot;,\n        &quot;value&quot;: &quot;dc95ca5db701230034d1da23ee11a9e9&quot;,\n        &quot;table&quot;: &quot;chg_approval_def&quot;\n      }\n    ],\n    &quot;referenceQualifier&quot;: &quot;&quot;,\n    &quot;inputs&quot;: [\n      {\n        &quot;searchField&quot;: null,\n        &quot;defaultValue&quot;: &quot;false&quot;,\n        &quot;show_ref_finder&quot;: false,\n        &quot;use_dependent&quot;: false,\n        &quot;type&quot;: &quot;boolean&quot;,\n        &quot;mandatory&quot;: false,\n        &quot;extended&quot;: false,\n        &quot;local&quot;: false,\n        &quot;sys_class_name&quot;: &quot;&quot;,\n        &quot;reference&quot;: &quot;&quot;,\n        &quot;dependent_on&quot;: &quot;&quot;,\n        &quot;data_structure&quot;: &quot;&quot;,\n        &quot;readonly&quot;: false,\n        &quot;id&quot;: &quot;c0a7869db701230034d1da23ee11a9e7&quot;,\n        &quot;type_label&quot;: &quot;True/False&quot;,\n        &quot;table&quot;: &quot;&quot;,\n        &quot;order&quot;: 100,\n        &quot;ref_qual&quot;: &quot;&quot;,\n        &quot;reference_display&quot;: &quot;&quot;,\n        &quot;choiceOption&quot;: &quot;&quot;,\n        &quot;label&quot;: &quot;Manager approved&quot;,\n        &quot;hint&quot;: &quot;&quot;,\n        &quot;name&quot;: &quot;manager_approved&quot;,\n        &quot;attributes&quot;: {&quot;element_mapping_provider&quot;: &quot;com.glide.decision_table.data.DecisionTableVariableMapper&quot;},\n        &quot;maxsize&quot;: 40,\n        &quot;columnName&quot;: &quot;&quot;\n      },\n      {\n        &quot;searchField&quot;: &quot;number&quot;,\n        &quot;defaultValue&quot;: &quot;&quot;,\n        &quot;show_ref_finder&quot;: false,\n        &quot;use_dependent&quot;: false,\n        &quot;type&quot;: &quot;reference&quot;,\n        &quot;mandatory&quot;: false,\n        &quot;extended&quot;: false,\n        &quot;local&quot;: false,\n        &quot;sys_class_name&quot;: &quot;&quot;,\n        &quot;reference&quot;: &quot;change_request&quot;,\n        &quot;dependent_on&quot;: &quot;&quot;,\n        &quot;data_structure&quot;: &quot;&quot;,\n        &quot;readonly&quot;: false,\n        &quot;id&quot;: &quot;23164e5db701230034d1da23ee11a9c5&quot;,\n        &quot;type_label&quot;: &quot;Reference&quot;,\n        &quot;table&quot;: &quot;&quot;,\n        &quot;order&quot;: 100,\n        &quot;ref_qual&quot;: &quot;&quot;,\n        &quot;reference_display&quot;: &quot;Change Request&quot;,\n        &quot;choiceOption&quot;: &quot;&quot;,\n        &quot;label&quot;: &quot;Change request&quot;,\n        &quot;hint&quot;: &quot;&quot;,\n        &quot;name&quot;: &quot;change_request&quot;,\n        &quot;attributes&quot;: {&quot;element_mapping_provider&quot;: &quot;com.glide.decision_table.data.DecisionTableVariableMapper&quot;},\n        &quot;maxsize&quot;: 32,\n        &quot;columnName&quot;: &quot;&quot;\n      }\n    ],\n    &quot;domain&quot;: &quot;global&quot;,\n    &quot;answerType&quot;: &quot;reference&quot;,\n    &quot;questions&quot;: [\n      {\n        &quot;defaultAnswer&quot;: false,\n        &quot;condition&quot;: &quot;change_request.state=-3^change_request.riskIN2,3^NQchange_request.state=-3^change_request.assignment_group.managerISEMPTY^EQ&quot;,\n        &quot;answer&quot;: {\n          &quot;valid&quot;: true,\n          &quot;label&quot;: &quot;CAB Approval&quot;,\n          &quot;value&quot;: &quot;45358a5db701230034d1da23ee11a938&quot;,\n          &quot;table&quot;: &quot;chg_approval_def&quot;\n        },\n        &quot;decisionTable&quot;: &quot;5b06ce5db701230034d1da23ee11a965&quot;,\n        &quot;domain&quot;: &quot;global&quot;,\n        &quot;active&quot;: true,\n        &quot;state&quot;: null,\n        &quot;id&quot;: &quot;10284a9db701230034d1da23ee11a9c1&quot;,\n        &quot;label&quot;: &quot;Requires CAB Approval&quot;,\n        &quot;order&quot;: 0\n      },\n      {\n        &quot;defaultAnswer&quot;: false,\n        &quot;condition&quot;: &quot;change_request.state=-3^change_request.risk=4^manager_approved=false^EQ&quot;,\n        &quot;answer&quot;: {\n          &quot;valid&quot;: true,\n          &quot;label&quot;: &quot;Assignment Group Manager Approval&quot;,\n          &quot;value&quot;: &quot;5684821db701230034d1da23ee11a94d&quot;,\n          &quot;table&quot;: &quot;chg_approval_def&quot;\n        },\n        &quot;decisionTable&quot;: &quot;5b06ce5db701230034d1da23ee11a965&quot;,\n        &quot;domain&quot;: &quot;global&quot;,\n        &quot;active&quot;: true,\n        &quot;state&quot;: null,\n        &quot;id&quot;: &quot;88e6829db701230034d1da23ee11a9a9&quot;,\n        &quot;label&quot;: &quot;Low Risk Manager approval&quot;,\n        &quot;order&quot;: 0\n      },\n      {\n        &quot;defaultAnswer&quot;: false,\n        &quot;condition&quot;: &quot;change_request.state=-4^EQ&quot;,\n        &quot;answer&quot;: {\n          &quot;valid&quot;: true,\n          &quot;label&quot;: &quot;Assignment Group Approval&quot;,\n          &quot;value&quot;: &quot;dc95ca5db701230034d1da23ee11a9e9&quot;,\n          &quot;table&quot;: &quot;chg_approval_def&quot;\n        },\n        &quot;decisionTable&quot;: &quot;5b06ce5db701230034d1da23ee11a965&quot;,\n        &quot;domain&quot;: &quot;global&quot;,\n        &quot;active&quot;: true,\n        &quot;state&quot;: null,\n        &quot;id&quot;: &quot;a436029db701230034d1da23ee11a989&quot;,\n        &quot;label&quot;: &quot;Assess Technical Approvals&quot;,\n        &quot;order&quot;: 0\n      }\n    ],\n    &quot;accessibleFrom&quot;: &quot;public&quot;,\n    &quot;name&quot;: &quot;Normal Change Policy&quot;,\n    &quot;active&quot;: true,\n    &quot;id&quot;: &quot;5b06ce5db701230034d1da23ee11a965&quot;,\n    &quot;label&quot;: &quot;&quot;,\n    &quot;answerTable&quot;: {\n      &quot;displayValue&quot;: &quot;Change Approval Definition&quot;,\n      &quot;value&quot;: &quot;chg_approval_def&quot;\n    }\n  },\n \n]}"}]},{"name":"getAnswers","description":"Returns the answers associated with the specified decision table. An answer is a record\n    on any table associated with a Decision [sys_decision_question] record.","params":[{"name":"decisionID","type":"String","description":"<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"}],"returns":{"type":"Object","description":"Answer records associated with the decision table. Each record contains these\n                key-value pairs: <ul class=\"ul\" id=\"DecisionTableAPI-getAnswers_S__ul_jlm_xcd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getAnswers(\"3c4464a7b701230034d1da23ee11a993\");\ngs.print(JSON.stringify(response));","description":"","output":"{&quot;result&quot;: [{\n  &quot;valid&quot;: true,\n  &quot;label&quot;: &quot;CAB Approval&quot;,\n  &quot;value&quot;: &quot;45358a5db701230034d1da23ee11a938&quot;,\n  &quot;table&quot;: &quot;chg_approval_def&quot;\n}]}"}]},{"name":"getDecision","description":"Evaluates a decision table based on the provided inputs and returns an\n    answer.\n    If no inputs are provided, returns the first default answer found.","params":[{"name":"decisionID","type":"String","description":"<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"},{"name":"inputs","type":"Map","description":"Optional. Input values for the Decision Inputs [sys_decision_input] table\n                associated with the provided decision table. Use the value of the <span class=\"ph uicontrol\">Column\n                  name</span> field as the key. The data type of the value must match the\n                Decision Input <span class=\"ph uicontrol\">Type</span> field.  If no inputs are provided,\n                returns the first default answer found."}],"returns":{"type":"GlideRecord","description":"The correctly evaluated Answer record associated with the decision table. An\n                answer record is a record from the table defined in the Decision\n                [sys_decision_question] record <span class=\"ph uicontrol\">Answer table</span> field. <p class=\"p\">If no\n                  inputs are provided, returns the first default answer found. If no default or\n                  correctly evaluated answers are found, returns an error.</p>"},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar inputs = new Object();\ninputs[‘age’] = 25;\nvar response = dt.getDecision('26eea7a9dba07300efc65404ce961961', inputs);","description":"","output":""}]},{"name":"getDecisions","description":"Evaluates\n    a decision table based on the provided inputs and returns all\n    correctly\n    evaluated answers. If no inputs are provided, returns all default answers.","params":[{"name":"decisionID","type":"String","description":"<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"},{"name":"inputs","type":"Map","description":"Optional. Input values for the Decision Inputs  [sys_decision_input] table\n                associated with the provided decision table. If no inputs are provided, returns all\n                default answers."}],"returns":{"type":"Array","description":"Answer\n                records in GlideRecord format. An answer record is a record on any table associated\n                with a Decision [sys_decision_question] record. If no inputs are provided, returns\n                all default answers. If no default or correctly evaluated answers are found, returns\n                an error."},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar input = new Object();\ninput['age'] = 25;\nvar response = dt.getDecisions('5b06ce5db701230034d1da23ee11a965', input);\n","description":"","output":""}]},{"name":"getDecisionTable","description":"Returns a single decision table from the Decision Tables [sys_decision]\n    table.","params":[{"name":"decisionID","type":"String","description":"<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"}],"returns":{"type":"Object","description":"Decision table from the Decision Tables [sys_decision] table. Each decision\n                table contains these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_tjj_5pd_h3b\">\n        <li class=\"li\">distinctAnswers: Array. Answer records associated with the decision table. Each record\n         contains these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_ppz_npd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">referenceQualifier: String. Used for internal purposes. </li>\n\n        <li class=\"li\">inputs: Array. Decision inputs from the Decision Inputs [sys_decision_input] table\n         associated with the decision table. Each record contains these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_n4g_spd_h3b\">\n        <li class=\"li\">searchField: String. Used for internal purposes.</li>\n\n        <li class=\"li\">defaultValue: String. Default value for the input. </li>\n\n        <li class=\"li\">show_ref_finder: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">use_dependent: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">type: String. Input data type.</li>\n\n        <li class=\"li\">mandatory: Boolean. True if the input is mandatory; otherwise false. </li>\n\n        <li class=\"li\">extended: Boolean. True if the input extends another field; otherwise false. </li>\n\n        <li class=\"li\">local: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">sys_class_name: String. Used for internal purposes.</li>\n\n        <li class=\"li\">reference: String. Reference table used if the input type is reference. </li>\n\n        <li class=\"li\">dependent_on: String. Field that document ID and choice inputs depend on.</li>\n\n        <li class=\"li\">data_structure: String. Used for internal purposes.</li>\n\n        <li class=\"li\">readonly: Boolean. True if the input is read-only; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the input from the Decision Inputs [sys_decision_input]\n         table.</li>\n\n        <li class=\"li\">type_label: String. Input data type label. </li>\n\n        <li class=\"li\">table: String. Reference field table if the input type is reference.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates inputs.</li>\n\n        <li class=\"li\">ref_qual: String. Condition applied to the reference table. </li>\n\n        <li class=\"li\">reference_display: String. Used for internal purposes.</li>\n\n        <li class=\"li\">choiceOption: String. Method for users to see a list of suggested values.</li>\n\n        <li class=\"li\">label: String. Label of the input record.</li>\n\n        <li class=\"li\">hint: String. Hint text used to help users understand the input required. </li>\n\n        <li class=\"li\">name: String. Internal name of the input record. </li>\n\n        <li class=\"li\">attributes: Array. Field attributes that apply to the input record.</li>\n\n        <li class=\"li\">maxsize: Number. Maximum number of characters allowed in the field. </li>\n\n        <li class=\"li\">columnName: String. Name of the input.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision table is visible.</li>\n\n        <li class=\"li\">answerType: String. Used for internal purposes.</li>\n\n        <li class=\"li\">questions: Array. Decision records from the Decision [sys_decision_question] table\n         associated with the decision table. Decision records contain these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_t4r_nyd_h3b\">\n        <li class=\"li\">defaultAnswer: Boolean. True if this decision is the default for the decision table;\n         otherwise false.</li>\n\n        <li class=\"li\">condition: String. Conditions required to reach this decision. The fields available for\n         the condition are the decision inputs that are associated with this decision table.</li>\n\n        <li class=\"li\">answer: Object. Answer record associated with the decision. Answer objects contain these\n         key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_myc_2rd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">decisionTable: String. Sys ID of the decision table from the Decision Tables\n         [sys_decision] table associated with the decision.</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision is visible.</li>\n\n        <li class=\"li\">active: Boolean. True if the decision record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision record from the Decision [sys_decision_question]\n         table.</li>\n\n        <li class=\"li\">label: String. Label for the decision record.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates decisions.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">accessibleFrom: String. Scopes that have access to the record.</li>\n\n        <li class=\"li\">name: String. Internal name of the decision table record. </li>\n\n        <li class=\"li\">active: Boolean. True if the decision table record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision table record.</li>\n\n        <li class=\"li\">label: String. Label of the decision table record.</li>\n\n        <li class=\"li\">answerTable: Object. Answer table associated with the decision table. <ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__d72622e229\">\n          <li class=\"li\">displayValue: String. Display name of the table that contains answer records.</li>\n\n          <li class=\"li\">value: String. Internal name of the table that contains answer records.</li>\n\n         </ul>\n</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getDecisionTable(\"3c4464a7b701230034d1da23ee11a993\");\ngs.print(JSON.stringify(response));\n","description":"","output":"&quot;distinctAnswers&quot;: [{\n    &quot;valid&quot;: true,\n    &quot;label&quot;: &quot;CAB Approval&quot;,\n    &quot;value&quot;: &quot;45358a5db701230034d1da23ee11a938&quot;,\n    &quot;table&quot;: &quot;chg_approval_def&quot;\n  }],\n  &quot;referenceQualifier&quot;: &quot;&quot;,\n  &quot;inputs&quot;: [{\n    &quot;searchField&quot;: &quot;number&quot;,\n    &quot;defaultValue&quot;: &quot;&quot;,\n    &quot;show_ref_finder&quot;: false,\n    &quot;use_dependent&quot;: false,\n    &quot;type&quot;: &quot;reference&quot;,\n    &quot;mandatory&quot;: false,\n    &quot;extended&quot;: false,\n    &quot;local&quot;: false,\n    &quot;sys_class_name&quot;: &quot;&quot;,\n    &quot;reference&quot;: &quot;change_request&quot;,\n    &quot;dependent_on&quot;: &quot;&quot;,\n    &quot;data_structure&quot;: &quot;&quot;,\n    &quot;readonly&quot;: false,\n    &quot;id&quot;: &quot;634420a7b701230034d1da23ee11a94f&quot;,\n    &quot;type_label&quot;: &quot;Reference&quot;,\n    &quot;table&quot;: &quot;&quot;,\n    &quot;order&quot;: 100,\n    &quot;ref_qual&quot;: &quot;&quot;,\n    &quot;reference_display&quot;: &quot;Change Request&quot;,\n    &quot;choiceOption&quot;: &quot;&quot;,\n    &quot;label&quot;: &quot;Change request&quot;,\n    &quot;hint&quot;: &quot;&quot;,\n    &quot;name&quot;: &quot;change_request&quot;,\n    &quot;attributes&quot;: {&quot;element_mapping_provider&quot;: &quot;com.glide.decision_table.data.DecisionTableVariableMapper&quot;},\n    &quot;maxsize&quot;: 32,\n    &quot;columnName&quot;: &quot;&quot;\n  }],\n  &quot;domain&quot;: &quot;global&quot;,\n  &quot;answerType&quot;: &quot;reference&quot;,\n  &quot;questions&quot;: [{\n    &quot;defaultAnswer&quot;: true,\n    &quot;condition&quot;: &quot;change_request.state=-3^EQ&quot;,\n    &quot;answer&quot;: {\n      &quot;valid&quot;: true,\n      &quot;label&quot;: &quot;CAB Approval&quot;,\n      &quot;value&quot;: &quot;45358a5db701230034d1da23ee11a938&quot;,\n      &quot;table&quot;: &quot;chg_approval_def&quot;\n    },\n    &quot;decisionTable&quot;: &quot;3c4464a7b701230034d1da23ee11a993&quot;,\n    &quot;domain&quot;: &quot;global&quot;,\n    &quot;active&quot;: true,\n    &quot;state&quot;: null,\n    &quot;id&quot;: &quot;2764a4a7b701230034d1da23ee11a989&quot;,\n    &quot;label&quot;: &quot;Requires CAB Approval&quot;,\n    &quot;order&quot;: 0\n  }],\n  &quot;accessibleFrom&quot;: &quot;public&quot;,\n  &quot;name&quot;: &quot;Emergency Change Policy&quot;,\n  &quot;active&quot;: true,\n  &quot;id&quot;: &quot;3c4464a7b701230034d1da23ee11a993&quot;,\n  &quot;label&quot;: &quot;&quot;,\n  &quot;answerTable&quot;: {\n    &quot;displayValue&quot;: &quot;Change Approval Definition&quot;,\n    &quot;value&quot;: &quot;chg_approval_def&quot;\n  }\n}"}]},{"name":"getInputs","description":"Returns the decision inputs from the Decision Inputs [sys_decision_input] table\n    associated with the passed in decision table.","params":[{"name":"decisionID","type":"String","description":"<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"}],"returns":{"type":"Object","description":"Decision inputs from the Decision Inputs [sys_decision_input] table associated\n                with the decision table. You can find the inputs associated with a decision table\n                using the Decision Inputs related list in the Decision Tables [sys_decision] table.\n                Inputs contain these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getInputs_S__ul_t5m_nfd_h3b\">\n        <li class=\"li\">searchField: String. Used for internal purposes.</li>\n\n        <li class=\"li\">defaultValue: String. Default value for the input. </li>\n\n        <li class=\"li\">show_ref_finder: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">use_dependent: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">type: String. Input data type.</li>\n\n        <li class=\"li\">mandatory: Boolean. True if the input is mandatory; otherwise false. </li>\n\n        <li class=\"li\">extended: Boolean. True if the input extends another field; otherwise false. </li>\n\n        <li class=\"li\">local: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">sys_class_name: String. Used for internal purposes.</li>\n\n        <li class=\"li\">reference: String. Reference table used if the input type is reference. </li>\n\n        <li class=\"li\">dependent_on: String. Field that document ID and choice inputs depend on.</li>\n\n        <li class=\"li\">data_structure: String. Used for internal purposes.</li>\n\n        <li class=\"li\">readonly: Boolean. True if the input is read-only; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the input from the Decision Inputs [sys_decision_input]\n         table.</li>\n\n        <li class=\"li\">type_label: String. Input data type label. </li>\n\n        <li class=\"li\">table: String. Reference field table if the input type is reference.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates inputs.</li>\n\n        <li class=\"li\">ref_qual: String. Condition applied to the reference table. </li>\n\n        <li class=\"li\">reference_display: String. Used for internal purposes.</li>\n\n        <li class=\"li\">choiceOption: String. Method for users to see a list of suggested values.</li>\n\n        <li class=\"li\">label: String. Label of the input record.</li>\n\n        <li class=\"li\">hint: String. Hint text used to help users understand the input required. </li>\n\n        <li class=\"li\">name: String. Internal name of the input record. </li>\n\n        <li class=\"li\">attributes: Array. Field attributes that apply to the input record.</li>\n\n        <li class=\"li\">maxsize: Number. Maximum number of characters allowed in the field. </li>\n\n        <li class=\"li\">columnName: String. Name of the input.</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getInputs(\"3c4464a7b701230034d1da23ee11a993\");\ngs.print(JSON.stringify(response));\n","description":"","output":"{&quot;result&quot;: [{\n  &quot;searchField&quot;: &quot;number&quot;,\n  &quot;defaultValue&quot;: &quot;&quot;,\n  &quot;show_ref_finder&quot;: false,\n  &quot;use_dependent&quot;: false,\n  &quot;type&quot;: &quot;reference&quot;,\n  &quot;mandatory&quot;: false,\n  &quot;extended&quot;: false,\n  &quot;local&quot;: false,\n  &quot;sys_class_name&quot;: &quot;&quot;,\n  &quot;reference&quot;: &quot;change_request&quot;,\n  &quot;dependent_on&quot;: &quot;&quot;,\n  &quot;data_structure&quot;: &quot;&quot;,\n  &quot;readonly&quot;: false,\n  &quot;id&quot;: &quot;634420a7b701230034d1da23ee11a94f&quot;,\n  &quot;type_label&quot;: &quot;Reference&quot;,\n  &quot;table&quot;: &quot;&quot;,\n  &quot;order&quot;: 100,\n  &quot;ref_qual&quot;: &quot;&quot;,\n  &quot;reference_display&quot;: &quot;Change Request&quot;,\n  &quot;choiceOption&quot;: &quot;&quot;,\n  &quot;label&quot;: &quot;Change request&quot;,\n  &quot;hint&quot;: &quot;&quot;,\n  &quot;name&quot;: &quot;change_request&quot;,\n  &quot;attributes&quot;: {&quot;element_mapping_provider&quot;: &quot;com.glide.decision_table.data.DecisionTableVariableMapper&quot;},\n  &quot;maxsize&quot;: 32,\n  &quot;columnName&quot;: &quot;&quot;\n}]}"}]},{"name":"getQuestions","description":"Returns the decisions from the Decision [sys_decision_question] table associated with\n    the passed in decision table.","params":[{"name":"decisionID","type":"String","description":"<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"}],"returns":{"type":"Object","description":"Decisions from the Decision [sys_decision_question] table associated with the\n                decision table. You can find the decisions associated with a decision table using\n                the Decisions related list in the Decision Tables [sys_decision] table. Decision\n                records contain these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getQuestions_S__ul_dhg_wsd_h3b\">\n        <li class=\"li\">defaultAnswer: Boolean. True if this decision is the default for the decision table;\n         otherwise false.</li>\n\n        <li class=\"li\">condition: String. Conditions required to reach this decision. The fields available for\n         the condition are the decision inputs that are associated with this decision table.</li>\n\n        <li class=\"li\">answer: Object. Answer record associated with the decision. Answer objects contain these\n         key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getQuestions_S__ul_myc_2rd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">decisionTable: String. Sys ID of the decision table from the Decision Tables\n         [sys_decision] table associated with the decision.</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision is visible.</li>\n\n        <li class=\"li\">active: Boolean. True if the decision record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision record from the Decision [sys_decision_question]\n         table.</li>\n\n        <li class=\"li\">label: String. Label for the decision record.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates decisions.</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"},"example":[{"code":"var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getQuestions(\"3c4464a7b701230034d1da23ee11a993\");\ngs.print(JSON.stringify(response));\n","description":"","output":"{&quot;result&quot;: [{\n  &quot;defaultAnswer&quot;: true,\n  &quot;condition&quot;: &quot;change_request.state=-3^EQ&quot;,\n  &quot;answer&quot;: {\n    &quot;valid&quot;: true,\n    &quot;label&quot;: &quot;CAB Approval&quot;,\n    &quot;value&quot;: &quot;45358a5db701230034d1da23ee11a938&quot;,\n    &quot;table&quot;: &quot;chg_approval_def&quot;\n  },\n  &quot;decisionTable&quot;: &quot;3c4464a7b701230034d1da23ee11a993&quot;,\n  &quot;domain&quot;: &quot;global&quot;,\n  &quot;active&quot;: true,\n  &quot;state&quot;: null,\n  &quot;id&quot;: &quot;2764a4a7b701230034d1da23ee11a989&quot;,\n  &quot;label&quot;: &quot;Requires CAB Approval&quot;,\n  &quot;order&quot;: 0\n}]}"}]}]},"DiscoveryAPI":{"meta":{"has_constructor":false,"description":"The methods of the <span class=\"keyword apiname\">DiscoveryAPI - Scoped</span> class launch a quick\n    Discovery of a single IPv4 address and return summaries of previously launched Discovery\n    statuses for a single CI or for all scanned CIs. ","example":""},"properties":{},"methods":[{"name":"discoverIpAddress","description":"Used to discover a single IPv4 address.<p>A MID Server is selected automatically, based on the IP address provided or the application\n        specified. The following exceptions can be thrown during MID Server selection:<ul class=\"ul\" id=\"r_DiscoAPIdiscoverIpAddress__ul_ms4_lqj_qcb\">\n          <li class=\"li\"><span class=\"keyword parmname\">NoSuitableMidServerFoundException</span>: <samp class=\"ph codeph\">No appropriate MID\n              Server available for this Discovery</samp></li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">BadArgumentException</span>: <samp class=\"ph codeph\">Invalid argument detected during\n              MID Server selection</samp>\n          </li>\n\n        </ul>\n\n<div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table parameters\" frame=\"border\" id=\"r_DiscoAPIdiscoverIpAddress__table_c4m_wcd_qcb\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 1. Parameters</span></caption>\n            \n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d710090e77\" valign=\"top\">Name</th>\n\n                <th class=\"entry\" id=\"d710090e80\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d710090e83\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d710090e77\" valign=\"top\">IP address</td>\n\n                <td class=\"entry\" headers=\"d710090e80\" valign=\"top\">string</td>\n\n                <td class=\"entry\" headers=\"d710090e83\" valign=\"top\">IP address to discover.</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d710090e77\" valign=\"top\">application</td>\n\n                <td class=\"entry\" headers=\"d710090e80\" valign=\"top\">string</td>\n\n                <td class=\"entry\" headers=\"d710090e83\" valign=\"top\">Application configured for the MID Server.</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d710090e77\" valign=\"top\">source</td>\n\n                <td class=\"entry\" headers=\"d710090e80\" valign=\"top\">string</td>\n\n                <td class=\"entry\" headers=\"d710090e83\" valign=\"top\">(Optional) Source of the Discovery, displayed in the optional Source field in\n                  the Discovery Status record, which indicates how the Discovery was triggered. If\n                  no source is specified, the system uses Discovery_API as the source. To define a\n                  source, you must have an application value. If no application is defined, use a\n                  place holder of NULL in the expression.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>","params":[{"name":"IP address","type":"string","description":"IP address to discover."},{"name":"application","type":"string","description":"Application configured for the MID Server."},{"name":"source","type":"string","description":"(Optional) Source of the Discovery, displayed in the optional Source field in\n                  the Discovery Status record, which indicates how the Discovery was triggered. If\n                  no source is specified, the system uses Discovery_API as the source. To define a\n                  source, you must have an application value. If no application is defined, use a\n                  place holder of NULL in the expression."}],"returns":{"type":"string","description":"Discovery status record sys_id."},"example":[{"code":"var sysid =\n                    sn_discovery.DiscoveryAPI.discoverIpAddress(\"11.23.125.39\");","description":"","output":""}]},{"name":"reportCiIpAddressStatus","description":"Used to return a summary of a configuration item's Discovery status given the specific\n    status sys_id and IPv4 address.<p>The following exceptions can be thrown:<ul class=\"ul\" id=\"r_DiscoAPIreportCiIpAddressStatus1__ul_ztk_gft_rcb\">\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryStatusNotFoundException</span>: <samp class=\"ph codeph\">Displays this message:\n              Discovery Status with sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist</samp>\n          </li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryDeviceHistoryNotFoundException</span>: <samp class=\"ph codeph\">Device History\n              with Discovery Status sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' and ipAddress\n                '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist</samp></li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (invalid input arguments): This argument\n            exception prevents input values from being null.<ul class=\"ul\" id=\"r_DiscoAPIreportCiIpAddressStatus1__ul_ul2_c4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status sys id can not be null </samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">ipAddress can not be null</samp>\n              </li>\n\n            </ul>\n</li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (values stored in database): This\n            argument exception prevents erroneous data from being returned to the caller in the case\n            of bad attribute values.<ul class=\"ul\" id=\"r_DiscoAPIreportCiIpAddressStatus1__ul_pjt_j4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status 'state' property can not be null</samp>\n              </li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'source' property can not be null </samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property is not an integer: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp>\n              </li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property can not be less than 0: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp>\n              </li>\n\n            </ul>\n</li>\n\n        </ul></p>","params":[{"name":"ipAddress","type":"string","description":"The IPv4 address that was scanned."},{"name":"discoveryStatusSysId","type":"string","description":"The sys_id of the Discovery status record for the IP address that was\n                scanned."}],"returns":{"type":"array","description":"JavaScript array of immutable <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#c_ReportCiStatusOutputJSScopedAPI\" title=\"The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.\">ReportCiStatusOutputJS</a> objects."},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\n","description":"","output":""}]},{"name":"reportCiStatus","description":"Used to return a summary of a CI Discovery status given a specific Discovery Status\n    sys_id.<p>The following exceptions can be thrown:<ul class=\"ul\" id=\"r_DiscoAPIreportCiStatus__ul_ztk_gft_rcb\">\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryStatusNotFoundException</span>: <samp class=\"ph codeph\">Discovery Status with\n              sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist </samp></li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryDeviceHistoryNotFoundException</span>: <samp class=\"ph codeph\">Device History\n              with Discovery Status sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' and ipAddress\n                '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist</samp>\n          </li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (invalid input arguments): This argument\n            exception prevents input values from being null.<ul class=\"ul\" id=\"r_DiscoAPIreportCiStatus__ul_ul2_c4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status sys id can not be null</samp>\n              </li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">ipAddress can not be null</samp></li>\n\n            </ul>\n</li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (values stored in database): This\n            argument exception imposes post conditions on database access values.<ul class=\"ul\" id=\"r_DiscoAPIreportCiStatus__ul_pjt_j4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status 'state' property can not be null</samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'source' property can not be null</samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property is not an integer: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property can not be less than 0: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp></li>\n\n            </ul>\n</li>\n\n        </ul></p>","params":[{"name":"sys_id","type":"string","description":"The sys_id of a Discovery status record."}],"returns":{"type":"array","description":"JavaScript array of immutable <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#c_ReportCiStatusOutputJSScopedAPI\" title=\"The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.\">ReportCiStatusOutputJS</a> objects."},"example":[{"code":"var ipResultObjArray = sn_discovery.DiscoveryAPI.reportCiStatus(discoveryStatus);\nfor(var idx=0; idx &lt; ipResultObjArray.length; idx++) {    \nvar ipResultObj = ipResultObjArray[idx]; ","description":"","output":""}]}]},"DynamicTranslation":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">The\n                  <span class=\"keyword apiname\">DynamicTranslation</span> API provides methods that translate text, in\n                real time, into multiple languages using translation service providers.</span> In addition, you can use this API to detect the language of a specific string and check\n      whether the <span class=\"keyword apiname\">getDetectedLanguage()</span> and <span class=\"keyword apiname\">getTranslation()</span>\n      methods are enabled for a translation service. Use this API to create a seamless localization\n      experience for your user interface, enabling one interface to service multiple countries.<br/><br/>Currently this API supports two translation\n                service providers: Microsoft Azure Translator Service and IBM Watson Translator\n                Service. You can also configure other translation services within your instance and\n                then use the <span class=\"keyword apiname\">DynamicTranslation</span> API to translate your text.<br/><br/>When using these methods in a server-side script, use the <samp class=\"ph codeph\">sn_dt_api</samp>\n      namespace identifier. Before you are able to use this API, you must activate the\n      DynamicTranslation plugin. For information on this plugin and additional information on\n      Dynamic Translation, refer to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation overview</a>.","example":""},"properties":{},"methods":[{"name":"getDetectedLanguage","description":"Detects the language of the passed in text.<p>If you pass in a translator, the method uses that translation service to detect the\n                source language. Otherwise, the detection is performed by the default translation\n                service. Ensure that the text you provide contains enough verbiage to enable proper\n                language detection.</p><p>In addition to the detected language, the response\n                contains a confidence level of the detection, along with other possible language\n                alternatives. If a translator is not passed in, the method also returns the default\n                translation service used to detect the language.</p>","params":[{"name":"text","type":"String","description":"Text to use to detect the language."},{"name":"parms","type":"Object","description":"Optional. JSON object that contains additional translation parameters."},{"name":"parms.translator","type":"String","description":"Optional. Translation service to use to translate the\n              text (not case-sensitive).<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getDetectedLanguage_S_O__d72901e334\">\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>\n<p class=\"p\">Default: translation service configured in the\n                Translator Configuration [sn_dt_translator_configuration] table.</p>"}],"returns":{"type":"Object","description":"JSON object containing the results of the language detection.<ul class=\"ul\" id=\"DynTran-getDetectedLanguage_S_O__d72901e183\">\n                <li class=\"li\"><span class=\"keyword parmname\">detectedLanguage</span>: Object. Parameters describing the\n                  detected language.<ul class=\"ul\" id=\"DynTran-getDetectedLanguage_S_O__d72901e189\">\n                    <li class=\"li\"><span class=\"keyword parmname\">code</span>: String. Language code of the detected\n                      language.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">confidence</span>: String. Float value indicating the\n                      confidence level of the detected language result. Value is between zero and\n                      one. The lower the value, the lower the confidence level.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Language code of the detected\n                      language.</li>\n\n                  </ul>\n</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">alternatives</span>: Object. Description of other languages that\n                  also may be a match.<ul class=\"ul\" id=\"DynTran-getDetectedLanguage_S_O__d72901e211\">\n                    <li class=\"li\"><span class=\"keyword parmname\">code</span>: String. Language code of the alternative\n                      language.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">confidence</span>: String. Float value indicating the\n                      confidence level of the alternative language. Value is between zero and one.\n                      The lower the value, the lower the confidence level.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Language code of the alternative\n                      language.</li>\n\n                  </ul>\n</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">translator</span>: String. Translation service used to detect the\n                  language.</li>\n\n              </ul>\n<p class=\"p\">For example:</p>\n<div class=\"p\">\n                <pre class=\"pre codeblock\">\n{\n  \"detectedLanguage\": { \n     \"code\": \"en\", \n     \"confidence\": \"1\", \n     \"name\": \"en\" \n},\n  \"alternatives\": [\n    { \"code\": \"vi\", \n      \"confidence\": \"0.86\", \n      \"name\": \"vi\" \n    },\n    { \"code\": \"id\", \n      \"confidence\": \"0.86\", \n      \"name\": \"id\" \n    }\n  ],\n  \"translator\": \"Microsoft\"}</pre>\n\n              </div>"},"example":[{"code":"var detectedResponse = sn_dt_api.DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":'IBM'});\n gs.print(JSON.stringify(detectedResponse));\n","description":"This example shows code in a server-side script that detects a string in English using\n        IBM's translation service.","output":"{\n  detectedLanguage:\n    { &quot;code&quot;: &quot;en&quot;, &quot;confidence&quot;: &quot;1&quot;, &quot;name&quot;: &quot;en&quot; }\n  alternatives: \n    [\n      { &quot;code&quot;: &quot;vi&quot;, &quot;confidence&quot;: &quot;0.86&quot;, &quot;name&quot;: &quot;vi&quot; },\n      { &quot;code&quot;: &quot;id&quot;, &quot;confidence&quot;: &quot;0.86&quot;, &quot;name&quot;: &quot;id&quot; }\n    ]                  \n }"},{"code":"var detectedResponse = sn_dt_api.DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":123});\n gs.print(JSON.stringify(detectedResponse));\n","description":"This example shows a server script that throws an error when an invalid translation service\n        is passed in.","output":"{&quot;code&quot;:&quot;40003&quot;,&quot;message&quot;:&quot;Translator (\\&quot;translator\\&quot; field) is invalid&quot;}"}]},{"name":"getTranslation","description":"Translates the passed in text to one or more languages.<p>The method uses translation services, such as Microsoft Azure Translator Service\n                and IBM Watson Translator Service, to perform the translation. If you do not pass in\n                translation parameters, the method uses the system default.</p>","params":[{"name":"textToTranslate","type":"String","description":"Text to translate."},{"name":"parms","type":"Object","description":"Optional. JSON object that contains additional translation parameters."},{"name":"parms.targetLanguages","type":"Array","description":"Optional. List of language codes to use to translate the text. The method\n                returns translated text for each language code.<p class=\"p\">Default: User preferred\n                  language.</p>"},{"name":"parms.translator","type":"String","description":"Optional. Translation service to use to translate the\n              text (not case-sensitive).<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__d72901e334\">\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>\n<p class=\"p\">Default: translation service configured in the\n                Translator Configuration [sn_dt_translator_configuration] table.</p>"},{"name":"parms.sourceLanguage","type":"String","description":"Optional. Language code of the source text.<p class=\"p\">Default: Translation service\n                  detects the source language.</p>"},{"name":"parms.additionalParameters","type":"Object","description":"Optional. Array of JSON objects. Each object contains key-value pairs that\n                provide additional information for performing the translation."},{"name":"parms.additionalParameters[].parameterName","type":"String","description":"Key name.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__ul_jhc_5nl_thb\">\n                  <li class=\"li\">textype: Type of text to translate. For Microsoft Azure Translation Service\n                    only. </li>\n\n                </ul>"},{"name":"parms.additionalParameters[].parameterValue","type":"String","description":"Value of the associated key.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__ul_jk3_hhb_xhb\">\n                  <li class=\"li\">plain: Standard text string</li>\n\n                  <li class=\"li\">html: HTML text string</li>\n\n                </ul>\n<p class=\"p\">Default: plain</p>"}],"returns":{"type":"Object","description":"Results of the text translation. <ul class=\"ul\" id=\"DynTran-getTranslation_S_O__d72901e250\">\n                <li class=\"li\"><span class=\"keyword parmname\">translations</span>: Object. Language translations.<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__d72901e256\">\n                    <li class=\"li\"><span class=\"keyword parmname\">targetLanguage</span>: String. Language code to which the\n                      source text was translated.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">translatedText</span>: String. Translated text.</li>\n\n                  </ul>\n</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">translator</span>: String. Translation service used to translate\n                  the text.</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">detectedLanguage</span>: Object. Detected language code of the\n                  source text. Returned only if the source language code is not passed in.<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__d72901e278\">\n                    <li class=\"li\"><span class=\"keyword parmname\">code</span>: String. Language code of the detected\n                      language.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Language code of the detected\n                      language.</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\">For example:\n              </p>\n<pre class=\"pre codeblock\">{\"translations\":[\n    {\n      \"targetLanguage\":\"it\",\n      \"translatedText\":\"Tradurre questo testo utilizzando la piattaforma dal server\"\n    },\n    {\n      \"targetLanguage\":\"fr\",\n      \"translatedText\":\"Traduire ce texte en utilisant la plate-forme à partir du serveur\"\n    }\n  ],\n  \"translator\":\"Microsoft\",\n  \"detectedLanguage\":{\"code\":\"en\",\"name\":\"en\"}\n}</pre>"},"example":[{"code":"try {\n    gs.print(JSON.stringify(sn_dt_api.DynamicTranslation.getTranslation(\"Translate this text using platform from server\", {\n        \"targetLanguages\": [\"fr\", \"it\"],\n        \"additionalParameters\": [{\n            \"parameterName\": \"texttype\",\n            \"parameterValue\": \"plain\"\n        }],\n        \"translator\": \"Microsoft\"\n    })));\n} catch (error) {\n    gs.print(error.message);\n}\n","description":"This example shows a server script translating plain text from English (detected) into\n        French and Italian using Microsoft's translation service.","output":"{&quot;translations&quot;:[\n    {\n      &quot;targetLanguage&quot;:&quot;it&quot;,\n      &quot;translatedText&quot;:&quot;Tradurre questo testo utilizzando la piattaforma dal server&quot;\n    },\n    {\n      &quot;targetLanguage&quot;:&quot;fr&quot;,\n      &quot;translatedText&quot;:&quot;Traduire ce texte en utilisant la plate-forme à partir du serveur&quot;\n    }\n  ],\n  &quot;translator&quot;:&quot;Microsoft&quot;,\n  &quot;detectedLanguage&quot;:{&quot;code&quot;:&quot;en&quot;,&quot;name&quot;:&quot;en&quot;}\n}"},{"code":"try {\n    gs.print(JSON.stringify(sn_dt_api.DynamicTranslation.getTranslation(\"Translate this text using platform from server\", {\n        \"targetLanguages\": [\"123\"],\n        \"additionalParameters\": [{\n            \"parameterName\": \"texttype\",\n            \"parameterValue\": \"plain\"\n        }],\n        \"translator\": \"Microsoft\"\n    })));\n} catch (error) {\n    gs.print(error.message);\n}","description":"This example shows a server script that throws an error when an invalid target language is\n        passed in.","output":"{&quot;code&quot;:&quot;40054&quot;,&quot;message&quot;:&quot;Target language is invalid&quot;}"}]},{"name":"isEnabled","description":"<span class=\"ph\">Determines whether the\n                  <span class=\"keyword apiname\">getDetectedLanguage()</span> and <span class=\"keyword apiname\">getTranslation()</span>\n                methods are enabled for a translation service.</span><p>If you pass in a specific translation service, the API checks the method activation\n                for that translation service; otherwise the method checks the default translation\n                service.</p>","params":[{"name":"translator","type":"String","description":"Optional. Translation service to verify whether the  methods are active.\n              Translation services are configured under the Translator Configuration\n                menu.<p class=\"p\">Possible values - not case-sensitive:</p>\n<ul class=\"ul\" id=\"DynTran-isEnabled_S__d72901e158\">\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>"}],"returns":{"type":"Object","description":"Results of the detection.<ul class=\"ul\" id=\"DynTran-isEnabled_S__d72901e304\">\n                <li class=\"li\"><span class=\"keyword parmname\">detection</span>: Boolean. Flag that indicates whether<span class=\"keyword apiname\">\n                    getDetectedLanguage()</span> method is enabled.</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">translation</span>: Boolean. Flag that indicates whether the\n                    <span class=\"keyword apiname\">getTranslation()</span> method is enabled.</li>\n\n              </ul>"},"example":[{"code":"IsIBMTranslatorEnabled : function() {\n  try {\n    var response = sn_dt_api.DynamicTranslation.isEnabled('ibm');\n     gs.print(JSON.stringify(response));\n} catch(error) {\ngs.print(error.message);\n}","description":"This example shows a server script that checks whether the\n          <span class=\"keyword apiname\">DynamicTranslation</span> methods are active.","output":"{&quot;detection&quot;:false,&quot;translation&quot;:false}"},{"code":"IsIBMTranslatorEnabled : function() {\n  try {\n    var response = sn_dt_api.DynamicTranslation.isEnabled(123);\n     gs.print(JSON.stringify(response));\n} catch(error) {\ngs.print(error.message);\n}","description":"This example shows a server script that throws an error when an invalid translation service\n        is passed in.","output":"{&quot;code&quot;:&quot;40003&quot;,&quot;message&quot;:&quot;Translator (&quot;translator&quot; field) is invalid&quot;}"}]}]},"Flow":{"meta":{"has_constructor":false,"description":"Runs activated <span class=\"ph\">Flow Designer</span> flows. The Flow API can only be used in server scripts.<br/><br/>Use the sn_fd namespace to access the Flow API.<br/><br/>Before interacting with a flow using the Flow API, you must first create and activate the\n      flow in the <span class=\"ph\">Flow Designer</span>\n      interface. Because the Flow API only interacts with pre-built flows, there is no constructor\n      for the class.<br/><br/>This API is deprecated and replaced by the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#ScriptableFlowAPI\" title=\"Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.\">FlowAPI</a>","example":""},"properties":{},"methods":[{"name":"startAsync","description":"Ignores the trigger and runs an activated flow asynchronously.<p>Asynchronous calls are non-blocking, allowing the client to execute other code in the\n        script without having to wait for the flow to complete.</p>","params":[{"name":"scopeName.flowName","type":"String","description":"The application scope for the flow and the internal name of the flow to run. If\n                scopeName is not included, the scope of the user currently logged in is used.\n                Retrieve the internal name of the flow using the <span class=\"ph uicontrol\">Internal\n                  name</span> column on the <span class=\"ph\">Flow Designer</span> landing\n                page."},{"name":"flowInputs","type":"Map","description":"Name-value pairs in <samp class=\"ph codeph\">&lt;String, Object&gt;</samp> format that define\n                record-based flow inputs.<div class=\"p\">To call a flow with a record-based trigger, use the\n                  format:<pre class=\"pre codeblock\">var flowInputs = {};\nflowInputs['current'] = glideRecord;\nflowInputs['table_name'] = glideRecord.getTableName();</pre>\n</div>\n<p class=\"p\">The\n                  GlideRecord object must be named 'current'.</p>\n<div class=\"p\">To call a flow with a <span class=\"ph\">Service Catalog</span>\n                  trigger, use the\n                  format:<pre class=\"pre codeblock\">var flowInputs = {};\nflowInputs['request_item'] = glideRecord;\nflowInputs['table_name'] = glideRecord.getTableName();</pre>\n</div>\n<p class=\"p\">The\n                  GlideRecord object must be named 'request_item'.</p>"}],"returns":{"type":"Object","description":"PlanResponse object containing the following properties: <ul class=\"ul\" id=\"FlowScoped-startAsync_S_GR__ul_bd2_k2v_ncb\">\n                  <li class=\"li\">contextId: sys_id of the execution details record for the executed flow.\n                    Access the execution details by navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span> and\n                    filtering by sys_id. </li>\n\n                </ul>\n<div class=\"p\">An exception occurs when the flow:<ul class=\"ul\" id=\"FlowScoped-startAsync_S_GR__ul_ub3_n3t_pcb\">\n                    <li class=\"li\">Does not exist within the specified application scope, or the flow or scope\n                      name has been misspelled. </li>\n\n                    <li class=\"li\">Is not activated.</li>\n\n                    <li class=\"li\">Exceeds the recursion limit set by the\n                        <span class=\"keyword parmname\">com.glide.hub.flow_engine.indirect_recursion_limit</span>\n                      system property. The default value is three. </li>\n\n                  </ul>\n</div>"},"example":[{"code":"//Example 1: Run a flow with a record-based trigger\n(function startFlowAsync() {\n\n\ttry {\n\t\t// You MUST fetch the GlideRecord that will be passed to the flow\n\t\tvar glideRecordInput = new GlideRecord('sys_user');\n\t\tglideRecordInput.get('62826bf03710200044e0bfc8bcbe5df1');\n\n\t\tvar flowInputs = {};\n\t\tflowInputs['current'] = glideRecordInput;\n\t\tflowInputs['table_name'] = glideRecordInput.getTableName();\n\n\t\tvar result = sn_fd.Flow.startAsync('global.recordtriggeredflow', flowInputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();\n\n//Example 2: Run a flow with a schedule-based trigger\n(function startFlowAsync() {\n\n\ttry {\n\t\tvar result = sn_fd.Flow.startAsync('global.scheduletriggeredflow');\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();\n\n//Example 3: Run a flow with a Service Catalog trigger\n(function startFlowAsync() {\n\n\ttry {\n\t\t// You MUST fetch the GlideRecord that will be passed to the flow\n\t\tvar glideRecordInput = new GlideRecord('sc_req_item');\n\t\tglideRecordInput.get(aeed229047801200e0ef563dbb9a71c2);\n\n\t\tvar flowInputs = {};\n\t\tflowInputs['request_item'] = glideRecordInput;\n\t\tflowInputs['table_name'] = glideRecordInput.getTableName();\n\n\t\tvar result = sn_fd.Flow.startAsync('global.catalogtriggeredflow', flowInputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();\n\n//Example 4: Run a flow with a MetricBase trigger\n(function startMetricBaseFlowAsync() {\n\n\ttry {\n\n\t\tvar oilLevelTriggerRecord = new GlideRecord('oil_levels');\n\t\toilLevelTriggerRecord.get('a4b3622bc72113007b237f48cb97635f');\n\n\t\tvar metricTriggerDefinition = new GlideRecord('sys_metric_trigger_definition');\n\t\tmetricTriggerDefinition.get('21f2eae7c72113007b237f48cb976352');\n\n\t\tvar event_time = oilLevelTriggerRecord.getValue('sys_created_on');\n\t\tvar level = 4;\n\n\t\tvar metricBaseFlowInputs = {};\n\t\t//The record that triggered the metric event\n\t\tmetricBaseFlowInputs['current'] = oilLevelTriggerRecord;\n\t\t//The MetricBase Trigger Definition record\n\t\tmetricBaseFlowInputs['metric'] = metricTriggerDefinition;\n\t\t//The time that the 'record' reached a specific metric event level and triggered this flow\n\t\tmetricBaseFlowInputs['event_time'] = event_time;\n\t\t//The target event level to reach in order for a metric flow to trigger\n\t\tmetricBaseFlowInputs['level'] = level;\n\n\t\tvar result = sn_fd.Flow.startAsync('global.metricbasedtriggeredflow', metricBaseFlowInputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();","description":"","output":""}]}]},"FlowAPI":{"meta":{"has_constructor":false,"description":"Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using\n    either blocking or non-blocking methods. Access FlowAPI methods in global and scoped scripts using the <samp class=\"ph codeph\">sn_fd.FlowAPI</samp>\n      object. Create calls to your flows using the <span class=\"ph uicontrol\">Code Snippet</span> action in\n      Flow Designer, or use the methods detailed here to update scripts manually.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">In domain separated instances, flows, subflows, and\n        actions triggered by this API run in the domain of the user who started the script. For\n        example, if a user in the Acme domain starts a script that triggers a flow, the flow runs in\n        the Acme domain and can only access Acme data, even if the flow runs as the System User.\n       </span></div>","example":""},"properties":{},"methods":[{"name":"executeAction","description":"Run an action from a server-side script synchronously.<p>Execute an action from within a business rule, script include, or any other server-side\n        script. Actions run using this method run synchronously, so the method has access to outputs\n        created by the action. Use <span class=\"ph uicontrol\">startAction</span> to run an action\n        asynchronously.</p>","params":[{"name":"name","type":"String","description":"The scope and name of the action to be executed, for example\n                  <samp class=\"ph codeph\">global.action_name</samp>."},{"name":"inputs","type":"Map","description":"Name-value pairs that define action inputs. Use the input name, not the input\n                label."},{"name":"timeout","type":"Number","description":"<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"}],"returns":{"type":"Object","description":"The action outputs."},"example":[{"code":"\n(function() {\n\t\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['name'] = ; // String \n\t\tinputs['password2'] = ; // Password (2 Way Encrypted) \n\t\t\n\t\t// Execute Synchronously: Run in foreground. Code snippet has access to outputs.\n\t\t// var timeout = ; //timeout in ms\n              //sn_fd.FlowAPI.executeAction('global.actionforpassword2test', inputs, timeout)\n              var outputs = sn_fd.FlowAPI.executeAction('global.actionforpassword2test', inputs);\n\n\t\t// Get Outputs:\n\t\t// Note: outputs can only be retrieved when executing synchronously.\n\t\tvar output = outputs['output']; // Password (2 Way Encrypted)\n\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\t\n})();","description":"In this example, the script uses <span class=\"keyword apiname\">sn_fd.FlowAPI.executeAction</span> to execute\n        an action called actionforpassword2test in the global scope. A variable called inputs\n        contains the inputs for the action. In this case, a name and password. The outputs for the\n        action are stored in the outputs variable, which in this case, is an encrypted password\n        object. The code is wrapped in a try/catch statement to capture any errors that might occur\n        when the flow executes.","output":""}]},{"name":"executeActionQuick","description":"Run an action from a server-side script synchronously from the current user session\n    without creating execution details or other related records. Improve performance by eliminating\n    record-keeping overhead. <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n        example multiple executions per second, in a production environment.</span><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>","params":[{"name":"name","type":"String","description":"Scope and internal name of the action to execute. For example,\n                  <samp class=\"ph codeph\">global.action_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                actions."},{"name":"inputs","type":"Map","description":"Name-value pairs that define action inputs. You can find the available action\n                inputs and required data types under Inputs in the action outline. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."},{"name":"timeout","type":"Number","description":"<p class=\"p\"><span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span></p>"}],"returns":{"type":"Object","description":"Object containing outputs defined by the action. You can find the outputs for\n                the action under <span class=\"ph uicontrol\">Outputs</span> in the action outline."},"example":[{"code":"(function() {\n  try {\n\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    var outputs = sn_fd.FlowAPI.executeActionQuick('global.update_record_test', inputs);\n\n    // Get Outputs:\n    // Note: outputs can only be retrieved when executing synchronously.\n    var output1 = outputs['output1']; \n\n  } catch (ex) { \n    var message = ex.getMessage();\n    gs.error(message);\n    }\n\t\n})();","description":"","output":""}]},{"name":"executeFlow","description":"Run a flow from a server-side script synchronously.<p>Execute a flow from within a business rule, script include, or any other server-side\n        script. Flows run using this method run synchronously. Use <span class=\"ph uicontrol\">startFlow</span>\n        to run a flow asynchronously.</p>","params":[{"name":"name","type":"String","description":"The scope and name of the flow to be executed, for example\n                  <samp class=\"ph codeph\">global.flow_name</samp>."},{"name":"inputs","type":"Map","description":"Name-value pairs that define trigger inputs. Use the input name, not the input\n                label."},{"name":"timeout","type":"Number","description":"<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"}],"returns":{"type":"None","description":" "},"example":[{"code":"\n(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['current'] = ; // GlideRecord of table:  \n\t\tinputs['table_name'] = 'incident';\n\n              // Execute Synchronously: Run in foreground.\n              // var timeout = ; //timeout in ms\n              //sn_fd.FlowAPI.executeFlow('global.test_flow', inputs, timeout)\n              sn_fd.FlowAPI.executeFlow('global.test_flow', inputs);\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n})();","description":"This example uses sn_fd.FlowAPI.executeFlow to execute a global flow called test_flow. This\n        flow is normally triggered when a record on the incident table is updated. Because you are\n        activating the flow from a script, you must provide this information. The code creates an\n        inputs variable that contains the current record, and the table for the record. The code is\n        wrapped in a try/catch statement to capture any errors that might occur when the flow\n        executes.","output":""}]},{"name":"executeFlowQuick","description":"<span class=\"ph\">Run a flow, subflow, or action from a\n                    server-side script synchronously or asynchronously without creating execution\n                    details or other related records. Improve performance by eliminating\n                    record-keeping overhead.</span>\n    <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n        example multiple executions per second, in a production environment.</span><p>This method runs the flow as the user who initiates the session. Setting the flow to run as\n        the system user, or impersonating a user, is not supported. Flows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>","params":[{"name":"name","type":"String","description":"Scope and internal name of the flow to execute. For example,\n                  <samp class=\"ph codeph\">global.flow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal name</span>\n                field in the list of <span class=\"ph\">Flow Designer</span>\n                flows."},{"name":"inputs","type":"Map","description":"Name-value pairs that define trigger inputs. You can find the available trigger\n                inputs and required data types in the Trigger section of the flow. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."},{"name":"timeout","type":"Number","description":"<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function() {\n\t\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('ed92e8d173d023002728660c4cf6a7bc');\n\n    var inputs = {};\n    inputs['current'] = grIncident;\n    inputs['table_name'] = 'incident';\n\t\t\n    sn_fd.FlowAPI.executeFlowQuick('global.test_quick_flow', inputs);\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n\t}\n\t\n})();","description":"","output":""}]},{"name":"executeSubflow","description":"Run an subflow from a server-side script synchronously.<p>Execute a subflow from within a business rule, script include, or any other server-side\n        script. Subflows run using this method run synchronously. Use\n          <span class=\"ph uicontrol\">startSubflow</span> to run an subflow asynchronously.</p>","params":[{"name":"name","type":"String","description":"The scope and name of the subflow to be executed, for example\n                  <samp class=\"ph codeph\">global.subflow_name</samp>."},{"name":"inputs","type":"Map","description":"Name-value pairs that define subflow inputs. Use the input name, not the input\n                label."},{"name":"timeout","type":"Number","description":"<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"}],"returns":{"type":"Object","description":"Object containing the subflow outputs."},"example":[{"code":"\n(function() {\n\t\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['name'] = ; // String \n\t\tinputs['password2'] = ; // Password (2 Way Encrypted) \n\t\t\n\t\t// Execute Synchronously: Run in foreground.\n\t\t// var timeout = ; //timeout in ms\n              //sn_fd.FlowAPI.executeSubflow('global.subflowTest', inputs, timeout)\n              var outputs = sn_fd.FlowAPI.executeSubflow('global.subflowTest', inputs);\n\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\t\n})();","description":"In this example, the script uses sn_fd.FlowAPI.executeSubflow to execute an subflow called\n        subflowTest in the global scope. A variable called inputs contains the inputs for the\n        subflow. In this case, a name and password. The code is wrapped in a try/catch statement to\n        capture any errors that might occur when the flow executes.","output":""}]},{"name":"executeSubflowQuick","description":"Run a subflow from a server-side script synchronously from the current user session\n    without creating execution details or other related records. Improve performance by eliminating\n    record-keeping overhead. <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n        example multiple executions per second, in a production environment.</span><p>This method runs the subflow as the user who initiates the session. Setting the subflow to\n        run as the System User, or impersonating a user, is not applied. Subflows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>","params":[{"name":"name","type":"String","description":"Scope and internal name of the subflow to execute. For example,\n                  <samp class=\"ph codeph\">global.subflow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                subflows."},{"name":"inputs","type":"Map","description":"Name-value pairs that define subflow inputs. You can find the available subflow\n                inputs and required data types under Inputs in the subflow. Use the input name, not\n                the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."},{"name":"timeout","type":"Number","description":"<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"}],"returns":{"type":"Object","description":"Object containing outputs defined by the subflow. You can find the outputs for\n                the subflow under <span class=\"ph uicontrol\">Subflow Inputs &amp; Outputs</span> in the subflow\n                outline."},"example":[{"code":"(function() {\n\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    var outputs = sn_fd.FlowAPI.executeSubflowQuick('global.test_quick_run_subflow', inputs);\n\n    // Get Outputs:\n    // Note: outputs can only be retrieved when executing synchronously.\n    var output1 = outputs['output1']; \n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n    }\n\t\n})();","description":"","output":""}]},{"name":"setEncryptedOutput","description":"Build password2 values inside a script step.<p>Identify an encrypted password2 value returned from a GlideRecord, enabling the system to\n        display the value as a masked password rather than an encrypted string.</p>","params":[{"name":"password","type":"String","description":"Encrypted password2 value."}],"returns":{"type":"String","description":"Encrypted password2 value, recognised by the engine as a password\n                value."},"example":[{"code":"\n(function execute(inputs, outputs) {\n\t// ...code...\n\tvar gr = new GlideRecord('sys_user');\n\tgr.addQuery('first_name' , 'Abel');\n\tgr.query();\n\tgr.next();\n\tvar pwVal = gr.getValue('pw2');\n\toutputs['usedSetEncrypted'] = sn_fd.GlideActionUtil.setEncryptedOutput(pwVal);\n\toutputs['justSetDirectly'] = pwVal;\n})(inputs, outputs);","description":"This example returns value of a password2 field from a user record and stores in in a\n        variable. This variable is passed into the setEncryptedOutput method, which is called using\n        sn_fd.GlideActionUtil.setEncryptedOutput. The instance recognises the returned value as a\n        password.","output":""}]},{"name":"startAction","description":"Run an action from a server-side script asynchronously.<p>Execute an action from within a business rule, script include, or any other server-side\n        script. Actions run using this method run asynchronously, and scripts using this method does\n        not have access to any outputs created by the action. Use\n          <span class=\"ph uicontrol\">executeAction</span> to run an action synchronously and access the outputs\n        it generates.</p>","params":[{"name":"name","type":"String","description":"The scope and name of the action to be executed, for example\n                  <samp class=\"ph codeph\">global.action_name</samp>."},{"name":"inputs","type":"Map","description":"Name-value pairs that define action inputs. Use the input name, not the input\n                label."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\n(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['ah_task'] = myTaskRecord; // GlideRecord of table: task \n\t\tinputs['ah_comment'] ='Test Comment' ; // String \n\t\tsn_fd.FlowAPI.startAction('sn_itsm_spoke.add_comment', inputs);\t\t\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n})();","description":"This example uses sn_fd.FlowAPI.startAction to execute an action called add_comment in the\n        sn_itsm_spoke scope. The inputs object contains a target record and a comment to add to that\n        record. The code is wrapped in a try/catch statement to capture any errors that might occur\n        when the flow executes.","output":""}]},{"name":"startActionQuick","description":"Run an action from a server-side script asynchronously without creating execution\n    details or other related records. Improve performance by eliminating record-keeping overhead.\n      <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n        example multiple executions per second, in a production environment.</span><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>","params":[{"name":"name","type":"String","description":"Scope and internal name of the action to execute. For example,\n                  <samp class=\"ph codeph\">global.action_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                actions."},{"name":"inputs","type":"Map","description":"Name-value pairs that define action inputs. You can find the available action\n                inputs and required data types under Inputs in the action outline. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function() {\n\t\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    sn_fd.FlowAPI.startActionQuick('global.update_record_test', inputs);\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n    }\n\t\n})();","description":"","output":""}]},{"name":"startFlow","description":"Run a flow from a server-side script.<p>Execute a flow from within a business rule, script include, or any other server-side\n        script. Flows executed with this method run asynchronously.</p>","params":[{"name":"name","type":"String","description":"The scope and name of the flow to be executed, for example\n                  <samp class=\"ph codeph\">global.flow_name</samp>."},{"name":"inputs","type":"Map","description":"Name-value pairs that define trigger inputs. Use the input name, not the input\n                label."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\n(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['current'] = ; // GlideRecord of table:  \n\t\tinputs['table_name'] = 'incident';\n\n\t\tsn_fd.FlowAPI.startFlow('global.test_flow', inputs);\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n})();","description":"This example uses sn_fd.FlowAPI.startFlow to execute a global flow called test_flow. The\n        code creates an inputs variable that contains inputs required by the flow. In this case, the\n        current record and the table for the record. The code is wrapped in a try/catch statement to\n        capture any errors that might occur when the flow executes.","output":""}]},{"name":"startFlowQuick","description":"Run a flow from a server-side script asynchronously without creating execution details\n    or other related records. Improve performance by eliminating record-keeping overhead. <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n        example multiple executions per second, in a production environment.</span><p>This method runs the flow as the System User. Setting the flow to run as the user who\n        initiates the session, or impersonating a user, is not applied. Flows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>","params":[{"name":"name","type":"String","description":"Scope and internal name of the flow to execute. For example,\n                  <samp class=\"ph codeph\">global.flow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal name</span>\n                field in the list of <span class=\"ph\">Flow Designer</span>\n                flows."},{"name":"inputs","type":"Map","description":"Name-value pairs that define trigger inputs. You can find the available trigger\n                inputs and required data types in the Trigger section of the flow. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function() {\n\t\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('ed92e8d173d023002728660c4cf6a7bc');\n\n    var inputs = {};\n    inputs['current'] = grIncident;\n    inputs['table_name'] = 'incident';\n\t\t\n    sn_fd.FlowAPI.startFlowQuick('global.test_quick_flow', inputs);\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n\t}\n\t\n})();","description":"","output":""}]},{"name":"startSubflow","description":"Run a subflow from a server-side script.<p>Execute a subflow from within a business rule, script include, or any other server-side\n        script. Subflows run using this method run asynchronously Scripts that include this method\n        do not have access to outputs created by the flow. Use <span class=\"ph uicontrol\">executeSubflow</span>\n        to run a subflow synchronously and access the outputs it generates.</p>","params":[{"name":"name","type":"String","description":"The scope and name of the subflow to be executed, for example\n                  <samp class=\"ph codeph\">global.subflow_name</samp>."},{"name":"inputs","type":"Map","description":"Name-value pairs that define subflow inputs. Use the input name, not the input\n                label."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['ah_task'] = myTaskRecord; // GlideRecord of table: task \n\t\tinputs['ah_comment'] ='Test Comment' ; // String \n\t\tsn_fd.FlowAPI.startSubflow('global.test_subflow', inputs);\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\t\n})();","description":"This example uses sn_fd.FlowAPI.startSubflow to execute a global flow called test_subflow.\n        The code is wrapped in a try/catch statement to capture any errors that might occur when the\n        flow executes.","output":""}]},{"name":"startSubflowQuick","description":"Run a subflow from a server-side script asynchronously without creating execution\n    details or other related records. Improve performance by eliminating record-keeping overhead.\n      <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n        example multiple executions per second, in a production environment.</span><p>This method runs the subflow as the System User. Setting the subflow to run as the user who\n        initiates the session, or impersonating a user, is not applied. Subflows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>","params":[{"name":"name","type":"String","description":"Scope and internal name of the subflow to execute. For example,\n                  <samp class=\"ph codeph\">global.subflow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                subflows."},{"name":"inputs","type":"Map","description":"Name-value pairs that define subflow inputs. You can find the available subflow\n                inputs and required data types under Inputs in the subflow. Use the input name, not\n                the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function() {\n\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    sn_fd.FlowAPI.startSubflowQuick('global.test_quick_run_subflow', inputs);\n\n  } catch (ex) {\n    var message = ex.getMessage();  \n    gs.error(message);\n    }\n\t\n})();","description":"","output":""}]}]},"GlideAggregate":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">GlideAggregate</span> enables you to easily create database aggregation\n  queries. The scoped <span class=\"keyword apiname\">GlideAggregate</span> class is an extension of <span class=\"keyword apiname\">GlideRecord</span>\n   and provides database aggregation (COUNT, SUM, MIN, MAX, AVG) queries. This functionality can be\n   helpful when creating customized reports or in calculations for calculated fields. The\n    <span class=\"keyword apiname\">GlideAggregate</span> class works only on number fields.<br/><br/>When you use <span class=\"keyword apiname\">GlideAggregate</span> on currency or price fields, you are working\n   with the reference currency value. Be sure to convert the aggregate values to the user's session\n   currency for display. Because the conversion rate between the currency or price value (displayed\n   value) and its reference <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/currency/concept/currency.html\" target=\"_blank\">currency</a>\n   \n    value (aggregation value)\n   might change, the result may not be what the user expects.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> When using an on-premise system, the database server time zone must be set to GMT/UTC for\n    this class to work properly.</div>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a GlideAggregate object on the specified table.","params":[{"name":"tableName","type":"String","description":"Name of the table."}],"returns":{"type":"","description":""},"example":[{"code":"var count = new GlideAggregate('incident');","description":"","output":""}]},{"name":"addAggregate","description":"Adds an aggregate.","params":[{"name":"agg","type":"String","description":"Name of the aggregate to add, for example, COUNT, MIN, or MAX"},{"name":"name","type":"String","description":"(Optional) Name of the column to aggregate. Null is the default."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n   incidents = count.getAggregate('COUNT');\n}\n//Number of incidents varies depending on the current state\n//of the incident table\ngs.info('Number of incidents: ' + incidents);","description":"","output":""}]},{"name":"addEncodedQuery","description":"Adds an encoded query to the other queries that may have been set for this\n    aggregate.","params":[{"name":"query","type":"String","description":"An encoded query to add to the aggregate."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Number of incidents varies depending on the current state\n//of the incident table\nvar count = new GlideAggregate('incident');\ncount.addEncodedQuery('active=true');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next())\n   incidents = count.getAggregate('COUNT');\ngs.info(incidents);","description":"","output":""}]},{"name":"addNotNullQuery","description":"Adds a not null query to the aggregate.","params":[{"name":"fieldname","type":"String","description":"The name of the field."}],"returns":{"type":"GlideQueryCondition","description":"The scoped query condition."},"example":[{"code":"var count = new GlideAggregate('incident');\n  count.addNotNullQuery('short_description');\n  count.query();   // Issue the query to the database to get all records\n  while (count.next()) {   \n     // add code here to process the aggregate\n  }","description":"","output":""}]},{"name":"addNullQuery","description":"Adds a null query to the aggregate.","params":[{"name":"fieldName","type":"String","description":"The name of the field."}],"returns":{"type":"GlideQueryCondition","description":"The scoped query condition."},"example":[{"code":"var count = new GlideAggregate('incident');\n  count.addNullQuery('short_description');\n  count.query();   // Issue the query to the database to get all records\n  while (count.next()) {   \n     // add code here to process the aggregate\n  }","description":"","output":""}]},{"name":"addQuery","description":"Adds a query to the aggregate.","params":[{"name":"name","type":"String","description":"The query to add."},{"name":"operator","type":"String","description":"The operator for the query."},{"name":"value","type":"String","description":"The list of values to include in the query."}],"returns":{"type":"GlideQueryCondition","description":"The query condition."},"example":[{"code":"//Number of incidents varies depending on the current state\n//of the incident table\nvar count = new GlideAggregate('incident');\ncount.addQuery('active', '=','true');\ncount.addAggregate('COUNT', 'category');\ncount.query();  \nwhile (count.next()) {\n   var category = count.category;\n   var categoryCount = count.getAggregate('COUNT', 'category');\n   gs.info(\"There are currently \" + categoryCount + \" incidents with a category of \" + category);\n}","description":"","output":""}]},{"name":"addTrend","description":"Adds a trend for a field.","params":[{"name":"fieldName","type":"String","description":"The name of the field for which trending should occur."},{"name":"timeInterval","type":"String","description":"The time interval for the trend. The following choices are available: Year,\n                Quarter, Date, Week, DayOfWeek, Hour, Value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAggregate","description":"Gets the value of an aggregate from the current record.","params":[{"name":"agg","type":"String","description":"The type of the aggregate, for example, SUM or Count."},{"name":"name","type":"String","description":"Name of the field to get the aggregate from."}],"returns":{"type":"String","description":"The value of the aggregate."},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n   incidents = count.getAggregate('COUNT');\n}\n//Number of incidents varies depending on the current state\n//of the incident table\ngs.info('Number of incidents: ' + incidents);","description":"","output":"Number of incidents: 63"}]},{"name":"getAggregateEncodedQuery","description":"Gets the query necessary to return the current aggregate.","params":[],"returns":{"type":"String","description":"The encoded query to get the aggregate."},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();  \nwhile (count.next()) {\n    gs.info(count.getAggregateEncodedQuery());\n}","description":"","output":""}]},{"name":"getEncodedQuery","description":"Retrieves the encoded query.","params":[],"returns":{"type":"String","description":"The encoded query."},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.addAggregate('MAX', 'sys_mod_count');\ncount.addAggregate('AVG', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();\ngs.info(count.getEncodedQuery());","description":"","output":""}]},{"name":"getRowCount","description":"Retrieves the number of rows in the GlideAggregate object.","params":[],"returns":{"type":"Number","description":"The number of rows in the GlideAggregate object."},"example":[{"code":"var count = new GlideAggregate('incident');\n  count.addAggregate('MIN', 'sys_mod_count');\n  count.addAggregate('MAX', 'sys_mod_count');\n  count.addAggregate('AVG', 'sys_mod_count');\n  count.groupBy('category');\n  count.query();\n  gs.info(count.getRowCount());\n  while (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n     gs.info(category + \" Update counts: MIN = \" + min + \" MAX = \" + max + \" AVG = \" + avg);\n  }","description":"","output":""}]},{"name":"getTableName","description":"Retrieves the table name associated with this GlideAggregate object.","params":[],"returns":{"type":"String","description":"The table name."},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.addAggregate('MAX', 'sys_mod_count');\ncount.addAggregate('AVG', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();\ngs.info(count.getTableName());","description":"","output":""}]},{"name":"getValue","description":"Gets the value of a field.","params":[{"name":"name","type":"String","description":"The name of the field."}],"returns":{"type":"String","description":"The value of the field."},"example":[{"code":"var count = new GlideAggregate('incident');\n  count.addAggregate('MIN', 'sys_mod_count');\n  count.addAggregate('MAX', 'sys_mod_count');\n  count.addAggregate('AVG', 'sys_mod_count');\n  count.groupBy('category');\n  count.query();   \n  while (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n  }\ngs.info(\"Current category is: \" + count.getValue('category'));","description":"","output":"Current category is: software"}]},{"name":"groupBy","description":"Provides the name of a field to use in grouping the aggregates.<p>May be called numerous times to set multiple group fields.</p>","params":[{"name":"name","type":"String","description":"Name of the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.addAggregate('MAX', 'sys_mod_count');\ncount.addAggregate('AVG', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();   \nwhile (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n     gs.info(category + \" Update counts: MIN = \" + min + \" MAX = \" + max + \" AVG = \" + avg);\n}","description":"","output":""}]},{"name":"hasNext","description":"Determines if there are any more records in the GlideAggregate object.","params":[],"returns":{"type":"Boolean","description":"True if there are more results in the query set."},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('AVG', 'sys_mod_count');\nagg.groupBy('category');\nagg.query();\nwhile (agg.hasNext()) {\n    agg.next();\n    var avg = agg.getAggregate('AVG', 'sys_mod_count');\n    var category = agg.category.getDisplayValue();\n    gs.info(category + ': AVG = ' + avg);\n}","description":"","output":""}]},{"name":"next","description":"Moves to the next record in the GlideAggregate.","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query set; otherwise, false."},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n   incidents = count.getAggregate('COUNT');\n   gs.info(incidents);\n}","description":"","output":""}]},{"name":"orderBy","description":"Orders the aggregates using the value of the specified field. The field will also be\n    added to the group-by list.","params":[{"name":"name","type":"String","description":"Name of the field to order the aggregates by."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count', 'category');\n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count', 'category');\n  agg2.orderBy('category');\n  gs.info(category + \": Current number of incidents:\" + count);\n}","description":"","output":""}]},{"name":"orderByAggregate","description":"Orders the aggregates based on the specified aggregate and field.","params":[{"name":"agg","type":"String","description":"Type of aggregation."},{"name":"fieldName","type":"String","description":"Name of the field to aggregate."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"ga.addAggregate(‘COUNT’, ‘category’);\n \nga.orderByAggregate('count', 'category');\n \nga.query();\n \nwhile(ga.next()) {\n  gs.info(‘Category ’ + ga.category + ‘ ‘ + ga.getAggregate(‘COUNT’, ‘category’));\n  }","description":"","output":"Category inquiry 18\nCategory software 11\nCategory hardware 7\nCategory network 5\nCategory request 5\nCategory  4\nCategory database 2"}]},{"name":"orderByDesc","description":"Sorts the aggregates in descending order based on the specified field. The field will\n    also be added to the group-by list.","params":[{"name":"name","type":"String","description":"Name of the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var agg = new GlideAggregate('incident');\nagg.addAggregate('count', 'category'); \nagg.orderByDesc('category'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count', 'category');\n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count', 'category');\n  agg2.orderBy('category');\n  gs.info(category + \": Current number of incidents:\" + count);\n}","description":"","output":""}]},{"name":"query","description":"Issues the query and gets the results.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n   incidents = count.getAggregate('COUNT');\n}\ngs.info('Number of incidents: ' + incidents);","description":"","output":""}]},{"name":"setGroup","description":"Sets whether the results are to be grouped.","params":[{"name":"b","type":"Boolean","description":"When true the results are grouped."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var ga = new GlideAggregate('incident');\nga.addAggregate('COUNT', 'category');\n \nga.setGroup(true);\nga.groupBy(\"category\");\n \nga.query();\n \nwhile(ga.next()) {\n  gs.info('Category ' + ga.category + ' ' + ga.getAggregate('COUNT', 'category'));\n  }","description":"","output":"Category database 2\nCategory hardware 7\nCategory inquiry 18\nCategory network 5\nCategory request 5\nCategory software 11"}]}]},"GlideCalendarDateTime":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">GlideCalendarDateTime</span> class provides methods for performing\n  operations on GlideCalendarDateTime objects, such as instantiating GlideCalendarDateTime objects\n  or working with glide_date_time fields. Use the <span class=\"keyword apiname\">GlideCalendarDateTime</span> methods to perform date-time operations, such\n   as instantiating a GlideCalendarDateTime object, performing date-time calculations, formatting a\n   date-time, or converting between date-time formats.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new GlideCalendarDateTime object from a date and time value in the UTC\n    time zone specified with the format yyyy-MM-dd HH:mm:ss.","params":[{"name":"dateTime","type":"String","description":"UTC date and time using the format yyyy-MM-dd HH:mm:ss."}],"returns":{"type":"","description":""},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");","description":"","output":""}]},{"name":"constructor","description":"Instantiates a new GlideCalendarDateTime object set to the time of a specified\n    GlideCalendarDateTime object in GMT format.","params":[{"name":"gcDT","type":"GlideCalendarDateTime","description":"Object used to set the time of the new object."}],"returns":{"type":"","description":""},"example":[{"code":"var start = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\nvar end = new GlideCalendarDateTime(start);\ngs.print(end);","description":"","output":"2011-01-01 12:00:00"}]},{"name":"constructor","description":"Instantiates a new GlideCalendarDateTime object with the current date and time in GMT\n    format.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var gcdt = new GlideCalendarDateTime();","description":"","output":""}]},{"name":"add","description":"Adds a GlideTime object to the current GlideCalendarDateTime object.","params":[{"name":"time","type":"GlideTime","description":"Time to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngcdt.add(gtime1);\ngs.print(gcdt.getTime());","description":"","output":"1970-01-01 08:00:20"}]},{"name":"add","description":"Adds a specified number of milliseconds to the GlideCalendarDateTime\n    object.","params":[{"name":"milliseconds","type":"Number","description":"Number of milliseconds to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getNumericValue());\ngcdt.add(10);\ngs.print(gcdt.getNumericValue());","description":"","output":""}]},{"name":"addDays","description":"Adds a specified number of days to the current GlideCalendarDateTime object. A negative\n    parameter subtracts days.<p>Use <span class=\"keyword apiname\">addDaysLocalTime()</span> and <span class=\"keyword apiname\">addDaysUTC()</span> instead of\n        this method.</p>","params":[{"name":"days","type":"Number","description":"Number of days to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addDays(-1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-30"}]},{"name":"addDaysLocalTime","description":"Adds a specified number of days to the current GlideCalendarDateTime object. A negative\n    parameter subtracts days.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts days using the local date and time\n        values.</p>","params":[{"name":"days","type":"Number","description":"Number of days to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addDaysLocalTime(-1);\ngs.print(gcdt.getLocalDate());","description":"","output":"2011-08-30"}]},{"name":"addDaysUTC","description":"Adds a specified number of days to the current GlideCalendarDateTime object. A negative\n    parameter subtracts days.<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts days using the UTC date and time\n        values.</p>","params":[{"name":"days","type":"Number","description":"Number of days to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addDaysUTC(-1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-30"}]},{"name":"addMonths","description":"Adds a specified number of months to the current GlideCalendarDateTime object. A\n    negative parameter subtracts months.<p>Use <span class=\"keyword apiname\">addMonthsLocalTime()</span> or <span class=\"keyword apiname\">addMonthsUTC()</span> instead of\n        this method.</p>","params":[{"name":"months","type":"Number","description":"Number of months to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addMonths(2);\ngs.print(gcdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addMonthsLocalTime","description":"Adds a specified number of months to the current GlideCalendarDateTime object. A\n    negative parameter subtracts months.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts months using the local date and time\n        values.</p>","params":[{"name":"months","type":"Number","description":"Number of months to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addMonthsLocalTime(2);\ngs.print(gcdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addMonthsUTC","description":"Adds a specified number of months to the current GlideCalendarDateTime object. A\n    negative parameter subtracts months.<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts months using the UTC date and time\n        values.</p>","params":[{"name":"months","type":"Number","description":"Number of months to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addMonthsUTC(2);\ngs.print(gcdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addSeconds","description":"Adds a specified number of seconds to the GlideCalendarDateTime object.","params":[{"name":"seconds","type":"Number","description":"Number of seconds to add"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-07 08:00:00\");\ngcdt.addSeconds(1000);\ngs.print(gcdt.getValue());","description":"","output":"2011-12-07 08:16:40"}]},{"name":"addWeeks","description":"Adds a specified number of weeks to the current GlideCalendarDateTime object. A\n    negative parameter subtracts weeks.<p>Use <span class=\"keyword apiname\">addWeeksLocalTime()</span> and <span class=\"keyword apiname\">addWeeksUTC()</span> instead of\n        this method.</p>","params":[{"name":"weeks","type":"Number","description":"Number of weeks to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addWeeks(-1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addWeeksLocalTime","description":"Adds a specified number of weeks to the current GlideCalendarDateTime object. A\n    negative parameter subtracts weeks.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts weeks using the local date and time\n        values.</p>","params":[{"name":"weeks","type":"Number","description":"Number of weeks to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addWeeksLocalTime(-1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addWeeksUTC","description":"Adds a specified number of weeks to the current GlideCalendarDateTime object. A\n    negative parameter subtracts weeks.<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts weeks using the UTC date and time\n        values.</p>","params":[{"name":"weeks","type":"Number","description":"Number of weeks to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addWeeksUTC(-1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addYears","description":"Adds a specified number of years to the current GlideCalendarDateTime object. A\n    negative parameter subtracts years.<p>Use <span class=\"keyword apiname\">addYearsLocalTime()</span> or <span class=\"keyword apiname\">addYearsUTC()</span> instead of\n        this method.</p>","params":[{"name":"years","type":"Number","description":"Number of years to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2010-08-31 08:00:00\");\ngcdt.addYears(1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"addYearsLocalTime","description":"Adds a specified number of years to the current GlideCalendarDateTime object. A\n    negative parameter subtracts years.<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts years using the local date and time\n        values.</p>","params":[{"name":"years","type":"Number","description":"Number of years to add. To subtract use a negative value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2010-08-31 08:00:00\");\ngcdt.addYearsLocalTime(1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"addYearsUTC","description":"Adds a specified number of years to the current GlideCalendarDateTime object. A\n    negative parameter subtracts years.<p>The date and time value stored by GlideCalendarDateTime object is interpreted as being in\n        the UTC time zone.</p>","params":[{"name":"years","type":"Number","description":"Number of years to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2010-08-31 08:00:00\");\ngcdt.addYearsUTC(1);\ngs.print(gcdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"compareTo","description":"Compares two date and time objects to determine whether one occurs before the other or\n    if they are equivalent.","params":[{"name":"dateTime","type":"Object","description":"Date time in a GlideCalendarDateTime object"}],"returns":{"type":"Number","description":"<ul class=\"ul\" id=\"GCDT-compareTo_O__ul_tb3_mjg_sz\">\n                  <li class=\"li\">0 = Dates are equal</li>\n\n                  <li class=\"li\">1 = Object's date is after the date specified in the parameter</li>\n\n                  <li class=\"li\">-1 = Object's date is before the date specified in the parameter</li>\n\n                </ul>"},"example":[{"code":"var initDate = new GlideCalendarDateTime(\"2011-08-01 12:00:00\");\nvar compDate1 = new GlideCalendarDateTime(\"2011-08-01 12:00:00\");\nvar compDate2 = new GlideCalendarDateTime(\"2011-07-31 12:00:00\");\nvar compDate3 = new GlideCalendarDateTime(\"2011-08-04 16:00:00\");\n \ngs.info(initDate.compareTo(compDate1)); // Equals (0)\ngs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)\ngs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)","description":"","output":""}]},{"name":"equals","description":"Compares an object with an existing value for equality.","params":[{"name":"GCDT","type":"Object","description":"Object to compare. Can be a GlideCalendarDateTime object or a valid date time\n                string."}],"returns":{"type":"Boolean","description":"True if they are equal, false otherwise."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 00:00:00\");\ngs.print(gcdt.equals(\"2011-09-30 00:12:01\"));","description":"","output":"false"}]},{"name":"getDate","description":"Returns the date stored by the GlideCalendarDateTime object, expressed in the standard\n    format, yyyy-MM-dd, and the system time zone, UTC by default.","params":[],"returns":{"type":"GlideDate","description":"Date in the system time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"getDayOfMonth","description":"Returns the current day of the month in the UTC time zone.<p>Use <span class=\"keyword apiname\">getDayOfMonthLocalTime()</span> and <span class=\"keyword apiname\">getDayOfMonthUTC()</span>\n        instead of this method.</p>","params":[],"returns":{"type":"Number","description":"Day of the month in the UTC time zone, from 1 to 31."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-02 12:00:00\");\ngs.print(gcdt.getDayOfMonth());","description":"","output":"2"}]},{"name":"getDayOfMonthLocalTime","description":"Returns the day of the month stored by the GlideCalendarDateTime object, expressed in\n    the current user's time zone.","params":[],"returns":{"type":"Number","description":"Day of the month in the user's time zone, from 1 to 31."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-02 12:00:00\");\ngs.print(gcdt.getDayOfMonthLocalTime());","description":"","output":"2"}]},{"name":"getDayOfMonthUTC","description":"Gets the day of the month stored by the GlideCalendarDateTime object, expressed in the\n    UTC time zone.","params":[],"returns":{"type":"Number","description":"Day of the month in the UTC time zone, from 1 to 31."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-02 12:00:00\");\ngs.print(gcdt.getDayOfMonthUTC());","description":"","output":"2"}]},{"name":"getDayOfWeek","description":"Retrieves the day of the week stored by the GlideCalendarDateTime object, expressed in\n    the user's time zone.<p>Use <span class=\"keyword apiname\">getDayOfWeekLocalTime()</span> and <span class=\"keyword apiname\">getDayOfWeekUTC()</span>\n        instead of this method.</p>","params":[],"returns":{"type":"Number","description":"Day of the week value - Monday = 1, ... Sunday = 7."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.print(gcdt.getDayOfWeek());","description":"","output":"4"}]},{"name":"getDayOfWeekLocalTime","description":"Returns the day of the week stored by the GlideCalendarDateTime object, expressed in\n    the user's time zone.","params":[],"returns":{"type":"Number","description":"Day of the week value - Monday = 1, ... Sunday = 7"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.print(gcdt.getDayOfWeekLocalTime());","description":"","output":"4"}]},{"name":"getDayOfWeekUTC","description":"Returns the day of the week stored by the GlideCalendarDateTime object, expressed in\n    the UTC time zone.","params":[],"returns":{"type":"Number","description":"Day of the week value - Monday = 1, ... Sunday = 7"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.print(gcdt.getDayOfWeekUTC());","description":"","output":"4"}]},{"name":"getDaysInMonth","description":"Gets the number of days in the month stored by the GlideCalendarDateTime object,\n    expressed in the Java Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">getDaysInMonthLocalTime()</span> and <span class=\"keyword apiname\">getDaysInMonthUTC()</span>\n        instead of this method.</p>","params":[],"returns":{"type":"Number","description":"Number of days in the current month in the Java Virtual Machine time\n                zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //December\ngs.print(gcdt.getDaysInMonth());","description":"","output":"31"}]},{"name":"getDaysInMonthLocalTime","description":"Returns the number of days in the month stored by the GlideCalendarDateTime object,\n    expressed in the current user's time zone.","params":[],"returns":{"type":"Number","description":"Number of days in the current month in the user's time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //December\ngs.print(gcdt.getDaysInMonthLocalTime());","description":"","output":"31"}]},{"name":"getDaysInMonthUTC","description":"Returns the number of days in the month stored by the GlideCalendarDateTime object,\n    expressed in the UTC time zone.","params":[],"returns":{"type":"Number","description":"Number of days in the month stored by the GlideCalendarDateTime object,\n                expressed in the UTC time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //December\ngs.print(gcdt.getDaysInMonthUTC());","description":"","output":"31"}]},{"name":"getDisplayValue","description":"Returns the date and time value in the current user's display format and time zone.\n    Referring to the GlideCalendarDateTime object directly returns the date and time value in the\n    GMT time zone.","params":[],"returns":{"type":"String","description":"Date and time in the user's format and time zone. Keep in mind when designing\n                business rules or script includes that this method may return values in different\n                formats for different users."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getDisplayValue());","description":"","output":"2011-08-31 01:00:00"}]},{"name":"getDisplayValueInternal","description":"Returns the display value in the internal format (yyyy-MM-dd HH:mm:ss).<p>This method is useful for date/time fields, but not for date fields.</p>","params":[],"returns":{"type":"String","description":"Date and time values for the GlideCalendarDateTime object in the current user's\n                time zone and the internal date and time format of yyyy-MM-dd HH:mm:ss."},"example":[{"code":"// Wednesday\nvar gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getDisplayValueInternal());","description":"","output":"2011-08-31 01:00:00"}]},{"name":"getDSTOffset","description":"Returns the amount of time that daylight saving time is offset.","params":[],"returns":{"type":"Number","description":"Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if\n                there is no offset or if the time is not during daylight saving time."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getDSTOffset());","description":"","output":"3600000"}]},{"name":"getErrorMsg","description":"Returns the current error message.","params":[],"returns":{"type":"String","description":"Error message"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 aa:00:00\"); //bad\ngs.print(gcdt.isValid()); //false\ngs.print(gcdt.getErrorMsg()); //reason","description":"","output":""}]},{"name":"getFloatingValue","description":"Returns the calendar date/time value in the user or system time zone based on the value\n    specified in the <span class=\"ph uicontrol\">Time zone</span> field of the corresponding Business Calendar\n    record.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The Start and End fields in the Business Calendar Entry\n          [business_calendar_span] table contain an attribute time_zone_field that is set to the\n          value in the <span class=\"ph uicontrol\">Time zone</span> field (calendar.time_zone). </div>\nFor\n        details on creating a business calendar and setting the time zone value, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/time/task/create-business-calendar.html\" target=\"_blank\">Create a business calendar</a>.</p>","params":[],"returns":{"type":"String","description":"Date and time in the internal format and time zone based on the <span class=\"ph uicontrol\">Time\n                  zone</span> field of the corresponding Business Calendar record.<ul class=\"ul\" id=\"GCDT-getFloatingValue__ul_n1v_y5w_23b\">\n                  <li class=\"li\">Floating: User time zone</li>\n\n                  <li class=\"li\">Any other value: System time zone</li>\n\n                </ul>"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2018-08-31 08:00:00\");\ngs.print(gcdt.getFloatingValue());","description":"","output":"2018-08-31 010:00:00"}]},{"name":"getInternalFormattedLocalTime","description":"Returns the object's time in the local time zone and in the internal\n    format.","params":[],"returns":{"type":"String","description":"Object's time in the local time zone and the internal format."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getInternalFormatedLocalTime());","description":"","output":"2011-08-31 08:00:00"}]},{"name":"getInternalMidnight","description":"Returns a date and time object set to midnight of a specified day using\n    UTC.","params":[{"name":"dayOfTheWeek","type":"Number","description":"Day of the week for which to return the date/time object."}],"returns":{"type":"GlideCalendarDateTime","description":"A GlideCalendarDateTime object set to midnight."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getInternalMidnight(2));","description":"","output":"2011-08-30 00:00:01"}]},{"name":"getLocalDate","description":"Returns the date stored by the GlideCalendarDateTime object, expressed in the standard\n    format, yyyy-MM-dd, and the current user's time zone.","params":[],"returns":{"type":"GlideDate","description":"Date in the user's time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getLocalDate());","description":"","output":"2011-08-31"}]},{"name":"getLocalTime","description":"Returns the time in the user's time zone.","params":[],"returns":{"type":"GlideTime","description":"Time in the user's time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getLocalTime());","description":"","output":"1970-01-01 01:00:00"}]},{"name":"getMonth","description":"Retrieves the month stored by the GlideCalendarDateTime object, expressed in Java\n    Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">getMonthLocalTime()</span> and <span class=\"keyword apiname\">getMonthUTC()</span> instead of\n        this method.</p>","params":[],"returns":{"type":"Number","description":"Numerical value of the month, Jan=1, Dec=12."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //December\ngs.print(gcdt.getMonth());","description":"","output":"12"}]},{"name":"getMonthLocalTime","description":"Returns the month stored by the GlideCalendarDateTime object, expressed in the current\n    user's time zone.","params":[],"returns":{"type":"Number","description":"Numerical value of the month, Jan=1, Dec=12."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //December\ngs.print(gcdt.getMonthLocalTime());","description":"","output":"12"}]},{"name":"getMonthUTC","description":"Returns the month stored by the GlideCalendarDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"Numerical value of the month, Jan=1, Dec=12."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //December\ngs.print(gcdt.getMonthUTC());","description":"","output":"12"}]},{"name":"getNumericValue","description":"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT.","params":[],"returns":{"type":"Number","description":"Number of milliseconds since January 1, 1970, 00:00:00 GMT."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getNumericValue());","description":"","output":"1314777600000"}]},{"name":"getSpanTime","description":"Retrieves the amount of time elapsed since the midnight of a specified day to the\n    current time.","params":[{"name":"dayOfWeek","type":"Number","description":"Day of week value from 1 to 7. 1 = Monday, 7=Sunday."}],"returns":{"type":"GlideTime","description":"Amount of time elapsed since midnight of the specified day. To display the\n                result in user-friendly terms, set the value to GlideDuration."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\"); //Wednesday\nvar dur = new GlideDuration();\n \nvar span = gcdt.getSpanTime(1); //how much time since Monday 00:00:00\ndur.setValue(span);\ngs.print(dur.getDisplayValue());","description":"","output":"2 Days 8 Hours"}]},{"name":"getTime","description":"Returns the Unix duration stamp.","params":[],"returns":{"type":"GlideTime","description":"Unix duration stamp in system format based on GMT time."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getTime());","description":"","output":"1970-01-01 08:00:00"}]},{"name":"getTZOffset","description":"Returns the time zone offset in milliseconds.","params":[],"returns":{"type":"Number","description":"Number of milliseconds of the time zone offset"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.getLocalTime(); // PST local time\ngs.print(gcdt.getTZOffset());","description":"","output":"28800000"}]},{"name":"getUserFormattedLocalTime","description":"Returns the object's time in local time zone in the user's format.","params":[],"returns":{"type":"String","description":"Object's time in local time and the user's format."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getUserFormatedLocalTime());","description":"","output":"2011-08-31 05:00:00"}]},{"name":"getUserTimeZone","description":"Retrieves the time zone for the current user session.<p>This method is equivalent to <samp class=\"ph codeph\">gs.getSession().getTimeZone()</samp>.</p>","params":[],"returns":{"type":"TimeZone","description":"TimeZone object for the current user."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getUserTimeZone());","description":"","output":"sun.util.calendar.ZoneInfo[id=&quot;America/Los_Angeles&quot;,offset=-28800000,dstSavings=3600000,useDaylight=true,transitions=185,\nlastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-28800000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,\nstartMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,\nendTime=7200000,endTimeMode=0]]"}]},{"name":"getUTCMidnight","description":"Retrieves a GlideCalendarDateTime object with the time set to midnight using the UTC\n    time zone.<p>This method sets the date of the new GlideCalendarDateTime object as the specified day of\n        the week within the week of the original GlideCalendarDateTime object.</p>","params":[{"name":"dayOfTheWeek","type":"Number","description":"Day of the week, from 1 to 7. Monday=1, Sunday=7. Do not enter 0 in this\n                parameter."}],"returns":{"type":"GlideCalendarDateTime","description":"New GlideCalendarDateTime object, set to midnight."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\"); // Wednesday, 3rd day of the week.\ngs.print(gcdt.getUTCMidnight(5)); //Friday, 5th day of the week.","description":"","output":"2011-09-02 00:00:00"}]},{"name":"getValue","description":"Returns the date and time value stored by the GlideCalendarDateTime object in the\n    internal format, yyyy-MM-dd HH:mm:ss, and the system time zone; UTC by default.","params":[],"returns":{"type":"String","description":"Date and time in the internal format and system time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.getValue());","description":"","output":"2011-08-31 08:00:00"}]},{"name":"getWeekOfYearLocalTime","description":"Returns the number of the week stored by the GlideCalendarDateTime object, expressed in\n    the current user's time zone.<p>All weeks begin on Sunday. The first week of the year is the week that contains at least\n        one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n        of 2016 as that week contains January 1 and 2.</p>","params":[],"returns":{"type":"Number","description":"Number of the current week. The highest week number in a year is either 52 or\n                53."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.print(gcdt.getWeekOfYearUTC());","description":"","output":"49"}]},{"name":"getWeekOfYearUTC","description":"Returns the number of the week stored by the GlideCalendarDateTime object, expressed in\n    the UTC time zone.<p>All weeks begin on Sunday. The first week of the year is the week that contains at least\n        one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n        of 2016 as that week contains January 1 and 2.</p>","params":[],"returns":{"type":"Number","description":"Number of the current week in UTC time. The highest week number in a year is\n                either 52 or 53."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.print(gcdt.getWeekOfYearUTC());","description":"","output":"49"}]},{"name":"getYear","description":"Retrieves the year stored by the GlideCalendarDateTime object, expressed in the Java\n    Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">getYearLocalTime()</span> and <span class=\"keyword apiname\">getYearUTC()</span> instead of\n        this method.</p>","params":[],"returns":{"type":"Number","description":"Four-digit year value in the Java Virtual Machine time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //2011\ngs.print(gcdt.getYear());","description":"","output":"2011"}]},{"name":"getYearLocalTime","description":"Returns the year stored by the GlideCalendarDateTime object, expressed in the current\n    user's time zone.","params":[],"returns":{"type":"Number","description":"Four-digit year value in the user's time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //2011\ngs.print(gcdt.getYearLocalTime());","description":"","output":"2011"}]},{"name":"getYearUTC","description":"Returns the year stored by the GlideCalendarDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"number","description":"Four-digit year value in the UTC time zone."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(); //2011\ngs.print(gcdt.getYearUTC());","description":"","output":"2011"}]},{"name":"hasDate","description":"Determines if an object's date is set.","params":[],"returns":{"type":"Boolean","description":"True if the object's date is set, false otherwise."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.hasDate());","description":"","output":"true"}]},{"name":"isDST","description":"Determines if the object's time uses a daylight saving offset","params":[],"returns":{"type":"Boolean","description":"True if the time is daylight saving time, false otherwise."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 00:00:00\");\ngs.print(gcdt.isDST()); //true","description":"","output":"true"}]},{"name":"isValid","description":"Determines if a value is a valid date and time.","params":[],"returns":{"type":"Boolean","description":"True if value is valid, false otherwise."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 aa:00:00\"); //bad\ngs.print(gcdt.isValid()); //false","description":"","output":"false"}]},{"name":"setDayOfMonth","description":"Sets the day of the month to a specified value.<p>Use <span class=\"keyword apiname\">setDayOfMonthLocalTime(day)</span> and\n          <span class=\"keyword apiname\">setDayOfMonthUTC(day)</span> instead of this method.</p>","params":[{"name":"day","type":"Number","description":"Day of the month, from 1 to 31."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setDayOfMonth(9);\ngs.print(gcdt.getDayOfMonth());","description":"","output":"9"}]},{"name":"setDayOfMonthLocalTime","description":"Sets the day of the month to a specified value in the current user's time zone.","params":[{"name":"day","type":"Number","description":"Day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the\n                month."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setDayOfMonthLocalTime(9);\ngs.print(gcdt.getDayOfMonthLocalTime());","description":"","output":"9"}]},{"name":"setDayOfMonthUTC","description":"Sets the day of the month to a specified value in the UTC time zone.","params":[{"name":"day","type":"Number","description":"Day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the\n                month."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setDayOfMonthUTC(9);\ngs.print(gcdt.getDayOfMonthUTC());","description":"","output":"9"}]},{"name":"setDisplayValue","description":"Sets a date and time value using the current user's display format and time\n    zone.","params":[{"name":"asDisplayed","type":"String","description":"Date and time in the current user's display format and time zone. <p class=\"p\">The\n                  parameter must be formatted using the current user's preferred display format,\n                  such as MM-dd-yyyy HH:mm:ss.</p>\n<p class=\"p\">To assign the current date and time to a\n                  variable in a workflow script, use\n                    <samp class=\"ph codeph\">&lt;variable&gt;.setDisplayValue(gs.nowDateTime);</samp>.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-02-02 12:00:00\");\ngcdt.setDisplayValue(\"2011-01-01 12:00:00\");\ngs.print(gcdt.getValue());","description":"","output":"2011-01-01 20:00:00"}]},{"name":"setDisplayValue","description":"Sets a date and time value using the current user's time zone and the specified date\n    and time format.<p>This method throws a runtime exception if the date and time format in the dateTime\n        parameter does not match the format parameter. You can retrieve the error message by calling\n          <span class=\"keyword apiname\">getErrorMsg()</span> on the GlideCalendarDateTime object after the exception\n        is caught.</p>","params":[{"name":"dateTime","type":"String","description":"Date and time in the current user's time zone."},{"name":"format","type":"String","description":"Format to use to parse the dateTime parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-02-02 12:00:00\");\ngcdt.setDisplayValue(\"20-5-2011 12:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.print(gcdt.getValue());","description":"","output":"2011-05-20 19:00:00"}]},{"name":"setDisplayValueInternal","description":"Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.","params":[{"name":"dateTime","type":"String","description":"Date and time in internal format"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-02-02 12:00:00\");\ngcdt.setDisplayValueInternal(\"2011-01-01 12:00:00\");\ngs.print(gcdt.getValue());","description":"","output":"2011-01-01 20:00:00"}]},{"name":"setDisplayValueInternalWithAlternates","description":"Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.<p>This method attempts to parse incomplete date and time values.</p>","params":[{"name":"dateTime","type":"String","description":"Date and time in internal format."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setGlideCalendarDateTime","description":"Sets the date and time of the current object using an existing GlideCalendarDateTime\n    object.<p>This method is equivalent to instantiating a new object with a GlideCalendarDateTime\n        parameter.</p>","params":[{"name":"gcDT","type":"GlideCalendarDateTime","description":"GlideCalendarDateTime object"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dt1 = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\nvar dt2 = new GlideCalendarDateTime(\"2011-02-02 08:00:00\");\ndt1.setGlideCalendarDateTime(dt2);\ngs.print(dt1.getValue());","description":"","output":"2011-02-02 08:00:00"}]},{"name":"setInitialValue","description":"Sets the date and time.<p>This method is equivalent to <span class=\"keyword apiname\">setValue(Object)</span>.</p>","params":[{"name":"dateTime","type":"String","description":"Date and time to use. Accepts either a string in the GMT time zone in the\n                internal format, or a GlideCalendarDateTime object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setInitialValue(\"2011-01-01 12:00:00\");\ngs.print(gcdt.getValue());","description":"","output":"2011-01-01 12:00:00"}]},{"name":"setMonth","description":"Sets the month stored by the GlideCalendarDateTime object to a specified value using\n    the Java Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">setMonthLocalTime()</span> or <span class=\"keyword apiname\">setMonthUTC()</span> instead of\n        this method.</p>","params":[{"name":"month","type":"Number","description":"Month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setMonth(1);\ngs.print(gcdt.getMonth());","description":"","output":"1"}]},{"name":"setMonthLocalTime","description":"Sets the month stored by the GlideCalendarDateTime object to a specified value using\n    the current user's time zone.","params":[{"name":"month","type":"Number","description":"Month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setMonthLocalTime(1);\ngs.print(gcdt.getMonthLocalTime());","description":"","output":"1"}]},{"name":"setMonthUTC","description":"Sets the month stored by the GlideCalendarDateTime object to a specified value using\n    the UTC time zone.","params":[{"name":"month","type":"Number","description":"Month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setMonthUTC(1);\ngs.print(gcdt.getMonthUTC());","description":"","output":"1"}]},{"name":"setNumericValue","description":"Sets the date and time to the number of milliseconds since January 1, 1970 00:00:00\n    GMT.","params":[{"name":"milliseconds","type":"Number","description":"Number of milliseconds"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setNumericValue(1314777600000);\ngs.print(gcdt.getValue());","description":"","output":"2011-08-31 08:00:00"}]},{"name":"setTZ","description":"Sets the time zone of the GlideCalendarDateTime object to be the specified time\n    zone.","params":[{"name":"timeZone","type":"TimeZone","description":"Time zone object"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var tz = gs.getSession().getTimeZone();\nvar gcdt = new GlideCalendarDateTime(); \ngcdt.setTZ(tz);","description":"","output":""}]},{"name":"setValue","description":"Sets the date and time of the GlideCalendarDateTime object.<p>This method is equivalent to <span class=\"keyword apiname\">setInitialValue()</span>.</p>","params":[{"name":"dateTime","type":"Object","description":"Date and time to use. This parameter may be one of several types. <ul class=\"ul\" id=\"GCDT-setValue_O__ul_j3h_4pc_nt\">\n                  <li class=\"li\">A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss:\n                    sets the value of the object to the specified date and time. <p class=\"p\">Using the method\n                      this way is equivalent to instantiating a new GlideCalendarDateTime object using the\n                      <samp class=\"ph codeph\">GlideCalendarDateTime(value)</samp> constructor.</p>\n<p class=\"p\"> If the date and\n                      time format used does not match the internal format, the method attempts to\n                      set the date and time using other available formats. Resolving the date and\n                      time this way can lead to inaccurate data due to ambiguity in the day and\n                      month values. When using a non-standard date and time format, use\n                        <samp class=\"ph codeph\">setValue(dt, format)</samp> instead.</p>\n</li>\n\n                  <li class=\"li\">A GlideCalendarDateTime object: sets the value of the object to the date and\n                    time stored by the GlideCalendarDateTime passed in the parameter. <p class=\"p\">Using the\n                      method this way is equivalent to instantiating a new GlideCalendarDateTime\n                      object using the <samp class=\"ph codeph\">GlideCalendarDateTime(g)</samp>\n                    constructor.</p>\n</li>\n\n                  <li class=\"li\">A Java Date object: sets the value of the object using the value stored by the\n                    Java Date object. <p class=\"p\">Using the method this way is equivalent to passing the\n                      value returned by the Java Date object <span class=\"keyword apiname\">getTime() </span>to the\n                      GlideCalendarDateTime <span class=\"keyword apiname\">setNumericValue()</span> method. This method\n                      does not accept JavaScript Date objects.</p>\n</li>\n\n                  <li class=\"li\">A JavaScript Number: sets the value of the object using the Number value as\n                    milliseconds past January 1, 1970 00:00:00 GMT. <p class=\"p\">Using the method this way is\n                      equivalent to the <samp class=\"ph codeph\">setNumericValue(milliseconds)\n                    </samp>method.</p>\n</li>\n\n                  <li class=\"li\">A Java Integer or Long: sets the value of the object using the Integer or Long\n                    value as milliseconds past January 1, 1970 00:00:00 GMT. <p class=\"p\">Using the method\n                      this way is equivalent to the <samp class=\"ph codeph\">setNumericValue(milliseconds)\n                      </samp>method.</p>\n</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\ngcdt.setValue(\"2011-02-02 08:00:00\");\ngs.print(gcdt.getValue());","description":"","output":"2011-02-02 08:00:00"}]},{"name":"setValueUTC","description":"Sets a date and time value using the UTC time zone and the specified date and time\n    format.<p>This method throws a runtime exception if the date and time format used in the dateTime\n        parameter does not match the format parameter. You can retrieve the error message by calling\n          <span class=\"keyword apiname\">getErrorMsg()</span> on the GlideCalendarDateTime object after the exception\n        is caught.</p>","params":[{"name":"dateTime","type":"String","description":"Date and time to use"},{"name":"format","type":"String","description":"Format to use"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\ngcdt.setValueUTC(\"15-02-2011 08:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.print(gcdt.getValue());","description":"","output":"2011-02-15 08:00:00"}]},{"name":"setYear","description":"Sets the year stored by the GlideCalendarDateTime object to a specified value using the\n    Java Virtual Machine time zone.<p>Use <span class=\"keyword apiname\">setYearLocalTime()</span> or <span class=\"keyword apiname\">setYearUTC()</span> instead of\n        this method.</p>","params":[{"name":"year","type":"Number","description":"Year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setYear(2013);\ngs.print(gcdt.getYear());","description":"","output":"2013"}]},{"name":"setYearLocalTime","description":"Sets the year stored by the GlideCalendarDateTime object to a specified value using the\n    current user's time zone.","params":[{"name":"year","type":"Number","description":"Year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setYearLocalTime(2013);\ngs.print(gcdt.getYearLocalTime());","description":"","output":"2013"}]},{"name":"setYearUTC","description":"Sets the year stored by the GlideCalendarDateTime object to a specified value using the\n    UTC time zone.","params":[{"name":"year","type":"Number","description":"Year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime();\ngcdt.setYearUTC(2013);\ngs.print(gcdt.getYearUTC());","description":"","output":"2013"}]},{"name":"subtract","description":"Returns the duration difference between two GlideCalendarDateTime values.","params":[{"name":"start","type":"GlideCalendarDateTime","description":"Start value"},{"name":"end","type":"GlideCalendarDateTime","description":"End value"}],"returns":{"type":"GlideDuration","description":"Time between the two values"},"example":[{"code":"var gcdt1 = new GlideCalendarDateTime(\"2011-08-28 09:00:00\");\nvar gcdt2 = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\nvar dur = new GlideDuration();\n \nvar dur = GlideCalendarDateTime.subtract(gcdt1, gcdt2); //the difference between gcdt1 and gcdt2\ngs.print(dur.getDisplayValue());","description":"","output":"2 Days 23 Hours"}]},{"name":"subtract","description":"Subtracts a specified amount of time.","params":[{"name":"time","type":"GlideTime","description":"Time to subtract"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngcdt.subtract(gtime1);\ngs.print(gcdt.getTime());","description":"","output":"1970-01-01 07:59:40"}]},{"name":"subtract","description":"Subtracts a specified number of milliseconds from the GlideCalendarDateTime\n    object.","params":[{"name":"milliseconds","type":"Number","description":"Number of milliseconds to subtract"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-12-07 08:00:00\");\ngcdt.subtract(1000);\ngs.print(gcdt.getValue());","description":"","output":"2011-12-07 07:59:59"}]},{"name":"toString","description":"Returns the date and time value stored by the GlideCalendarDateTime object in the\n    internal format, yyyy-MM-dd HH:mm:ss, and the system time zone; UTC by default.<p>This method is equivalent to <span class=\"keyword apiname\">getValue()</span>.</p>","params":[],"returns":{"type":"String","description":"Date and time stored by the GlideCalendarDateTime object in the system time\n                zone and format."},"example":[{"code":"var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.print(gcdt.toString());","description":"","output":"2011-08-31 08:00:00"}]}]},"GlideDate":{"meta":{"has_constructor":true,"description":"The scoped GlideDate class provides methods for performing operations on GlideDate\n    objects, such as instantiating GlideDate objects or working with GlideDate fields. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a GlideDate object with the current date time.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getByFormat","description":"Gets the date in the specified date format.","params":[{"name":"format","type":"String","description":"the desired date format"}],"returns":{"type":"String","description":"the date in the specified format"},"example":[{"code":"var gd = new GlideDate(); \ngd.setValue('2015-01-01');\ngs.info(gd.getByFormat(\"dd-MM-yyyy\"));","description":"","output":"01-01-2015"}]},{"name":"getDayOfMonthNoTZ","description":"Gets the day of the month stored by the GlideDate object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"The day of the month in the UTC time zone, from 1 to 31."},"example":[{"code":"//Today's date is 2016-05-13 \nvar gd =new GlideDate();\ngs.info(gd.getDayOfMonthNoTZ());","description":"","output":"13"}]},{"name":"getDisplayValue","description":"Gets the date in the current user's display format and time zone.","params":[],"returns":{"type":"String","description":"The date in the user's format and time zone. Keep in mind when designing\n                business rules or script includes that this method may return values in different\n                formats for different users."},"example":[{"code":"var gd =new GlideDate(); \ngd.setValue('2015-01-01');\ngs.info(gd.getDisplayValue());","description":"","output":"2015-01-01"}]},{"name":"getDisplayValueInternal","description":"Gets the display value in the internal format (yyyy-MM-dd).","params":[],"returns":{"type":"String","description":"The date values for the GlideDate object in the current user's time zone and\n                the internal time format of yyyy-MM-dd."},"example":[{"code":"var gd =new GlideDate(); \ngs.info(gd.getDisplayValueInternal());","description":"","output":"2014-10-22"}]},{"name":"getMonthNoTZ","description":"Gets the month stored by the GlideDate object, expressed in the UTC time zone.","params":[],"returns":{"type":"Number","description":"The numerical value of the month from 1 to 12."},"example":[{"code":"//Today's date is 2016-05-13\nvar gd =new GlideDate();\ngs.info(gd.getMonthNoTZ());","description":"","output":"5"}]},{"name":"getValue","description":"Gets the date value stored in the database by the GlideDate object in the internal\n    format, yyyy-MM-dd, and the system time zone, UTC by default.","params":[],"returns":{"type":"String","description":"The date value in the internal format and system time zone."},"example":[{"code":"var gd =new GlideDate();\ngd.setValue('2015-01-01');\ngs.info(gd.getValue());","description":"","output":"2015-01-01"}]},{"name":"getYearNoTZ","description":"Gets the year stored by the GlideDate object, expressed in the UTC time zone.","params":[],"returns":{"type":"Number","description":"The numerical value of the year."},"example":[{"code":"//Today's date is 2016-05-13\nvar gd =new GlideDate();\ngs.info(gd.getYearNoTZ());","description":"","output":"2016"}]},{"name":"setDisplayValue","description":"Sets a date value using the current user's display format and time zone.","params":[{"name":"asDisplayed","type":"String","description":"The date in the current user's display format and time zone. The parameter must\n                be formatted using the current user's preferred display format, such as yyyy-MM-dd."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gd =new GlideDate();\ngd.setDisplayValue(\"2011-01-01\");\ngs.info(gd.getValue());","description":"","output":"2011-01-01"}]},{"name":"setValue","description":"Sets the date of the GlideDate object.","params":[{"name":"o","type":"String","description":"The date and time to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gd = new GlideDate(); \ngd.setValue('2015-01-01');\ngs.info(gd.getValue());","description":"","output":"2015-01-01"}]},{"name":"subtract","description":"Gets the duration difference between two GlideDate values.","params":[{"name":"start","type":"GlideDate","description":"The start value."},{"name":"end","type":"GlideDate","description":"The end value."}],"returns":{"type":"GlideDuration","description":"The duration between the two values."},"example":[{"code":"var sgd1 = new GlideDate(); \nsgd1.setDisplayValue('2014-07-18'); \nvar sgd2 = new GlideDate(); \nsgd2.setDisplayValue('2014-07-19'); \n \nduration= GlideDate.subtract(sgd1, sgd2); \ngs.info(duration.getDisplayValue());","description":"","output":"1 Day"}]}]},"GlideDateTime":{"meta":{"has_constructor":true,"description":"The scoped GlideDateTime class provides methods for performing operations on\n    GlideDateTime objects, such as instantiating GlideDateTime objects or working with\n    glide_date_time fields. Use the GlideDateTime methods to perform date-time operations, such as instantiating a\n      GlideDateTime object, performing date-time calculations, formatting a date-time, or converting\n      between date-time formats.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new GlideDateTime object from a date and time value in the UTC time zone\n    specified with the format yyyy-MM-dd HH:mm:ss.","params":[{"name":"value","type":"String","description":"A UTC date and time using the internal format yyyy-MM-dd HH:mm:ss."}],"returns":{"type":"","description":""},"example":[{"code":"var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");","description":"","output":""}]},{"name":"constructor","description":"Instantiates a new GlideDateTime object set to the time of the GlideDateTime object\n    passed in the parameter.","params":[{"name":"g","type":"GlideDateTime","description":"The GlideDateTime object to use for setting the time of the new object."}],"returns":{"type":"","description":""},"example":[{"code":"var start = new GlideDateTime(\"2011-01-01 12:00:00\");\nvar end = new GlideDateTime(start);\ngs.info(end);","description":"","output":""}]},{"name":"constructor","description":"Instantiates a new GlideDateTime object with the current date and time in Greenwich\n    Mean Time (GMT).","params":[],"returns":{"type":"","description":""},"example":[{"code":"var gdt = new GlideDateTime();","description":"","output":""}]},{"name":"add","description":"Adds a GlideTime object to the current GlideDateTime object.","params":[{"name":"gd","type":"GlideTime","description":"The GlideTime object to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngdt.add(gtime1);\nvar gtime2 = gdt.getTime();\ngs.info(gtime2.getByFormat('hh:mm:ss'));","description":"","output":""}]},{"name":"add","description":"Adds the specified number of milliseconds to the current GlideDateTime object.","params":[{"name":"milliseconds","type":"Number","description":"The number of milliseconds to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getNumericValue());\ngdt.add(10);\ngs.info(gdt.getNumericValue());","description":"","output":"1314777600000 1314777600010"}]},{"name":"addDaysLocalTime","description":"Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days. The method determines the local date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts days using the local date and time\n    values.","params":[{"name":"days","type":"Number","description":"The number of days to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDaysLocalTime(-1);\ngs.info(gdt.getLocalDate());","description":"","output":"2011-08-30"}]},{"name":"addDaysUTC","description":"Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days. The method determines the UTC date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts days using the UTC date and time\n    values.","params":[{"name":"days","type":"Number","description":"The number of days to add. Use a negative number to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDaysUTC(-1);\ngs.info(gdt.getDate());","description":"","output":"2011-08-30"}]},{"name":"addMonthsLocalTime","description":"Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months. The method determines the local date and time equivalent to the\n    value stored by the GlideDateTime object, then adds or subtracts months using the local date and\n    time values.","params":[{"name":"months","type":"Number","description":"The number of months to add. use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonthsLocalTime(2);\ngs.info(gdt.getDate());","description":"","output":"2011-10-31"}]},{"name":"addMonthsUTC","description":"Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months. The method determines the UTC date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts months using the UTC date and time\n    values.","params":[{"name":"months","type":"Number","description":"The number of months to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonthsUTC(2);\ngs.info(gdt.getDate());","description":"","output":""}]},{"name":"addSeconds","description":"Adds the specified number of seconds to the current GlideDateTime object.","params":[{"name":"seconds","type":"Number","description":"The number of seconds to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-07 08:00:00\");\ngdt.addSeconds(1000);\ngs.info(gdt.getValue());","description":"","output":"2011-12-07 08:16:40"}]},{"name":"addWeeksLocalTime","description":"Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks. The method determines the local date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts weeks using the local date and time\n    values.","params":[{"name":"weeks","type":"Number","description":"The number of weeks to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeksLocalTime(-1);\ngs.info(gdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addWeeksUTC","description":"Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks. The method determines the UTC date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts weeks using the UTC date and time\n    values.","params":[{"name":"weeks","type":"Number","description":"The number of weeks to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeksUTC(-1);\ngs.info(gdt.getDate());","description":"","output":"2011-08-24"}]},{"name":"addYearsLocalTime","description":"Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years. The method determines the local date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts years using the local date and time\n    values.","params":[{"name":"years","type":"Number","description":"The number of years to add.  Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYearsLocalTime(1);\ngs.info(gdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"addYearsUTC","description":"Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years. The date and time value stored by GlideDateTime object is interpreted\n    as being in the UTC time zone.","params":[{"name":"years","type":"Number","description":"The number of years to add. Use a negative value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYearsUTC(1);\ngs.info(gdt.getDate());","description":"","output":"2011-08-31"}]},{"name":"after","description":"Determines if the GlideDateTime object occurs after the specified\n    GlideDateTime.","params":[{"name":"gdt","type":"GlideDateTime","description":"The time to check against."}],"returns":{"type":"Boolean","description":"Returns true if the GlideDateTime object's time is after the time specified by\n                the parameter."},"example":[{"code":"var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.after(gdt2)); ","description":"","output":"False"}]},{"name":"before","description":"Determines if the GlideDateTime object occurs before the specified\n    GlideDateTime.","params":[{"name":"gdt","type":"GlideDateTime","description":"The time to check against."}],"returns":{"type":"Boolean","description":"Returns true if the GlideDateTime object's time is before the time specified by\n                the parameter."},"example":[{"code":"var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.before(gdt2));  ","description":"","output":"True"}]},{"name":"compareTo","description":"Compares two date and time objects to determine whether they are equivalent or one\n    occurs before or after the other.","params":[{"name":"o","type":"Object","description":"Date and time object in GlideDateTime format"}],"returns":{"type":"Number","description":"<ul class=\"ul\" id=\"r_ScopedGlideDateTimeCompareTo_Object_o__ul_tb3_mjg_sz\">\n                  <li class=\"li\">0 = Dates are equal</li>\n\n                  <li class=\"li\">1 = The object's date is after the date specified in the parameter</li>\n\n                  <li class=\"li\">-1 = The object's date is before the date specified in the parameter</li>\n\n                </ul>"},"example":[{"code":"var initDate = new GlideDateTime(\"2011-08-01 12:00:00\");\nvar compDate1 = new GlideDateTime(\"2011-08-01 12:00:00\");\nvar compDate2 = new GlideDateTime(\"2011-07-31 12:00:00\");\nvar compDate3 = new GlideDateTime(\"2011-08-04 16:00:00\");\n \ngs.info(initDate.compareTo(compDate1)); // Equals (0)\ngs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)\ngs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)","description":"","output":""}]},{"name":"equals","description":"Compares a datetime with an existing value for equality.","params":[{"name":"dateTime","type":"GlideDateTime object or String","description":"The datetime to compare."}],"returns":{"type":"Boolean","description":"Returns true if they are equal; otherwise, false."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 00:00:00\");\ngs.info(gdt.equals(\"2011-09-30 00:12:01\"));","description":"","output":"false"}]},{"name":"getDate","description":"Gets the date stored by the GlideDateTime object, expressed in the standard format,\n    yyyy-MM-dd, and the system time zone, UTC by default.","params":[],"returns":{"type":"GlideDate","description":"The date in the system time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getDate());","description":"","output":""}]},{"name":"getDayOfMonthLocalTime","description":"Gets the day of the month stored by the GlideDateTime object, expressed in the current\n    user's time zone.","params":[],"returns":{"type":"Number","description":"The day of the month in the user's time zone, from 1 to 31."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.info(gdt.getDayOfMonthLocalTime());","description":"","output":""}]},{"name":"getDayOfMonthUTC","description":"Gets the day of the month stored by the GlideDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"The day of the month in the UTC time zone, from 1 to 31."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.info(gdt.getDayOfMonthUTC());","description":"","output":"02"}]},{"name":"getDayOfWeekLocalTime","description":"Gets the day of the week stored by the GlideDateTime object, expressed in the user's\n    time zone.","params":[],"returns":{"type":"Number","description":"The day of week value, in the user's time zone, from 1 to 7. Monday equals 1,\n                Sunday equals 7."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//Thursday\ngs.info(gdt.getDayOfWeekLocalTime());","description":"","output":""}]},{"name":"getDayOfWeekUTC","description":"Gets the day of the week stored by the GlideDateTime object, expressed in the UTC time\n    zone.","params":[],"returns":{"type":"Number","description":"The day of week value from 1 to 7. Monday equals 1, Sunday equals 7."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//Thursday\ngs.info(gdt.getDayOfWeekLocalTime());","description":"","output":""}]},{"name":"getDaysInMonthLocalTime","description":"Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the current user's time zone.","params":[],"returns":{"type":"Number","description":"The number of days in the current month in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-02 12:00:00\"); //December\ngs.info(gdt.getDaysInMonthLocalTime());","description":"","output":""}]},{"name":"getDaysInMonthUTC","description":"Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the UTC time zone.","params":[],"returns":{"type":"Number","description":"The number of days in the month stored by the GlideDateTime object, expressed\n                in the UTC time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); //November\ngs.info(gdt.getDaysInMonthUTC());","description":"","output":""}]},{"name":"getDisplayValue","description":"Gets the date and time value in the current user's display format and time\n    zone.","params":[],"returns":{"type":"String","description":"The date and time in the user's format and time zone. Keep in mind\n                when designing business rules or script includes that this method may return values\n                in different formats for different users."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getDisplayValue()); //uses current user session time zone (US/Pacific)","description":"","output":""}]},{"name":"getDisplayValueInternal","description":"Gets the display value in the internal format (yyyy-MM-dd HH:mm:ss).","params":[],"returns":{"type":"String","description":"The date and time values for the GlideDateTime object in the current user's\n                time zone and the internal date and time format of <samp class=\"ph codeph\">yyyy-MM-dd\n                  HH:mm:ss</samp>."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\"); \ngs.info(gdt.getDisplayValueInternal()); //uses current user session time zone (US/Pacific)","description":"","output":""}]},{"name":"getDSTOffset","description":"Gets the amount of time that daylight saving time is offset.","params":[],"returns":{"type":"Number","description":"Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if\n                there is no offset or if the time is not during daylight saving time."},"example":[{"code":"var gdt = new GlideDateTime(\"2014-08-31 08:00:00\"); \ngs.info(gdt.getDSTOffset()); //uses current user session time zone (US/Pacific)","description":"","output":""}]},{"name":"getErrorMsg","description":"Gets the current error message.","params":[],"returns":{"type":"String","description":"The error message."},"example":[{"code":"var gdt = new GlideDateTime(); \ngdt.setDisplayValue(\"2011-aa-01 00:00:00\"); \ngs.info(gdt.getErrorMsg());","description":"","output":"Could not parse DateTime: 2011-aa-01 00:00:00"}]},{"name":"getInternalFormattedLocalTime","description":"Returns the object's time in the local time zone and in the internal\n    format.","params":[],"returns":{"type":"String","description":"The object's time in the local time zone and the internal format."},"example":[]},{"name":"getLocalDate","description":"Gets the date stored by the GlideDateTime object, expressed in the standard format,\n    yyyy-MM-dd, and the current user's time zone.","params":[],"returns":{"type":"GlideDate","description":"The date in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getLocalDate());","description":"","output":""}]},{"name":"getLocalTime","description":"Returns a GlideTime object that represents the time portion of the GlideDateTime object\n    in the user's time zone.","params":[],"returns":{"type":"GlideTime","description":"The time in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2014-08-31 08:00:00\");\ngt = gdt.getLocalTime();\ngs.info(\"local time is \" + gt.getByFormat('hh:mm:ss'));","description":"","output":""}]},{"name":"getMonthLocalTime","description":"Gets the month stored by the GlideDateTime object, expressed in the current user's time\n    zone.","params":[],"returns":{"type":"Number","description":"The numerical value of the month."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); //November\ngs.info(gdt.getMonthLocalTime());","description":"","output":""}]},{"name":"getMonthUTC","description":"Gets the month stored by the GlideDateTime object, expressed in the UTC time zone.","params":[],"returns":{"type":"Number","description":"The numerical value of the month."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); //November\ngs.info(gdt.getMonthUTC());","description":"","output":""}]},{"name":"getNumericValue","description":"Gets the number of milliseconds since January 1, 1970, 00:00:00 GMT.","params":[],"returns":{"type":"Number","description":"The number of milliseconds since January 1, 1970, 00:00:00 GMT."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getNumericValue());","description":"","output":""}]},{"name":"getTime","description":"Returns a GlideTime object that represents the time portion of the GlideDateTime\n    object.","params":[],"returns":{"type":"GlideTime","description":"The Unix duration stamp in system format based on GMT time."},"example":[{"code":"var gdt = new GlideDateTime(\"2014-08-31 08:00:00\");\ngt = gdt.getTime();\ngs.info(gt.getByFormat('hh:mm:ss'));","description":"","output":""}]},{"name":"getTZOffset","description":"Gets the time zone offset in milliseconds.","params":[],"returns":{"type":"Number","description":"The number of milliseconds of time zone offset."},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.getLocalTime(); // PST local time\ngs.info(gdt.getTZOffset());","description":"","output":"25200000"}]},{"name":"getUserFormattedLocalTime","description":"Returns the object's time in the local time zone and in the user's format.","params":[],"returns":{"type":"String","description":"The object's time in the local time zone and in the user's format."},"example":[]},{"name":"getValue","description":"Gets the date and time value stored by the GlideDateTime object in the internal format,\n    yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default.","params":[],"returns":{"type":"String","description":"The date and time value in the internal format and system time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2014-08-31 08:00:00\");\ngs.info(gdt.getValue());","description":"","output":""}]},{"name":"getWeekOfYearLocalTime","description":"Gets the number of the week stored by the GlideDateTime object, expressed in the\n    current user's time zone. All weeks begin on Sunday. The first week of the year is the week that\n    contains at least one day of the new year. The week beginning Sunday 2015-12-27 is considered\n    the first week of 2016 as that week contains January 1 and 2.","params":[],"returns":{"type":"Number","description":"The number of the current week in local time. The highest week number\n                in a year is either 52 or 53."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//49th week, 1st week in december \ngs.info(gdt.getWeekOfYearLocalTime());","description":"","output":""}]},{"name":"getWeekOfYearUTC","description":"Gets the number of the week stored by the GlideDateTime object, expressed in the UTC\n    time zone. All weeks begin on Sunday. The first week of the year is the week that contains at\n    least one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n    of 2016 as that week contains January 1 and 2.","params":[],"returns":{"type":"Number","description":"The number of the current week in UTC time. The highest week number in\n                a year is either 52 or 53."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//49th week, 1st week in december \ngs.info(gdt.getWeekOfYearUTC());","description":"","output":""}]},{"name":"getYearLocalTime","description":"Gets the year stored by the GlideDateTime object, expressed in the current user's time\n    zone.","params":[],"returns":{"type":"Number","description":"Four-digit year value in the user's time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-11-02 12:00:00\");\ngs.info(gdt.getYearLocalTime());","description":"","output":""}]},{"name":"getYearUTC","description":"Gets the year stored by the GlideDateTime object, expressed in the UTC time zone.","params":[],"returns":{"type":"Number","description":"4-digit year value in the UTC time zone."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); \ngs.info(gdt.getYearUTC());","description":"","output":""}]},{"name":"hasDate","description":"Determines if an object's date is set.","params":[],"returns":{"type":"Boolean","description":"True if the object date is set; otherwise, returns false."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.hasDate());","description":"","output":""}]},{"name":"isDST","description":"Determines if an object's time uses a daylight saving offset.","params":[],"returns":{"type":"Boolean","description":"True if the time is daylight saving; otherwise, returns false."},"example":[{"code":"var gdt = new GlideDateTime(\"2014-08-31 00:00:00\");\ngs.info(gdt.isDST()); //true","description":"","output":""}]},{"name":"isValid","description":"Determines if a value is a valid date and time.","params":[],"returns":{"type":"Boolean","description":"True if value is valid; otherwise, returns false."},"example":[{"code":"var gdt = new GlideDateTime(); \ngdt.setDisplayValue(\"2011-aa-01 00:00:00\"); \ngs.info(gdt.isValid());","description":"","output":"false"}]},{"name":"onOrAfter","description":"Determines if the GlideDateTime object occurs on or after the specified\n    GlideDateTime.","params":[{"name":"gdt","type":"GlideDateTime","description":"The time to check against."}],"returns":{"type":"Boolean","description":"Returns true if the GlideDateTime object's time is on or after the time\n                specified by the parameter."},"example":[{"code":"var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.onOrAfter(gdt2));   ","description":"","output":"False"}]},{"name":"onOrBefore","description":"Determines if the GlideDateTime object occurs on or before the specified\n    GlideDateTime.","params":[{"name":"gdt","type":"GlideDateTime","description":"The time to check against."}],"returns":{"type":"Boolean","description":"Returns true if the GlideDateTime object's time is on or before the time\n                specified by the parameter."},"example":[{"code":"var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.onOrBefore(gdt2));   ","description":"","output":"True"}]},{"name":"setDayOfMonthLocalTime","description":"Sets the day of the month to a specified value in the current user's time\n    zone.","params":[{"name":"day","type":"Number","description":"The day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the month."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setDayOfMonthLocalTime(9);\ngs.info(gdt.getDayOfMonthLocalTime());","description":"","output":""}]},{"name":"setDayOfMonthUTC","description":"Sets the day of the month to a specified value in the UTC time zone.","params":[{"name":"day","type":"Number","description":"The day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the month."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setDayOfMonthUTC(9);\ngs.info(gdt.getDayOfMonthUTC());","description":"","output":""}]},{"name":"setDisplayValue","description":"Sets a date and time value using the current user's display format and time\n    zone.","params":[{"name":"asDisplayed","type":"String","description":"The date and time in the current user's display format and time zone. The\n                parameter must be formatted using the current user's preferred display format, such\n                as MM-dd-yyyy HH:mm:ss. To assign the current date and time to a variable in a\n                workflow script, use\n                  <var class=\"keyword varname\">variable</var><samp class=\"ph codeph\">.setDisplayValue(gs.nowDateTime);</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2014-02-02 12:00:00\");\ngdt.setDisplayValue(\"2014-01-01 12:00:00\");//uses current user session time zone (US/Pacific) \ngs.info(gdt.getValue());","description":"","output":""}]},{"name":"setDisplayValue","description":"Sets a date and time value using the current user's time zone and the specified date\n    and time format. This method throws a runtime exception if the date and time format used in the\n      <span class=\"keyword parmname\">value</span> parameter does not match the <span class=\"keyword parmname\">format</span> parameter.\n    You can retrieve the error message by calling getErrorMsg() on the GlideDateTime object after\n    the exception is caught.","params":[{"name":"value","type":"String","description":"The date and time in the current user's time zone."},{"name":"format","type":"String","description":"The date and time format to use to parse the <span class=\"keyword parmname\">value</span>\n                parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-02-02 12:00:00\");\ngdt.setDisplayValue(\"20-5-2011 12:00:00\", \"dd-MM-yyyy HH:mm:ss\"); //uses current user session time zone (US/Pacific)\ngs.info(gdt.getValue());","description":"","output":""}]},{"name":"setDisplayValueInternal","description":"Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.","params":[{"name":"value","type":"String","description":"The date and time in internal format."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2014-02-02 12:00:00\");\ngdt.setDisplayValueInternal(\"2014-01-01 12:00:00\"); //uses current user session time zone (US/Pacific)\ngs.info(gdt.getValue());","description":"","output":""}]},{"name":"setGlideDateTime","description":"Sets the date and time of the current object using an existing GlideDateTime object.\n    This method is equivalent to instantiating a new object with a GlideDateTime\n    parameter.","params":[{"name":"g","type":"GlideDateTime","description":"The object to use for setting the datetime value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dt1 = new GlideDateTime(\"2011-01-01 12:00:00\");\nvar dt2 = new GlideDateTime(\"2011-02-02 08:00:00\");\ndt1.setGlideDateTime(dt2);\ngs.info(dt1.getValue());","description":"","output":""}]},{"name":"setMonthLocalTime","description":"Sets the month stored by the GlideDateTime object to the specified value using the\n    current user's time zone.","params":[{"name":"month","type":"Number","description":"The month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setMonthLocalTime(1);\ngs.info(gdt.getMonthLocalTime());","description":"","output":"1"}]},{"name":"setMonthUTC","description":"Sets the month stored by the GlideDateTime object to the specified value using the UTC\n    time zone.","params":[{"name":"month","type":"Number","description":"The month to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setMonthUTC(1);\ngs.info(gdt.getMonthUTC());","description":"","output":"1"}]},{"name":"setValue","description":"Sets the date and time of the GlideDateTime object.","params":[{"name":"o","type":"String","description":"The date and time to use. This parameter may be one of several types: <ul class=\"ul\" id=\"r_ScopedGlideDateTimeHasDateMethod__ul_jp2_mhc_fr\">\n                  <li class=\"li\">A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss.\n                    Sets the value of the object to the specified date and time. Using the method\n                    this way is equivalent to instantiating a new GlideDateTime object using the\n                    GlideDateTime(String value) constructor. If the date and time\n                    format used does not match the internal format, the method attempts to set the\n                    date and time using other available formats. Resolving the date and time this\n                    way can lead to inaccurate data due to ambiguity in the day and month values.\n                    When using a non-standard date and time format, use\n                    etValueUTC(String dt, String format) instead.</li>\n\n                  <li class=\"li\">A GlideDateTime object. Sets the value of the object to the date and time\n                    stored by the GlideDateTime passed in the parameter. Using the method this way\n                    is equivalent to instantiating a new GlideDateTime object using the\n                    GlideDateTime(GlideDateTime g) constructor.</li>\n\n                  <li class=\"li\">A JavaScript Number. Sets the value of the object using the Number value as\n                    milliseconds past January 1, 1970 00:00:00 GMT.</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");\ngdt.setValue(\"2011-02-02 08:00:00\");  // value set =  2011-02-02 08:00:00\ngs.info(gdt.getValue());","description":"","output":""}]},{"name":"setValueUTC","description":"Sets a date and time value using the UTC time zone and the specified date and time\n    format. This method throws a runtime exception if the date and time format used in the\n      <span class=\"keyword parmname\">dt</span> parameter does not match the <span class=\"keyword parmname\">format</span> parameter.\n    You can retrieve the error message by calling <samp class=\"ph codeph\">getErrorMsg()</samp> on the\n    GlideDateTime object after the exception is caught.","params":[{"name":"dt","type":"String","description":"The date and time to use."},{"name":"format","type":"String","description":"The date and time format to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");\ngdt.setValueUTC(\"15-02-2011 08:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.info(gdt.getValue());","description":"","output":""}]},{"name":"setYearLocalTime","description":"Sets the year stored by the GlideDateTime object to the specified value using the\n    current user's time zone.","params":[{"name":"year","type":"Number","description":"The year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setYearLocalTime(2013);\ngs.info(gdt.getYearLocalTime());","description":"","output":"2013"}]},{"name":"setYearUTC","description":"Sets the year stored by the GlideDateTime object to the specified value using the UTC\n    time zone.","params":[{"name":"year","type":"Number","description":"The year to change to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime();\ngdt.setYearUTC(2013);\ngs.info(gdt.getYearUTC());","description":"","output":"2013"}]},{"name":"subtract","description":"Gets the duration difference between two GlideDateTime values.","params":[{"name":"Start","type":"GlideDateTime","description":"The start value."},{"name":"End","type":"GlideDateTime","description":"The end value."}],"returns":{"type":"GlideDuration","description":"The duration between the two values."},"example":[{"code":"var gdt1 = new GlideDateTime(\"2011-08-28 09:00:00\");\nvar gdt2 = new GlideDateTime(\"2011-08-31 08:00:00\");\n \nvar dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2\ngs.info(dur.getDisplayValue());","description":"","output":"2 Days 23 Hours"}]},{"name":"subtract","description":"Subtracts a specified amount of time from the current GlideDateTime object.","params":[{"name":"time","type":"GlideTime","description":"The time value to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngdt.subtract(gtime1);\nvar gtime2 = gdt.getTime();\ngs.info(gtime2.getByFormat('hh:mm:ss'));","description":"","output":"07:59:40"}]},{"name":"subtract","description":"Subtracts the specified number of milliseconds from the GlideDateTime object.","params":[{"name":"milliseconds","type":"Number","description":"The number of milliseconds to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdt = new GlideDateTime(\"2011-12-07 08:00:00\");\ngdt.subtract(1000);\ngs.info(gdt.getValue());","description":"","output":"2011-12-07 07:59:59"}]},{"name":"toString","description":"Gets the date and time value stored by the GlideDateTime object in the internal format,\n    yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default. This method is equivalent to\n    getValue().","params":[],"returns":{"type":"String","description":"The date and time stored by the GlideDateTime object in the system time zone\n                and format."},"example":[{"code":"var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.toString());","description":"","output":""}]}]},"GlideDBFunctionBuilder":{"meta":{"has_constructor":true,"description":"Build functions to perform SQL operations in the database. The GlideDBFunctionBuilder methods provide a way to build Relational Database Management\n      System (RDBMS) functions to perform SQL operations on record data. These methods can be used\n      in both scoped and global server scripts.<br/><br/>To use platform functions: <ul class=\"ul\" id=\"GlideDBFunctionBuilderScopedAPI__ul_bmr_mqg_jbb\">\n        <li class=\"li\">Construct a function using the GlideDBFunctionBuilder constructor and associated\n          methods. </li>\n\n        <li class=\"li\">After building a function, you can apply the function to the current record using the\n            <span class=\"keyword apiname\">addFunction()</span> method of the GlideRecord class. </li>\n\n        <li class=\"li\">Add the function to a query using the <span class=\"keyword apiname\">addQuery()</span> method of the\n          GlideRecord class.</li>\n\n        <li class=\"li\">Retrieve the results of the function using the existing GlideRecord API methods such as\n            <span class=\"keyword apiname\">getValue()</span> and <span class=\"keyword apiname\">getElement()</span>.</li>\n\n      </ul>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideDBFunctionBuilder object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var builder = new GlideDBFunctionBuilder();\n","description":"","output":""}]},{"name":"add","description":"Adds the values of two or more integer fields.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();","description":"","output":""}]},{"name":"build","description":"Builds the database function defined by the GlideDBFunctionBuilder object.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();\ngs.print(myAddingFunction);","description":"","output":""}]},{"name":"concat","description":"Concatenates the values of two or more fields.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myConcatFunction = functionBuilder.concat();\nmyConcatFunction = functionBuilder.field('short_description');\nmyConcatFunction = functionBuilder.field('caller_id.name');\nmyConcatFunction = functionBuilder.build();","description":"","output":""}]},{"name":"constant","description":"Defines a constant value to use in the function. If used with the\n      <span class=\"keyword apiname\">dayofweek()</span> method, the string defines whether to use Sunday or Monday as\n    the first day of the week.","params":[{"name":"constant","type":"String","description":"A constant value used in a function. <p class=\"p\">When used with the\n                    <span class=\"keyword apiname\">dayofweek()</span> method, the value defines whether the week starts\n                  on a Sunday or Monday. </p>\n<div class=\"p\">\n                  <ul class=\"ul\" id=\"GlideDBFBScoped-constant_S__ul_wz5_5bk_kbb\">\n                    <li class=\"li\"><span class=\"ph uicontrol\">1</span>: Week begins on Sunday. </li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">2</span>: Week begins on Monday. </li>\n\n                  </ul>\n\n                </div>\n<p class=\"p\">This definition enables the <span class=\"keyword apiname\">dayofweek()</span> method to return\n                  the correct day of the week from a given date. If a value other than 1 or 2 is\n                  provided, the <span class=\"keyword apiname\">dayofweek()</span> method uses Sunday as the first day\n                  of the week.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"datediff","description":"Determines the duration using a given start date/time and end date/time.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define start and end date/time\n        fields.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myDateDiffFunction = functionBuilder.datediff();\nmyDateDiffFunction = functionBuilder.field('sys_updated_on');\nmyDateDiffFunction = functionBuilder.field('opened_at');\nmyDateDiffFunction = functionBuilder.build();","description":"","output":""}]},{"name":"dayofweek","description":"Returns an integer representing the day of the week for a given date.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define the given date/time. Use\n        the <span class=\"keyword apiname\">constant(String constant)</span> method to define whether the week starts on\n        a Sunday or Monday.</p><p>This method can be used with MySQL, Oracle, and Microsoft SQL Server databases only. If\n        using an Oracle database, the NLS_TERRITORY setting must be set to a territory with Sunday\n        as the first day of the week.</p>","params":[],"returns":{"type":"Integer","description":"<p class=\"p\">If the first day of the week is set to Sunday in the <span class=\"keyword apiname\">constant(String\n                    constant)</span> method, return values are associated with the following days\n                  of the week:</p>\n\n                <div class=\"p\">\n                  <ul class=\"ul\" id=\"GlideDBFBScoped-dayofweek__ul_ufc_yck_kbb\">\n                    <li class=\"li\"><span class=\"ph uicontrol\">1</span>: Sunday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">2</span>: Monday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">3</span>: Tuesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">4</span>: Wednesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">5</span>: Thursday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">6</span>: Friday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">7</span>: Saturday</li>\n\n                  </ul>\n\n                </div>\n\n                <p class=\"p\">If the first day of the week is set to Monday:</p>\n\n                <div class=\"p\">\n                  <ul class=\"ul\" id=\"GlideDBFBScoped-dayofweek__ul_at2_gdk_kbb\">\n                    <li class=\"li\"><span class=\"ph uicontrol\">1</span>: Monday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">2</span>: Tuesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">3</span>: Wednesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">4</span>: Thursday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">5</span>: Friday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">6</span>: Saturday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">7</span>: Sunday</li>\n\n                  </ul>\n\n                </div>\n\n                <p class=\"p\">If a value other than 1 or 2 is provided in the <span class=\"keyword apiname\">constant(String\n                    constant)</span> method, the <span class=\"keyword apiname\">dayofweek()</span> method uses\n                  Sunday as the first day of the week.</p>"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar dayOfWeekFunction = functionBuilder.dayofweek();\ndayOfWeekFunction = functionBuilder.field('opened_at');\ndayOfWeekFunction = functionBuilder.constant('2');\ndayOfWeekFunction = functionBuilder.build();\n\nvar gr = new GlideRecord('incident');\ngr.addFunction(dayOfWeekFunction);\ngr.query();\nwhile(gr.next())\ngs.log(gr.getValue(dayOfWeekFunction));\n","description":"","output":""}]},{"name":"divide","description":"Divides the value of one integer field by another.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myDivideFunction = functionBuilder.divide();\nmyDivideFunction = functionBuilder.field('order');\nmyDivideFunction = functionBuilder.field('priority');\nmyDivideFunction = functionBuilder.build();","description":"","output":""}]},{"name":"field","description":"Defines a field on which a SQL operation is performed.","params":[{"name":"field","type":"String","description":"The field on which you are performing the SQL operation."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();","description":"","output":""}]},{"name":"length","description":"Determines the number of code units in a field.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myLengthFunction = functionBuilder.length();\nmyLengthFunction = functionBuilder.field('short_description');\nmyLengthFunction = functionBuilder.build();\n","description":"","output":""}]},{"name":"multiply","description":"Multiplies the values of two integer fields.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myMultiplyFunction = functionBuilder.multiply();\nmyMultiplyFunction = functionBuilder.field('order');\nmyMultiplyFunction = functionBuilder.field('priority');\nmyMultiplyFunction = functionBuilder.build();","description":"","output":""}]},{"name":"subtract","description":"Subtracts the value of one integer field from another.<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar mySubtractFunction = functionBuilder.subtract();\nmySubtractFunction = functionBuilder.field('order');\nmySubtractFunction = functionBuilder.field('priority');\nmySubtractFunction = functionBuilder.build();","description":"","output":""}]}]},"GlideDigest":{"meta":{"has_constructor":true,"description":"The scoped GlideDigest class provides methods for creating a message digest from strings\n  or input streams using MD5, SHA1, or SHA256 hash algorithms. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of scoped GlideDigest.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getMD5Base64","description":"Create a message digest from a string using the MD5 algorithm. The output string is in\n    Base64.","params":[{"name":"source","type":"String","description":"The source string."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getMD5Base64(inputString));","description":"","output":""}]},{"name":"getMD5Base64FromInputStream","description":"Create a message digest from an input stream using the MD5 algorithm. The output string\n    is in Base64.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The source input stream."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getMD5Base64FromInputStream(inputStream));","description":"","output":""}]},{"name":"getMD5Hex","description":"Create a message digest from a string using the MD5 algorithm. The output string is in\n    hexadecimal.","params":[{"name":"source","type":"String","description":"The source string."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getMD5Hex(inputString));","description":"","output":""}]},{"name":"getMD5HexFromInputStream","description":"Create a message digest from an input stream using the MD5 algorithm. The output string\n    is in hexadecimal.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The source input stream."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getMD5HexFromInputStream(inputStream));","description":"","output":""}]},{"name":"getSHA1Base64","description":"Create a message digest from a string using the SHA1 algorithm. The output string is in\n    Base64.","params":[{"name":"source","type":"String","description":"The source string."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1Base64(inputString));","description":"","output":""}]},{"name":"getSHA1Base64FromInputStream","description":"Create a message digest from an input stream using the SHA1 algorithm. The output\n    string is in Base64.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The source input stream."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1Base64FromInputStream(inputStream));","description":"","output":""}]},{"name":"getSHA1Hex","description":"Create a message digest from a string using the SHA1 algorithm. The output string is in\n    hexadecimal.","params":[{"name":"source","type":"String","description":"The source string."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1Hex(inputString));","description":"","output":""}]},{"name":"getSHA1HexFromInputStream","description":"Create a message digest from an input stream using the SHA1 algorithm. The output\n    string is in hexadecimal.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The source input stream."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1HexFromInputStream(inputStream));","description":"","output":""}]},{"name":"getSHA256Base64","description":"Create a message digest from a string using the SHA256 algorithm. The output string is\n    in Base64.","params":[{"name":"source","type":"String","description":"The source string."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256Base64(inputString));","description":"","output":""}]},{"name":"getSHA256Base64FromInputStream","description":"Create a message digest from an input stream using the SHA256 algorithm. The output\n    string is in Base64.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The source input stream."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256Base64FromInputStream(inputStream));","description":"","output":""}]},{"name":"getSHA256Hex","description":"Create a message digest from a string using the SHA256 algorithm. The output string is\n    in hexadecimal.","params":[{"name":"source","type":"String","description":"The source string."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256Hex(inputString));","description":"","output":""}]},{"name":"getSHA256HexFromInputStream","description":"Create a message digest from an input stream using the SHA256 algorithm. The output\n    string is in hexadecimal.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The source input stream."}],"returns":{"type":"String","description":"The message digest."},"example":[{"code":"var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256HexFromInputStream(inputStream));","description":"","output":""}]}]},"GlideDuration":{"meta":{"has_constructor":true,"description":"The scoped GlideDuration class provides methods for working with spans of time or\n  durations. GlideDuration objects store the duration as a date and time from January 1, 1970, 00:00:00. As\n   a result, setValue() and getValue() use the scoped GlideDateTime object for parameters and return\n   values.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideDuration object with the specified display value.","params":[{"name":"displayValue","type":"String","description":"The display value."}],"returns":{"type":"","description":""},"example":[]},{"name":"constructor","description":"Instantiates a GlideDuration object with the specified duration.","params":[{"name":"milliseconds","type":"Number","description":"The duration value in milliseconds."}],"returns":{"type":"","description":""},"example":[]},{"name":"constructor","description":"Instantiates a GlideDuration object by cloning the value of another GlideDuration\n    object.","params":[{"name":"another","type":"GlideDuration","description":"Another scoped GlideDuration object."}],"returns":{"type":"","description":""},"example":[]},{"name":"constructor","description":"Instantiates a GlideDuration object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"add","description":"Add the specified duration to the object.","params":[{"name":"duration","type":"GlideDuration","description":"The value to add to the object."}],"returns":{"type":"GlideDuration","description":"The sum of the current and the added duration."},"example":[{"code":"var duration = new GlideDuration('3 12:00:00');\nvar duration2 = new GlideDuration('3:00:00');\nvar answer = duration.add(duration2);\ngs.info(answer.getDisplayValue());","description":"","output":""}]},{"name":"getByFormat","description":"Gets the duration in the specified format.","params":[{"name":"format","type":"String","description":"The duration format."}],"returns":{"type":"String","description":"The current duration in the specified format."},"example":[{"code":"var dur = new GlideDuration('3 22:00:00');\ngs.info(dur.getByFormat('HH:mm'));","description":"","output":""}]},{"name":"getDayPart","description":"Gets the number of days.","params":[],"returns":{"type":"Number","description":"The number of days."},"example":[{"code":"var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getDayPart());","description":"","output":""}]},{"name":"getDisplayValue","description":"Gets the display value of the duration in number of days, hours, and\n    minutes.","params":[],"returns":{"type":"String","description":"The number of days, hours, and minutes."},"example":[{"code":"var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getDisplayValue());","description":"","output":""}]},{"name":"getDurationValue","description":"Gets the duration value in \"d HH:mm:ss\" format.","params":[],"returns":{"type":"String","description":"The duration value."},"example":[{"code":"var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getDurationValue());","description":"","output":""}]},{"name":"getRoundedDayPart","description":"Gets the rounded number of days. If the time part is more than 12 hours, the return\n    value is rounded up. Otherwise, it is rounded down.","params":[],"returns":{"type":"Number","description":"The day part, rounded."},"example":[{"code":"var dur = new GlideDuration('3 11:00:00');\ngs.info(dur.getRoundedDayPart());","description":"","output":""}]},{"name":"getValue","description":"Gets the internal value of the GlideDuration object.<p>GlideDuration objects store the duration as a date and time from January 1, 1970, 00:00:00.</p>","params":[],"returns":{"type":"String","description":"The duration in the object's internal format, which is the date and time from\n                January 1, 1970, 00:00:00."},"example":[{"code":"var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getValue());","description":"","output":""}]},{"name":"setDisplayValue","description":"Sets the display value.","params":[{"name":"asDisplayed","type":"String","description":"The duration in \"d HH:mm:ss\" format."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dur = new GlideDuration(); \ndur.setDisplayValue('3 08:00:00');\ngs.info(dur.getDisplayValue());","description":"","output":""}]},{"name":"setValue","description":"Sets the internal value of the GlideDuration object.<p>GlideDuration objects store the duration as a date and time from January 1, 1970,\n        00:00:00.</p>","params":[{"name":"o","type":"Object","description":"The duration in the object's internal format, which is the date and time from\n                January 1, 1970, 00:00:00."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var dur = new GlideDuration();\ndur.setValue('1970-01-05 08:00:00'); // sets internal DateTime value. The String will be parsed into a GlideDateTime object.\ngs.info(dur.getDisplayValue());","description":"","output":""}]},{"name":"subtract","description":"Subtracts the specified duration from the current duration.","params":[{"name":"duration","type":"GlideDuration","description":"The duration to subtract."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var duration = new GlideDuration('3 12:00:00');\nvar duration2 = new GlideDuration('3:00:00');\nvar answer = duration.subtract(duration2);\ngs.info(answer.getDisplayValue());","description":"","output":""}]}]},"GlideElement":{"meta":{"has_constructor":false,"description":"The Scoped GlideElement API provides a number of convenient script methods for dealing\n    with fields and their values. Scoped GlideElement methods are available for the fields of the\n    current GlideRecord. ","example":""},"properties":{},"methods":[{"name":"canCreate","description":"Determines if the user's role permits the creation of new records in this\n    field.","params":[],"returns":{"type":"Boolean","description":"True if the field can be created, false otherwise."},"example":[]},{"name":"canRead","description":"Indicates whether the user's role permits them to read the associated\n    GlideRecord.","params":[],"returns":{"type":"Boolean","description":"True if the field can be read, false otherwise."},"example":[]},{"name":"canWrite","description":"Determines whether the user's role permits them to write to the associated\n    GlideRecord.","params":[],"returns":{"type":"Boolean","description":"True if the user can write to the field, false otherwise."},"example":[]},{"name":"changes","description":"Determines if the current field has been modified. This functionality is available for\n    all available data types, except Journal fields.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">changes()</span> method is not supported within ACL scripts.</div></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>","params":[],"returns":{"type":"Boolean","description":"True if the fields have been changed, false if the field has not."},"example":[{"code":"// This method is often used in business rules. The following example shows is from a business rule, \n// if \"assigned_to\" field value is changed, create a event in the EventQueue. \nif (!current.assigned_to.nil() &amp;&amp; current.assigned_to.changes()) {\n  gs.eventQueue('incident.assigned', current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());\n  }","description":"","output":""}]},{"name":"changesFrom","description":"Determines if the previous value of the current field matches the specified\n    object.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>","params":[{"name":"o","type":"Object","description":"An object value to check against the previous value of the current\n                field."}],"returns":{"type":"Boolean","description":"True if the previous value matches, false if it does not."},"example":[{"code":"// The following example shows that in a business rule, if \"active\" field is changed from true, \n// insert a event in the EventQueue.\nif (current.active.changesFrom(true)) {\n  gs.eventQueue(\"incident.inactive\", current, current.incident_state, previous.incident_state);\n}","description":"","output":""}]},{"name":"changesTo","description":"Determines if the new value of a field, after a change, matches the specified\n    object.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">changesTo()</span> method is not supported within ACL scripts.</div></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>","params":[{"name":"o","type":"Object","description":"An object value to check against the new value of the current field."}],"returns":{"type":"Boolean","description":"True if the previous value matches, false if it does not."},"example":[{"code":"// The following example shows that in a business rule, if \"active\" field is changed to false, \n// insert a event in the EventQueue.\nif (current.active.changesTo(false)) {\n  gs.eventQueue(\"incident.inactive\", current, current.incident_state, previous.incident_state);\n}","description":"","output":""}]},{"name":"dateNumericValue","description":"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT for a duration\n    field. Does not require the creation of a GlideDateTime object because the duration field is\n    already a GlideDateTime object.","params":[],"returns":{"type":"Number","description":"Number of milliseconds since January 1, 1970, 00:00:00 GMT."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.get('17c90efb13418700cc36b1422244b05d');\ngs.info(inc.calendar_duration.dateNumericValue());","description":"","output":"98000"}]},{"name":"getAttribute","description":"Returns the value of the specified attribute from the dictionary.<p>If the attribute is a boolean attribute, use <span class=\"keyword apiname\">getBooleanAttribute(String)</span>\n        to get the value as a boolean rather than as a string.</p>","params":[{"name":"attributeName","type":"String","description":"Attribute name"}],"returns":{"type":"String","description":"Attribute value"},"example":[{"code":"doit();\nfunction doit() {\n  var gr = new GlideRecord('sys_user');\n  gr.query(\"user_name\",\"admin\");\n  if (gr.next()) {\n    gs.print(\"we got one\");\n    gs.print(gr.location.getAttribute(\"tree_picker\"));\n  }\n \n}","description":"","output":""}]},{"name":"getBooleanAttribute","description":"Returns the Boolean value of the specified attribute from the dictionary.<p>To get the value as a string, use <span class=\"keyword apiname\">getAttribute(string)</span>.</p>","params":[{"name":"attributeName","type":"String","description":"Attribute name"}],"returns":{"type":"Boolean","description":"Boolean value of the attribute. Returns false if the attribute does not\n                exist."},"example":[]},{"name":"getChoices","description":"Generates a choice list for a field.","params":[{"name":"dependent","type":"String","description":"Optional: a dependent value"}],"returns":{"type":"Array","description":"An array list of choices."},"example":[{"code":"var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next(); \n \n// urgency has choice list: 1 - High, 2 - Medium, 3 - Low, with value: 1, 2, 3\nvar choices = glideRecord.urgency.getChoices(); \ngs.info(choices);","description":"","output":""}]},{"name":"getChoiceValue","description":"Returns the choice label for the current choice.<p>A choice has a value (number) and a label (string). This method returns the label.</p>","params":[],"returns":{"type":"String","description":"The selected choice's label."},"example":[{"code":"var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next(); \n \n// urgency has choice list: 1 - High, 2 - Medium, 3 - Low, with value: 1, 2, 3\nvar choiceLabel = glideRecord.urgency.getChoiceValue(); \ngs.info(choiceLabel);","description":"","output":"1 - High"}]},{"name":"getDecryptedValue","description":"Returns the clear text value for Password (2 way encrypted) fields in scoped\n    applications.","params":[],"returns":{"type":"String","description":"The clear text password."},"example":[{"code":"var tablename = 'x_scoped_app_table'\nvar CI = new GlideRecord(tablename);  \nCI.addQuery('number', '0001002'); \nCI.query(); \nCI.next(); \n\nvar password = CI.password_field\nvar decrypted = password.getDecryptedValue(); \ngs.info(decrypted);","description":"","output":""}]},{"name":"getDisplayValue","description":"Gets the formatted display value of the field.","params":[{"name":"maxCharacters","type":"Number","description":"Optional: Maximum characters desired"}],"returns":{"type":"String","description":"The display value of the field"},"example":[{"code":"var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\ngs.info(glideRecord.priority.getDisplayValue());","description":"","output":""}]},{"name":"getED","description":"Returns the field's element descriptor.","params":[],"returns":{"type":"Scoped GlideElementDescriptor","description":"The field's element descriptor."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();","description":"","output":""}]},{"name":"getGlobalDisplayValue","description":"Returns the phone number in international format.","params":[],"returns":{"type":"String","description":"The phone number in international format."},"example":[]},{"name":"getHTMLValue","description":"Returns the HTML value of a field.","params":[{"name":"maxChars","type":"Number","description":"Optional. Maximum number of characters to return."}],"returns":{"type":"String","description":"HTML value for the field."},"example":[{"code":"var inccause = new GlideRecord(\"incident\");\ninccause.short_description = current.short_description;\ninccause.comments = current.comments.getHTMLValue();\ninccause.insert();","description":"","output":""}]},{"name":"getJournalEntry","description":"Returns either the most recent journal entry or all journal entries.","params":[{"name":"mostRecent","type":"Number","description":"If 1, returns the most recent entry. If -1, returns all journal\n                entries."}],"returns":{"type":"String","description":"<p class=\"p\">For the most recent entry, returns a string that contains the field label,\n                  timestamp, and user display name of the journal entry.</p>\n\n                <p class=\"p\">For all journal entries, returns the same information for all journal entries\n                  ever entered as a single string with each entry delimited by \"\\n\\n\".</p>"},"example":[{"code":"//gets all journal entries as a string where each entry is delimited by '\\n\\n'\nvar notes = current.work_notes.getJournalEntry(-1); \n//stores each entry into an array of strings\nvar na = notes.split(\"\\n\\n\");  \n                      \nfor (var i = 0; i &lt; na.length; i++)                 \n  gs.print(na[i]);","description":"","output":""}]},{"name":"getLabel","description":"Returns the object label.","params":[],"returns":{"type":"String","description":"Object label"},"example":[{"code":"var gr = new GlideRecord(\"sc_req_item\");\ngr.addQuery(\"request\", current.sysapproval);\ngr.query();\nwhile(gr.next()) {\n    var nicePrice = gr.price.toString();\n    if (nicePrice != ) {\n        nicePrice = parseFloat(nicePrice);\n        nicePrice = nicePrice.toFixed(2);\n    }\n    template.print(gr.number + \":  \" + gr.quantity + \" X \" + gr.cat_item.getDisplayValue() + \" at $\" + nicePrice + \" each \\n\");\n    template.print(\"    Options:\\n\");\n    var variables = gr.variables.getElements();    \n    for (var key in variables) {\n      var v = variables[key];\n      if(v.getQuestion().getLabel() != ) {\n         template.space(4);\n         template.print('     ' +  v.getQuestion().getLabel() + \" = \" + v.getDisplayValue() + \"\\n\");  \n      }\n    }\n}","description":"","output":""}]},{"name":"getName","description":"Returns the name of the field.","params":[],"returns":{"type":"String","description":"Field name"},"example":[]},{"name":"getReferenceTable","description":"Gets the table name for a reference element.","params":[],"returns":{"type":"String","description":"The table name of the reference"},"example":[{"code":"var grINC = new GlideRecord('incident');\ngrINC.query('number','INC0010041'); // record assignment group assigned to \"CAB Approval\"\nif (grINC.next()) { \n  // Get the table name \n  var tableName = grINC.assignment_group.getReferenceTable();\n  gs.info( tableName ); \n}","description":"","output":""}]},{"name":"getRefRecord","description":"Returns a GlideRecord object for a given reference element.<p><div class=\"note warning\"><span class=\"warningtitle\">Warning:</span> If the reference element does not contain a value, it returns an empty\n          GlideRecord object, not a NULL object. </div></p>","params":[],"returns":{"type":"GlideRecord","description":"A GlideRecord object"},"example":[{"code":"\nvar grINC = new GlideRecord('incident'); \ngrINC.addNotNullQuery('caller_id');\n grINC.query(); \nif (grINC.next()) { \n\n// Get a GlideRecord object for the referenced sys_user record \nvar grUSER = grINC.caller_id.getRefRecord(); \nif (grUSER.isValidRecord()) \n  gs.print(grUSER.getValue('name')); \n\n} ","description":"","output":""}]},{"name":"getTableName","description":"Returns the name of the table on which the field resides.","params":[],"returns":{"type":"String","description":"Name of the table. The returned value may be different from the table Class\n                that the record is in. See Tables and Classes in the product documentation."},"example":[{"code":"if (current.approver.getTableName() == \"sysapproval_approver\") {\n  if (current.approver == email.from_sys_id)  {\n     current.comments = \"reply from: \" + email.from + \"\\n\\n\" + email.body_text;\n \n   // if it's been cancelled, it's cancelled.\n  var doit = true;\n  if (current.state=='cancelled')\n      doit = false;\n \n  if (email.body.state != undefined)\n     current.state= email.body.state;\n \n   if (doit)\n      current.update();\n} else {\n   gs.log(\"Approval for task (\"+current.sysapproval.getDisplayValue()+\") rejected because user sending \n           email( \"+email.from+\") does not match the approver (\"+current.approver.getDisplayValue()+\")\");\n}\n \n}","description":"","output":""}]},{"name":"nil","description":"Determines if a field is null.","params":[],"returns":{"type":"Boolean","description":"True if the field is null or an empty string, false if not."},"example":[{"code":"var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next(); \ngs.info(glideRecord.state.nil());","description":"","output":""}]},{"name":"setDateNumericValue","description":"Sets the value of a date/time element to the specified number of milliseconds since\n    January 1, 1970 00:00:00 GMT.<p>When called, <span class=\"keyword apiname\">setDateNumericValue()</span> automatically creates the necessary\n        GlideDateTime/GlideDate/GlideDuration object, and then sets the element to the specified\n        value.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Before calling this method, the element must already exist by querying an existing\n          record or by using the <span class=\"keyword apiname\">gr.initialize()</span> method to initialize a new\n          record.</div></p>","params":[{"name":"milliseconds","type":"Number","description":"Number of milliseconds since 1/1/1970"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord(\"incident\");\ngr.initialize();\ngr.opened_at.setDateNumericValue(10000);","description":"","output":""}]},{"name":"setDisplayValue","description":"Sets the display value of the field.","params":[{"name":"value","type":"Object","description":"The value to set for the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next();\n \n//change the urgency to 3 \nglideRecord.urgency.setDisplayValue('3 - Low');\ngs.info(glideRecord.urgency);","description":"","output":""}]},{"name":"setError","description":"Adds an error message. Available in Fuji patch 3.","params":[{"name":"errorMessage","type":"String","description":"The error message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\n \nglideRecord.short_description.setError('Error text');","description":"","output":""}]},{"name":"setPhoneNumber","description":"Sets the field to the specified phone number.<p>This method is only available on a phone number GlideElement.</p>","params":[{"name":"phoneNumber","type":"Object","description":"The phone number to set. This can be in either the international or local\n                format."},{"name":"strict","type":"Boolean","description":"When true, specifies that the number specified must match the correct format.\n                When false, the system attempts to correct an improperly formatted phone\n                number."}],"returns":{"type":"Boolean","description":"True if the value was set."},"example":[]},{"name":"setValue","description":"Sets the value of a field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Before calling this method, the element must already exist by querying an existing\n          record or by using the <span class=\"keyword apiname\">gr.initialize()</span> method to initialize a new\n          record.</div></p>","params":[{"name":"value","type":"Object","description":"Object value to set the field to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\nglideRecord.short_description.setValue('Network failure');\ngs.info(glideRecord.short_description);","description":"","output":""}]},{"name":"toString","description":"Converts the value to a string.","params":[{"name":"value","type":"Object","description":"Object value to set the field to."}],"returns":{"type":"String","description":"The value as a string"},"example":[{"code":"var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\ngs.info(glideRecord.opened_at.toString());","description":"","output":""}]}]},"GlideElementDescriptor":{"meta":{"has_constructor":false,"description":"The scoped GlideElementDescriptor API provides information about individual\n  fields. There is no constructor for this class. Use the GlideElement <span class=\"keyword apiname\">getED()</span> method\n   to obtain a GlideElementDescriptor object.","example":""},"properties":{},"methods":[{"name":"getAttachmentEncryptionType","description":"Returns the encryption type used for attachments on the element's table.<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>","params":[],"returns":{"type":"String","description":"The encryption type used on attachments. Returns null if attachments on the\n                element's table are not being encrypted."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.getAttachmentEncryptionType();\ngs.info(isEdge);\n","description":"","output":"null"}]},{"name":"getEncryptionType","description":"Returns the element's encryption type.<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>","params":[],"returns":{"type":"String","description":"The element's encryption type. Returns null if the element is not\n                encrypted."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nsEdge = ed.getEncryptionType();\ngs.info(isEdge);","description":"","output":"null"}]},{"name":"getInternalType","description":"Returns the element's internal data type.","params":[],"returns":{"type":"String","description":"The element's internal data type."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getInternalType();\ngs.info(isEdge);","description":"","output":""}]},{"name":"getLabel","description":"Returns the element's label.","params":[],"returns":{"type":"String","description":"The element's label."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getLabel();\ngs.info(isEdge);","description":"","output":"Priority"}]},{"name":"getLength","description":"Returns the element's length.","params":[],"returns":{"type":"Number","description":"The element's size."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getLength();\ngs.info(isEdge);","description":"","output":"40"}]},{"name":"getName","description":"Returns the element's name.","params":[],"returns":{"type":"String","description":"The element's name."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getName();\ngs.info(isEdge);","description":"","output":"priority"}]},{"name":"getPlural","description":"Returns the element's plural label.","params":[],"returns":{"type":"String","description":"The element's plural label."},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.query();\nvar ed = gr.getED();\ngs.info(ed.getPlural());","description":"","output":"Incidents"}]},{"name":"hasAttachmentsEncrypted","description":"Returns true if an encrypted attachment has been added to the table.<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true if an encrypted attachment has been added to the table."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.hasAttachmentsEncrypted();\ngs.info(isEdge);","description":"","output":"false"}]},{"name":"isAutoOrSysID","description":"Returns true if the element is an automatically generated or system field.<p>Automatically generated and system fields cannot be encrypted. This method is for use with\n        the <span class=\"ph\">Edge Encryption</span> plugin.</p>","params":[],"returns":{"type":"Boolean","description":"True if the element is automatically generated or a system field."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nisEdge = ed.isAutoOrSysID();\ngs.info(isEdge);\n","description":"","output":"false"}]},{"name":"isChoiceTable","description":"Returns true if the element is defined as a dropdown choice in its dictionary\n    definition.<p>Choice fields cannnot  be encrypted.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true if the element is defined as a dropdown choice. Returns true even\n                if there are no entries defined in the choice table. The last choice type,\n                suggestion, does not return true."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isChoiceTable = ed.isChoiceTable();\ngs.info(isChoiceTable);","description":"","output":"true"}]},{"name":"isEdgeEncrypted","description":"Returns true if an element is encrypted.<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true if the element is encrypted, false otherwise."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.isEdgeEncrypted();\ngs.info(isEdge)","description":"","output":"false"}]},{"name":"isMandatory","description":"Determines whether the element is mandatory and must contain a value before the record\n    can be saved.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the associated element is mandatory and must\n                contain a value before the record containing the element can be saved.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"SGED-isMandatory__ul_l1h_kxv_shb\">\n                  <li class=\"li\">true: element must contain a value; mandatory field</li>\n\n                  <li class=\"li\">false: element does not have to contain a value</li>\n\n                </ul>"},"example":[{"code":"var isRecordValid;\nvar gr = new GlideRecord('my_table');\nvar field = gr.getElement('name');\nvar elementDescriptor = field.getED();\ngr.query();\nwhile (gr.next()) {\n  if (elementDescriptor.isMandatory() &amp;&amp; !gr.name) {\n       isRecordValid = false;\n  }\n}","description":"This example shows how to check whether the name field is mandatory.","output":""}]},{"name":"isVirtual","description":"Returns true if the element is a virtual element.<p>A virtual element is a calculated field as set by the dictionary definition of the field.\n        Virtual fields cannot be encrypted.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true if the element is a virtual element."},"example":[{"code":"var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isVirtual = ed.isVirtual();\ngs.info(isVirtual);","description":"","output":"false"}]}]},"GlideEmailOutbound":{"meta":{"has_constructor":true,"description":"The scoped GlideEmailOutbound class implements the email object for scoped applications.\n  You can use the GlideEmailOutbound methods with the email global object available in mail scripts.\n  The email object behaves identically for global and scoped applications. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a scoped GlideEmailOutbound object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"addAddress","description":"Adds the address to either the cc or bcc list.","params":[{"name":"type","type":"String","description":"Either cc or bcc, determines the list to which the address is added."},{"name":"address","type":"String","description":"The recipient's email address."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"email.addAddress('cc', 'joe.employee@something.com');","description":"","output":""}]},{"name":"addAddress","description":"Adds the recipient to either the cc or bcc list, but uses the display name instead of\n    the address when showing the recipient.","params":[{"name":"type","type":"String","description":"Either cc or bcc, determines the list to which the address is added."},{"name":"address","type":"String","description":"The recipient's email address."},{"name":"displayName","type":"String","description":"The name to be shown instead of the email address."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"email.addAddress('bcc', 'joe.employee@something.com', 'dudley rocks');","description":"","output":""}]},{"name":"getSubject","description":"Returns the email's subject line.","params":[],"returns":{"type":"String","description":"The email's subject line."},"example":[]},{"name":"getWatermark","description":"Returns the email's watermark.","params":[],"returns":{"type":"String","description":"The email's watermark."},"example":[{"code":"var watermark = email.getWatermark();","description":"","output":""}]},{"name":"setBody","description":"Sets the body of the email.","params":[{"name":"bodyText","type":"String","description":"The body of the email."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"email.setBody('Dear Sir, ...');","description":"","output":""}]},{"name":"setFrom","description":"Sets the sender's address.","params":[{"name":"address","type":"String","description":"The sender's email address."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"email.setFrom('joe.employee@something.com');","description":"","output":""}]},{"name":"setReplyTo","description":"Sets the reply to address.","params":[{"name":"address","type":"String","description":"The reply to email address."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"email.setReplyTo('joe.employee@something.com');","description":"","output":""}]},{"name":"setSubject","description":"Sets the email's subject line.","params":[{"name":"subject","type":"String","description":"Text for the subject line."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"email.setSubject('Important Issues to discuss');","description":"","output":""}]}]},"GlideExcelParser":{"meta":{"has_constructor":true,"description":"Parse .xlsx formatted Excel files and access file data in script. The GlideExcelParser methods can be used in global and scoped scripts. Use the sn_impex\n      namespace identifier to create a GlideExcelParser object.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of GlideExcelParser.<p>The API name space identifier \"sn_impex\" must be used when creating a GlideExcelParser\n        object.</p>","params":[],"returns":{"type":"","description":""},"example":[{"code":"var parser = new sn_impex.GlideExcelParser(); \nvar attachment = new GlideSysAttachment();\n// use attachment sys id of an excel file\nvar attachmentStream = attachment.getContentStream(&lt;attachment sys id&gt;);\n\nparser.parse(attachmentStream); \n\n//retrieve the column headers\nvar headers = parser.getColumnHeaders();  \nvar header1 = headers[0]; \nvar header2 = headers[1]; \n\n//print headers\ngs.print(header1 + \" \" + header2); \n\nwhile(parser.next()) { \n  var row = parser.getRow(); \n  //print row value for both columns   \n  gs.print(row[header1] + ' ' + row[header2]) \n}","description":"","output":""}]},{"name":"close","description":"Close the connection to the input stream and release the document.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getColumnHeaders","description":"Returns a list of column headers from the parsed document.","params":[],"returns":{"type":"Array","description":"An array of strings of column headers from the parsed document."},"example":[]},{"name":"getErrorMessage","description":"Returns the error message when the <span class=\"keyword apiname\">parse()</span> method fails.","params":[],"returns":{"type":"String","description":"The error message."},"example":[]},{"name":"getRow","description":"Get the current row values and headers.","params":[],"returns":{"type":"Object","description":"The row headers are property names and the row values are property\n                values."},"example":[]},{"name":"getTableInfo","description":"Gets table column types and max character length from a spreadsheet or CSV\n    attachment.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is restricted to scoped applications.</div></p>","params":[],"returns":{"type":"Object","description":"Returns attachment data as a map in which the key is column name. Values\n                contain column type and maximum length of a character string in the column. Access\n                return values using the <span class=\"keyword apiname\">getType()</span> and\n                  <span class=\"keyword apiname\">getLength()</span> methods."},"example":[{"code":"var attachmentSysId = \"&lt;sys_id&gt;\";\nvar headerRowNumber = 6;\n\nvar attachmentStream = new GlideSysAttachment().getContentStream(attachmentSysId);\nvar parser = new sn_impex.GlideExcelParser();\nparser.setHeaderRowNumber(headerRowNumber);\nif (!parser.parse(attachmentStream)) {\n    throw \"Attachment could not be parsed as an Excel Spreadsheet \" + attachmentSysId;\n}\nvar tableInfo = parser.getTableInfo();\nfor (var name in tableInfo) {\ngs.info('Column Name : ' + name + ', Type : ' + tableInfo[name].getType() + ', Max Length : ' + tableInfo[name].getLength());\n}","description":"This example shows how to data from a 7-column spreadsheet attachment including row data\n        such as 1, Meghan, 1/1/85, 1:00 AM, 10.00%, 224-432-8582, ½.","output":"ProgressWorker: Attempted to get non-existent sys_progress_\nworker record, inserted 81b0ca5ddb59730090c9ff9dbf9619c4\nsn_appcreator: Column Name : My Number Col, Type : integer,\n Max Length : 1\nsn_appcreator: Column Name : My String Col, Type : string, \n Max Length : 650\nsn_appcreator: Column Name : My Date Col, Type : glide_date,\n Max Length : 6\nsn_appcreator: Column Name : My DateTime Col, Type : \n glide_date_time, Max Length : 7\nsn_appcreator: Column Name : My Percent Col, Type : decimal,\n Max Length : 6\nsn_appcreator: Column Name : My Phone Col, Type : string, \n Max Length : 12\nsn_appcreator: Column Name : My Fraction Col, Type : decimal,\n Max Length : 3"}]},{"name":"next","description":"Moves to the next row.","params":[],"returns":{"type":"Boolean","description":"Returns true if there is a next row, otherwise, returns false."},"example":[]},{"name":"parse","description":"Parse an XLSX formatted Excel document.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The Excel document to be parsed."}],"returns":{"type":"Boolean","description":"Returns true if the parse was successful, otherwise, returns false."},"example":[{"code":"var parser = new sn_impex.GlideExcelParser();\nparser.parse(request.body.dataStream); ","description":" from a scripted REST API script where the Excel file is sent in the request\n        payload.","output":""}]},{"name":"setHeaderRowNumber","description":"Set the number of the header row to be retrieved.","params":[{"name":"headerRowNumber","type":"Number","description":"The header row to be retrieved."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setNullToEmpty","description":"Return an empty value instead of null when an Excel cell is not present.","params":[{"name":"empty","type":"Boolean","description":"When true, cells that are not present return an empty value. When false, cells\n                that are not present return null."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSheetName","description":"Set the name of the sheet to be retrieved.<p>If both <span class=\"keyword apiname\">setSheetNumber()</span> and <span class=\"keyword apiname\">setSheetName()</span> are set,\n          <span class=\"keyword apiname\">setSheetName()</span> is used.</p>","params":[{"name":"sheetName","type":"String","description":"The name of the sheet to be retrieved."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSheetNumber","description":"Set the number of the Excel sheet to be retrieved.<p>If both <span class=\"keyword apiname\">setSheetNumber()</span> and <span class=\"keyword apiname\">setSheetName()</span> are set,\n          <span class=\"keyword apiname\">setSheetNumber()</span> is ignored.</p>","params":[{"name":"sheetNumber","type":"Number","description":"The Excel sheet number to retrieve."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideFilter":{"meta":{"has_constructor":false,"description":"The Scoped GlideFilter API provides a method to determine if a record meets a specified\n  set of requirements. There is no constructor for Scoped GlideFilter. It is accessed by using the global object\n   \"GlideFilter\".","example":""},"properties":{},"methods":[{"name":"checkRecord","description":"Compares a specified filter to the contents of a specified GlideRecord.<p>If the specified filter contains one condition, the method returns true if the record meets\n        the condition of the filter.</p><p>If the specified filter contains more than one condition, for example\n          <samp class=\"ph codeph\">\"active=true^number=abc^category=request\"</samp>, you can use the\n          <span class=\"keyword parmname\">match</span> parameter to define whether all conditions must be met to\n        determine a match or just a single condition.</p>","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord to evaluate."},{"name":"filter","type":"String","description":"Encoded query string (case-sensitive)."},{"name":"match","type":"Boolean","description":"Optional. Flag that indicates whether all conditions must be met if\n                  the<span class=\"keyword parmname\"> filter</span> parameter contains multiple conditions. <p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"r_ScopedGlideFilterCheckRecord_GlideRecord_String_Object__ul_uwb_pd3_bhb\">\n                  <li class=\"li\">true: all conditions must be met for the method to return true</li>\n\n                  <li class=\"li\">false: only one of the conditions must be met for the method to return\n                    true</li>\n\n                </ul>\n<p class=\"p\">Default: true</p>"}],"returns":{"type":"Boolean","description":"Results of the filter comparison.<ul class=\"ul\" id=\"r_ScopedGlideFilterCheckRecord_GlideRecord_String_Object__ul_xzf_2fj_bhb\">\n                  <li class=\"li\">true: filter conditions were met</li>\n\n                  <li class=\"li\">false: filer conditions were not met</li>\n\n                </ul>"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query();\nvar bool = true;\n \nwhile(rec.next())\n{\n   bool = GlideFilter.checkRecord(rec, \"active=true\");\n   gs.info(\"number \"+ rec. number + \" is \" + bool);\n}","description":"","output":""}]}]},"GlideFormScratchpad":{"meta":{"has_constructor":false,"description":"The scoped GlideFormScratchpad class implements the <span class=\"keyword apiname\">g_scratchpad</span>\n  object for scoped applications. The scoped GlideFormScratchpad class has no constructor and no methods. The\n    <span class=\"keyword apiname\">g_scratchpad</span> object behaves identically for global and scoped\n   applications.<br/><br/>The <span class=\"keyword apiname\">g_scratchpad</span> object provides a mechanism for passing information from\n   the server to the client when the client requires information not available on a form. This can\n   be accomplished by creating a business rule to put the information in the\n    <span class=\"keyword apiname\">g_scratchpad</span> object and accessing the information in a client script.","example":""},"properties":{},"methods":[]},"GlideLocale":{"meta":{"has_constructor":false,"description":"GlideLocale provides information about display information for the local\n  instance. There is no constructor for a GlideLocale object. Use the <span class=\"keyword apiname\">get()</span> method to\n   get a GlideLocale object.","example":""},"properties":{},"methods":[{"name":"get","description":"Returns the GlideLocale object.","params":[],"returns":{"type":"GlideLocale","description":"The GlideLocale object."},"example":[{"code":"var locale = GlideLocale.get();","description":"","output":""}]},{"name":"getDecimalSeparator","description":"Returns the decimal separator.","params":[],"returns":{"type":"String","description":"The decimal separator."},"example":[{"code":"var locale = GlideLocale.get();\nvar decimalSeparator = locale.getDecimalSeparator();\ngs.info( \"The decimal separator is \" + decimalSeparator);","description":"","output":"The decimal separator is ."}]},{"name":"getGroupingSeparator","description":"Returns the grouping separator.","params":[],"returns":{"type":"String","description":"The grouping separator."},"example":[{"code":"var locale = GlideLocale.get();var groupingSeparator = locale.getGroupingSeparator();\ngs.info( \"The grouping separator is \" + groupingSeparator);","description":"","output":"The grouping separator is ,"}]}]},"GlideOAuthClient":{"meta":{"has_constructor":false,"description":"Use these methods for requesting and revoking OAuth refresh and access tokens. This API can be used in global and scoped scripts. In scoped scripts us the\n                <samp class=\"ph codeph\">sn_auth</samp> namespace identifier.","example":""},"properties":{},"methods":[{"name":"getToken","description":"Retrieves the token for the client. You can use the token to check the expiration date\n    and perform a token renewal.","params":[{"name":"OAuthEntityName","type":"String","description":"The OAuth entity."},{"name":"requestor","type":"String","description":"The request."}],"returns":{"type":"ScopedGlideOAuthToken","description":"The token for the client."},"example":[{"code":"token = oAuthClient.getToken(testAppProvider, someone@someemail.com);","description":"This example code retrieves a token from the instance database:","output":"function dumpToken(token) {\n  if(token) {\n       gs.info(&quot;AccessToken:&quot; + token.getAccessToken());\n       gs.info(&quot;AccessTokenExpiresIn:&quot; + token.getExpiresIn());\n       gs.info(&quot;RefreshToken:&quot; + token.getRefreshToken());\n  }\n}"}]},{"name":"requestToken","description":"Retrieves the token for the client, with the request parameters encoded in JSON\n    format.","params":[{"name":"clientName","type":"String","description":"The client name."},{"name":"jsonString","type":"String","description":"The JSON string for the client."}],"returns":{"type":"GlideOAuthClientResponse","description":"The token for the client."},"example":[{"code":"\nvar oAuthClient = new GlideOAuthClient();\nvar params ={grant_type:\"password\", username:\"itil\", password:'itil'};\nvar json =new JSON();\nvar text = json.encode(params);\nvar tokenResponse = oAuthClient.requestToken('TestClient', text);\nvar token = tokenResponse.getToken();\n\ngs.log(\"AccessToken:\"+ token.getAccessToken());\ngs.log(\"AccessTokenExpiresIn:\"+ token.getExpiresIn());\ngs.log(\" RefreshToken:\"+ token.getRefreshToken());\n","description":"This example shows a resource owner password grant type request, with request parameters\n        encoded in JSON format.","output":""}]},{"name":"requestTokenByRequest","description":"Retrieves the token for the client, with the client name and the request set into a\n    GlideOAuthClientResponse object.","params":[{"name":"clientName","type":"String","description":"The client name."},{"name":"request","type":"GlideOAuthClientRequest","description":"The request."}],"returns":{"type":"GlideOAuthClientResponse","description":"The token for the client."},"example":[]},{"name":"revokeToken","description":"Revokes the access or refresh token for the client, with the request and optional\n    header parameters set into a GlideOAuthClientRequest object.","params":[{"name":"clientName","type":"String","description":"The client name."},{"name":"accessToken","type":"String","description":"The access token."},{"name":"refreshToken","type":"String","description":"The refresh token."},{"name":"request","type":"GlideOAuthClientRequest","description":"The request."}],"returns":{"type":"GlideOAuthClientResponse","description":"The token for the client."},"example":[]}]},"GlideOAuthClientRequest":{"meta":{"has_constructor":false,"description":"Use these methods for handling OAuth client requests. This API can be used in global and scoped scripts. In scoped scripts us the\n    <samp class=\"ph codeph\">sn_auth</samp> namespace identifier.","example":""},"properties":{},"methods":[{"name":"getGrantType","description":"Retrieves the grant type.","params":[],"returns":{"type":"String","description":"The grant type."},"example":[]},{"name":"getHeader","description":"Retrieves the HTTP headers for the string you provide.","params":[{"name":"name","type":"String","description":"The name of the parameter."}],"returns":{"type":"StringMap","description":"The string map with the HTTP headers."},"example":[]},{"name":"getHeaders","description":"Retrieves the HTTP headers.","params":[],"returns":{"type":"StringMap","description":"The string map with the HTTP headers."},"example":[]},{"name":"getParameter","description":"Retrieves the parameters for the parameter name you provide.","params":[{"name":"name","type":"String","description":"The parameter name for which you want the parameters."}],"returns":{"type":"String","description":"The parameters."},"example":[]},{"name":"getPassword","description":"Retrieves the password.","params":[],"returns":{"type":"String","description":"The password."},"example":[]},{"name":"getRefreshToken","description":"Retrieves the refresh token.","params":[],"returns":{"type":"String","description":"The refresh token."},"example":[]},{"name":"getScope","description":"Retrieves the scope.","params":[],"returns":{"type":"String","description":"The scope."},"example":[]},{"name":"getUserName","description":"Retrieves the user name.","params":[],"returns":{"type":"String","description":"The user name."},"example":[]},{"name":"setGrantType","description":"Sets the grant type for the string you provide.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You only need to set the grant type if it is not already defined in the OAuth provider\n          profile. </div></p>","params":[{"name":"name","type":"String","description":"The grant type."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setHead","description":"Retrieves the HTTP headers for the string you provide.","params":[{"name":"name","type":"String","description":"The name of the parameter."},{"name":"value","type":"String","description":"The value of the parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setParameter","description":"Sets the parameters for the name:value pair of strings you provide.","params":[{"name":"name","type":"String","description":"The parameter name for which you want the parameters."},{"name":"value","type":"String","description":"The value of the parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setPassword","description":"Sets the password with the string you provide.","params":[{"name":"password","type":"String","description":"The user name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setRefreshToken","description":"Sets the refresh token with the string you provide.","params":[{"name":"refreshToken","type":"String","description":"The refresh token."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"\n     var tokenRequest =new GlideOAuthClientRequest();\n     tokenRequest.setGrantType(\"password\");\n     tokenRequest.setUserName(\"itil\");\n     tokenRequest.setPassword(\"itil\");\n     tokenRequest.setScope(null);\n \n     var oAuthClient =new GlideOAuthClient();var tokenResponse = oAuthClient.requestToken(\"TestClient\", tokenRequest);\n     gs.log(\"Error:\"+ tokenResponse.getErrorMessage());\n \n     var token = tokenResponse.getToken();if(token){\n       gs.log(\"AccessToken:\"+ token.getAccessToken());\n       gs.log(\"AccessTokenExpiresIn:\"+ token.getExpiresIn());\n       gs.log(\"RefreshToken:\"+ token.getRefreshToken());\n","description":"This example shows a resource owner password grant type request.","output":"var tokenRequest =new GlideOAuthClientRequest();\n     tokenRequest.setGrantType(&quot;refresh_token&quot;);\n     tokenRequest.setRefreshToken(&quot;N-GtdSVLkWP_Cr-TysXdmNy59ZYafu5ZzAS4YaSluXDm0kCkInEnu-hwM5SsGYSFwKJ6xauVmoaq7xJNoalXFQ&quot;);\n     tokenRequest.setScope(null);\n \n     var oAuthClient =new GlideOAuthClient();\n     tokenResponse = oAuthClient.requestToken(&quot;TestClient&quot;, tokenRequest);\n     gs.log(&quot;Error:&quot;+ tokenResponse.getErrorMessage());\n     token = tokenResponse.getToken();if( token){\n        gs.log(&quot;AccessToken:&quot;+ token.getAccessToken());\n        gs.log(&quot;AccessTokenExpiresIn:&quot;+ token.getExpiresIn());\n        gs.log(&quot;AccessTokenSysID:&quot;+ token.getAccessTokenSysID());\n        gs.log(&quot;RefreshToken:&quot;+ token.getRefreshToken());\n        gs.log(&quot;RefreshTokenSysID:&quot;+ token.getRefreshTokenSysID());"}]},{"name":"setScope","description":"Sets the scope for the string you provide.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You only need to set the scope if it is not already defined in the OAuth\n          provider.</div></p>","params":[{"name":"scope","type":"String","description":"The scope."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setUserName","description":"Sets the user name with the string you provide.","params":[{"name":"userName","type":"String","description":"The user name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideOAuthClientResponse":{"meta":{"has_constructor":false,"description":"Use these methods for handling OAuth client responses. This API can be used in global and scoped scripts. In scoped scripts us the\n                <samp class=\"ph codeph\">sn_auth</samp> namespace identifier.","example":""},"properties":{},"methods":[{"name":"getBody","description":"Retrieves all of the response information, including instance information.","params":[],"returns":{"type":"String","description":"The response information."},"example":[]},{"name":"getContentType","description":"Retrieves the HTTP response content header from an external OAuth provider.","params":[],"returns":{"type":"String","description":"The HTTP response header."},"example":[]},{"name":"getErrorMessage","description":"Retrieves the error message if authentication is not successful.","params":[],"returns":{"type":"String","description":"The error message."},"example":[]},{"name":"getResponseCode","description":"Retrieves the HTTP response code from the external OAuth provider.","params":[],"returns":{"type":"String","description":"The HTTP response code."},"example":[]},{"name":"getResponseParameters","description":"Retrieves the error message if authentication is not successful.","params":[],"returns":{"type":"MapString","description":"The response content."},"example":[]},{"name":"getToken","description":"Retrieves the refresh token.","params":[],"returns":{"type":"GlideOAuthToken","description":"The refresh token."},"example":[]}]},"GlideOAuthToken":{"meta":{"has_constructor":false,"description":"Use the GlideOAuthToken methods for retrieving OAuth access token and information about\n  the access token. This API can be used in global and scoped scripts. In scoped scripts use the\n    <samp class=\"ph codeph\">sn_auth</samp> namespace identifier.","example":""},"properties":{},"methods":[{"name":"getAccessToken","description":"Retrieves the access token.","params":[],"returns":{"type":"String","description":"The access token."},"example":[]},{"name":"getAccessTokenSysID","description":"Retrieves the sys_id of the token ID.","params":[],"returns":{"type":"String","description":"The sys_id of the access token."},"example":[]},{"name":"getExpiresIn","description":"Retrieves the lifespan of the access token in seconds.","params":[],"returns":{"type":"Number","description":"The lifespan."},"example":[]},{"name":"getRefreshToken","description":"Retrieves the lifespan of the access token in seconds.","params":[],"returns":{"type":"Number","description":"The refresh token."},"example":[]},{"name":"getRefreshTokenSysID","description":"Retrieves the sys_id of the refresh token.","params":[],"returns":{"type":"Number","description":"The sys_id of the refresh token."},"example":[]},{"name":"getScope","description":"Retrieves the scope, which is the amount of access granted by the access\n    token.","params":[],"returns":{"type":"String","description":"The scope."},"example":[]}]},"GlidePluginManager":{"meta":{"has_constructor":false,"description":"The scoped GlidePluginManager API provides a method for determining if a plugin has been\n  activated. ","example":""},"properties":{},"methods":[{"name":"isActive","description":"Determines if the specified plugin has been activated.","params":[{"name":"pluginID","type":"String","description":"The plugin ID"}],"returns":{"type":"Boolean","description":"True if the plugin has been activated."},"example":[{"code":"var gr = new GlideRecord('sys_plugins');\nvar queryString = \"active=0^ORactive=1\";\ngr.addEncodedQuery(queryString);\ngr.query();\npMgr = new GlidePluginManager();\n \nwhile (gr.next()) {\n   var name = gr.getValue('name');\n   var pID = gr.getValue('source');\n   isActive = pMgr.isActive(pID);\n   if (isActive) \n       gs.info('The plugin ' + name + \" is  active\"  );\n}","description":"","output":"The plugin Country Lookup Data is  active\nThe plugin Database Replication is  active\nThe plugin REST API Provider is  active\nThe plugin Ten Cool Things is  active\n ..."}]}]},"GlideQueryCondition":{"meta":{"has_constructor":false,"description":"The scoped GlideQueryCondition API provides additional AND or OR conditions that can be\n    added to the current condition, allowing you to build complex queries. Build complex queries such\n      as:<pre ng-prism='' source='category=&#39;hardware&#39; OR category=&#39;software&#39; AND priority=&#39;2&#39; AND priority=&#39;1&#39;' class='language-javascript monospaceing'></pre><br/><br/>In the case of addCondition(), an implied AND is added.<br/><br/>This class has no constructor. A GlideQueryCondition object is returned by the following\n        methods:<ul class=\"ul\" id=\"c_GlideQueryConditionScopedAPI__ul_xyz_nsg_qz\">\n        <li class=\"li\"><span class=\"keyword apiname\">addActiveQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addInactiveQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addJoinQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addNotNullQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addNullQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addQuery()</span></li>\n\n      </ul><br/><br/>If there is a complicated set of AND and OR queries, a single encoded query containing all\n      conditions simplifies the query creation. To simplify the query creation, create a query in a\n      list view, right-click the query, and select <span class=\"ph uicontrol\">Copy query</span>. It creates a\n      single encoded query string to return your result set. Use that string as a parameter in an\n        <span class=\"keyword apiname\">addEncodedQuery()</span> call.<br/><br/>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.<br/><br/>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.","example":""},"properties":{},"methods":[{"name":"addCondition","description":"Adds an AND condition to the current condition.<p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table returns\" frame=\"border\" id=\"r_ScopedGlideQueryConditionAddCondition_String_name_String_oper_Object_value__table_mxx_f5b_2r\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 2. Returns</span></caption>\n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d884593e126\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d884593e129\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d884593e126\" valign=\"top\">GlideQueryCondition</td>\n\n                <td class=\"entry\" headers=\"d884593e129\" valign=\"top\">A reference to a GlideQueryConditon that was added to the\n                  GlideRecord.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>","params":[{"name":"name","type":"String","description":"The name of a field."},{"name":"oper","type":"String","description":"(Optional) The operator for the query. If you do not specify an operator, the\n                condition uses an equals operator."},{"name":"value","type":"Object","description":"The value to query on."}],"returns":{"type":"GlideQueryCondition","description":"A reference to a GlideQueryConditon that was added to the\n                  GlideRecord."},"example":[{"code":"var gr = new GlideRecord('incident');\nvar qc = gr.addQuery('category', 'Hardware');\nqc.addCondition('category', 'Network');\ngr.addQuery('number','INC0000003');\ngr.next();\ngr.number;\ngs.info(gr.getEncodedQuery());","description":"","output":""}]},{"name":"addOrCondition","description":"Appends a two-or-three parameter OR condition to an existing\n    GlideQueryCondition.<p><span class=\"keyword apiname\">addOrCondition()</span> works in conjunction with any of the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideRecordAddQuery_String_String_Object&amp;v=madrid\" target=\"_blank\">addQuery()</a> methods to <samp class=\"ph codeph\">OR</samp> the specified query parameters to the query previously\n        constructed using <span class=\"keyword apiname\">addQuery()</span>.</p><p><span class=\"keyword apiname\">addOrCondition()</span> is typically called with three parameters; table field,\n        operator, and comparison value. It can be called with only two parameters, table field and\n        comparison value, such as <samp class=\"ph codeph\">qc.addOrCondition('category', 'software');</samp>. The\n        operator in this case is assumed to be \"equal to\".</p><p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table parameters\" frame=\"border\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__table_vy2_525_jq\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 1. Parameters</span></caption>\n            \n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d884871e82\" valign=\"top\">Name</th>\n\n                <th class=\"entry\" id=\"d884871e85\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d884871e88\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d884871e82\" valign=\"top\">name </td>\n\n                <td class=\"entry\" headers=\"d884871e85\" valign=\"top\">String</td>\n\n                <td class=\"entry\" headers=\"d884871e88\" valign=\"top\">Field name</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d884871e82\" valign=\"top\">oper</td>\n\n                <td class=\"entry\" headers=\"d884871e85\" valign=\"top\">String </td>\n\n                <td class=\"entry\" headers=\"d884871e88\" valign=\"top\">(Optional) Query operator. The available values are dependent on the data\n                  type of the <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_qyb_rbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">&gt;</li>\n\n                      <li class=\"li\">&gt;=</li>\n\n                      <li class=\"li\">&lt;</li>\n\n                      <li class=\"li\">&lt;=</li>\n\n                    </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_egz_vbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">IN</li>\n\n                      <li class=\"li\">STARTSWITH</li>\n\n                      <li class=\"li\">ENDSWITH</li>\n\n                      <li class=\"li\">CONTAINS</li>\n\n                      <li class=\"li\">DOESNOTCONTAIN</li>\n\n                    </ul>\n</div>\n</td>\n\n              </tr>\n\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d884871e82\" valign=\"top\">value</td>\n\n                <td class=\"entry\" headers=\"d884871e85\" valign=\"top\">Object</td>\n\n                <td class=\"entry\" headers=\"d884871e88\" valign=\"top\">Value on which to query (not case-sensitive).<div class=\"note note\"><span class=\"notetitle\">Note:</span> All passed in arrays must\n                    contain a minimum of two elements. Single element arrays are not\n                    supported.</div>\n</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p><p><div class=\"tablenoborder\"><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\" class=\"table returns\" frame=\"border\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__table_w2h_w2c_2r\" rules=\"all\" summary=\"\"><caption><span class=\"tablecap\">Table 2. Returns</span></caption>\n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr class=\"row\">\n                <th class=\"entry\" id=\"d884871e206\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d884871e209\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr class=\"row\">\n                <td class=\"entry\" headers=\"d884871e206\" valign=\"top\">GlideQueryCondition</td>\n\n                <td class=\"entry\" headers=\"d884871e209\" valign=\"top\">A reference to a GlideQueryConditon that was added to the\n                  GlideRecord.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>","params":[{"name":"name","type":"String","description":"Field name"},{"name":"oper","type":"String","description":"(Optional) Query operator. The available values are dependent on the data\n                  type of the <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_qyb_rbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">&gt;</li>\n\n                      <li class=\"li\">&gt;=</li>\n\n                      <li class=\"li\">&lt;</li>\n\n                      <li class=\"li\">&lt;=</li>\n\n                    </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_egz_vbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">IN</li>\n\n                      <li class=\"li\">STARTSWITH</li>\n\n                      <li class=\"li\">ENDSWITH</li>\n\n                      <li class=\"li\">CONTAINS</li>\n\n                      <li class=\"li\">DOESNOTCONTAIN</li>\n\n                    </ul>\n</div>"},{"name":"value","type":"Object","description":"Value on which to query (not case-sensitive).<div class=\"note note\"><span class=\"notetitle\">Note:</span> All passed in arrays must\n                    contain a minimum of two elements. Single element arrays are not\n                    supported.</div>"}],"returns":{"type":"GlideQueryCondition","description":"A reference to a GlideQueryConditon that was added to the\n                  GlideRecord."},"example":[{"code":"var gr = new GlideRecord('incident');\nvar qc = gr.addQuery('category', 'Hardware');\nqc.addOrCondition('category', 'Network');\ngr.addQuery('number','INC0000003');\ngr.next();\ngr.number;\ngs.info(gr.getEncodedQuery());\n","description":"","output":""},{"code":"var myObj = new GlideRecord('incident');\nvar q1 = myObj.addQuery('state', '&lt;', 3);\nq1.addOrCondition('state', '&gt;', 5);\nvar q2 = myObj.addQuery('priority', 1);\nq2.addOrCondition('priority', 5);\nmyObj.query();","description":"To group AND/OR statements to make complex queries, such as \"All incidents with a (state\n        less than 3 OR greater than 5) AND (priority is 1 OR priority is 5)","output":""}]}]},"GlideRecord":{"meta":{"has_constructor":true,"description":"Scoped <span class=\"keyword apiname\">GlideRecord</span> is used for database operations. A GlideRecord contains both records and fields. For information about\n        <span class=\"keyword apiname\">GlideRecordSecure</span>, which is a class inherited from\n        <span class=\"keyword apiname\">GlideRecord</span> that performs the same functions as\n        <span class=\"keyword apiname\">GlideRecord</span>, and also enforces ACLs, see the <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/script/glide-server-apis/topic/p_GlideServerAPIs.html\" target=\"_blank\">GlideServer APIs</a>\n      \n      .<br/><br/>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.<br/><br/>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideRecord class for the specified table.","params":[{"name":"tableName","type":"String","description":"The table to be used."}],"returns":{"type":"","description":""},"example":[{"code":"var gr = new GlideRecord('incident');","description":"","output":""}]},{"name":"addActiveQuery","description":"Adds a filter to return active records.","params":[],"returns":{"type":"QueryCondition","description":"Filter to return active records."},"example":[{"code":"var inc = new GlideRecord('incident');\ninc.addActiveQuery();\ninc.query();","description":"","output":""}]},{"name":"addEncodedQuery","description":"Adds an encoded query to other queries that may have been set.<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"query","type":"String","description":"An <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">encoded query\n                  string</a>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var queryString = \"priority=1^ORpriority=2\";\nvar gr = new GlideRecord('incident');\ngr.addEncodedQuery(queryString);\ngr.query();\nwhile (gr.next()) {\n  gs.addInfoMessage(gr.number);\n}","description":"","output":""}]},{"name":"addFunction","description":"Applies a pre-defined GlideDBFunctionBuilder object to a record.<p>Use the GlideDBFunctionBuilder scoped class to define a function. After the function is\n        defined, use the <span class=\"keyword apiname\">addFunction(Object function)</span> method to apply the\n        function to a record.</p>","params":[{"name":"function","type":"Object","description":"A GlideDBFunctionBuilder object that defines a SQL operation."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();\n\nvar gr = new GlideRecord('incident');\ngr.addFunction(myAddingFunction);\ngr.addQuery(myAddingFunction, '&lt;', 5);\ngr.query();\nwhile(gr.next())\ngs.log(gr.getValue(myAddingFunction));\n","description":"","output":"*** Script: 1\n*** Script: 4\n*** Script: 3\n*** Script: 1\n*** Script: 1\n*** Script: 2\n*** Script: 1\n*** Script: 1"}]},{"name":"addJoinQuery","description":"Adds a filter to return records based on a relationship in a related table.<p>You can use this method to find all the users that are in the database group via the\n        [sys_user_grmember] table, or to find all problems that have an assigned incident via the\n        incident.problem_id relationship.</p><p>This is not a true database join; rather, addJoinQuery adds a subquery. So, while the\n        result set is limited based on the join, the only fields that you have access to are those\n        on the base table (those which are in the table with which the GlideRecord was\n        initialized).</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"joinTable","type":"String","description":"Table name"},{"name":"primaryField","type":"Object","description":"(Optional) If other than sys_id, the primary field"},{"name":"joinTableField","type":"Object","description":"(Optional) If other than sys_id, the field that joins the tables."}],"returns":{"type":"GlideQueryCondition","description":"A filter that lists records where the relationships match."},"example":[{"code":"var prob = new GlideRecord('problem');\nprob.addJoinQuery('incident');\nprob.query();","description":"Find problems that have an incident attached. This example returns problems that have\n        associated incidents. However, it won't pull values from the incidents that are returned as\n        a part of the query.","output":""},{"code":"// Look for Problem records that have associated Incident records\nvar gr = new GlideRecord('problem');\nvar grSQ = gr.addJoinQuery('incident');\n \n// Where the Problem records are \"active=false\"\ngr.addQuery('active', 'false');\n \n// And the Incident records are \"active=true\"\ngrSQ.addCondition('active', 'true');\n \n// Query\ngr.query();\n \n// Iterate and output results\nwhile (gr.next()) {\n    gs.info(gr.getValue('number'));\n}","description":"Find inactive problems with associated incidents","output":""},{"code":"var gr = new GlideRecord('problem'); \ngr.addJoinQuery('incident', 'opened_by', 'caller_id'); \ngr.query();","description":"Find problems that have incidents associated where the incident caller_id field value\n        matches that of the problem opened_by field.","output":""}]},{"name":"addNotNullQuery","description":"A filter that specifies records where the value of the field passed in the parameter is\n    not null.<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"fieldName","type":"String","description":"The name of the field to be checked."}],"returns":{"type":"GlideQueryCondition","description":"A filter that specifies records where the value of the field passed in the\n                parameter is not null."},"example":[{"code":"var target = new GlideRecord('incident'); \ntarget.addNotNullQuery('short_description');\ntarget.query();   // Issue the query to the database to get all records where short_description is not null\nwhile (target.next()) {   \n     // add code here to process the incident record\n}","description":"","output":""}]},{"name":"addNullQuery","description":"Adds a filter to return records where the value of the specified field is\n    null.<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"fieldName","type":"String","description":"The name of the field to be checked."}],"returns":{"type":"GlideQueryCondition","description":"The query condition added to the GlideRecord."},"example":[{"code":"var target = new GlideRecord('incident'); \ntarget.addNullQuery('short_description');\ntarget.query();   // Issue the query to the database to get all records where short_description is null\nwhile (target.next()) {   \n   // add code here to process the incident record\n}","description":"","output":""}]},{"name":"addQuery","description":"Build a search query and return the rows that match the request.<p>If you are familiar with SQL, this method is similar to the \"where\" clause. One or more\n          <span class=\"keyword apiname\">addQuery()</span> calls can be made in a single query; in this case the\n        queries are AND'ed. If any of the query statements need to be OR'ed, use the\n          <span class=\"keyword apiname\">GlideQueryCondition</span> method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value&amp;v=madrid\" target=\"_blank\">addOrCondition()</a>.</p><p>When <span class=\"keyword apiname\">addQuery()</span> is called with only two parameters, table field and\n        comparison value, such as <samp class=\"ph codeph\">myObj.addQuery('category','Hardware');</samp>, the\n        operator in this case is assumed to be \"equal to\".</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"name","type":"String","description":"Table field name. If you are not querying a table field, use these reserved\n                  variables:<ul class=\"ul\" id=\"r_ScopedGlideRecordAddQuery_String_Object__ul_e5c_slk_xhb\">\n                  <li class=\"li\">123TEXTQUERY321: Adds a search term to the query. Use this option to return\n                    matching values from any field in the table. Use the term you want to query as\n                    the value.</li>\n\n                  <li class=\"li\">123TEXTINDEXGROUP321: Adds a text index group to the query. Use the name of\n                    the text index group from the Text Index Groups [ts_index_group] table you want\n                    to query as the value. For more information about text index groups, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/search-administration/task/index-multiple-tables.html\" target=\"_blank\">Configure multiple tables\n                      for indexing and searching</a>.</li>\n\n                </ul>"},{"name":"value","type":"Object","description":"Value on which to query (not case-sensitive)."}],"returns":{"type":"GlideQueryCondition","description":"The query condition added to the GlideRecord."},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.addQuery('active', true);\nrec.query();\nwhile (rec.next()) { \n  rec.active = false;\n  gs.info('Active incident ' + rec.number + ' closed');\n  rec.update();\n}","description":"Adds a query for active records in the Incident table.","output":""},{"code":"var gr = new GlideRecord(\"kb_knowledge);\ngr.addQuery(\"123TEXTQUERY321\", \"email server\");\ngr.addQuery(\"123TEXTINDEXGROUP321\", \"portal\");\ngr.query();","description":"Adds a query for records in the kb_knowledge table and portal text index group.","output":""}]},{"name":"addQuery","description":"Provides the ability to build a request, which when executed, returns the rows from the\n    specified table, that match the request.<p>If you are familiar with SQL, this method is similar to the \"where\" clause. One or more\n          <span class=\"keyword apiname\">addQuery()</span> calls can be made in a single query; in this case the\n        queries are AND'ed. If any of the query statements need to be OR'ed, use the\n          <span class=\"keyword apiname\">GlideQueryCondition</span> method <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value\" title=\"Appends a two-or-three parameter OR condition to an existing GlideQueryCondition.\">addOrCondition()</a>.</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"name","type":"String","description":"Table field name."},{"name":"operator","type":"String","description":"Query operator. The available values are dependent on the data type of the\n                  <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_ScopedGlideRecordAddQuery_String_String_Object__ul_qyb_rbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">&gt;</li>\n\n                    <li class=\"li\">&gt;=</li>\n\n                    <li class=\"li\">&lt;</li>\n\n                    <li class=\"li\">&lt;=</li>\n\n                  </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_ScopedGlideRecordAddQuery_String_String_Object__ul_egz_vbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">IN</li>\n\n                    <li class=\"li\">NOT IN</li>\n\n                    <li class=\"li\">STARTSWITH</li>\n\n                    <li class=\"li\">ENDSWITH</li>\n\n                    <li class=\"li\">CONTAINS</li>\n\n                    <li class=\"li\">DOES NOT CONTAIN</li>\n\n                    <li class=\"li\">INSTANCEOF</li>\n\n                  </ul>\n</div>"},{"name":"value","type":"Object","description":"Value on which to query (not case-sensitive)."}],"returns":{"type":"GlideQueryCondition","description":"The query condition that was added to the GlideRecord."},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.addQuery('active',true);\nrec.addQuery('sys_created_on', \"&gt;\", \"2010-01-19 04:05:00\");\nrec.query();\nwhile (rec.next()) { \n  rec.active = false;\n  gs.info('Active incident ' + rec.number + ' closed');\n  rec.update();\n}","description":"","output":""},{"code":"var gr = new GlideRecord('incident');\ngr.addQuery('number','IN','INC00001,INC00002');\ngr.query();\nwhile(gr.next()) {\n  //do something....\n}","description":"Using the IN operator.","output":""}]},{"name":"addQuery","description":"Adds a filter to return records using an encoded query string.<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the glide.invalid_query.returns_no_rows system\n        property to true to have queries with invalid encoded queries return no records.</p>","params":[{"name":"query","type":"String","description":"An <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">encoded query string</a>\n                \n                ."}],"returns":{"type":"GlideQueryCondition","description":"The query condition added to the GlideRecord."},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.addQuery('active=true');\nrec.query();\nwhile (rec.next()) { \n  rec.active = false;\n  gs.info('Active incident ' + rec.number + ' closed');\n  rec.update();\n}","description":"","output":""}]},{"name":"canCreate","description":"Determines if the Access Control Rules, which include the user's roles, permit\n    inserting new records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit creating of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanCreate__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Creating permitted</li>\n\n                    <li class=\"li\">false: Creating is not permitted</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var gr = new GlideRecord('incident');\ngs.info(gr.canCreate());","description":"","output":""}]},{"name":"canDelete","description":"Determines if the Access Control Rules, which include the user's roles, permit deleting\n    records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit deleting of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanDelete__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Deleting permitted</li>\n\n                    <li class=\"li\">false: Deleting is not permitted</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var att = new GlideRecord('sys_attachment');\ngs.info(att.canDelete());","description":"","output":""}]},{"name":"canRead","description":"Determines if the Access Control Rules, which include the user's roles, permit reading\n    records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit reading of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanRead__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Reading permitted</li>\n\n                    <li class=\"li\">false: Reading is not permitted</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var gr = new GlideRecord('incident');\ngs.info(gr.canRead());","description":"","output":""}]},{"name":"canWrite","description":"Determines if the Access Control Rules, which include the user's roles, permit editing\n    records in this table.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the user's roles permit writing of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanWrite__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Writing permitted</li>\n\n                    <li class=\"li\">false: Writing is not permitted</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var gr = new GlideRecord('incident');\ngs.info(gr.canWrite());","description":"","output":""}]},{"name":"chooseWindow","description":"Sets a range of rows to be returned by subsequent queries.","params":[{"name":"firstRow","type":"Number","description":"The first row to include. Because the index starts at 0, a value of 0 returns\n                the first row."},{"name":"lastRow","type":"Number","description":"The last row to include in the range. Because the index starts at 0, use the\n                value <em class=\"ph i\">n</em> - 1, in which <em class=\"ph i\">n</em> equals the actual row number."},{"name":"forceCount","type":"Boolean","description":"If true, the getRowCount() method will return all possible records."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.orderBy('number');\ngr.chooseWindow(2, 4);\ngr.query();\nif (gr.next()) { \n  gs.info(gr.number + ' is within window');\n}","description":"","output":""}]},{"name":"deleteMultiple","description":"Deletes multiple records that satisfy the query condition.<p>This method does not delete attachments.</p><p>Do not use <span class=\"keyword apiname\">deleteMultiple()</span> on tables with currency fields. Always\n        delete each record individually. Also, do not use this method with the\n          <span class=\"keyword apiname\">chooseWindow()</span> or <span class=\"keyword apiname\">setLimit()</span> methods when working\n        with large tables.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.addQuery('active','false'); //to delete all inactive incidents\ngr.query();\ngr.deleteMultiple();","description":"","output":""}]},{"name":"deleteRecord","description":"Deletes the current record.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether the record was successfully deleted.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_ScopedGlideRecordDeleteRecord__ul_hkn_5bj_s3b\">\n                    <li class=\"li\">true: Record was deleted.</li>\n\n                    <li class=\"li\">false: No record was found to delete.</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var gr = new GlideRecord('incident');\n//to delete one record\nif (gr.get('99ebb4156fa831005be8883e6b3ee4b9'))\n    gr.deleteRecord();","description":"","output":""}]},{"name":"get","description":"Returns the specified record in an instantiated GlideRecord object.<p>This method accepts either one or two parameters. If only a single parameter is passed in,\n        the method assumes it is the sys_id of the desired record. If two parameters are passed in,\n        the first is the name of the column within the instantiated GlideRecord to search. The\n        second is the value to search for.</p><p>If multiple records are found, use <span class=\"keyword apiname\">next()</span> to access the additional\n        records.</p>","params":[{"name":"name","type":"Object","description":"Optional. Name of the instantiated GlideRecord column to search for the\n                specified <span class=\"keyword parmname\">value</span> parameter. If only a single parameter is passed\n                in, the method assumes that this parameter is sys_id."},{"name":"value","type":"Object","description":"Value to match."}],"returns":{"type":"Boolean","description":"Indicates whether the requested record was located:<ul class=\"ul\" id=\"r_ScopedGlideRecordGet_Object_Object__ul_ngs_clw_qfb\">\n                  <li class=\"li\">true: record was found</li>\n\n                  <li class=\"li\">false: record was not found</li>\n\n                </ul>"},"example":[{"code":"var grIncident = new GlideRecord('incident');\nvar returnValue = grIncident.get('99ebb4156fa831005be8883e6b3ee4b9');\ngs.info(returnValue); // logs true or false\ngs.info(grIncident.number); // logs Incident Number","description":"","output":""},{"code":"var grIncident = new GlideRecord('incident');\nvar returnValue = grIncident.get('caller_id.name','Sylivia Wayland');\ngs.info(returnValue); // logs true or false\ngs.info(grIncident.number); // logs Incident Number","description":"","output":""}]},{"name":"getAttribute","description":"Returns the dictionary attributes for the specified field.","params":[{"name":"fieldName","type":"String","description":"Field name for which to return the dictionary attributes"}],"returns":{"type":"String","description":"Dictionary attributes"},"example":[{"code":"doit();\nfunction doit() {\n  var gr = new GlideRecord('sys_user');\n  gr.query(\"user_name\",\"admin\");\n  if (gr.next()) {\n    gs.print(\"we got one\");\n    gs.print(gr.location.getAttribute(\"tree_picker\"));\n  }\n}","description":"","output":""}]},{"name":"getClassDisplayValue","description":"Returns the table's label.","params":[],"returns":{"type":"String","description":"Table's label"},"example":[]},{"name":"getDisplayValue","description":"Retrieves the display value for the current record.","params":[],"returns":{"type":"String","description":"The display value for the current record."},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.get('sys_id','ef43c6d40a0a0b5700c77f9bf387afe3');\ngs.info(gr.getDisplayValue());","description":"","output":""}]},{"name":"getED","description":"Returns the element's descriptor.","params":[],"returns":{"type":"GlideElementDescriptor","description":"Element's descriptor"},"example":[{"code":"var totalCritical  = 0;\nvar filledCritical = 0;\nvar fields         = current.getFields();\n \ngs.print(fields);\n \nfor (var num = 0; num &lt; fields.size(); num++) {\n \n\tgs.print(\"RUNNING ARRAY VALUE \" + num);\n \n\tvar ed = fields.get(num).getED();\n \n\tif(ed.hasAttribute(\"tiaa_critical\")) {\n\t\tgs.print(\"CRITICAL FIELD FOUND\");\n\t\ttotalCritical ++;\n \n\t\tif (!fields.get(num).isNil()) {\n\t\t\tfilledCritical ++;\n\t\t}\n\t}\n \n}\n \nvar answer = 0;\ngs.print(\"TOTAL - \" + totalCritical);\ngs.print(\"FILLED - \" + filledCritical);\n \nif (filledCritical &gt; 0 &amp;&amp; totalCritical &gt; 0) {\n \n\tvar pcnt = (filledCritical/totalCritical)*100;\n\tanswer = pcnt.toFixed(2);;\n \n}\n \nanswer;","description":"","output":""}]},{"name":"getElement","description":"Retrieves the GlideElement object for the specified field.","params":[{"name":"columnName","type":"String","description":"Name of the column to get the element from."}],"returns":{"type":"GlideElement","description":"The GlideElement for the specified column of the current record."},"example":[{"code":"var elementName = 'short_description'; \nvar gr = new GlideRecord('incident'); \ngr.initialize(); \ngr.setValue(elementName, \"My DB is not working\");\ngr.insert();\ngs.info(gr.getElement('short_description'));","description":"","output":""}]},{"name":"getEncodedQuery","description":"Retrieves the query condition of the current result set as an encoded query string.","params":[],"returns":{"type":"String","description":"The encoded query as a string."},"example":[{"code":"var gr = new GlideRecord('incident'); \ngr.addQuery('active', true);\ngr.addQuery('priority', 1); \ngr.query(); \nvar encodedQuery = gr.getEncodedQuery(); \ngs.info(encodedQuery);","description":"","output":"active=true^priority=1"}]},{"name":"getLabel","description":"Returns the field's label.","params":[],"returns":{"type":"String","description":"Field's label"},"example":[{"code":"template.print(\"Summary of Requested items:\\n\");  \nvar gr = new GlideRecord(\"sc_req_item\");\ngr.addQuery(\"request\", current.sysapproval);\ngr.query();\nwhile(gr.next()) {\n    var nicePrice = gr.price.toString();\n    if (nicePrice != '') {\n        nicePrice = parseFloat(nicePrice);\n        nicePrice = nicePrice.toFixed(2);\n    }\n    template.print(gr.number + \":  \" + gr.quantity + \" X \" + gr.cat_item.getDisplayValue() \n                     + \" at $\" + nicePrice + \" each \\n\");\n    template.print(\"    Options:\\n\");\n    for (key in gr.variables) {\n      var v = gr.variables[key];\n      if(v.getGlideObject().getQuestion().getLabel() != '') {\n         template.space(4);\n         template.print('     ' +  v.getGlideObject().getQuestion().getLabel() + \" = \" \n                     + v.getDisplayValue() + \"\\n\");  \n      }\n    }\n}","description":"","output":""}]},{"name":"getLastErrorMessage","description":"Retrieves the last error message. If there is no last error message, null is returned.","params":[],"returns":{"type":"String","description":"The last error message as a string."},"example":[{"code":"// Setup a data policy where short_description field in incident is mandatory\nvar gr = new GlideRecord('incident');\ngr.insert(); // insert without data in mandatory field\nvar errormessage = gr.getLastErrorMessage(); \ngs.info(errormessage);","description":"","output":"Data Policy Exception: Short description is mandatory"}]},{"name":"getLink","description":"Retrieves a link to the current record.","params":[{"name":"noStack","type":"Boolean","description":"If true, the sysparm_stack parameter is not appended to the link. The parameter\n                sysparm_stack specifies the page to visit after closing the current link."}],"returns":{"type":"String","description":"A link to the current record as a string."},"example":[{"code":"gr = new GlideRecord('incident');\ngr.addActiveQuery();\ngr.addQuery(\"priority\", 1);\ngr.query();\ngr.next()\ngs.info(gs.getProperty('glide.servlet.uri') + gr.getLink(false));","description":"","output":"\n        &lt;BaseURL&gt;/incident.do?sys_id=9d385017c611228701d22104cc95c371&amp;sysparm_stack=incident_list.do?sysparm_query=active=true"}]},{"name":"getRecordClassName","description":"Retrieves the class name for the current record.","params":[],"returns":{"type":"String","description":"The class name."},"example":[{"code":"var gr = new GlideRecord('incident'); \nvar recordClassName = gr.getRecordClassName(); \ngs.info(recordClassName);","description":"","output":"incident"}]},{"name":"getRowCount","description":"Retrieves the number of rows in the query result.","params":[],"returns":{"type":"Number","description":"Number of rows."},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.query();\ngs.info(\"Records in incident table: \" + gr.getRowCount());","description":"","output":""}]},{"name":"getTableName","description":"Retrieves the name of the table associated with the GlideRecord.","params":[],"returns":{"type":"String","description":"The table name"},"example":[{"code":"var gr = new GlideRecord('incident');\ngs.info(gr.getTableName());","description":"","output":""}]},{"name":"getUniqueValue","description":"Gets the primary key of the record, which is usually the sys_id unless otherwise\n    specified.","params":[],"returns":{"type":"String","description":"The unique primary key as a String, or null if the key is null."},"example":[{"code":"var gr = new GlideRecord('kb_knowledge');\ngr.query();\ngr.next();\nvar uniqueid = gr.getUniqueValue();\ngs.info(uniqueid);","description":"","output":""}]},{"name":"getValue","description":"Retrieves the string value of an underlying element in a field.","params":[{"name":"name","type":"String","description":"The name of the field to get the value from."}],"returns":{"type":"String","description":"The value of the field."},"example":[{"code":"var gr = new GlideRecord('incident'); \ngr.orderBy('number');\ngr.query('active','true'); \ngr.next() ; \ngs.info(gr.getValue('number'));","description":"","output":""}]},{"name":"hasNext","description":"Determines if there are any more records in the GlideRecord object.","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query result set."},"example":[{"code":"var rec = new GlideRecord('incident'); \nrec.query(); \nif (rec.hasNext()) { \n  gs.info(\"Table is not empty\"); \n}","description":"","output":""}]},{"name":"initialize","description":"Creates an empty record suitable for population before an insert.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.initialize(); \ngr.name='New Incident'; \ngr.description='Incident description'; \ngr.insert();","description":"","output":""}]},{"name":"insert","description":"Inserts a new record using the field values that have been set for the current record.","params":[],"returns":{"type":"String","description":"Unique ID of the inserted record, or null if the record is not\n                inserted."},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.initialize(); \ngr.name = 'New Incident'; \ngr.description = 'Incident description'; \ngr.insert();","description":"","output":""}]},{"name":"isActionAborted","description":"Checks to see if the current database action is to be aborted.<p><span class=\"keyword apiname\">isActionAborted()</span> is initialized (set to false) for new threads and by\n        the <span class=\"keyword apiname\">next()</span> method.</p>","params":[],"returns":{"type":"Boolean","description":"True if the current database action is to be aborted"},"example":[{"code":"var gr = new GlideRecord('incident');\n \ngs.info(gr.isActionAborted());","description":"","output":"false"}]},{"name":"isEncodedQueryValid","description":"Verifies whether the specified encoded query is valid.","params":[{"name":"query","type":"String","description":"Encoded query to validate."}],"returns":{"type":"Boolean","description":"Indicates whether the specified encoded query is valid.<ul class=\"ul\" id=\"SGR-isEncodedQueryValid_S__ul_lsw_qw4_2gb\">\n                  <li class=\"li\">true: passed-in encoded query is valid</li>\n\n                  <li class=\"li\">false: passed-in encoded query is not valid</li>\n\n                </ul>"},"example":[{"code":"var gr = new GlideRecord('incident_sla');\nvar isValidQuery = gr.isEncodedQueryValid('inc_impact=1^taskslatable_active=true');\nif (isValidQuery) {\n       gr.addEncodedQuery('inc_impact=1^taskslatable_active=true');\n       gr.query();\n       .\n       .\n       .\n}","description":"","output":""}]},{"name":"isNewRecord","description":"Checks if the current record is a new record that has not yet been inserted into the\n    database.","params":[],"returns":{"type":"Boolean","description":"True if the record is new and has not been inserted into the database."},"example":[{"code":"var gr = new GlideRecord(\"x_app_table\"); \ngr.newRecord(); // create a new record and populate it with default values\ngs.info(gr.isNewRecord());","description":"","output":""}]},{"name":"isValid","description":"Determines if the table exists.","params":[],"returns":{"type":"Boolean","description":"True if table is valid or if record was successfully retrieved. False if table\n                is invalid or record was not successfully retrieved."},"example":[{"code":"var gr = new GlideRecord('incident');\ngs.info(gr.isValid());\n \nvar anotherGr = new GlideRecord('wrong_table_name');\ngs.info(anotherGr.isValid());","description":"","output":"true false"}]},{"name":"isValidField","description":"Determines if the specified field is defined in the current table.","params":[{"name":"columnName","type":"String","description":"The name of the the field."}],"returns":{"type":"Boolean","description":"True if the field is defined for the current table."},"example":[{"code":"var gr = new GlideRecord('incident'); \ngr.initialize(); \ngs.info(gr.isValidField(\"short_description\"));","description":"","output":""}]},{"name":"isValidRecord","description":"Determines if a record was actually returned by the query/get record\n    operation.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether a record was actually returned by the query/get\n                  operation.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordIsValidRecord__ul_xzx_jnh_s3b\">\n                    <li class=\"li\">true: Record returned by query/get operation.</li>\n\n                    <li class=\"li\">false: End of record set, no record returned. </li>\n\n                  </ul>\n</div>"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) { \n  gs.info(rec.number + ' exists');\n}\ngs.info(rec.isValidRecord());","description":"","output":""}]},{"name":"newRecord","description":"Creates a new GlideRecord record, sets the default values for the fields, and assigns a\n    unique ID to the record.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord(\"x_app_table\"); \ngr.newRecord(); \ngs.info(gr.isNewRecord());","description":"","output":"true"}]},{"name":"next","description":"Moves to the next record in the GlideRecord object.<p><span class=\"notetitle\">Note:</span> This method fails if there is a field in the table called \"next\". If that is the case,\n        use the method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=SGR-_next&amp;v=newyork\" target=\"_blank\">_next()</a>.</p>","params":[],"returns":{"type":"Boolean","description":"Flag that indicates if there is a \"next\" record in the GlideRecord. <div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_ScopedGlideRecordNext__ul_anq_km4_s3b\">\n                    <li class=\"li\">true: Move to the next record was successful.</li>\n\n                    <li class=\"li\">false: No more records in the result set.</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) { \n  gs.info(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"operation","description":"Retrieves the current operation being performed, such as insert, update, or delete.","params":[],"returns":{"type":"String","description":"The current operation."},"example":[{"code":"//Commonly used in a business rule, returns insert if the current operation is insert\ngs.info(\"current operation \" + current.operation());","description":"","output":""}]},{"name":"orderBy","description":"Specifies an orderBy column.<p>Call this method more than once to order by multiple columns. Results are arranged in\n        ascending order, see orderByDesc(String name) to\n        arrange records in descending order.</p>","params":[{"name":"name","type":"String","description":"The column name used to order the records in this GlideRecord object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var queryString = \"priority=2\"; \nvar gr = new GlideRecord('incident'); \ngr.orderBy('short_description'); // Ascending Order\ngr.addEncodedQuery(queryString); \ngr.query(); \nwhile (gr.next()) { \n    gs.info(gr.short_description); \n}","description":"","output":""}]},{"name":"orderByDesc","description":"Specifies a decending orderBy column.","params":[{"name":"name","type":"String","description":"The column name to be used to order the records in a GlideRecord object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var queryString = \"priority=2\"; \nvar gr = new GlideRecord('incident'); \ngr.orderByDesc('short_description'); //Descending Order\ngr.addEncodedQuery(queryString); \ngr.query(); \nwhile (gr.next()) { \n    gs.info(gr.short_description); \n}","description":"","output":""}]},{"name":"query","description":"Runs the query against the table based on the filters specified by addQuery,\n    addEncodedQuery, etc.<p>This queries the GlideRecord table as well as any references of the table. Usually this is\n        performed without arguments. If name/value pair is specified, \"name=value\" condition is\n        added to the query. <div class=\"note note\"><span class=\"notetitle\">Note:</span> This method fails if there is a field in the table called \"query\".\n          If that is the case, use the method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=SGR-_query_O_O&amp;v=newyork\" target=\"_blank\">_query()</a>.</div></p>","params":[{"name":"field","type":"Object","description":"Column name to query on."},{"name":"value","type":"Object","description":"Value to query for."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) { \n  gs.info(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"setAbortAction","description":"Sets a flag to indicate if the next database action (insert, update, delete) is to be\n    aborted. This is often used in business rules.<p>Use in an onBefore business rule\n        to prevent the database action from being done. The business rule continues to run after\n          <span class=\"keyword apiname\">setAbortAction()</span> is called. Calling <span class=\"keyword apiname\">setAbortAction()</span>\n        does not stop subsequent business rules from executing. Calling this method only prevents\n        the database action from occurring.</p>","params":[{"name":"b","type":"Boolean","description":"True to abort the next action. False if the action is to be allowed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Often used in business rule to check whether the current operation should be aborted.\nif (current.size &gt; 16) {\n  current.setAbortAction(true);\n}","description":"","output":""}]},{"name":"setLimit","description":"Sets the limit for number of records are fetched by the GlideRecord query.","params":[{"name":"maxNumRecords","type":"Number","description":"The maximum number of records to fetch."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.orderByDesc('sys_created_on');\ngr.setLimit(10);\ngr.query(); // this retrieves latest 10 incident records created","description":"","output":""}]},{"name":"setNewGuidValue","description":"Sets sys_id value for the current record.","params":[{"name":"guid","type":"String","description":"The GUID to be assigned to the current record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"ar gr = new GlideRecord('incident');\ngr.short_description='The third floor printer is broken';\ngr.setNewGuidValue('eb4636ca6f6d31005be8883e6b3ee333');\ngr.insert();\ngs.info(gr.sys_id);","description":"","output":""}]},{"name":"setValue","description":"Sets the value of the field with the specified name to the specified value.<p>Normally the script does a gr.category = value. However, if the element name is itself a\n        variable then gr.setValue(elementName, value) can be used. When setting a value, ensure the\n        data type of the field matches the data type of the value you enter.</p>","params":[{"name":"name","type":"String","description":"Name of the field."},{"name":"value","type":"Object","description":"The value to assign to the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var elementName = 'short_description'; \nvar gr = new GlideRecord('incident'); \ngr.initialize(); \ngr.setValue(elementName, \"My DB is not working\");\ngr.insert();","description":"","output":""}]},{"name":"setWorkflow","description":"Enables or disables the running of business rules, script engines, and\n    audit.","params":[{"name":"enable","type":"Boolean","description":"If true (default), enables business rules. If false, disables business\n                rules."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Enable business rules, scripts engines for x_app_table\nvar gr = new GlideRecord(\"x_app_table\"); \ngr.setWorkflow(true);","description":"","output":""}]},{"name":"update","description":"Updates the GlideRecord with any changes that have been made. If the record does not\n    already exist, it is inserted.","params":[{"name":"reason","type":"String","description":"Optional. Reason for the update. The reason is displayed in the audit\n                record."}],"returns":{"type":"String","description":"The sys_id of the new or updated record. Returns null if the update\n                fails."},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.get('99ebb4156fa831005be8883e6b3ee4b9');\ngr.short_description='Update the short description';\ngr.update();\ngs.info(gr.getElement('short_description'));","description":"","output":""}]},{"name":"updateMultiple","description":"Updates each GlideRecord in a stated query with a specified set of changes.<p>When changing field values, use <span class=\"keyword apiname\">setValue()</span> instead of directly setting\n        the field (<samp class=\"ph codeph\">field = something</samp>). When using\n          <span class=\"keyword apiname\">updateMultiple()</span>, directly setting the field (<samp class=\"ph codeph\">gr.state =\n          4</samp>) results in all records in the table being updated instead of just the records\n        returned by the query.</p><p>Do not use this method with the <span class=\"keyword apiname\">chooseWindow()</span> or\n          <span class=\"keyword apiname\">setLimit()</span> methods when working with large tables.</p><p>This method sets new values and does not clear existing values.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// update the state of all active incidents to 4 - \"Awaiting User Info\"\nvar gr = new GlideRecord('incident');\ngr.addQuery('active', true);\ngr.setValue('state',  4);\ngr.updateMultiple();","description":"","output":""}]},{"name":"_next","description":"Moves to the next record in the GlideRecord. Provides the same functionality as\n      <span class=\"keyword apiname\">next()</span>, it is  intended to be used in cases where the GlideRecord has a\n    column named next.","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query set."},"example":[{"code":"var rec = new GlideRecord('sys_template');\nrec.query();\nwhile (rec._next()) { \n  gs.print(rec.number + ' exists');\n}","description":"","output":""}]},{"name":"_query","description":"Identical to <span class=\"keyword apiname\">query()</span>. This method is intended to be used on tables\n    where there is a column named query, which would interfere with using the\n      <span class=\"keyword apiname\">query()</span> method.<p>Runs the query against the table based on the filters specified by the\n          <span class=\"keyword apiname\">addQuery()</span> and <span class=\"keyword apiname\">addEncodedQuery()</span> methods. This\n        method queries the GlideRecord table as well as any references of the table. Typically this\n        method is called without arguments.  If a name/value pair is specified, the \"name=value\"\n        condition is added to the query.</p>","params":[{"name":"name","type":"Object","description":"Column name on which to query"},{"name":"value","type":"Object","description":"Value for which to query"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('sys_app_module');\nrec._query();\nwhile (rec.next()) { \n gs.print(rec.number + ' exists');\n}","description":"","output":""}]}]},"GlideSchedule":{"meta":{"has_constructor":true,"description":"The scoped GlideSchedule API provides methods for performing operations on GlideSchedule\n  objects, such as adding new schedule segments to a schedule, determining if a datetime is within\n  the schedule, or setting the schedule timezone. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideSchedule object and loads the schedule information. If a timezone\n    is not specified or is nil, the current session timezone is used.","params":[{"name":"sysID","type":"String","description":"The system ID for the schedule."},{"name":"timeZone","type":"String","description":"The time zone. (Optional)"}],"returns":{"type":"","description":""},"example":[{"code":"var schedule = new GlideSchedule('090eecae0a0a0b260077e1dfa71da828', 'US/Pacific');","description":"","output":""}]},{"name":"constructor","description":"Instantiates an empty GlideSchedule object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"add","description":"Adds a new schedule segment to the current schedule.","params":[{"name":"startDate","type":"GlideDateTime","description":"The starting date of the new schedule segment."},{"name":"offSet","type":"GlideDuration","description":"The time offset of the new schedule segment."}],"returns":{"type":"GlideDateTime","description":"The schedule updated with the new schedule segment."},"example":[{"code":"var startDate = new GlideDateTime('2014-01-02');\nvar days = 2;\nvar dur = new GlideDuration(60 * 60 * 24 * 1000 * days);\nvar schedule = new GlideSchedule();\nvar end = schedule.add(startDate, dur);\ngs.info(end);","description":"","output":""}]},{"name":"duration","description":"Determines the elapsed time in the schedule between two date time values using the\n    timezone of the schedule or, if that is not specified, the timezone of the session.","params":[{"name":"startDate","type":"GlideDateTime","description":"The starting datetime."},{"name":"endDate","type":"GlideDateTime","description":"The ending datetime."}],"returns":{"type":"GlideDuration","description":"The difference between the starting and ending datetime."},"example":[{"code":"var startDate = new GlideDateTime('2014-10-16 02:00:00');\nvar endDate = new GlideDateTime('2014-10-18 04:00:00');\nvar schedule = new GlideSchedule();\n \nschedule.load('090eecae0a0a0b260077e1dfa71da828'); // loads \"8-5 weekdays excluding holidays\" schedule\nvar duration = schedule.duration(startDate, endDate);\ngs.info(duration.getDurationValue()); // gets the elapsed time in schedule","description":"","output":""}]},{"name":"getName","description":"Retrieves the schedule name.","params":[],"returns":{"type":"String","description":"The name of the current schedule."},"example":[{"code":"sys_id ='04e664654a36232701a2247dcd8fc4cf'; // sys_id for \"Application\" schedule record\nvar sched = new GlideSchedule(sys_id);\ngs.info(sched.getName());","description":"","output":""}]},{"name":"isInSchedule","description":"Determines if the given datetime is within the current schedule.","params":[{"name":"time","type":"GlideDateTime","description":"The datetime value to check."}],"returns":{"type":"Boolean","description":"True if the specified datetime is within the schedule; otherwise,\n                false."},"example":[{"code":"var g = new GlideRecord('cmn_schedule');\ng.addQuery('type', 'blackout');\ng.query();\nif (g.next()) {\n   var sched = new GlideSchedule(g.sys_id);\n   var d = new GlideDateTime();\n   d.setDisplayValue(\"2007-09-18 12:00:00\");\n   if (sched.isInSchedule(d)) \n      gs.info(\"Is in the schedule\");\n   else\n      gs.info(\"Is NOT in the schedule\");\n}","description":"","output":""}]},{"name":"isValid","description":"Determines if the current schedule is valid. A schedule is valid if it has at least one\n    schedule span.","params":[],"returns":{"type":"Boolean","description":"True if the schedule is valid."},"example":[{"code":"var g = new GlideRecord('cmn_schedule');\ng.addQuery('type', 'blackout');\ng.query();\nif (g.next()) {\n   var sched = new GlideSchedule(g.sys_id);\n   var d = new GlideDateTime();\n   d.setDisplayValue(\"2007-09-18 12:00:00\");\n   if (sched.isValid()) \n      gs.info(\"Is valid\");\n \n   else\n      gs.info(\"Is not valid\");\n}","description":"","output":""}]},{"name":"load","description":"Loads a schedule with the schedule information.","params":[{"name":"sysID","type":"String","description":"The system ID of the schedule."},{"name":"timeZone","type":"String","description":"(Optional) The timezone. If a timezone is not specified, or is nil, the current\n                session timezone is used for the schedule."},{"name":"excludeSpanID","type":"String","description":"Any span to exclude."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var x = new GlideSchedule();\nx.load('08fcd0830a0a0b2600079f56b1adb9ae');","description":"","output":""}]},{"name":"setTimeZone","description":"Sets the timezone for the current schedule.","params":[{"name":"timeZone","type":"String","description":"The timezone."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var schedule = new GlideSchedule();\nschedule.setTimeZone('US/Pacific');","description":"This example sets the timezone for the schedule to US/Pacific.","output":""}]},{"name":"whenNext","description":"Determines how much time (in milliseconds) until start time of the next schedule\n    item.<p>This function is intended to be called when the GlideSchedule object (cmn_schedule table)\n        is not currently in the schedule window. The whenNext() call returns duration (in ms) until\n        the GlideSchedule object is within the schedule. This function does not return a meaningful\n        value if called when the GlideSchedule object is within the schedule.</p>","params":[{"name":"time","type":"GlideDateTime","description":"Time to be evaluated"},{"name":"timeZone","type":"String","description":"Timezone"}],"returns":{"type":"Number","description":"Number of milliseconds until the start time of the next schedule item. Returns\n                -1 if never."},"example":[{"code":"var startDate = new GlideDateTime('2014-10-25 08:00:00');\nvar glideSchedule = new GlideSchedule('08fcd0830a0a0b2600079f56b1adb9ae', 'UTC');\ngs.info(glideSchedule.whenNext(startDate));","description":"","output":"172800000"},{"code":"testScript(); \nfunction testScript() { \nvar now = new GlideDateTime(); //current date and time\nvar sched = new GlideSchedule(\"&lt;sys_id&gt;\"); // Use a cmn_schedule sys_id \nif (sched.isInSchedule(now)){ \ngs.info('We are in an active schedule window so whenNext() is not helpful'); \n} else{  \ngs.info('Not currently in schedule so call whenNext()'); \nvar msUntilNext = sched.whenNext(new GlideDateTime(), 'US/Pacific'); \ngs.info('Next schedule starts in '+msUntilNext+' milliseconds'); \n} \n}\n\\\\ Output [schedule inactive)]:\n\\\\ *** Script: Not currently in schedule so call whenNext() \n\\\\ *** Script: Next schedule starts in -1 milliseconds","description":"","output":"[Scheduled for future] *** Script: Not currently in schedule *** Script: Next schedule\n        starts in 332894000 milliseconds"}]}]},"GlideScopedEvaluator":{"meta":{"has_constructor":true,"description":"The GlideScopedEvaluator API allows you to evaluate scripts in a GlideRecord field from\n  both scoped and global server scripts. The GlideScopedEvaluator API evaluates records with script fields defined. The scope of the\n   script is defined by the scope of the record.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideScopedEvaluator object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"evaluateScript","description":"Evaluates a script from a GlideRecord field.","params":[{"name":"grObj","type":"GlideRecord","description":"The GlideRecord containing a script expression."},{"name":"scriptField","type":"String","description":"(Optional) The name of the field containing the script expression."},{"name":"variables","type":"Object","description":"(Optional) A map of variables with name-value pairs. These variables are\n                available to the script during execution of this method."}],"returns":{"type":"Object","description":"The result of the script execution."},"example":[{"code":"// For this example, we created a table: \"x_app_table\" with two columns: \"short_description\", \"test_script\"\n// \"test_script\" will store the script to be evaluated by GlideScopedEvaluator.\ngr = new GlideRecord('x_app_table'); \ngr.short_description = 'Testing GlideScopedEvaluator';  \ngr.test_script = \"gs.getUser().getName() + ' says ' + greeting; \"; \ngr.insert(); \n \n// setup variables to be used by the script\nvar vars = {'greeting' : 'hello'};\n \n//Evaluate the script from the field\nvar evaluator = new GlideScopedEvaluator(); \ngr = new GlideRecord('x_app_table'); \ngr.addQuery('short_description','Testing GlideScopedEvaluator'); \ngr.query(); \nif (gr.next()) { \n    gs.info(evaluator.evaluateScript(gr, 'test_script', vars));\n}","description":"","output":"admin says hello"}]},{"name":"getVariable","description":"Returns a variable from a GlideScopedEvaluator object.","params":[{"name":"name","type":"String","description":"The name of the variable."}],"returns":{"type":"Object","description":"The value of the specified variable."},"example":[{"code":"//setting up a record that contains the script to be executed.\ngr = new GlideRecord('x_app_table'); \ngr.short_description = 'Calculate Addition';  \ngr.calculate = \"result = x + y\"; \ngr.insert(); \n \nvar evaluator = new GlideScopedEvaluator();\nevaluator.putVariable('x', 100);\nevaluator.putVariable('y', 200);\nevaluator.putVariable('result', null);\n \n// Now retrieve the result \ngr = new GlideRecord('x_app_table'); \ngr.addQuery('short_description','Calculate Addition'); \ngr.query(); \nif (gr.next()) { \n    evaluator.evaluateScript(gr, 'calculate', null);\n    gs.info(evaluator.getVariable('result'));\n}","description":"","output":""}]},{"name":"putVariable","description":"Puts a variable into the GlideScopedEvaluator object. These variables are available to\n    the script that this GlideScopedEvaluator object runs.","params":[{"name":"name","type":"String","description":"The name of the variable."},{"name":"value","type":"Object","description":"The value of the variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"/setting up a record that contains the script to be executed.\ngr = new GlideRecord('x_app_table'); \ngr.short_description = 'Calculate Addition';  \ngr.calculate = \"result = x + y\"; \ngr.insert(); \n \nvar evaluator = new GlideScopedEvaluator();\nevaluator.putVariable('x', 100);\nevaluator.putVariable('y', 200);\nevaluator.putVariable('result', null);\n \n// Now retrieve the result \ngr = new GlideRecord('x_app_table'); \ngr.addQuery('short_description','Calculate Addition'); \ngr.query(); \nif (gr.next()) { \n    evaluator.evaluateScript(gr, 'calculate', null);\n    gs.info(evaluator.getVariable('result'));\n}","description":"","output":"300"}]}]},"GlideScriptableInputStream":{"meta":{"has_constructor":false,"description":"A GlideScriptableInputStream object cannot be instantiated directly, but is used as an\n  opaque object which is used to connect an input stream from\n   <span class=\"keyword apiname\">GlideSysAttachment.getContentStream()</span> with other streaming APIs, such as\n  GlideTextReader, GlideDigest, and XMLDocument2. See the scoped GlideSysAttachment API for methods that return a GlideScriptableInputStream\n   object. The scoped GlideTextReader constructor requires a GlideScriptableInputStream object as an\n   input parameter.","example":""},"properties":{},"methods":[]},"GlideScriptedProcessor":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">ServiceNow</span>\n  processors are equivalent to Java servlets. Processors provide a customizable URL endpoint that can execute arbitrary server-side\n   JavaScript code and produce output such as TEXT, JSON, or HTML. The\n    <span class=\"keyword apiname\">GlideScriptedProcessor</span> APIs are used in processor scripts to access the the\n   processor (servlet) capabilities. There are no constructors for the\n    <span class=\"keyword apiname\">GlideScriptedProcessor</span> APIs. The methods are called using the global\n    variable<span class=\"keyword apiname\"> g_processor</span>.<br/><br/>A useful global variable, <span class=\"keyword apiname\">g_target</span>, is available in processor scripts. It\n   contains the table name extracted from the URL.<br/><br/>The URL to a processor has the format: <span class=\"ph filepath\">https://&lt;instance\n    name.servicenow.com&gt;/&lt;path endpoint&gt;.do?&lt;parameter endpoint&gt;=&lt;value&gt;</span> where\n   the path endpoint and parameter endpoint are defined on the processor form.","example":""},"properties":{},"methods":[{"name":"redirect","description":"Redirects to the specified URL.","params":[{"name":"url","type":"String","description":"the destination URL"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Do whatever processing you need and redirect to the homepage\ng_processor.redirect(\"/navpage.do\")","description":"","output":""}]},{"name":"writeJSON","description":"Encodes an object as a JSON string and writes it to the current URL.","params":[{"name":"o","type":"Object","description":"The object to encode to a JSON string."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var map = {\"key1\":\"value1\",\"key2\":\"value2\"};\ng_processor.writeJSON(map);","description":"","output":""}]},{"name":"writeOutput","description":"Writes the specified string to the current URL in the specified\n    character-encoding.","params":[{"name":"contentType","type":"String","description":"Sets the content type of the response sent to the client, if the response has\n                not been committed, and may include a character-encoding specification."},{"name":"s","type":"String","description":"The string to write."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var name = g_request.getParameter(\"name\");\ng_processor.writeOutput(\"text/plain\", \"Hello \" + name);","description":"","output":""}]},{"name":"writeOutput","description":"Writes the specified string to the current URL.","params":[{"name":"s","type":"String","description":"The string to write."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var name = g_request.getParameter(\"name\");\ng_processor.writeOutput(\"Hello \" + name);","description":"","output":""}]}]},"GlideSecureRandomUtil":{"meta":{"has_constructor":false,"description":"The scoped GlideSecureRandomUtil API provides methods for generating integers, long\n  values, and strings. There is no constructor for this class. Methods are accessed through the static object\n   GlideSecureRandomUtil. The GlideSecureRandomUtil class is available in both global and scoped\n   applications.","example":""},"properties":{},"methods":[{"name":"getSecureRandomInt","description":"Generates a pseudo-random integer.","params":[],"returns":{"type":"Number","description":"The pseudo-randomly generated integer."},"example":[{"code":"gs.info(GlideSecureRandomUtil.getSecureRandomInt());\n","description":"","output":""}]},{"name":"getSecureRandomIntBound","description":"Generates a pseudo-random integer between 0 (inclusive) and the bound (exclusive) value\n    that you pass into the method.","params":[{"name":"bound","type":"Number","description":"The bound value."}],"returns":{"type":"Number","description":"The pseudo-randomly generated integer."},"example":[{"code":"gs.info(GlideSecureRandomUtil.getSecureRandomIntBound(100));","description":"","output":""}]},{"name":"getSecureRandomLong","description":"Generates pseudo-random long value.","params":[],"returns":{"type":"Number","description":"The pseudo-randomly generated 64-bit integer."},"example":[{"code":"gs.info(GlideSecureRandomUtil.getSecureRandomLong());\n","description":"","output":""}]},{"name":"getSecureRandomString","description":"Generates a random alpha-numeric String with the specified length.","params":[{"name":"length","type":"Number","description":"The length of the string in number of characters."}],"returns":{"type":"String","description":"The randomly generated string."},"example":[{"code":"gs.info(GlideSecureRandomUtil.getSecureRandomString(12));","description":"","output":""}]}]},"GlideSecurityUtils":{"meta":{"has_constructor":false,"description":"Provides methods to work with URLs. Access these methods using the static object <span class=\"keyword apiname\">GlideSecurityUtils</span>. This\n      class is available in scoped and global scripts.","example":""},"properties":{},"methods":[{"name":"cleanURL","description":"Removes suspicious encoding to prevent reflected or DOM based cross site\n    scripting.","params":[{"name":"url","type":"String","description":"The URL to be checked."}],"returns":{"type":"String","description":"The URL stripped of problem elements."},"example":[{"code":"myurl='javascript%3Aalert(1)';\nvar clean=GlideSecurityUtils.cleanURL(myurl);\ngs.info(clean);","description":"","output":"null"}]},{"name":"enforceRelativeURL","description":"Removes the domain address from the URL, which leaves the page name and\n    parameters.","params":[{"name":"url","type":"String","description":"The URL to be turned into a relative URL."}],"returns":{"type":"String","description":"A relative URL."},"example":[{"code":"myurl='http://evildomain.com/test.do';\nrelativeURL=GlideSecurityUtils.enforceRelativeURL(myurl);\ngs.info(relativeURL);","description":"","output":"test.do"}]},{"name":"escapeScript","description":"Add escape characters to a script.<p>Adding escape characters to a script helps prevent cross-site scripting.</p>","params":[{"name":"script","type":"String","description":"The script to have escape characters added."}],"returns":{"type":"String","description":"The script with escape characters added."},"example":[{"code":"theScript=\"&lt;script&gt; alert(1)&lt;/script&gt;\";\nvar escapedScript=GlideSecurityUtils.escapeScript(theScript);\ngs.info(escapedScript);","description":"","output":"&lt;samp class=&quot;ph codeph&quot;&gt;&amp;amp;lt;script&amp;amp;gt; alert(1)&amp;amp;lt;/script&amp;amp;gt;&lt;/samp&gt;"}]},{"name":"isURLWhiteListed","description":"Check the specified URL against the system defined white list.","params":[{"name":"url","type":"String","description":"The URL to be checked against the URL white list."}],"returns":{"type":"Boolean","description":"Returns true if the specified URL is in the white list."},"example":[{"code":"myURL=\"http://evil.com/badscript.do\";\nisWhitelisted=GlideSecurityUtils.isURLWhiteListed(myURL);\ngs.info(isWhitelisted);","description":"","output":"false"}]}]},"GlideServletRequest":{"meta":{"has_constructor":false,"description":"The GlideServletRequest API is used in processor scripts. ServiceNow processors are equivalent to Java servlets. Processors provide a customizable URL\n   endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT,\n   JSON, or HTML. The <span class=\"keyword apiname\">GlideServletRequest</span> API is used in processor scripts to\n   access the <a class=\"extRef\" href=\"http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletRequest.html\" target=\"_blank\">HttpServletRequest</a> object. The\n    <span class=\"keyword apiname\">GlideServletRequest</span> object provides a subset of the HttpServletRequest APIs.\n   The methods are called using the global variable <span class=\"keyword apiname\">g_request</span>.<br/><br/>A useful global variable, <span class=\"keyword apiname\">g_target</span>, is available in processor scripts. It\n   contains the table name extracted from the URL.<br/><br/>The URL to a processor has the format: <span class=\"ph filepath\">https://&lt;instance\n    name.servicenow.com&gt;/&lt;path endpoint&gt;.do?&lt;parameter endpoint&gt;=&lt;value&gt;</span> where\n   the path endpoint and parameter endpoint are defined on the processor form.","example":""},"properties":{},"methods":[{"name":"getContentType","description":"Returns the MIME type of the body of the request.","params":[],"returns":{"type":"String","description":"The content type, returns null if the content type is not known."},"example":[{"code":"var contentType = g_request.getContentType();","description":"","output":""}]},{"name":"getHeader","description":"Returns the header value.","params":[{"name":"name","type":"String","description":"The name of the header to be retrieved."}],"returns":{"type":"String","description":"The header."},"example":[{"code":"var headerValue = g_request.getHeader(\"host\");","description":"","output":"demonightlyus.service-now.com"}]},{"name":"getHeaderNames","description":"Returns a comma-separated list of header names.","params":[],"returns":{"type":"String","description":"A comma-separated list of header names."},"example":[{"code":"var headerList = g_request.getHeaderNames();","description":"","output":"host,connection,cache-control,authorization,accept,user-agent,accept-encoding,accept-language,\ncookie,x-forwarded-proto,x-forwarded-host,x-forwarded-for"}]},{"name":"getHeaders","description":"Returns the header values.","params":[{"name":"name","type":"String","description":"Names of the headers to be retrieved."}],"returns":{"type":"String","description":"The header values."},"example":[{"code":"var headerValue = g_request.getHeaders(\"host\");","description":"","output":"demonightlyus.service-now.com"}]},{"name":"getParameter","description":"Returns the value of the parameter contained in the request URL.","params":[{"name":"name","type":"String","description":"The name of the parameter to be retrieved. This can be the parameter endpoint\n                from the processor form."}],"returns":{"type":"Strings","description":"The parameter value. Returns null if the parameter is not found."},"example":[{"code":"var name = g_request.getParameter(\"x_snc_custom_x_snc_name\");","description":"","output":""}]},{"name":"getParameterNames","description":"Returns a list of the parameter names found in the request URL.","params":[],"returns":{"type":"String","description":"A comma-separated list of parameter names."},"example":[{"code":"var paramList = g_request.getParameterNames();","description":"","output":""}]},{"name":"getQueryString","description":"Returns the query string from the request.","params":[],"returns":{"type":"String","description":"The query string."},"example":[{"code":"var daString = g_request.getQueryString();\ng_processor.writeOutput(\"The query string is: \" + daString);","description":"The code snippet is:","output":""}]}]},"GlideServletResponse":{"meta":{"has_constructor":false,"description":"The GlideServletResponse API is used in processor scripts. ServiceNow processors are equivalent to Java servlets. Processors provide a customizable URL\n   endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT,\n   JSON, or HTML. The <span class=\"keyword apiname\">GlideServletResponse</span> API is used in processor scripts to\n   access the <a class=\"extRef\" href=\"http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletResponse.html\" target=\"_blank\">HttpServletResponse</a> object. The\n    <span class=\"keyword apiname\">GlideServletResponse</span> object provides a subset of the HttpServletResponse\n   APIs. The methods are called using the global variable <span class=\"keyword apiname\">g_response</span>.<br/><br/>A useful global variable, <span class=\"keyword apiname\">g_target</span>, is available in processor scripts. It\n   contains the table name extracted from the URL.<br/><br/>The URL to a processor has the format: <span class=\"ph filepath\">https://&lt;instance\n    name.servicenow.com&gt;/&lt;path endpoint&gt;.do?&lt;parameter endpoint&gt;=&lt;value&gt;</span> where\n   the path endpoint and parameter endpoint are defined on the processor form.","example":""},"properties":{},"methods":[{"name":"sendRedirect","description":"Sends a temporary redirect to the client.","params":[{"name":"location","type":"String","description":"The URL to receive the response."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setContentType","description":"Sets the MIME type of the response","params":[{"name":"type","type":"String","description":"The MIME type."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_response.setContentType('text/html;charset=UTF-8');","description":"","output":""}]},{"name":"setHeader","description":"Sets a response header to the specified value.","params":[{"name":"key","type":"String","description":"Specifies the header."},{"name":"value","type":"String","description":"The value to be assigned to the header. If the header exists, it is over\n                written."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_response.setHeader(\"host\", \"demonightlyus.service-now.com\");","description":"","output":""}]},{"name":"setStatus","description":"Sets the status code for the response.","params":[{"name":"status","type":"Number","description":"The status to be set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// set the status to okay\ng_response.setStatus(200);","description":"","output":""}]}]},"GlideSession":{"meta":{"has_constructor":false,"description":"The scoped <span class=\"keyword apiname\">GlideSession</span> API provides a way to find information about\n  the current session. There are no constructors for creating an instance of a scoped GlideSession object. Instead,\n   use the <span class=\"keyword apiname\">getSession()</span> method of the scoped <span class=\"keyword apiname\">GlideSystem</span>\n   API.","example":""},"properties":{},"methods":[{"name":"getClientData","description":"Retrieves a session client value previously set with\n    <span class=\"keyword apiname\">putClientData()</span>.<p>This method is used in a client script to retrieve data values that were set by a server\n        script that used the <span class=\"keyword apiname\">putClientData()</span> method.</p>","params":[{"name":"paramName","type":"String","description":"Name of the client data to retrieve."}],"returns":{"type":"String","description":"The client data as a string."},"example":[{"code":"var session = gs.getSession();\nsession.putClientData('test1', 'Harry');\nvar clientData = session.getClientData('test1');\ngs.info(clientData);","description":"","output":"Harry"}]},{"name":"getClientIP","description":"Returns the client IP address.","params":[],"returns":{"type":"String","description":"The IP address."},"example":[{"code":"var session = gs.getSession();\nvar addr = session.getClientIP();\ngs.info(addr);","description":"","output":"50.59.164.97"}]},{"name":"getCurrentApplicationId","description":"Returns the application currently selected in the application picker.<p>This method requires admin privileges.</p>","params":[],"returns":{"type":"String","description":"The currently selected application."},"example":[{"code":"var session = gs.getSession();\nvar appID = session.getCurrentApplicationId();\ngs.info(appID);","description":"","output":"ce05b9f32b840200c5244f74b4da1501"}]},{"name":"getLanguage","description":"Returns the session's language code.","params":[],"returns":{"type":"String","description":"The session's language code."},"example":[{"code":"var session = gs.getSession();\nvar language = session.getLanguage();\ngs.info(language);","description":"","output":"en"}]},{"name":"getSessionToken","description":"Returns the session token.","params":[],"returns":{"type":"String","description":"The session token."},"example":[{"code":"var session = gs.getSession();\nvar token = session.getSessionToken();\ngs.info(token);","description":"","output":"4284b5372b840200c5244f74b4da15f2c3476cf7fcb6572afa4ef9d5e6d307a5fd9e1da7"}]},{"name":"getTimeZoneName","description":"Returns the name of the session's time zone.","params":[],"returns":{"type":"String","description":"The name of the session's time zone."},"example":[{"code":"var session = gs.getSession();\nvar zoneName = session.getTimeZoneName();\ngs.info(zoneName);","description":"","output":"US/Pacific"}]},{"name":"getUrlOnStack","description":"Returns the URL on the stack. Returns null if the stack is empty.","params":[],"returns":{"type":"String","description":"The URL. Returns null if the stack is empty."},"example":[{"code":"var session = gs.getSession();\nvar URL = session.getUrlOnStack();\ngs.info(URL);","description":"","output":"sys_app.do?sys_id=ce05b9f32b840200c5244f74b4da1501&amp;sysparm_goto_url=sys_app.do\n%3Fsys_id%3Dce05b9f32b840200c5244f74b4da1501"}]},{"name":"isImpersonating","description":"Returns true if the user is impersonating another user.","params":[],"returns":{"type":"Boolean","description":"Returns true if the user is impersonating another user; otherwise, returns\n                false."},"example":[{"code":"var isImpersonator = gs.getSession().isImpersonating();\ngs.info(isImpersonator);","description":"","output":""}]},{"name":"isInteractive","description":"Returns true if the session is interactive.<p>An interactive session is one that involves an end-user interacting with a user interface\n        that then retrieves information from a server. An example of this type of session is when a\n        user logs in using the log-in screen or uses a form to query a data store. A non-interactive\n        session is one that only involves programmatic interaction with a server such as a SOAP\n        request to retrieve data.</p>","params":[],"returns":{"type":"Boolean","description":"True if the session is interactive."},"example":[{"code":"var interActive = gs.getSession().isInteractive();\ngs.info(interActive);","description":"","output":""}]},{"name":"isLoggedIn","description":"Returns true if the user is logged in.","params":[],"returns":{"type":"Boolean","description":"True if the user is logged in."},"example":[{"code":"var session = gs.getSession();\nvar loggedIn = session.isLoggedIn();\ngs.info(loggedIn);","description":"","output":"true"}]},{"name":"putClientData","description":"Sets a session client value that can be retrieved with\n      <span class=\"keyword apiname\">getClientData()</span>. This method is used in a server side script that runs when\n    a form is created.","params":[{"name":"paramName","type":"String","description":"Name of the client data to set."},{"name":"paramValue","type":"String","description":"Value of the client data."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var session = gs.getSession();\nsession.putClientData('test1', 'Harry');\nvar clientData = session.getClientData('test1');\ngs.info(clientData);","description":"","output":"Harry"}]}]},"GlideSPScriptable":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Interact with data and perform record\n                operations in <span class=\"ph\">Service Portal</span>\n                widgets.</span> You access GlideSPScriptable methods by using the global <samp class=\"ph codeph\">$sp</samp> object.","example":""},"properties":{},"methods":[{"name":"canReadRecord","description":"Returns true if the user can read the specified GlideRecord.<p>If the record type is <samp class=\"ph codeph\">kb_knowledge</samp>, <samp class=\"ph codeph\">sc_cat_item</samp>, or\n          <samp class=\"ph codeph\">sc_category</samp>, the method checks if the user can view the item.</p>","params":[{"name":"gr","type":"GlideRecord","description":"The GlideRecord to check."}],"returns":{"type":"Boolean","description":"True if the record is valid and readable."},"example":[{"code":"//Server script\ndata.items = [];\ndata.userName = gs.getUserDisplayName();\nvar gr = new GlideRecord(\"sc_cat_item\");\ngr.query();\nwhile(gr.next() &amp;&amp; data.items.length &lt; 10) {\n    if ($sp.canReadRecord(gr)) {\n        data.items.push(gr.getDisplayValue(\"name\"));\n    }\n}\n\n//HTML template\n&lt;div class=\"panel panel-default\"&gt;\n    &lt;div class=\"panel-heading\"&gt;Hi, {{c.data.userName}}!&lt;/div&gt;\n    &lt;div class=\"panel-body\"&gt;\n        Here are some things you can order:\n        &lt;ul&gt;&lt;li ng-repeat=\"item in c.data.items\"&gt;{{item}}&lt;/li&gt;&lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/div&gt;","description":"Server script","output":""}]},{"name":"canReadRecord","description":"Returns true if the user can read the specified GlideRecord.<p>If the record type is <samp class=\"ph codeph\">kb_knowledge</samp>, <samp class=\"ph codeph\">sc_cat_item</samp>, or\n          <samp class=\"ph codeph\">sc_category</samp>, the method checks if the user can view the item.</p>","params":[{"name":"table","type":"String","description":"Name of the table to query."},{"name":"sysId","type":"String","description":"Sys_id of the record to query."}],"returns":{"type":"Boolean","description":"True if the record is valid and readable."},"example":[]},{"name":"canSeePage","description":"Returns true if the currently logged in user has permission to view the specified\n    page.<p>The system determines permission using roles and user criteria. For more information, see\n          <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/build/service-portal/concept/c_PublicAndRolePages.html\" target=\"_blank\">Configure page security by role</a>\n        and <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/build/service-portal/concept/user-criteria.html\" target=\"_blank\">User criteria for Service\n          Portal</a>.</p>","params":[{"name":"pageID","type":"String","description":"Page ID from the Pages [sp_page] table."}],"returns":{"type":"Boolean","description":"Flag that indicates whether the currently logged in user has permissions to\n                view the specified page. Values include:<ul class=\"ul\" id=\"GSPS-canSeePage_S__ul_r2f_dyq_s3b\">\n                  <li class=\"li\">true: The user can view the page.</li>\n\n                  <li class=\"li\">false: Either the user cannot view the page, the given pageID is not valid, or\n                    the user is not logged in.</li>\n\n                </ul>"},"example":[{"code":"GlideSPScriptable.canSeePage(\"kb_view2\")","description":"This example adds a condition to the Knowledge menu item in the SP Header Menu to only show\n        the menu item to users who have permission to view the kb_view2 page.","output":""}]},{"name":"getCatalogItem","description":"Returns a model and view model for a <samp class=\"ph codeph\">sc_cat_item</samp> or\n      <samp class=\"ph codeph\">sc_cat_item_guide</samp>.<p>This method is deprecated. Use the <span class=\"keyword apiname\">getCatalogItem(String sysId, Boolean\n          isOrdering)</span> method instead. This method calls the <span class=\"keyword apiname\">getCatalogItem(String\n          sysId, Boolean isOrdering)</span> method with the <span class=\"keyword parmname\">isOrdering</span>\n        parameter set to false, which means that write roles security checking is done.</p><p>This method is a quick way to get the data necessary to render and order a catalog item\n        using <samp class=\"ph codeph\">&lt;sp-model /&gt;</samp>. If you just need to get a catalog item to show its\n        picture or name, use GlideRecord to query the <samp class=\"ph codeph\">sc_cat_item</samp> table.</p>","params":[{"name":"sysId","type":"String","description":"The sys_id of the catalog item (<samp class=\"ph codeph\">sc_cat_item</samp>) or order guide\n                  (<samp class=\"ph codeph\">sc_cat_item_guide</samp>)."}],"returns":{"type":"Object","description":"An object containing the catalog item variable model, view, sections, pricing,\n                and client scripts."},"example":[{"code":"// Server script\n(function() {\n    var sys_id = $sp.getParameter(\"sys_id\")\n    data.catItem = $sp.getCatalogItem(sys_id);\n})();\n\n// Client script\nfunction($http, spUtil) {\n    var c = this;\n    var submitting = false;\n    c.getIt = function() {\n        if (submitting) return;\n        $http.post(spUtil.getURL('sc_cat_item'), c.data.catItem).success(function(response) {\n            if (response.answer) {\n                c.req = response.answer;\n                c.req.page = c.req.table == 'sc_request' ? 'sc_request' : 'ticket';\n            }\n        });\n    }\n}\n\n//SCSS\n.img-bg {\n    padding: 5px;\n    background-color: $brand-primary;\n}\n\n.img-responsive {\n    margin: 0 auto;\n}\n\n.cat-icon {\n    display: block;\n    margin: -40px auto 0;\n}\n\n// HTML template\n&lt;div class=\"col-sm-4\"&gt;\n  &lt;div class=\"panel panel-default\"&gt;\n    &lt;div class=\"img-bg\"&gt;\n      &lt;img ng-src=\"{{::data.catItem.picture}}\" class=\"img-responsive\" /&gt;\n    &lt;/div&gt;\n    &lt;span class=\"cat-icon fa fa-stack fa-lg fa-3x hidden-xs\"&gt;\n      &lt;i class=\"fa fa-circle fa-stack-2x text-success\"&gt;&lt;/i&gt;\n      &lt;i class=\"fa fa-desktop fa-stack-1x fa-inverse\"&gt;&lt;/i&gt;\n    &lt;/span&gt;\n    &lt;div class=\"panel-body\"&gt;\n      &lt;p class=\"lead text-center\"&gt;{{::data.catItem.name}}&lt;/p&gt;\n      &lt;ul class=\"list-unstyled\"&gt;\n        &lt;li class=\"text-center\" ng-if=\"::data.catItem.price\"&gt;${Price}: {{::data.catItem.price}}&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;sp-model form-model=\"::data.catItem\" mandatory=\"mandatory\"&gt;&lt;/sp-model&gt;\n      &lt;p ng-if=\"c.req\" class=\"text-center text-success\"&gt;\n        ${Request created!} &lt;a href=\"?id={{c.req.page}}&amp;table={{c.req.table}}&amp;sys_id={{c.req.sys_id}}\"&gt;{{c.req.number}}&lt;/a&gt;\n      &lt;/p&gt;\n      &lt;button ng-if=\"!c.req\" class=\"btn btn-default btn-block\" ng-click=\"c.getIt()\"&gt;${Get it}&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;","description":"","output":""}]},{"name":"getCatalogItem","description":"Returns a model and view model for a <samp class=\"ph codeph\">sc_cat_item</samp> or\n      <samp class=\"ph codeph\">sc_cat_item_guide</samp>.","params":[{"name":"sysId","type":"String","description":"The sys_id of the catalog item (<samp class=\"ph codeph\">sc_cat_item</samp>) or order guide\n                  (<samp class=\"ph codeph\">sc_cat_item_guide</samp>)."},{"name":"isOrdering","type":"Boolean","description":"When true, uses create roles security check. When false, uses write roles\n                security check.<p class=\"p\">When users are ordering an item or have it in their cart,  check\n                  using the create roles.</p>\n<p class=\"p\">If users are not ordering, for example, somebody is\n                  looking at a requested item to see the variables associated with that item, then\n                  check using the write roles.</p>"}],"returns":{"type":"Object","description":"An object containing the catalog item variable model, view, sections, pricing,\n                and client scripts."},"example":[]},{"name":"getDisplayValue","description":"Returns the display value of the specified field (if it exists and has a value) from\n    either the widget's <samp class=\"ph codeph\">sp_instance</samp> or the <samp class=\"ph codeph\">sp_portal</samp>\n    record.","params":[{"name":"fieldName","type":"String","description":"Name of the field"}],"returns":{"type":"String","description":"The display value from either the <samp class=\"ph codeph\">sp_instance</samp> or\n                  <samp class=\"ph codeph\">sp_portal</samp> record."},"example":[{"code":"//Server script\n(function() {\n    data.title = $sp.getDisplayValue(\"title\");\n    data.catalog = $sp.getDisplayValue(\"sc_catalog\");\n})();\n\n//HTML template\n&lt;div&gt;\n    &lt;h1&gt;sp_instance.title: {{::data.title}}&lt;/h1&gt;\n    &lt;h1&gt;sp_portal.sc_catalog: {{::data.catalog}}&lt;/h1&gt;\n&lt;/div&gt;","description":"","output":""}]},{"name":"getField","description":"Returns information about the specified field in the specified GlideRecord.","params":[{"name":"gr","type":"GlideRecord","description":"The GlideRecord to check"},{"name":"fieldName","type":"String","description":"The field to find information for"}],"returns":{"type":"Object","description":"An object containing the field's label, value,  displayValue,  and type.\n                Returns null if the GlideRecord of field name are not valid, or if the field is not\n                readable."},"example":[]},{"name":"getFields","description":"Checks the specified list of field names, and returns an array of valid field\n    names.","params":[{"name":"gr","type":"GlideRecord","description":"The GlideRecord to check"},{"name":"field Names","type":"String","description":"A comma separated list of field names."}],"returns":{"type":"Array","description":"An array of valid fields."},"example":[]},{"name":"getFieldsObject","description":"Checks the specified list of field names and returns an object of valid field\n    names.","params":[{"name":"gr","type":"GlideRecord","description":"The GlideRecord to check"},{"name":"field Names","type":"String","description":"A comma separated list of field names."}],"returns":{"type":"Object","description":"An object containing valid field names."},"example":[]},{"name":"getForm","description":"Return the form.","params":[{"name":"tableName","type":"String","description":"The name of the table"},{"name":"sysId","type":"String","description":"The form's sys_id"}],"returns":{"type":"Object","description":"The form"},"example":[]},{"name":"getKBCategoryArticles","description":"Returns KB articles in the specified category and its subcategories.<p>To avoid performance issues, do not use this method to return articles in large categories\n        or articles with inline images. Instead, use <span class=\"keyword apiname\">getKBArticleSummaries()</span>.</p>","params":[{"name":"sys_id","type":"String","description":"Sys_id of the KB article category."},{"name":"limit","type":"Number","description":"Maximum number of KB articles returned."}],"returns":{"type":"Array","description":"The articles within the category and its subcategories with: <ul class=\"ul\" id=\"GSPS-getKBCategoryArticles_S_N__ul_qxn_1hh_xbb\">\n                  <li class=\"li\">A <span class=\"ph uicontrol\">workflow_state</span> of\n                    <span class=\"ph uicontrol\">published</span>.</li>\n\n                  <li class=\"li\">A <span class=\"ph uicontrol\">valid_to</span> date greater than or equal to the current\n                    date. </li>\n\n                </ul>"},"example":[{"code":"//Server script \n(function() {\n    data.kbs = $sp.getKBCategoryArticles(\"0ac1bf8bff0221009b20ffffffffffec\", 5);\n})();\n\n//HTML template\n&lt;div&gt;\narticles: {{::data.kbs}}\n&lt;/div&gt;\n","description":"","output":""}]},{"name":"getKBCategoryArticleSummaries","description":"Returns Knowledge Base article summaries in the specified category and its\n    subcategories.","params":[{"name":"sys_id","type":"String","description":"Sys_id of the KB article category."},{"name":"limit","type":"Number","description":"Maximum number of KB articles returned."},{"name":"maxChars","type":"Number","description":"Maximum number of characters to return from the article text. For full article\n                text, set the value to <samp class=\"ph codeph\">-1</samp>."}],"returns":{"type":"Array","description":"The articles within the category and its subcategories with: <ul class=\"ul\" id=\"GSPS-getKBCategoryArticleSummaries_S_N_N__ul_qxn_1hh_xbb\">\n                  <li class=\"li\">A <span class=\"ph uicontrol\">workflow_state</span> of\n                    <span class=\"ph uicontrol\">published</span>.</li>\n\n                  <li class=\"li\">A <span class=\"ph uicontrol\">valid_to</span> date greater than or equal to the current\n                    date. </li>\n\n                </ul>"},"example":[{"code":"//Server script \n(function() {\n    data.summary = $sp.getKBCategoryArticleSummaries(\"0ac1bf8bff0221009b20ffffffffffec\", 5, 200);\n})();\n\n//HTML template\n&lt;div&gt;\narticles: {{::data.summary}}\n&lt;/div&gt;\n","description":"","output":""}]},{"name":"getKBCount","description":"Returns the number of articles in the defined Knowledge Base.","params":[{"name":"sys_id","type":"String","description":"Sys_id of a Knowledge Base record."}],"returns":{"type":"Number","description":"Number of knowledge articles in the defined Knowledge Base with: <ul class=\"ul\" id=\"GSPS-getKBCount_S__ul_kfs_bhh_xbb\">\n                  <li class=\"li\">A <span class=\"ph uicontrol\">workflow_state</span> of\n                    <span class=\"ph uicontrol\">published</span>.</li>\n\n                  <li class=\"li\">A <span class=\"ph uicontrol\">valid_to</span> date greater than or equal to the current\n                    date. </li>\n\n                </ul>"},"example":[{"code":"//Server script \n(function() {\n    data.count = $sp.getKBCount(\"a7e8a78bff0221009b20ffffffffff17\");\n})();\n\n//HTML template\n&lt;div&gt;\narticles: {{::data.count}}\n&lt;/div&gt;\n","description":"","output":""}]},{"name":"getListColumns","description":"Returns a list of the specified table's columns in the specified view.","params":[{"name":"tableName","type":"String","description":"Name of the table"},{"name":"view","type":"String","description":"The view by which to filter the columns"}],"returns":{"type":"Object","description":"An object containing the column names."},"example":[]},{"name":"getMenuHREF","description":"Returns the (?id=) portion of the URL based on the sp_menu type.","params":[{"name":"page","type":"GlideRecord","description":"The page"}],"returns":{"type":"String","description":"The href portion of the URL."},"example":[]},{"name":"getMenuItems","description":"Returns an array of menu items for the specified instance.","params":[{"name":"sysId","type":"String","description":"sysId of the instance"}],"returns":{"type":"Array","description":"Menu items for the specified instance"},"example":[]},{"name":"getParameter","description":"Returns the value of the specified parameter.","params":[{"name":"name","type":"String","description":"The name of the key from the query string or post body."}],"returns":{"type":"Object","description":"Returns the specified parameter as an object. Returns null if there is no\n                request, JSON request, or widget."},"example":[]},{"name":"getPortalRecord","description":"Returns the portal record from the Service Portals [sp_portal] table.","params":[],"returns":{"type":"GlideRecord","description":"The portal record for the current portal from the Service Portals [sp_portal]\n                table."},"example":[{"code":"//Server script\n(function() {\n    var portalGr = $sp.getPortalRecord();\n    data.logo = portalGr.getDisplayValue(\"logo\");\n    data.homepage = portalGr.getDisplayValue(\"homepage.id\");\n})();\n\n//HTML template\n&lt;div&gt;\n    &lt;img ng-src=\"{{::c.data.logo}}\" /&gt;\n    &lt;a href=\"?id={{::c.data.homepage}}\"&gt;Click here to go home&lt;/a&gt;\n&lt;/div&gt;","description":"","output":""}]},{"name":"getRecord","description":"If parameters are provided, returns the GlideRecord identified by the provided table\n    and Sys ID. If no parameters are provided, returns the record identified by the current URL.","params":[{"name":"table","type":"String","description":"Optional. The table of the record to return. If no parameters are included,\n                returns the table and Sys ID identified by the current URL."},{"name":"sys_id","type":"String","description":"Optional. The Sys ID of the record to return. If no parameters are included,\n                returns the record identified by the current URL."}],"returns":{"type":"GlideRecord","description":"If parameters are provided, returns the record identified by the provided table\n                and Sys ID. <p class=\"p\">If no parameters are provided, returns the record identified by the\n                  current URL. </p>\n<p class=\"p\">Returns null if the widget is embedded by another widget, or\n                  if the record for the provided parameters is not found.</p>"},"example":[{"code":"//Server script \n(function(){ \nvar gr = $sp.getRecord(); \ndata.tableLabel = gr.getLabel(); \n})(); \n\n//HTML template \n&lt;div class=\"panel-heading\"&gt; \n&lt;h4 class=\"panel-title\"&gt;${{{data.tableLabel}} details}&lt;/h4&gt; \n&lt;/div&gt;","description":"","output":""}]},{"name":"getRecordDisplayValues","description":"Copies display values for the specified fields into the data parameter.","params":[{"name":"data","type":"Object","description":"The display values for the specified fields are copied to this object."},{"name":"from","type":"GlideRecord","description":"The GlideRecord to process."},{"name":"names","type":"String","description":"A comma-separated list of field names."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getRecordElements","description":"For the specified fields, copies the element's name, display value, and value into the\n    data parameter.","params":[{"name":"data","type":"Object","description":"The element's name, display value, and value for the specified fields are\n                copied to this object."},{"name":"from","type":"GlideRecord","description":"The GlideRecord to process."},{"name":"names","type":"String","description":"A comma-separated list of field names."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getRecordValues","description":"Copies values for the specified field names from the GlideRecord into the data\n    parameter.","params":[{"name":"data","type":"Object","description":"The value for the specified fields are copied to this object."},{"name":"from","type":"GlideRecord","description":"The GlideRecord to process."},{"name":"names","type":"String","description":"A comma-separated list of field names."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getRecordVariables","description":"Returns <span class=\"ph\">Service Catalog</span>\n    variables associated with a record in String format.","params":[{"name":"gr","type":"GlideRecord","description":"The record to retrieve <span class=\"ph\">Service Catalog</span> variables\n                for. Must be a record with <span class=\"ph\">Service Catalog</span> variables\n                defined, such as a requested item [sc_req_item] record or an incident submitted\n                through a record producer."},{"name":"includeNilResponses","type":"Boolean","description":"Optional. If true, the API includes variables with no user-defined value."}],"returns":{"type":"String","description":"<span class=\"ph\">Service Catalog</span>\n                variables associated with the record."},"example":[{"code":"//Server script \n(function() {\nvar itemsGR = new GlideRecord(\"sc_req_item\");\nitemsGR.get('585d1bc44f4f13008a959a211310c77d');\n\t\ndata.scVars = $sp.getRecordVariables(itemsGR);\n\n})();\n\n//HTML template\n&lt;div&gt;\nRequested item variables: {{::data.scVars}}\n&lt;/div&gt;","description":"","output":"Requested item variables: [\n  {\n    &quot;display_value&quot;:&quot;MetroPCS&quot;,\n    &quot;name&quot;:&quot;carrier&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;585d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Allocated carrier&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;metropcs&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;Unlimited&quot;,\n    &quot;name&quot;:&quot;data_plan&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;d05d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Monthly data allowance&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;unlimited&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;12 Months&quot;,\n    &quot;name&quot;:&quot;duration&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;d85d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Contract duration&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;twelve_months&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;Slate&quot;,\n    &quot;name&quot;:&quot;color&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;545d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Color&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;slate&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {&quot;display_value&quot;:&quot;64GB&quot;,\n    &quot;name&quot;:&quot;storage&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;d45d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Storage&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;sixtyfour&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  }\n]"}]},{"name":"getRecordVariablesArray","description":"Returns an array of <span class=\"ph\">Service Catalog</span> variables associated\n    with a record.","params":[{"name":"gr","type":"GlideRecord","description":"The record to retrieve <span class=\"ph\">Service Catalog</span> variables\n                for. Must be a record with <span class=\"ph\">Service Catalog</span> variables\n                defined, such as a requested item [sc_req_item] record or an incident submitted\n                through a record producer."},{"name":"includeNilResponses","type":"Boolean","description":"Optional. If true, the API includes variables with no user-defined value."}],"returns":{"type":"Object","description":"Array of <span class=\"ph\">Service Catalog</span> variables\n                associated with the record."},"example":[{"code":"//Server script \n(function() {\nvar itemsGR = new GlideRecord(\"sc_req_item\");\nitemsGR.get('585d1bc44f4f13008a959a211310c77d');\n\t\ndata.scVars = $sp.getRecordVariablesArray(itemsGR);\n\n})();\n\n//HTML template\n&lt;div&gt;\nRequested item variables: {{::data.scVars}}\n&lt;/div&gt;","description":"","output":"Requested item variables: [\n  {\n    &quot;display_value&quot;:&quot;MetroPCS&quot;,\n    &quot;name&quot;:&quot;carrier&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;585d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Allocated carrier&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;metropcs&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;Unlimited&quot;,\n    &quot;name&quot;:&quot;data_plan&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;d05d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Monthly data allowance&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;unlimited&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;12 Months&quot;,\n    &quot;name&quot;:&quot;duration&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;d85d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Contract duration&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;twelve_months&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;Slate&quot;,\n    &quot;name&quot;:&quot;color&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;545d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Color&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;slate&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {&quot;display_value&quot;:&quot;64GB&quot;,\n    &quot;name&quot;:&quot;storage&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;d45d1bc44f4f13008a959a211310c77c&quot;,\n    &quot;label&quot;:&quot;Storage&quot;,\n    &quot;type&quot;:&quot;5&quot;,\n    &quot;value&quot;:&quot;sixtyfour&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  }\n]"}]},{"name":"getStream","description":"Gets the activity stream for the specified record. This method works on tables that\n    extend the task table.","params":[{"name":"table","type":"String","description":"The table name"},{"name":"sysID","type":"String","description":"The sys_id of the record"}],"returns":{"type":"Object","description":"If a table extending the task table is specified, contains the display_value,\n                sys_id, short_description,number, entries, user_sys_id, user_full_name, user_login,\n                label, table, and journal_fields properties; otherwise contains the table and sys_id\n                  properties.<div class=\"note note\"><span class=\"notetitle\">Note:</span> The user_login property contains the User ID of the current user.\n                  The user_sys_id and iser_full_name properties reference the creator of the queried\n                  record.</div>"},"example":[]},{"name":"getUserInitials","description":"Returns the user's initials.","params":[],"returns":{"type":"String","description":"The user's initials"},"example":[]},{"name":"getValue","description":"Returns the named value of the JSON request, instance, or portal.","params":[{"name":"name","type":"String","description":"Name of the  JSON request, instance, or portal."}],"returns":{"type":"Object","description":"Value of the specified parameter. Null if the specified entity does not exist\n                or has no such parameter."},"example":[{"code":"//Server script\n(function() {\n    data.title = $sp.getValue(\"title\");\n    data.catalog = $sp.getValue(\"sc_catalog\");\n})();\n\n//HTML templage\n&lt;div&gt;\n    &lt;h1&gt;sp_instance.title: {{::data.title}}&lt;/h1&gt;\n    &lt;h1&gt;sp_portal.sc_catalog: {{::data.catalog}}&lt;/h1&gt;\n&lt;/div&gt;","description":"","output":""}]},{"name":"getValues","description":"Copies values from the request or instance to the data parameter.","params":[{"name":"data","type":"Object","description":"Receives the parameter values."},{"name":"names","type":"String","description":"Comma-separated string of field names."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getVariablesArray","description":"Returns an array of <span class=\"ph\">Service Catalog</span> variables associated\n    with the record in the URL.<p>For example, if the URL includes the parameters\n          <samp class=\"ph codeph\">id=form&amp;table=sc_req_item&amp;sys_id=832e9620db4f330083766b984b9619cf</samp>,\n        the API returns the variables associated with the given record in the Requested item\n        [sc_req_item] table. Must be a record with <span class=\"ph\">Service Catalog</span> variables\n        defined, such as a requested item [sc_req_item] record or an incident submitted through a\n        record producer.</p>","params":[{"name":"includeNilResponses","type":"Boolean","description":"Optional. If true, the API includes variables with no user-defined value."}],"returns":{"type":"Object","description":"Array of variables associated with the table."},"example":[{"code":"//Server script \n(function() {\nvar rec = $sp.getRecord();\t\ndata.scVars = $sp.getVariablesArray();\n})();\n\n//HTML template\n&lt;div\nCurrent record variables: {{::data.scVars}}\n&lt;/div&gt;","description":"","output":"Current record variables: [\n  {\n    &quot;display_value&quot;:&quot;unlimited&quot;,\n    &quot;name&quot;:&quot;data&quot;,&quot;visible_summary&quot;:\n    true,&quot;id&quot;:&quot;472e5620db4f330083766b984b96198a&quot;,\n    &quot;label&quot;:&quot;Data&quot;,\n    &quot;type&quot;:&quot;6&quot;,\n    &quot;value&quot;:&quot;unlimited&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  },\n  {\n    &quot;display_value&quot;:&quot;Black&quot;,\n    &quot;name&quot;:&quot;color&quot;,\n    &quot;visible_summary&quot;:true,\n    &quot;id&quot;:&quot;c72e5620db4f330083766b984b96198a&quot;,\n    &quot;label&quot;:&quot;Color&quot;,\n    &quot;type&quot;:&quot;6&quot;,\n    &quot;value&quot;:&quot;Black&quot;,\n    &quot;visible_standalone&quot;:true,\n    &quot;visible_guide&quot;:true\n  }\n]"}]},{"name":"getWidget","description":"Gets a widget by id or sys_id, executes that widget's server script using the provided\n    options, then returns the widget model.","params":[{"name":"sysID","type":"String","description":"The widget sys_id or widget_id"},{"name":"options","type":"Object","description":"An object to pass to the widget's server script. Refer to this object as\n                  <samp class=\"ph codeph\">options</samp> in your server script.<div class=\"note note\"><span class=\"notetitle\">Note:</span> Any options passed into this\n                  function will only be available in the embedded widget's server script on the\n                    <span class=\"ph uicontrol\">first execution</span> of that script. Any subsequent calls into\n                  the server script from the embedded widget will not contain the object properties\n                  passed in.</div>"}],"returns":{"type":"Object","description":"A widget model to be used with sp-widget."},"example":[{"code":"//Server script\ndata.myWidget = $sp.getWidget('widget_id', {p1: param1, p2: param2});\n\n//HTML\n&lt;sp-widget widget=\"c.data.myWidget\"&gt;&lt;/sp-widget&gt;","description":"","output":""}]},{"name":"mapUrlToSPUrl","description":"Transforms a URL requesting a list or form in the platform UI into the URL of the\n    corresponding <samp class=\"ph codeph\">id=list</samp> or <samp class=\"ph codeph\">id=form</samp> Service Portal\n    page.<p>Use this method to perform tasks such as redirecting a user after login to the correct\n        Service Portal page when they request a platform UI form or list URL. Note that the\n          <samp class=\"ph codeph\">id=list</samp> and <samp class=\"ph codeph\">id=form</samp> page targets are not\n          customizable.<div class=\"note note\"><span class=\"notetitle\">Note:</span> Table, sys_id, and sysparm_query values are preserved from the original\n          URL; sysparm_view is not.</div></p>","params":[{"name":"url","type":"String","description":"Platform UI URL"}],"returns":{"type":"String","description":"Transformed Service Portal URL.<p class=\"p\">If the passed-in URL does not request a list\n                  or a form in the platform UI, a null value is returned.</p>"},"example":[{"code":"GlideSPScriptable().mapUrlToSPUrl(\"http://demo.service-now.com/task_list.do?sysparm_userpref_module=1523b8d4c611227b00be8216ec331b9a&amp;sysparm_query=assigned_to=javascript:getMyAssignments()&amp;sysparm_clear_stack=true\"))","description":"List example","output":"id=list&amp;table=task&amp;filter=assigned_to=javascript:getMyAssignments()&amp;sys_id=&amp;v="},{"code":"GlideSPScriptable().mapUrlToSPUrl(\"incident.do?sys_id=12bc12bc12bc12bc12bc12bc12bc12bc\")","description":"Form example","output":"id=form&amp;table=incident&amp;filter=&amp;sys_id=12bc12bc12bc12bc12bc12bc12bc12bc&amp;v="}]}]},"GlideSPSearchAnalytics":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Generate search analytics from custom\n                  <span class=\"ph\">Service Portal</span> search\n                widgets.</span> <span class=\"ph\">By default, the Search Events [sys_search_event] and\n                    Search Source Events [sys_search_source_event] tables collect search data from\n                    base system search widgets.</span> However, custom search widgets do not benefit from this feature. Use this API in the server\n      script of custom search widgets in scoped or global environments to send search data to the\n      suggestions and analytics tables. Generate <span class=\"ph\">relevant search suggestions for your users and\n                    monitor search analytics to understand what your users are searching for and\n                    whether they're finding what they need.</span><br/><br/>This API collects the following search data:<ul class=\"ul\" id=\"GlideSPSearchAnalyticsAPI__ul_yr4_cxd_mhb\">\n        <li class=\"li\">Searched terms</li>\n\n        <li class=\"li\">Rank of clicked items</li>\n\n        <li class=\"li\">Filters used to refine search results</li>\n\n      </ul><br/><br/><span class=\"ph\">Search analytics and suggestions is a <span class=\"ph\">Now Platform</span> feature. For\n                    more information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/search-administration/concept/search-suggestions.html\" target=\"_blank\">Search analytics and\n                      suggestions</a>.</span>","example":""},"properties":{},"methods":[{"name":"publish","description":"Sends search data to the Search Events [sys_search_events] and Search Source Events\n    [sys_search_source_events] tables.","params":[{"name":"payload","type":"String","description":"JSON payload in String format containing search data to send to the Search\n                Events [sys_search_events] and Search Source Events [sys_search_source_events]\n                tables. Structure the payload according to the type of search data you would like to\n                collect. <ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_smd_smf_mhb\">\n                  <li class=\"li\">Collect data when a user searches for a term:\n                    Requires\n                    a payload containing these key-value pairs.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_kcw_2qz_mhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys ID of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys ID of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">results_per_source</samp>: Array. Number of results returned\n                        from each search source.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_hd2_crz_mhb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">source_id</samp>: String. Sys ID of the search source record\n                            from the Search Sources [sp_search_source] table.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">number_of_results</samp>: Number. Results returned from the\n                            query for the specific search source.</li>\n\n                        </ul>\n</li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">refinement_occurred</samp>: Boolean. True if the\n                user filtered the search results; otherwise false. </span></li>\n\n                    </ul>\n\n                  </li>\n\n                  <li class=\"li\">Collect data when a user refines their search results: Requires a payload\n                    containing these key-value pairs.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_oqs_yrz_mhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys ID of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys ID of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">refinement_occurred</samp>: Boolean. True if the\n                user filtered the search results; otherwise false. </span></li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">Collect the rank of the search result that a user selects. Requires a payload\n                    containing these key-value pairs.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_ckt_2sz_mhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys ID of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">click_rank</samp>: Number. Rank of the item a user\n                clicks. For example, if the user clicks the third item in a list of search results,\n                the value is <samp class=\"ph codeph\">3</samp>.</span></li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">Collect data when a user searches for a term and collect the rank of the\n                    search result that a user clicks: Requires a payload containing these key-value\n                      pairs.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_m3k_vyl_rhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys ID of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys ID of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">results_per_source</samp>: Array. Number of results returned\n                        from each search source.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_n3k_vyl_rhb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">source_id</samp>: Sys Id of the search source record from\n                            the Search Sources [sp_search_source] table in String format.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">number_of_results</samp>: Number of results returned from\n                            the query for the specific search source.</li>\n\n                        </ul>\n</li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">click_rank</samp>: Number. Rank of the item a user\n                clicks. For example, if the user clicks the third item in a list of search results,\n                the value is <samp class=\"ph codeph\">3</samp>.</span></li>\n\n                    </ul>\n\n                  </li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var searchObject = new GlideSPSearchAnalytics();\nvar directSearchData = searchObject.publish(\"{  \n   query:'how do i get a new computer',\n   portal_id:'81b75d3147032100ba13a5554ee4902b',\n   page_id:'87466b63c3223100c8b837659bba8feb',\n   results_per_source:[  \n      {  \n         source_id:'bf2c4c15b3a31300e64be12b86a8dcb7',\n         number_of_results:3,\n\n      },\n      {  \n         source_id:'c96eb1686721220023c82e08f585efff',\n         number_of_results:5\n      }\n   ],\n   refinement:false\n}\"\n);","description":"This example passes direct search data to the search analytics tables.","output":""},{"code":"//client script\nvar payload = {\n    query: this.data.query,\n    portal_id: this.data.portalID,\n    page_id: this.data.pageID,\n    results_per_source: getSearchSources(),\n    refinement_occurred: false\n}\nvar payloadObject = {\n\t\t\taction: \"TestAction\",\n\t\t\tpayload: payload\n};\nc.server.get(payloadObject);\n\n//server script\nif (input &amp;&amp; input.action === \"TestAction\") {\n\tinput.action = \"\";\n\tvar textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));\n\treturn ;\n}\nnew GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));","description":"This example dynamically collects direct search data from a custom search widget and passes\n        it to the search analytics tables.","output":""}]}]},"GlideStringUtil":{"meta":{"has_constructor":false,"description":"Provides string handling methods. Access these methods using the static object <span class=\"keyword apiname\">GlideStringUtil</span>. This class\n      is available in scoped and global scripts.","example":""},"properties":{},"methods":[{"name":"dotToUnderBar","description":"Replaces periods with underscore characters.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with periods replaced with underscores."},"example":[{"code":"var filename=\"../../../../../../etc/passwd\";\ncleanFilename=GlideStringUtil.dotToUnderBar(filename);\ngs.info(cleanFilename);","description":"","output":"__/__/__/__/__/__/etc/passwd"}]},{"name":"escapeAllQuotes","description":"Remove quotes from a string.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with quotes removed."},"example":[{"code":"mystring=\"let's escape some quotes\";\nescapeQuote=GlideStringUtil.escapeAllQuotes(mystring);\ngs.info(escapeQuote);","description":"","output":"lets escape some quotes"}]},{"name":"escapeForHomePage","description":"Use for home pages to replace problem characters with escape characters.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"A string with problem characters replaced with escape characters."},"example":[{"code":"mystring=\"&lt;test&gt; string \\n to escape\";\nescapedString=GlideStringUtil.escapeForHomePage(mystring);\ngs.info(escapedString);","description":"","output":"%3ctest%3e string \\n to escape"}]},{"name":"escapeHTML","description":"Use to replace illegal characters with their escape codes.<p>Using this method removes illegal characters that might cause the UI to render improperly,\n        or trigger a client side attack such as JavaScript or HTML injection.</p>","params":[{"name":"htmlString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with illegal characters replaced with their escape codes."},"example":[{"code":"mydata='\"&lt;&gt;&amp;';\nmydata=GlideStringUtil.escapeHTML(mydata);\ngs.info(mydata);","description":"","output":"&lt;samp class=&quot;ph codeph&quot;&gt; &amp;amp;quot;&amp;amp;lt;&amp;amp;gt;&amp;amp;amp;&lt;/samp&gt;"}]},{"name":"escapeNonPrintable","description":"Replaces non-printable characters with their printable notation.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with non-printable characters replaced with printable\n                notation."},"example":[{"code":"mystring=\"test \\x09 non \\x00 printable \\x07 chars\";\nescapedString=GlideStringUtil.escapeNonPrintable(mystring);\ngs.info(escapedString);","description":"","output":"test \\t non \\u0000 printable \\u0007 chars"}]},{"name":"escapeQueryTermSeparator","description":"Replaces query term separators \"^\" with their escape sequence \"^^\".","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"A string with query term separators replaced with the escape\n                characters."},"example":[{"code":"myquery=\"test^Test\";\nescapedQuery=GlideStringUtil.escapeQueryTermSeparator(myquery);\ngs.info(escapedQuery);","description":"","output":"test^^Test"}]},{"name":"escapeTicks","description":"Replace quotes with escape characters by adding a backslash before each\n    quote.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with backslashes added before quotes."},"example":[{"code":"mystring=\"let's try escapeTicks\";\nescaped=GlideStringUtil.escapeTicks(mystring);\ngs.info(escaped); ","description":"","output":"let\\'s try escapeTicks"}]},{"name":"getHTMLValue","description":"Use to replace illegal HTML characters into HTML notation.<p>Using this method removes illegal characters that might cause the UI to render improperly,\n        or trigger a client side attack such as JavaScript or HTML injection.</p>","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with illegal characters replaced with HTML notation."},"example":[{"code":"mydata='&amp;';\nhtmlvalue=GlideStringUtil.getHTMLValue(mydata);\ngs.info(htmlvalue);","description":"","output":"&lt;samp class=&quot;ph codeph&quot;&gt;&amp;amp;amp;&lt;/samp&gt;"}]},{"name":"getNumeric","description":"Extract numeric characters from a string.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"A string containing only numeric characters."},"example":[{"code":"mystring='123 test 456 String 789 cleaning';\nonlyNumeric=GlideStringUtil.getNumeric(mystring);\ngs.info(onlyNumeric); ","description":"","output":"123456789"}]},{"name":"isBase64","description":"Returns true if the specified string is a valid base64 string.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"Boolean","description":"True if the specified string is in valid base64 format."},"example":[{"code":"//(adding a \"*\" to corrupt the base64 format)\nbase64=\"GethdTYehdtshetB*\";\nisValid=GlideStringUtil.isBase64(base64);\ngs.info(isValid);","description":"","output":"false"}]},{"name":"isEligibleSysID","description":"Returns true if the specified string is in valid sys ID format.<p>The sys ID format is a sequence of 32 hexadecimal characters where all the characters are\n        in the range [0-9, a-f, A-F].</p>","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"Boolean","description":"True when the specified string is in the valid sys ID format."},"example":[{"code":"sysID=\"62826bf03710200044e0bfc8bcbe5df1\";\nisElig=GlideStringUtil.isEligibleSysID(sysID);\ngs.info(isElig);","description":"","output":"true"}]},{"name":"newLinesToBreaks","description":"Replaces the new line character, \"/n\", with a break code \"<br/>\".","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with new line characters replaced with HTML break code."},"example":[{"code":"mystring=\"new line break \\n, this is after the break\";\nreplaceNewLine=GlideStringUtil.newLinesToBreaks(mystring);\ngs.info(replaceNewLine); ","description":"","output":"&lt;samp class=&quot;ph codeph&quot;&gt;new line break &amp;lt;br/&amp;gt;, this is after the break&lt;/samp&gt;"}]},{"name":"normalizeWhitespace","description":"Replaces carriage returns, line feeds, and tabs with spaces, and then removes leading,\n    trailing, and duplicate spaces.","params":[{"name":"sourceString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"The string with carriage returns, line feeds, and tabs replaced with spaces,\n                and then  leading, trailing, and duplicate spaces removed."},"example":[{"code":"mystring=\"test with \\n (new line) and \\t (tabulation)\";\nnormalizedString=GlideStringUtil.normalizeWhitespace(mystring);\ngs.info(normalizedString);","description":"","output":"test with (new line) and (tabulation)"}]},{"name":"unEscapeHTML","description":"Replaces escape characters with their respective character.<p>This method replaces these escape characters, <samp class=\"ph codeph\">&amp;lt; &amp;gt: &amp;nbsp;\n          &amp;amp; &amp;quote;</samp>.</p>","params":[{"name":"htmlString","type":"String","description":"String to process."}],"returns":{"type":"String","description":"String with the escape characters replaced."},"example":[{"code":"mydata='&amp;quot;&amp;lt;&amp;gt;&amp;amp;';\nunescaped=GlideStringUtil.unEscapeHTML(mydata);\ngs.info(unescaped);","description":"","output":"&lt;samp class=&quot;ph codeph&quot;&gt;&quot;&amp;lt;&amp;gt;&amp;amp;&lt;/samp&gt;"}]}]},"GlideSysAttachment":{"meta":{"has_constructor":true,"description":"The GlideSysAttachment API provides a way to handle attachments. Content is returned as a string, not as a byte array when <span class=\"keyword apiname\">getContent()</span> is\n   called.<br/><br/>Content is returned as a GlideScriptableInputStream object when\n    <span class=\"keyword apiname\">getContentStream()</span> is called. The GlideScriptableInputStream contains the\n   actual bytes not converted into a String.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideSysAttachment class.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"copy","description":"Copies attachments from the source record to the target record.","params":[{"name":"sourceTable","type":"String","description":"Name of the table with the attachments to be copied."},{"name":"sourceID","type":"String","description":"The source table's sysID."},{"name":"targetTable","type":"String","description":"Name of the table to have the attachments added."},{"name":"targetID","type":"String","description":"The target table's sysID."}],"returns":{"type":"String","description":"Array of sysIDs of the attachments that were copied."},"example":[]},{"name":"deleteAttachment","description":"Deletes the specified attachment.","params":[{"name":"attachmentID","type":"String","description":"The attachment's sysID."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getContent","description":"Returns the attachment content as a string.","params":[{"name":"sysAttachment","type":"GlideRecord","description":"The attachment record."}],"returns":{"type":"String","description":"The attachment contents as a string. Returns up to 5 MB of data."},"example":[]},{"name":"getContentBase64","description":"Returns the attachment content as a string with base64 encoding.","params":[{"name":"sysAttachment","type":"GlideRecord","description":"The attachment record."}],"returns":{"type":"String","description":"The attachment contents as a string with base64 encoding. Returns up to 5 MB of\n                data."},"example":[]},{"name":"getContentStream","description":"Returns a GlideScriptableInputStream object given the sysID of an\n    attachment.","params":[{"name":"sysID","type":"String","description":"The attachment sysID."}],"returns":{"type":"GlideScriptableInputStream","description":"A stream that contains the attachment content."},"example":[]},{"name":"write","description":"Inserts an attachment for the specified record.","params":[{"name":"record","type":"GlideRecord","description":"The record to which the attachment is to be attached."},{"name":"fileName","type":"String","description":"The attachment's file name."},{"name":"contentType","type":"String","description":"The attachment's content type."},{"name":"content","type":"String","description":"The attachment content."}],"returns":{"type":"String","description":"The attachment's sysID. Returns null if the attachment was not added."},"example":[]},{"name":"writeBase64","description":"Inserts an attachment for the specified record using base64 encoded\n    content.","params":[{"name":"gr","type":"GlideRecord","description":"The record to which the attachment is to be attached."},{"name":"fileName","type":"String","description":"The attachment's file name."},{"name":"contentType","type":"String","description":"The attachment's content type."},{"name":"content","type":"String","description":"The attachment content in base64 format."}],"returns":{"type":"String","description":"The sysID of the attachment created."},"example":[]},{"name":"writeContentStream","description":"Inserts an attachment using the input stream.","params":[{"name":"gr","type":"GlideRecord","description":"The record to which the attachment is to be attached."},{"name":"fileName","type":"String","description":"The attachment's file name."},{"name":"contentType","type":"String","description":"The attachment's content type."},{"name":"content","type":"GlideScriptableInputStream","description":"The attachment content."}],"returns":{"type":"String","description":"The sysID of the attachment created."},"example":[]}]},"GlideSysListControl":{"meta":{"has_constructor":true,"description":"The scoped GlideSysListControl class allows you to determine if the New or Edit buttons\n  are displayed. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideSysListControl object.","params":[{"name":"tableName","type":"String","description":"Name of the table"}],"returns":{"type":"","description":""},"example":[]},{"name":"getControlID","description":"Returns the sys_id for the control.","params":[],"returns":{"type":"String","description":"sys_id of the control"},"example":[{"code":"var sysListCtrl = new GlideSysListControl(\"incident\");\nvar controlID = sysListCtrl.getControlID();\ngs.info(controlID);","description":"","output":"91a807a60a0a3c74012113e28b47ca2e"}]},{"name":"isOmitEditButton","description":"Returns true if the edit button is not displayed.","params":[],"returns":{"type":"Boolean","description":"True when the edit button is not displayed."},"example":[{"code":"var sysListCtrl = new GlideSysListControl(\"incident\");\nvar isOmitted = sysListCtrl.isOmitEditButton();\ngs.info(isOmitted);","description":"","output":"false"}]},{"name":"isOmitNewButton","description":"Returns true when the New button is not displayed.","params":[],"returns":{"type":"Boolean","description":"True when the new button is not displayed."},"example":[{"code":"var sysListCtrl = new GlideSysListControl(\"incident\");\nvar isOmitted = sysListCtrl.isOmitNewButton();\ngs.info(isOmitted);","description":"","output":"false"}]}]},"GlideSystem":{"meta":{"has_constructor":false,"description":"The scoped GlideSystem (referred to by the variable name 'gs' in any server-side\n  JavaScript) API provides a number of convenient methods to get information about the system, the\n  current logged in user, etc. Many of the GlideSystem methods facilitate the easy inclusion of dates in query ranges, and are\n   most often used in filters and reporting.","example":""},"properties":{},"methods":[{"name":"addErrorMessage","description":"Adds an error message for the current session.","params":[{"name":"message","type":"Object","description":"The message to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.include(\"PrototypeServer\");\n  var ValidatePasswordStronger = Class.create();\n  ValidatePasswordStronger.prototype = {\n       process : function() {\n          var user_password = request.getParameter(\"user_password\");\n          var min_len = 8;\n          var rules = \"Password must be at least \" + min_len + \n             \" characters long and contain a digit, an uppercase letter, and a lowercase letter.\";\n          if (user_password.length() &lt; min_len) {\n             gs.addErrorMessage(\"TOO SHORT: \" + rules);\n             return false;\n          }\n          var digit_pattern = new RegExp(\"[0-9]\", \"g\");\n          if (!digit_pattern.test(user_password)) {\n             gs.addErrorMessage(\"DIGIT MISSING: \" + rules);\n             return false;\n          }\n          var upper_pattern = new RegExp(\"[A-Z]\", \"g\");\n          if (!upper_pattern.test(user_password)) {\n             gs.addErrorMessage(\"UPPERCASE MISSING: \" + rules);\n             return false;\n          }\n          var lower_pattern = new RegExp(\"[a-z]\", \"g\");\n          if (!lower_pattern.test(user_password)) {\n             gs.addErrorMessage(\"LOWERCASE MISSING: \" + rules);\n             return false;\n          }\n          return true; // password is OK\n       }\n  }","description":"","output":""}]},{"name":"addInfoMessage","description":"Adds an info message for the current session. This method is not supported for\n    asynchronous business rules.","params":[{"name":"message","type":"Object","description":"An info message object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {\n  var start = current.u_date1.getGlideObject().getNumericValue();\n  var end = current.u_date2.getGlideObject().getNumericValue();\n  if (start &gt; end) {\n    gs.addInfoMessage('start must be before end');\n    current.u_date1.setError('start must be before end');\n    current.setAbortAction(true);\n  }\n}","description":"","output":""}]},{"name":"base64Decode","description":"Returns an ASCII string from the specified base64 string.","params":[{"name":"source","type":"String","description":"A base64 encoded string."}],"returns":{"type":"String","description":"The decoded string."},"example":[]},{"name":"base64Encode","description":"Creates a base64 string from the specified string.","params":[{"name":"source","type":"String","description":"The string to be encoded."}],"returns":{"type":"String","description":"The base64 string."},"example":[]},{"name":"beginningOfLastMonth","description":"Returns the date and time for the beginning of last month in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of last month, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfLastWeek","description":"Returns the date and time for the beginning of last week in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of last week, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfNextMonth","description":"Returns the date and time for the beginning of next month in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of next month, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfNextWeek","description":"Returns the date and time for the beginning of next week in GMT.","params":[],"returns":{"type":"String","description":"The GMT beginning of next week, in the format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"beginningOfNextYear","description":"Returns the date and time for the beginning of next year in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of next year, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfThisMonth","description":"Returns the date and time for the beginning of this month in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of this month, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfThisQuarter","description":"Returns the date and time for the beginning of this quarter in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of this quarter, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfThisWeek","description":"Returns the date and time for the beginning of this week in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of this week, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"beginningOfThisYear","description":"Returns the date and time for the beginning of this year in GMT.","params":[],"returns":{"type":"String","description":"GMT beginning of this year, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"dateGenerate","description":"Generates a date and time for the specified date in GMT.","params":[{"name":"date","type":"String","description":"Format: yyyy-mm-dd"},{"name":"range","type":"String","description":"Start, end, or a time in the 24 hour format hh:mm:ss."}],"returns":{"type":"String","description":"A date and time in the format yyyy-mm-dd hh:mm:ss. If range is start, the\n                returned value is yyyy-mm-dd 00:00:00; If range is end the return value is\n                yyyy-mm-dd 23:59:59."},"example":[]},{"name":"daysAgo","description":"Returns the date and time for a specified number of days ago.","params":[{"name":"days","type":"Number","description":"Integer number of days"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[{"code":"function contractNoticeDue() {\n    var gr = new GlideRecord(\"contract\");\n    gr.addQuery(\"u_contract_status\", \"Active\");\n    gr.query();\n    while (gr.next()) {\n        if ((gr.u_termination_date &lt;= gs.daysAgo(-90)) &amp;&amp; (gr.u_contract_duration == \"Long\")) {\n            gr.u_contract_status = \"In review\";\n        } \n        else if ((gr.u_termination_date &lt;= gs.daysAgo(-50)) &amp;&amp; (gr.u_contract_duration == \"Medium\")) {\n            gr.u_contract_status = \"In review\";\n        } \n        else if ((gr.u_termination_date &lt;= gs.daysAgo(-10)) &amp;&amp; (gr.u_contract_duration == \"Short\")) {\n            gr.u_contract_status = \"In review\";\n        }\n    }\n    gr.update();\n}","description":"","output":""}]},{"name":"daysAgoEnd","description":"Returns the date and time for the end of the day a specified number of days\n    ago.","params":[{"name":"days","type":"Number","description":"Integer number of days"}],"returns":{"type":"String","description":"GMT end of the day in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"daysAgoStart","description":"Returns the date and time for the beginning of the day a specified number of days\n    ago.","params":[{"name":"days","type":"String","description":"Integer number of days"}],"returns":{"type":"String","description":"GMT start of the day in the format yyyy-mm-dd hh:mm:ss"},"example":[{"code":"var gr = new GlideRecord('sysapproval_approver');\ngr.addQuery('state', 'requested');\ngr.addQuery('sys_updated_on', '&lt;', gs.daysAgoStart(5));\ngr.query();","description":"","output":""}]},{"name":"debug","description":"Writes a debug message to the system log.","params":[{"name":"message","type":"String","description":"The log message with place holders for any variable arguments."},{"name":"param1","type":"Object","description":"(Optional) First variable argument."},{"name":"param2","type":"Object","description":"(Optional) Second variable argument."},{"name":"param3","type":"Object","description":"(Optional) Third variable argument."},{"name":"param4","type":"Object","description":"(Optional) Fourth variable argument."},{"name":"param5","type":"Object","description":"(Optional) Fifth variable argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.debug(\"This is a debug message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.debug(\"This is a debug message from {0}.{1}\", myFirstName, myLastName);","description":"","output":""}]},{"name":"endOfLastMonth","description":"Returns the date and time for the end of last month in GMT.","params":[],"returns":{"type":"String","description":"GMT end of last month, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfLastWeek","description":"Returns the date and time for the end of last week in GMT.","params":[],"returns":{"type":"String","description":"GMT end of last week, in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfLastYear","description":"Returns the date and time for the end of last year in GMT.","params":[],"returns":{"type":"String","description":"GMT in format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfNextMonth","description":"Returns the date and time for the end of next month in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfNextWeek","description":"Returns the date and time for the end of next week in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfNextYear","description":"Returns the date and time for the end of next year in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfThisMonth","description":"Returns the date and time for the end of this month in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfThisQuarter","description":"Returns the date and time for the end of this quarter in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfThisWeek","description":"Returns the date and time for the end of this week in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"endOfThisYear","description":"Returns the date and time for the end of this year in GMT.","params":[],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"error","description":"Writes an error message to the system log.<p>This method accepts up to five variable arguments (varargs) in the message using the Java\n        MessageFormat placeholder replacement pattern.</p>","params":[{"name":"message","type":"String","description":"The log message with place holders for any variable arguments."},{"name":"param1","type":"Object","description":"(Optional) First variable argument."},{"name":"param2","type":"Object","description":"(Optional) Second variable argument."},{"name":"param3","type":"Object","description":"(Optional) Third variable argument."},{"name":"param4","type":"Object","description":"(Optional) Fourth variable argument."},{"name":"param5","type":"Object","description":"(Optional) Fifth variable argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.error(\"This is an error message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.error(\"This is an error message from {0}.{1}\", myFirstName, myLastName);","description":"","output":""}]},{"name":"eventQueue","description":"Queues an event for the event manager.","params":[{"name":"name","type":"String","description":"Name of the event being queued."},{"name":"instance","type":"Object","description":"GlideRecord object, such as \"current\"."},{"name":"parm1","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"parm2","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"queue","type":"String","description":"Name of the queue."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) {\n    gs.eventQueue('incident.commented', current, gs.getUserID(), gs.getUserName());\n}","description":"","output":""}]},{"name":"eventQueueScheduled","description":"Queues an event for the event manager at a specified date and time.","params":[{"name":"name","type":"String","description":"Name of the event being queued."},{"name":"instance","type":"Object","description":"GlideRecord object, such as \"current\"."},{"name":"parm1","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"parm2","type":"String","description":"(Optional) Saved with the instance if specified."},{"name":"expiration","type":"Object","description":"Date and time to process this event.."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"executeNow","description":"Executes a job for a scoped application.<p>You can only use this method on a job in the same application as the script calling this\n        method.</p>","params":[{"name":"job","type":"GlideRecord","description":"The job to be run."}],"returns":{"type":"String","description":"Returns the sysID of the scheduled job. Returns null if the job is global."},"example":[]},{"name":"generateGUID","description":"Generates a GUID that can be used when a unique identifier is required.","params":[],"returns":{"type":"String","description":"A 32-character hexadecimal GUID."},"example":[{"code":"personalId = gs.generateGUID();\ngs.info(personalId);","description":"","output":"af770511ff013100e04bfffffffffff6"}]},{"name":"getCallerScopeName","description":"Gets the caller scope name; returns null if there is no caller.","params":[],"returns":{"type":"String","description":"The caller's scope name, or null if there is no caller."},"example":[{"code":"var Scopea = Class.create(); \n \nScopea.prototype = { \n    initialize: function() { \n    }, \n \n    callerScope: function() { \n        var scopeb = new app_scope_b.Scopeb(); \n        return scopeb.callerscope(); \n    }, \n \n    type: 'Scopea' \n}","description":"This example shows two script includes that are set to Accessible from all application\n        scopes. One script include is created within app_scope_a.","output":""},{"code":"var Scopeb = Class.create(); \n \nScopeb.prototype = { \n    initialize: function() { \n        this._constructorCallerScope = gs.getCallerScopeName(); \n    }, \n \n    callerscope: function() { \n        return gs.getCallerScopeName(); \n    }, \n \n    getConstructorCallerScope: function() { \n        return this._constructorCallerScope; \n    }, \n \n    type: 'Scopeb' \n}","description":"This example shows another script include created within app_scope_b.","output":""},{"code":"gs.info(new Scopea().getCallerScopeName());","description":"This script can be used within scope app_scope_a to get the scope name of the caller—in\n        this case app_scope_b.","output":""}]},{"name":"getCssCacheVersionString","description":"Gets a string representing the cache version for a CSS file.","params":[],"returns":{"type":"String","description":"The CSS cache version."},"example":[{"code":"var verStr = gs.getCssCacheVersionString();\ngs.info(verStr);","description":"","output":"_d82979516f0171005be8883e6b3ee4cf&amp;theme="}]},{"name":"getCurrentApplicationId","description":"Gets the ID of the current application as set using the Application Picker.","params":[],"returns":{"type":"String","description":"The current application's sys_id, or global in none is set."},"example":[{"code":"var currentId = gs.getCurrentApplicationId();\ngs.info(currentId);","description":"","output":"04936cb16f30b1005be8883e6b3ee4e0"}]},{"name":"getCurrentScopeName","description":"Gets the name of the current scope.","params":[],"returns":{"type":"String","description":"The current scope name."},"example":[{"code":"var currentScope = gs.getCurrentScopeName();\ngs.info(currentScope);","description":"","output":""}]},{"name":"getErrorMessages","description":"Returns the list of error messages for the session that were added by\n      <span class=\"keyword apiname\">addErrorMessage()</span>.","params":[],"returns":{"type":"String","description":"List of error messages"},"example":[]},{"name":"getEscapedMessage","description":"Retrieves a message from UI messages that has HTML special characters, and replaces\n    them with escape sequences. For example, <samp class=\"ph codeph\">&amp;</samp> becomes\n      <samp class=\"ph codeph\">&amp;amp;</samp>.","params":[{"name":"id","type":"String","description":"ID of the message."},{"name":"args","type":"Array","description":"Optional. List of strings or other values defined by java.text.MessageFormat,\n                which allows you to produce language-neutral messages for display to users."}],"returns":{"type":"String","description":"The UI message with HTML special characters replaced with escape\n                sequences."},"example":[{"code":"var myMessage = gs.getEscapedMessage(\"Hello {0}\", [\"mom\"]);","description":"","output":""}]},{"name":"getMessage","description":"Retrieves a message from UI messages.","params":[{"name":"id","type":"String","description":"The ID of the message."},{"name":"args","type":"Array","description":"(Optional) a list of strings or other values defined by\n                java.text.MessageFormat,\n                which allows you to produce language-neutral messages for display to users."}],"returns":{"type":"String","description":"The UI message."},"example":[{"code":"var my_message = '${gs.getMessage(\"This is a message.\")}'; \nalert(my_message);","description":"","output":""}]},{"name":"getProperty","description":"Gets the value of a Glide property. If the property is not found, returns an alternate\n    value.","params":[{"name":"key","type":"String","description":"The key for the property whose value should be returned."},{"name":"alt","type":"Object","description":"(Optional) Alternate object to return if the property is not found."}],"returns":{"type":"String","description":"The value of the Glide property, or the alternate object defined above."},"example":[{"code":"var attachment_link = gs.getProperty('glide.servlet.uri');\ngs.info(attachment_link);","description":"","output":"https://instance.service-now.com/"}]},{"name":"getSession","description":"Gets a reference to the current Glide session.","params":[],"returns":{"type":"String","description":"A reference for the current session."},"example":[{"code":"if (!gs.hasRole(\"admin\") &amp;&amp; !gs.hasRole(\"user_admin\") &amp;&amp; gs.getSession().isInteractive()) {\n  current.addQuery(\"active\", \"true\");\n}","description":"","output":""}]},{"name":"getSessionID","description":"Retrieves the GlideSession session ID.","params":[],"returns":{"type":"String","description":"The session ID."},"example":[{"code":"var myUserObject = gs.getSessionID();\ngs.info(myUserObject);","description":"","output":""}]},{"name":"getSessionToken","description":"This method is no longer available. Instead, use\n      <samp class=\"ph codeph\">gs.getSession().getSessionToken()</samp>.","params":[],"returns":{"type":"String","description":"The session token."},"example":[]},{"name":"getTimeZoneName","description":"Returns the name of the time zone associated with the current user.<p>This method has been deprecated. Instead, use the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideSessionGetTimeZoneName&amp;v=madrid\" target=\"_blank\">getTimeZoneName()</a> method in the <span class=\"keyword apiname\">GlideSession</span> API.</p>","params":[],"returns":{"type":"String","description":"The time zone name."},"example":[{"code":"gs.info(gs.getTimeZoneName());","description":"","output":""}]},{"name":"getUrlOnStack","description":"Gets the current URI for the session.","params":[],"returns":{"type":"String","description":"The URI."},"example":[{"code":"gs.info(gs.getUrlOnStack());","description":"","output":""}]},{"name":"getUser","description":"Returns a reference to the scoped GlideUser object for the current user.<p>See <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork&amp;id=c_GlideUserAPI\" title=\"The GlideUser API provides access to information about the current user and current user roles. Using the GlideUser API avoids the need to use the slower GlideRecord queries to get user information.\">GlideUser</a> for a list of available methods.</p>","params":[],"returns":{"type":"GlideUser","description":"Reference to a scoped user object."},"example":[{"code":"var myUserObject = gs.getUser();","description":"","output":""}]},{"name":"getUserDisplayName","description":"Gets the display name of the current user.","params":[],"returns":{"type":"String","description":"The name field of the current user. Returns Abel Tuter, as opposed to\n                abel.tuter."},"example":[{"code":"gs.info(gs.getUserDisplayName());","description":"","output":""}]},{"name":"getUserID","description":"Gets the sys_id of the current user.","params":[],"returns":{"type":"String","description":"The sys_id of the current user."},"example":[{"code":"gs.info(gs.getUserID());","description":"","output":""}]},{"name":"getUserName","description":"Gets the user name, or user id, of the current user.","params":[],"returns":{"type":"String","description":"The user name of the current user."},"example":[{"code":"gs.info(gs.getUserName());","description":"","output":""}]},{"name":"hasRole","description":"Determines if the current user has the specified role.","params":[{"name":"role","type":"Object","description":"The role to check."}],"returns":{"type":"Boolean","description":"True if the user had the role. Returns true for users with the administrator\n                role."},"example":[{"code":"if (!gs.hasRole(\"admin\") &amp;&amp; !gs.hasRole(\"groups_admin\")  &amp;&amp; gs.getSession().isInteractive()) {\n  var qc = current.addQuery(\"u_hidden\", \"!=\", \"true\"); //cannot see hidden groups... \n  qc.addOrCondition(\"sys_id\", \"javascript:getMyGroups()\"); //...unless in the hidden group\n  gs.info(\"User has admin and groups admin roles\");\n}\nelse {\n  gs.info(\"User does not have both admin and groups admin roles\");\n}","description":"","output":""}]},{"name":"hoursAgo","description":"Returns the date and time for a specified number of hours ago.","params":[{"name":"hours","type":"Number","description":"Integer number of hours"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[{"code":"if (current.operation() == 'insert') {\n // If no due date was specified, calculate a default\n if (current.due_date == '') {\n \n  if (current.urgency == '1') {\n   // Set due date to 4 hours ahead of current time\n   current.due_date = gs.hoursAgo(-4);\n  }\n \n  if (current.urgency == '2') {\n   // Set due date to 2 days ahead of current time\n   current.due_date = gs.daysAgo(-2);\n  }\n \n  if (current.urgency == '3') {\n   // Set due date to 7 days ahead of current time\n   current.due_date = gs.daysAgo(-7);\n  }\n }\n}","description":"","output":""}]},{"name":"hoursAgoEnd","description":"Returns the date and time for the end of the hour a specified number of hours\n    ago.","params":[{"name":"hours","type":"Number","description":"Integer number of hours"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"hoursAgoStart","description":"Returns the date and time for the start of the hour a specified number of hours\n    ago.","params":[{"name":"hours","type":"Number","description":"Integer number of hours"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"include","description":"Provides a safe way to call from the sandbox, allowing only trusted scripts to be\n    included.","params":[{"name":"name","type":"String","description":"The name fo the script to include."}],"returns":{"type":"Boolean","description":"True if the include worked."},"example":[{"code":"gs.include(\"PrototypeServer\");","description":"This example gets the PrototypeServer in the current script context.","output":""}]},{"name":"info","description":"Writes an info message to the system log.","params":[{"name":"message","type":"String","description":"The log message with place holders for any variable arguments."},{"name":"param1","type":"Object","description":"(Optional) First variable argument."},{"name":"param2","type":"Object","description":"(Optional) Second variable argument."},{"name":"param3","type":"Object","description":"(Optional) Third variable argument."},{"name":"param4","type":"Object","description":"(Optional) Fourth variable argument."},{"name":"param5","type":"Object","description":"(Optional) Fifth variable argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.info(\"This is an info message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.info(\"This is an info message from {0}.{1}\", myFirstName, myLastName);","description":"","output":""}]},{"name":"isDebugging","description":"Determines if debugging is active for a specific scope.","params":[],"returns":{"type":"Boolean","description":"True if either session debugging is active or the log level is set to debug for\n                the specified scope."},"example":[{"code":"gs.debug(\"This is a log message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.debug(\"This is a log message from {0}.{1}\", myFirstName, myLastName);\ngs.info(gs.isDebugging());","description":"","output":""}]},{"name":"isInteractive","description":"Checks if the current session is interactive. An example of an interactive session is\n    when a user logs in normally. An example of a non-interactive session is using a SOAP request to\n    retrieve data.","params":[],"returns":{"type":"Boolean","description":"True if the session is interactive."},"example":[{"code":"if (!gs.hasRole(\"admin\") &amp;&amp; gs.getSession().isInteractive()) {\n    var qc1 = current.addQuery('u_group',\"\");\n    var gra = new GlideRecord('sys_user_grmember');\n    gra.addQuery('user', gs.getUserID());\n    gra.query();\n    while (gra.next()) {\n        qc1.addOrCondition('u_group', gra.group);\n    }\n}","description":"","output":""}]},{"name":"isLoggedIn","description":"Determines if the current user is currently logged in.","params":[],"returns":{"type":"Boolean","description":"True if the current user is logged in."},"example":[{"code":"gs.info(gs.isLoggedIn());","description":"","output":""}]},{"name":"isMobile","description":"You can determine if a request comes from a mobile device.<p>This method can be used in UI action conditions and business rules.</p>","params":[],"returns":{"type":"Boolean","description":"True if the request comes from a mobile device; otherwise, false."},"example":[{"code":"if (gs.isMobile())\n  gs.info(\"submitted from mobile UI\");\n else \n   gs.info(\"NOT submitted from mobile UI\");","description":"","output":""}]},{"name":"minutesAgoEnd","description":"Returns the date and time for the end of the minute a specified number of minutes\n    ago.","params":[{"name":"minutes","type":"Number","description":"Integer number of minutes"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"minutesAgoStart","description":"Returns the date and time for the start of the minute a specified number of minutes\n    ago.","params":[{"name":"minutes","type":"Number","description":"Integer number of minutes"}],"returns":{"type":"String","description":"GMT in the format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"monthsAgo","description":"Returns the date and time for a specified number of months ago.","params":[{"name":"months","type":"Number","description":"Integer number of months"}],"returns":{"type":"String","description":"GMT on today's date of the specified month, in the format yyyy-mm-dd\n                hh:mm:ss"},"example":[]},{"name":"monthsAgoStart","description":"Returns the date and time for the start of the month a specified number of months\n    ago.","params":[{"name":"months","type":"Number","description":"Integer number of months"}],"returns":{"type":"String","description":"GMT start of the month the specified number of months ago, in the format\n                yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"nil","description":"Queries an object and returns true if the object is null, undefined, or contains an\n    empty string.","params":[{"name":"o","type":"Object","description":"The object to be checked."}],"returns":{"type":"Boolean","description":"True if the object is null, undefined, or contains an empty string; otherwise,\n                returns false."},"example":[{"code":"var gr = new GlideRecord();\ngs.info(gs.nil(gr));","description":"","output":""}]},{"name":"quartersAgoEnd","description":"Returns the date and time for the last day of the quarter for a specified number of\n    quarters ago.","params":[{"name":"quarters","type":"Number","description":"Integer number of quarters"}],"returns":{"type":"String","description":"GMT end of the quarter that was the specified number of quarters ago, in the\n                format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"quartersAgoStart","description":"Returns the date and time for the first day of the quarter for a specified number of\n    quarters ago.","params":[{"name":"quarters","type":"Number","description":"Integer number of quarters"}],"returns":{"type":"String","description":"GMT end of the month that was the specified number of quarters ago, in the\n                format yyyy-mm-dd hh:mm:ss"},"example":[]},{"name":"setProperty","description":"Sets the specified key to the specified value if the property is within the script's\n    scope.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Care should be taken when setting system properties (sys_properties) using this method\n          as it causes a system-wide cache flush. Each flush can cause system degradation while the\n          caches rebuild. If a value must be updated often, it should not be stored as a system\n          property. In general, you should only place values in the sys_properties table that do not\n          frequently change.</div></p>","params":[{"name":"key","type":"String","description":"The key for the property to be set."},{"name":"value","type":"String","description":"The value of the property to be set."},{"name":"description","type":"String","description":"A description of the property."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.setProperty(\"glide.foo\",\"bar\",\"foo\");\ngs.info(gs.getProperty(\"glide.foo\"));","description":"","output":"bar"}]},{"name":"setRedirect","description":"Sets the redirect URI for this transaction, which then determines the next page the\n    user will see.","params":[{"name":"o","type":"Object","description":"URI object or URI string to set as the redirect"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.setRedirect(\"com.glideapp.servicecatalog_cat_item_view.do?sysparm_id=d41ce5bac611227a0167f4bf8109bf70&amp;sysparm_user=\" \n+ current.sys_id + \"&amp;sysparm_email=\" + current.email)","description":"","output":""}]},{"name":"tableExists","description":"Determines if a database table exists.","params":[{"name":"name","type":"String","description":"Name of the table to check for existence."}],"returns":{"type":"Boolean","description":"True if the table exists. False if the table was not found."},"example":[{"code":"gs.info(gs.tableExists('incident'));","description":"","output":""}]},{"name":"urlDecode","description":"Replaces UTF-8 encoded characters with ASCII characters.","params":[{"name":"url","type":"String","description":"A string with UTF-8 percent (%) encoded characters."}],"returns":{"type":"String","description":"A string with encoded characters replaced with ASCII characters."},"example":[]},{"name":"urlEncode","description":"Encodes non-ASCII characters, unsafe ASCII characters, and spaces so the returned\n    string can be used on the Internet. Uses UTF-8 encoding. Uses percent (%) encoding.","params":[{"name":"url","type":"String","description":"The string to be encoded."}],"returns":{"type":"String","description":"A string with non-ASCII characters, unsafe ASCII characters, and spaces\n                encoded."},"example":[]},{"name":"warn","description":"Writes a warning message to the system log.","params":[{"name":"message","type":"String","description":"The log message with place holders for any variable arguments."},{"name":"param1","type":"Object","description":"(Optional) First variable argument."},{"name":"param2","type":"Object","description":"(Optional) Second variable argument."},{"name":"param3","type":"Object","description":"(Optional) Third variable argument."},{"name":"param4","type":"Object","description":"(Optional) Fourth variable argument."},{"name":"param5","type":"Object","description":"(Optional) Fifth variable argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"gs.warn(\"This is a warning\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.warn(\"This is a warning from {0}.{1}\", myFirstName, myLastName);","description":"","output":""}]},{"name":"xmlToJSON","description":"Takes an XML string and returns a JSON object.","params":[{"name":"xmlString","type":"String","description":"The XML string to be converted."}],"returns":{"type":"Object","description":"A JSON object representing the XML string. Null if unable to process the XML\n                string."},"example":[{"code":"var jsonObject = gs.xmlToJSON(xmlString);","description":"","output":""}]},{"name":"yearsAgo","description":"Returns a date and time for a certain number of years ago.","params":[{"name":"years","type":"Number","description":"An integer number of years"}],"returns":{"type":"String","description":"GMT beginning of the year that is the specified number of years ago, in the\n                format yyyy-mm-dd hh:mm:ss."},"example":[]},{"name":"yesterday","description":"Returns yesterday's time (24 hours ago).","params":[],"returns":{"type":"String","description":"GMT for 24 hours ago, in the format yyyy-mm-dd hh:mm:ss"},"example":[]}]},"GlideTableHierarchy":{"meta":{"has_constructor":true,"description":"The Scoped GlideTableHierarchy API provides methods for handling information about table\n  relationships. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideTableHierarchy object.","params":[{"name":"tableName","type":"String","description":"The name of the table."}],"returns":{"type":"","description":""},"example":[{"code":"var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getTables());","description":"","output":""}]},{"name":"getAllExtensions","description":"Returns an array of strings containing all tables that extend the current table and\n    includes the current table.","params":[],"returns":{"type":"Array","description":"An array of strings containing the tables in the hierarchy that includes the\n                current table."},"example":[{"code":"var table = new GlideTableHierarchy(\"task\"); \ngs.info(table.getAllExtensions());","description":"","output":"task,sc_task,problem_task,change_phase,sc_req_item,kb_submission,\nrelease_phase,problem,ticket,sm_task,hr_task,change_task,change_request,\nchange_request_imac,incident,release_task,vtb_task,sm_order,hr_case,\nsysapproval_group,sc_request"}]},{"name":"getBase","description":"Returns the parent class.","params":[],"returns":{"type":"String","description":"The parent class."},"example":[{"code":"var table = new GlideTableHierarchy(\"cmdb_ci_server\"); \ngs.info(table.getBase());","description":"","output":""}]},{"name":"getHierarchy","description":"Returns an array of strings containing all classes in the hierarchy of the current\n    table.","params":[],"returns":{"type":"Array","description":"An array of strings of the classes in the hierarchy."},"example":[{"code":"var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getHierarchy());","description":"","output":""}]},{"name":"getName","description":"Returns the table's name.","params":[],"returns":{"type":"String","description":"The table's name."},"example":[{"code":"var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getName());","description":"","output":""}]},{"name":"getRoot","description":"Returns the top level class in the hierarchy.","params":[],"returns":{"type":"String","description":"The root class."},"example":[{"code":"var table = new GlideTableHierarchy(\"cmdb_ci_server\"); \ngs.info(table.getRoot());","description":"","output":""}]},{"name":"getTableExtensions","description":"Returns an array of strings containing all tables that extend the current\n    table.","params":[],"returns":{"type":"Array","description":"An array of strings containing the tables that extend the current\n                table."},"example":[{"code":"var table = new GlideTableHierarchy(\"task\"); \ngs.info(table.getTableExtensions());","description":"","output":""}]},{"name":"getTables","description":"Returns an array of strings of the table names in the hierarchy.","params":[],"returns":{"type":"Array","description":"An array of strings containing the names of tables in the hierarchy."},"example":[{"code":"var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getTables());","description":"","output":""}]},{"name":"hasExtensions","description":"Returns true of this class has been extended.","params":[],"returns":{"type":"Boolean","description":"True if the current table has extensions."},"example":[{"code":"var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.hasExtensions());","description":"","output":""}]},{"name":"isBaseClass","description":"Returns true if this is a base class.","params":[],"returns":{"type":"Boolean","description":"True if the current table has no parent and has extensions."},"example":[{"code":"var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.isBaseClass());","description":"","output":""}]},{"name":"isSoloClass","description":"Returns true if this table is not in a hierarchy.","params":[],"returns":{"type":"Boolean","description":"True if the current table has no parent and no extensions."},"example":[{"code":"var table = new GlideTableHierarchy(\"sys_user\"); \ngs.info(table.isSoloClass());","description":"","output":""}]}]},"GlideTextReader":{"meta":{"has_constructor":true,"description":"Provides the ability to read single lines from an input stream. Because an input stream\n  is used, it is not subject to the 5MB attachment size limit. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a scoped GlideTextReader object for the specified input stream.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The input stream to be read."}],"returns":{"type":"","description":""},"example":[]},{"name":"getEncoding","description":"Returns the character encoding of the input stream.","params":[],"returns":{"type":"String","description":"The character encoding of the input stream."},"example":[]},{"name":"readLine","description":"Returns a single line from the input stream and returns a string. Since this is working\n    off of a stream, it is not subject to the 5MB size limit.","params":[],"returns":{"type":"String","description":"A single line of input up to the carriage return. Does not include the carriage\n                return. Returns null if there is no content."},"example":[{"code":"var is = new GlideSysAttachment().getContentStream(attachmentSysId);\nvar reader = new GlideTextReader(is);\nvar ln = ' ';\nwhile((ln = reader.readLine()) != null) {\n  gs.info(ln);\n}","description":"","output":""}]}]},"GlideTime":{"meta":{"has_constructor":true,"description":"The scoped GlideTime class provides methods for performing operations on GlideTime\n  objects, such as instantiating GlideTime objects or working with GlideTime fields. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideTime object with the specified time.","params":[{"name":"milliseconds","type":"Number","description":"The datetime in milliseconds."}],"returns":{"type":"","description":""},"example":[{"code":"var gt = new GlideTime(10000); \ngs.info(gt.getDisplayValue());","description":"","output":""}]},{"name":"constructor","description":"Instantiates a GlideTime object with the current time.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var gt = new GlideTime(); \ngs.info(gt.getDisplayValue());","description":"","output":""}]},{"name":"getByFormat","description":"Gets the time in the specified format.","params":[{"name":"format","type":"String","description":"The time format."}],"returns":{"type":"String","description":"The time in the specified format."},"example":[{"code":"var gt = new GlideTime(); \ngt.setValue('12:00:00');\ngs.info(gt.getByFormat(\"HH:mm\"));","description":"","output":""}]},{"name":"getDisplayValue","description":"Gets the time in the current user's display format and time zone.<p>When designing business rules or script includes remember that this method may return\n        values in different formats for different users.</p>","params":[],"returns":{"type":"String","description":"The time in the user's format and time zone."},"example":[{"code":"var gt = new GlideTime();\ngt.setDisplayValue(\"12:00:00\"); // User Time Zone\ngs.info(gt.getDisplayValue()); // User Time Zone","description":"","output":""}]},{"name":"getDisplayValueInternal","description":"Gets the display value in the current user's time zone and the internal format\n    (HH:mm:ss).","params":[],"returns":{"type":"String","description":"The time value for the GlideTime object in the current user's time zone and the\n                internal time format of HH:mm:ss."},"example":[{"code":"var gt = new GlideTime();\ngt.setValue(\"01:00:00\"); //Internal Time Zone , UTC\ngs.info(gt.getDisplayValueInternal()); //User Time Zone","description":"","output":""}]},{"name":"getHourLocalTime","description":"Returns the hours part of the time using the local time zone.","params":[],"returns":{"type":"Number","description":"The hours using the local time zone."},"example":[]},{"name":"getHourOfDayLocalTime","description":"Returns the hours part of the time using the local time zone. The number of hours is\n    based on a 24 hour clock.","params":[],"returns":{"type":"Number","description":"The hours using the local time zone. The number of hours is based on a 24 hour\n                clock."},"example":[]},{"name":"getHourOfDayUTC","description":"Returns the hours part of the time using the UTC time zone. The number of hours is\n    based on a 24 hour clock.","params":[],"returns":{"type":"Number","description":"The hours using the UTC time zone. The number of hours is based on a 24 hour\n                clock."},"example":[]},{"name":"getHourUTC","description":"Returns the hours part of the time using the UTC time zone. The number of hours is\n    based on a 12 hour clock. Noon and midnight are represented by 0, not 12.","params":[],"returns":{"type":"Number","description":"The hours using the UTC time zone. The number of hours is based on a 12 hour\n                clock. Noon and midnight are represented by 0, not 12."},"example":[]},{"name":"getMinutesLocalTime","description":"Returns the number of minutes using the local time zone.","params":[],"returns":{"type":"Number","description":"The number of minutes using the local time zone."},"example":[]},{"name":"getMinutesUTC","description":"Returns the number of minutes in the hour based on the UTC time zone.","params":[],"returns":{"type":"Number","description":"The number of minutes in the hour using the UTC time zone."},"example":[]},{"name":"getSeconds","description":"Returns the number of seconds in the current minute.","params":[],"returns":{"type":"Number","description":"The number of seconds in the minute."},"example":[]},{"name":"getValue","description":"Gets the time value stored in the database by the GlideTime object in the internal\n    format, HH:mm:ss, and the system time zone.","params":[],"returns":{"type":"String","description":"The time value in the internal fomat and system time zone."},"example":[{"code":"var gt = new GlideTime();\ngs.info(gt.getValue()); // Internal Time Zone, UTC","description":"","output":""}]},{"name":"setDisplayValue","description":"Sets a time value using the current user's display format and time zone.","params":[{"name":"asDisplayed","type":"String","description":"The time in the current user's display format and time zone. The parameter must\n                be formatted using the current user's preferred display format, such as HH:mm:ss."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gt = new GlideTime();\ngt.setDisplayValue('01:00:00');   // User Time Zone\ngs.info(gt.getDisplayValueInternal()); // User Time Zone","description":"","output":""}]},{"name":"setValue","description":"Sets the time of the GlideTime object in the internal time zone.","params":[{"name":"o","type":"String","description":"The time in hh:mm:ss format."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gt = new GlideTime();\ngt.setValue('01:00:00');  //Internal Time Zone, UTC\ngs.info(\"time is \"+ gt.getByFormat('hh:mm:ss'));","description":"","output":""}]},{"name":"subtract","description":"Gets the duration difference between two GlideTime object values.","params":[{"name":"startTime","type":"GlideTime","description":"The start value."},{"name":"endTime","type":"GlideTime","description":"The end value."}],"returns":{"type":"GlideDuration","description":"The duration between the two values."},"example":[{"code":"var gd1 = new GlideTime(); \ngd1.setDisplayValue(\"09:00:00\"); \nvar gd2 = new GlideTime(); \ngd2.setDisplayValue(\"09:10:00\"); \n \nvar dur = GlideDate.subtract(gd1, gd2); //the difference between gdt1 and gdt2 \ngs.info(dur.getDisplayValue());","description":"","output":""}]}]},"GlideUICompatibility":{"meta":{"has_constructor":true,"description":"The scoped GlideUICompatibility class provides the ability for scoped applications to\n  define their own minimum browser versions. This is done by creating system properties for the\n  scoped application. You create the properties using the sys_properties list and assign a version number. When you\n   do this from the scoped application, the <scope-name> prefix is automatically added to the\n   property name. The scoped application UI compatibility properties are:<br/><br/><ul class=\"ul\" id=\"c_GlideUICompatibilityScopedAPI__ul_ebx_y2q_wt\">\n    <li class=\"li\">&lt;scope-name&gt;.ui.ie_minimum </li>\n\n    <li class=\"li\">&lt;scope-name&gt;.ui.chrome_minimum </li>\n\n    <li class=\"li\">&lt;scope-name&gt;.ui.firefox_minimum </li>\n\n    <li class=\"li\">&lt;scope-name&gt;.ui.safari_major_version_minimum </li>\n\n   </ul><br/><br/>You can then use the scoped GlideUICompatibility class to determine if the current browser is\n   supported.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates a GlideUICompatibility object.","params":[{"name":"scopeName","type":"String","description":"The application's scope name"}],"returns":{"type":"","description":""},"example":[]},{"name":"getCompatibility","description":"Returns the terms \"block\" or \"allow\" based upon the browser version.","params":[],"returns":{"type":"String","description":"Either block or allow"},"example":[{"code":"UICompatibility = new GlideUICompatibility(gs.getCurrentScopeName());\nvar blockOrAllow = UICompatibility.getCompatibility();\ngs.info(blockOrAllow);","description":"","output":"allow"}]},{"name":"isBlocked","description":"Determines if the browser is not supported.","params":[],"returns":{"type":"Boolean","description":"True if the browser is not supported."},"example":[{"code":"UICompatibility = new GlideUICompatibility(gs.getCurrentScopeName());\nvar blocked = UICompatibility.isBlocked();\ngs.info(blocked);","description":"","output":"false"}]}]},"GlideURI":{"meta":{"has_constructor":true,"description":"The GlideURI class is a utility class for handling the URI parameter. The GlideURI class\n  is available in scoped and global scripts. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a GlideURI object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"get","description":"Returns the specified parameter.","params":[{"name":"name","type":"String","description":"The parameter name."}],"returns":{"type":"String","description":"The URI for the specified parameter."},"example":[{"code":"var gURI = new GlideURI();\ngURI.set('sysparm_query', 'priority=2^active=true' );\nvar fileString = gURI.get('sysparm_query');\ngs.info(fileString);","description":"","output":"priority=2^active=true"}]},{"name":"getFileFromPath","description":"Returns the file name portion of the URI.","params":[],"returns":{"type":"String","description":"The file name portion of the URI."},"example":[{"code":"var gURI = new GlideURI();\n \nvar fileString = gURI.getFileFromPath();\ngs.info(fileString);","description":"","output":""}]},{"name":"set","description":"Sets the specified parameter to the specified value.","params":[{"name":"name","type":"String","description":"The parameter name."},{"name":"value","type":"String","description":"The value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gURI = new GlideURI();\ngURI.set('sysparm_query', 'priority=2^active=true' );\nvar fileString = gURI.get('sysparm_query');\ngs.info(fileString);","description":"","output":"priority=2^active=true"}]},{"name":"toString","description":"Reconstructs the URI string and performs the proper URL encoding by converting\n    non-valid characters to their URL code. For example, converting & to '%26'.<p>Parameters set with the set method are encoded with the URI as well.</p>","params":[{"name":"path","type":"String","description":"The base portion of the system URL to which the URI is appended."}],"returns":{"type":"String","description":"The URL."},"example":[{"code":"fileString = gURI.toString('https://&lt;your instance&gt;.service-now.com/navpage.do');","description":"","output":""}]}]},"GlideUser":{"meta":{"has_constructor":false,"description":"The scoped GlideUser API provides access to information about the current user and\n  current user roles. Using the scoped GlideUser API avoids the need to use the slower GlideRecord\n  queries to get user information. ","example":""},"properties":{},"methods":[{"name":"getCompanyID","description":"Returns the current user's company sys_id.","params":[],"returns":{"type":"String","description":"Company sys_id"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getCompanyID());","description":"","output":""}]},{"name":"getDisplayName","description":"Returns the current user's display name.","params":[],"returns":{"type":"String","description":"User's display name"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getDisplayName());","description":"","output":""}]},{"name":"getDomainID","description":"Returns the identifier of the user's current session domain.<p>The identifier that is returned depends on the domain type and the instantiation of that\n        domain.</p><p><ul class=\"ul\" id=\"SGU-getDomainID__ul_l4v_kc1_pfb\">\n          <li class=\"li\">If the user is configured in the global domain, and does not use the domain picker to\n            switch domains, the method returns null.</li>\n\n          <li class=\"li\">If the user uses the domain picker to switch to the global domain, the method returns\n            the string \"global\".</li>\n\n          <li class=\"li\">For all other domains, the method returns the sys_id of that domain.</li>\n\n        </ul></p>","params":[],"returns":{"type":"String","description":"Domain identifier"},"example":[{"code":"var domain = new GlideRecord('domain');\ndomain.get(gs.getUser().getDomainID());\ngs.info(domain.name);","description":"","output":""}]},{"name":"getEmail","description":"Returns the user's email address.","params":[],"returns":{"type":"String","description":"User's email address"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getEmail());","description":"","output":""}]},{"name":"getFirstName","description":"Returns the user's first name.","params":[],"returns":{"type":"String","description":"User's first name"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getFirstName());","description":"","output":""}]},{"name":"getID","description":"Gets the sys_id of the current user.","params":[],"returns":{"type":"String","description":"User's sys_id"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getID());","description":"","output":""}]},{"name":"getLastName","description":"Returns the user's last name.","params":[],"returns":{"type":"String","description":"User's last name"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getLastName());","description":"","output":""}]},{"name":"getName","description":"Returns the user ID, or login name, of the current user.","params":[],"returns":{"type":"String","description":"User ID"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getName());","description":"","output":""}]},{"name":"getPreference","description":"Gets the specified user preference value for the current user.","params":[{"name":"name","type":"String","description":"The name of the preference."}],"returns":{"type":"String","description":"The preference value."},"example":[{"code":"var currentUser = gs.getUser(); \ncurrentUser.savePreference(­'myPref','red'); \ngs.info(currentUser.getPreference(­'myPref'));","description":"","output":""}]},{"name":"getRoles","description":"Returns a list of roles that includes explicitly granted roles, inherited roles, and\n    roles acquired by group membership.","params":[],"returns":{"type":"Array","description":"List of all roles available to the user"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getRoles());","description":"","output":""}]},{"name":"getUserRoles","description":"Returns the list of roles explicitly granted to the user.<p>Unlike the <span class=\"keyword apiname\">getRoles()</span> method, this method does not return roles the user\n        inherits or roles acquired from group membership.</p>","params":[],"returns":{"type":"Array","description":"List of roles explicitly assigned to the user"},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.getUserRoles());","description":"","output":""}]},{"name":"hasRole","description":"Determines if the current user has the specified role.","params":[{"name":"role","type":"String","description":"Role to check"}],"returns":{"type":"Boolean","description":"True if the user has the role."},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.hasRole('admin'));","description":"","output":""}]},{"name":"isMemberOf","description":"Determines if the current user is a member of the specified group.","params":[{"name":"group","type":"String","description":"Group to check"}],"returns":{"type":"Boolean","description":"True if the user is a member of the group."},"example":[{"code":"var currentUser = gs.getUser(); \ngs.info(currentUser.isMemberOf(­'Capacity Mgmt'));","description":"","output":""}]},{"name":"savePreference","description":"Saves a user preference value to the database.","params":[{"name":"name","type":"String","description":"The preference to save."},{"name":"value","type":"String","description":"The preference value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var currentUser = gs.getUser(); \ncurrentUser.savePreference('myPref','red'); \ngs.info(currentUser.getPreference('myPref'));","description":"","output":""}]}]},"GlideXMLUtil":{"meta":{"has_constructor":false,"description":"Provides methods to remove invalid characters from an XML string, and to validate an\n    XML string. Access these methods using the static object <span class=\"keyword apiname\">GlideXMLUtil</span>. This class is\n      available in scoped and global scripts.","example":""},"properties":{},"methods":[{"name":"removeInvalidChars","description":"Removes invalid characters from an XML string.","params":[{"name":"xmlString","type":"String","description":"The string to be processed."}],"returns":{"type":"String","description":"A string with invalid characters removed."},"example":[{"code":"var test = \"test\\btab\";\nvar removedTest = GlideXMLUtil.removeInvalidChars(test);\n\ngs.info(removedTest);","description":"","output":"testtab"}]},{"name":"validateXML","description":"Determines if the specified string is valid XML.","params":[{"name":"xmlString","type":"String","description":"The string to be validated."},{"name":"nsAware","type":"Boolean","description":"When true, the validation is aware of name spaces. When false, the validation\n                ignores name spaces."},{"name":"forgiveUnclosed","type":"Boolean","description":"When true, the validation does not check for <xml> tags enclosing the\n                string."}],"returns":{"type":"String","description":"Returns null if the string is valid. Returns an error string describing the\n                error if the specified string is not valid."},"example":[{"code":"var s = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;&lt;unload unload_date=\\\"2017-11-27 21:56:14\\\"&gt;&lt;incident action=\\\"INSERT_OR_UPDATE\\\"&gt;&lt;active&gt;true&lt;/active&gt;&lt;/incident&gt;&lt;/unload&gt;\";\nvar xml = GlideXMLUtil.validateXML(s,false, false);\ngs.info(xml);\n","description":"","output":"null"}]}]},"HistoryWalker -":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">HistoryWalker</span> API uses the audit/history tables to generate a\n    historical version of an existing record. It supports the ability to return a GlideRecord to a\n    previous update count (walked GlideRecord) with the appropriate GlideElements populated. After\n    the walked GlideRecord is retrieved, the API provides the ability to move forward and backward\n    the update numbers navigating through its historical updates. The associated methods can be used in scoped and global scripts. To use this class in scoped\n      and global applications, use the sn_hw namespace identifier. The History Walker plugin\n      (com.glide.history_walker) that is enabled by default is required to access the\n        <span class=\"keyword apiname\">HistoryWalker</span> API.<div class=\"note note\"><span class=\"notetitle\">Note:</span> For offline updates,\n          <span class=\"keyword apiname\">HistoryWalker</span> API will be initiated automatically and the only two\n        methods that you can use are: <span class=\"keyword parmname\">walkTo(0)</span> (the input argument for this\n        method can only be zero) and <span class=\"keyword parmname\">walkForward()</span>. Other available methods\n        cannot be invoked for offline updates.</div><br/><br/>The <span class=\"keyword apiname\">HistoryWalker</span> API provides two ways to retrieve the audit data:<ul class=\"ul\" id=\"c_HistoryWalkerScopedGlobal__ul_frp_f3t_qbb\">\n        <li class=\"li\">Using History Set: A History Set entry is created (if not available or not up to date)\n          from the data in the sys_audit table for the record that you are going to walk through.\n          The History Set table contains records (History Lines) with the actual changes to field\n          values that occurred. Methods of the HistoryWalker API retrieve the history data from the\n          generated History Lines, instead of querying the sys_audit table. </li>\n\n        <li class=\"li\">Using Audit table: In this case, the HistoryWalker API extracts data directly querying\n          the sys_audit table.</li>\n\n      </ul><br/><br/>By default, it populates the data to support the “changes”, “changesFrom” and “changesTo”\n      methods in the walked record, as well as provides record and field level security.\n      Additionally, it can enable journal fields and variables to be also populated in the walked\n      GlideRecord when walking through the updates.<br/><br/>This API enables you to:<br/><br/><li class=\"li\">apply the appropriate history/audit data to get an existing GlideRecord to the state it\n        was in a specific update count.</li>\n\n      <li class=\"li\">instruct the <span class=\"keyword apiname\">HistoryWalker</span> API to use sys_audit table instead of\n        sys_history_set/sys_history_line tables to retrieve its data.</li>\n\n      <li class=\"li\">turn off row-level access control.</li>\n\n      <li class=\"li\">turn off field-level access control.</li>\n\n      <li class=\"li\">turn off retrieval and processing of “changes” data.</li>\n\n      <li class=\"li\">Enable journal fields.</li>\n\n      <li class=\"li\">Enable variables.</li>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Fetches the database record based on the parameters, using the History Sets or Audit\n    data to retrieve the historic data, depending on the third parameter.","params":[{"name":"tableName","type":"String","description":"Name of table containing the record to retrieve."},{"name":"sydId","type":"String","description":"sys_id of the record to retrieve."},{"name":"useAudit","type":"Boolean","description":"<ul class=\"ul\" id=\"r_HW-HistoryWalker_S_S_B__ul_jvm_pq5_qbb\">\n                  <li class=\"li\">If set to true, uses audit data to retrieve historic date.</li>\n\n                  <li class=\"li\">If set to false,  uses history set to retrieve historic date.</li>\n\n                </ul>"}],"returns":{"type":"","description":""},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue(), true);\nif (hw.walkTo(3)) {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} else\n    gs.info('Incident does not have update number 3');\n","description":"","output":"Incident priority in update number 3 was 4"}]},{"name":"constructor","description":"Fetches the database record based on the parameters, using the History Sets to retrieve\n    the historic data.","params":[{"name":"tableName","type":"String","description":"Name of table containing the record to retrieve."},{"name":"sydId","type":"String","description":"sys_id of the record to retrieve."}],"returns":{"type":"","description":""},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nif (hw.walkTo(3)) {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} else\n    gs.info('Incident does not have update number 3');","description":":","output":"Incident priority in update number 3 was 4"}]},{"name":"getUpdateNumber","description":"Gets the update number of the current walked glide record.","params":[],"returns":{"type":"int","description":"Current update number or, -1 if record is not found"},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(3);\ngs.info('Update number: ' + hw.getUpdateNumber());","description":":","output":"Update number: 3"}]},{"name":"getWalkedRecord","description":"Gets the record filled with the history/audit data after walking to an update\n    number.","params":[],"returns":{"type":"GlideRecord","description":"The walked GlideRecord."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\nvar walkedRecord = hw.getWalkedRecord();\ngs.info('Priority in update number 0: ' + walkedRecord.priority);\nhw.walkTo(1);\nwalkedRecord = hw.getWalkedRecord();\ngs.info('Short description in update number 1: ' + walkedRecord.short_description);","description":":","output":"Priority in update number 0: 4\nShort description in update number 1: My monitor has stopped working"}]},{"name":"getWalkedRecordCopy","description":"Returns a copy of the record filled with the history/audit data after walking to an\n    update number.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">getWalkedRecord()</span> API might modify the obtained walkedRecord\n          after walking to another update number. The <span class=\"keyword apiname\">getWalkedRecordCopy()</span> API\n          gets a clone to the walked record to prevent that.</div></p>","params":[],"returns":{"type":"GlideRecord","description":"A copy of the walked GlideRecord."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar walkedRecord = [];\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\nwalkedRecord[0] = hw.getWalkedRecordCopy();\nhw.walkTo(1);\nwalkedRecord[1] = hw.getWalkedRecordCopy();\n\ngs.info('Priority in update number 0: ' + walkedRecord[0].priority);\ngs.info('Short description in update number 1: ' + walkedRecord[1].short_description);\n","description":":","output":"Priority in update number 0: 4\nShort description in update number 1: My monitor has stopped working"}]},{"name":"isFieldLevelSecurity","description":"Specifies if the record-level read access is applied on the record when retrieving from\n    the database.","params":[],"returns":{"type":"Boolean","description":"Returns true if field level security is enabled, else returns false."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Field level security is active: ' + hw.isFieldLevelSecurity());","description":":","output":"Field level security is active: true"}]},{"name":"isRecordLevelSecurity","description":"Specifies if the record-level read access is applied on the record when retrieving from\n    the database.","params":[],"returns":{"type":"Boolean","description":"Returns true if the record-level security is enabled, else returns\n                false."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Record level security is active: ' + hw.isRecordLevelSecurity());\n","description":":","output":"Record level security is active: true"}]},{"name":"isWithChanges","description":"Specifies if any of the methods that walk the record from one update to another,\n    support the “changes” data for each element.","params":[],"returns":{"type":"Boolean","description":"Returns true if the changes support is enabled, else returns false."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Changes is active: ' + hw.isWithChanges());","description":":","output":"Changes is active: true"}]},{"name":"isWithJournalFields","description":"Specifies if journal type fields are populated from the historical values.","params":[],"returns":{"type":"Boolean","description":"Returns true if journal fields are populated, else returns false."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Populating journal fields is active: ' + hw. isWithJournalFields());\n","description":":","output":"Populating journal fields is active: false"}]},{"name":"isWithVariables","description":"Specifies if values are set for variables that are recorded in the history.","params":[],"returns":{"type":"Boolean","description":"Returns true if including values for variables, else returns false."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Populating variables is active: ' + hw. isWithVariables());","description":":","output":"Populating variables is active: false"}]},{"name":"setFieldLevelSecurity","description":"Sets the field-level read access on each element before setting the historical value of\n    that element in the GlideRecord. If the field-level security is enabled, it prevents the API to\n    populate the fields of the walked record that the user of the API does not have access\n    to.","params":[{"name":"fieldLevelSecurity","type":"Boolean","description":"If set to true, field-level security is enabled. The default value is\n                true."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setFieldLevelSecurity(false);\nhw.walkTo(0);\n","description":":","output":""}]},{"name":"setRecordLevelSecurity","description":"Sets the record-level read access on the record when retrieving from the database. The\n    record-level security prevents the API to retrieve the walked record if the user of the API does\n    not have access to the GlideRecord.","params":[{"name":"recordLevelSecurity","type":"Boolean","description":"If set to true, record-level read access security is enabled. The default value\n                is true."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setRecordLevelSecurity(false);\nhw.walkTo(0);\n","description":":","output":""}]},{"name":"setWithChanges","description":"Sets the “changes” data support for each element for a method that walks the record\n    from one update to another.","params":[{"name":"withChanges","type":"Boolean","description":"If set to true, the “changes” data is supported for each element. The default\n                value is true."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\ndo {\n    printChangedFields(hw);\n} while (hw.walkForward());\n\nfunction printChangedFields(hw) {\n    var walkedGr = hw.getWalkedRecord();\n    var fields = GlideScriptRecordUtil.get(walkedGr).getChangedFieldNames();\n    gs.print(\"Fields changed at update \" + hw.getUpdateNumber() + \" were:\");\n    for (var j = 0; j &lt; fields.size(); j++)\n        gs.print(\" \" + fields.get(j));\n    gs.print(\"\");\n}\n","description":": With the Changes data support","output":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setWithChanges(false);\nhw.walkTo(0);\ndo {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.print('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} while (hw.walkForward());"}]},{"name":"setWithJournalFields","description":"Specifies if journal type fields are populated from the historical values.","params":[{"name":"withJournalFields","type":"Boolean","description":"If set to true, include journal-type fields. Th default value is false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setWithJournalFields(true);\nif (hw.walkTo(0)) {\n    var workNotes = hw.getWalkedRecord().work_notes;\n    gs.info('Work Notes in update number ' + hw.getUpdateNumber() + ' was ' + workNotes);\n}\n","description":":","output":""}]},{"name":"setWithVariables","description":"Specifies if variables are populated from the historical values.","params":[{"name":"withVariables","type":"Boolean","description":"If set to true, values are populated for variables. The default value is\n                false."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setWithVariables(true);\nhw.walkTo(0);\nif (hw.walkTo(0)) {\n    var varUrgency = hw.getWalkedRecord().variables.urgency;\n    gs.info('Variable Urgency in update number ' + hw.getUpdateNumber() + ' was ' + varUrgency);\n}\n","description":":","output":""}]},{"name":"walkBackward","description":"Applies the appropriate history/audit data to get a walked GlideRecord to the state\n    when it was one update number backward. If the previous update count is missing from the\n    history/audit data, it will walk to the previous available update count.","params":[],"returns":{"type":"Boolean","description":"Returns true if walking to the specified update number was possible. Else,\n                returns false, for example if already walked to the update number 0."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(incGr.sys_mod_count);\ndo {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} while (hw.walkBackward())\n","description":":","output":"Incident priority in update number 5 was 2\nIncident priority in update number 4 was 4\nIncident priority in update number 3 was 4\nIncident priority in update number 2 was 4\nIncident priority in update number 1 was 4\nIncident priority in update number 0 was 4"}]},{"name":"walkForward","description":"Applies the appropriate history/audit data to get a walked GlideRecord to the state\n    when it was one update number forward. If next update count is missing from the history/audit\n    data, it will walk to the next available update count.","params":[],"returns":{"type":"Boolean","description":"Returns true if walking to the specified update number was possible. Else,\n                returns false, for example if already walked to the GlideRecord update\n                count."},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\ndo {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} while (hw.walkForward())\n","description":":","output":"Incident priority in update number 0 was 4\nIncident priority in update number 1 was 4\nIncident priority in update number 2 was 4\nIncident priority in update number 3 was 4\nIncident priority in update number 4 was 4\nIncident priority in update number 5 was 2"}]},{"name":"walkTo","description":"Applies the appropriate history/audit data to get a GlideRecord to the state it was in\n    a specific update count. Use getWalkedRecord() or getWalkedRecordCopy() after walking to an\n    update number to retrieve the “walked” GlideRecord.","params":[{"name":"updateCount","type":"Integer","description":"The update number to walk to."}],"returns":{"type":"Boolean","description":"true if walking to the specified update number was possible, false otherwise,\n                for example if the requested update is greater than the update count of the\n                GlideRecord, or if there is no history/audit data of the requested update\n                number"},"example":[{"code":"var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nif (hw.walkTo(3)) {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} else\n    gs.info('Incident does not have update number 3');","description":":","output":"Incident priority in update number 3 was 4"}]}]},"hr_ActivitySet":{"meta":{"has_constructor":true,"description":"Handles lifecycle event activity set cases. Lifecycle event activity sets represent different stages in the lifecycle event process. You\n      must define when the activity set is triggered, such as immediately upon creation of the\n      lifecycle event case or after the completion of another activity set. Each activity set is\n      associated with a single lifecycle event.<br/><br/>The hr_ActivitySet API requires the HR Lifecycle Events plugin\n      (com.sn_hr_lifecycle_events).<br/><br/>See also <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-hr-service-delivery/page/product/human-resources/concept/hr-lifecycle-event-case-management.html\" target=\"_blank\">Lifecycle event case\n      management</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new hr_ActivitySet object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"createLECaseByService","description":"Creates a lifecycle event case based on a specified HR service.","params":[{"name":"hrService","type":"String","description":"Sys ID of HR service in the HR Services [sn_hr_core_service] table to be\n                assigned to the lifecycle event case."},{"name":"caseValues","type":"Object","description":"Key-value pairs containing a value for each case field."},{"name":"caseValues.subject_person","type":"String","description":"Sys ID of subject person's name in the User [sys_user] table."},{"name":"caseValues.opened_for","type":"String","description":"Sys ID of case opened for subject person in the Users [sys_user] table."},{"name":"caseValues.subject_person_job","type":"String","description":"Sys ID of subject person's Business title in the Jobs [sn_hr_core_job]\n                table."},{"name":"caseValues.location","type":"String","description":"Sys ID of subject person's location in HR profile in the Locations\n                [cmn_location] table."},{"name":"caseValues.department","type":"String","description":"Sys ID of subject person's department in HR profile in the Departments\n                [cmn_department] table."},{"name":"caseValues.subject_person_hr_profile","type":"String","description":"Sys ID of subject person's HR profile in the HR Profiles [sn_hr_core_profile]\n                table."},{"name":"caseValues.short_description","type":"String","description":"Case description."},{"name":"caseValues.state","type":"Number","description":"Number representing uniquely-defined custom case state."}],"returns":{"type":"String","description":"Sys ID of the created case in the HR Lifecycle Events Cases [sn_hr_le_case]\n                table."},"example":[{"code":"var caseValues = {\n              ‘subject_person’: ‘62826bf03710200044e0bfc8bcbe5df1’,\n              ‘opened_for’: ‘0e826bf03710200044e0bfc8bcbe5d7c’,\n              ‘subject_person_job’: ‘f8d56900587d3700964f4efae452b3db’,\n              ‘location’: ‘25ab9d1d0a0a0bb300537fd25687439d’,\n              ‘department’: ‘93b25282c0a8000b0b55c8ab34e2f1e6’,\n              ‘subject_person_hr_profile’: ‘330370019f22120047a2d126c42e7012’,\n              ‘short_description’: ‘Short description’,\n              ‘state’: 10\n          };\n\n  var activity = new sn_hr_le.hr_ActivitySet();\n  var createCase = new activity.createLECaseByService(‘4719647c67a60300132a6c3b5685ef16’, caseValues);","description":"Output includes summary with Operation Table and Row Count columns. Click the link in the\n        row count column adjacent sn_hr_le_case table to view the new case.","output":"...\ninsert\tsn_hr_le_case\t1\n..."}]},{"name":"hasActiveCaseByService","description":"Checks for a case matching the specified combination of subject person user, HR\n    service, and job.","params":[{"name":"spUser","type":"String","description":"Sys ID of subject person user in the Users [sys_user] table."},{"name":"hrService","type":"String","description":"Sys ID of HR service in the HR Services [sn_hr_core_service] table."},{"name":"jobId","type":"String","description":"Sys ID of subject user's job title in the HR Services [sn_hr_core_service]\n                table."}],"returns":{"type":"Boolean","description":"True if matching case exists, false otherwise."},"example":[{"code":"var userId = '62826bf03710200044e0bfc8bcbe5df1'; //Abel Tuter\nvar hrServiceId = '64fa4c53534222003066a5f4a11c0875'; //Onboarding HR Service\nvar jobId = '3D62826bf03710200044e0bfc8bcbe5df1'; // Sample Job sys_id for the example\n\nvar activity = new sn_hr_le.hr_ActivitySet();\n\nvar hasActiveLECase = activity.hasActiveCaseByService(userId, hrServiceId, jobId);\n\ngs.info('User has an active HR case: ' + hasActiveLECase);","description":"","output":"sn_hr_le: User has an active HR case: false"}]}]},"hr_ActivityUtils":{"meta":{"has_constructor":false,"description":"Enables creating HR cases from a record producer. The hr_ActivityUtils script include requires the HR Lifecycle Events plugin\n      (com.sn_hr_lifecycle_events).","example":""},"properties":{},"methods":[{"name":"createCaseFromProducer","description":"Creates a case from a record producer and service. This method is intended to be called\n    as-is to create a producer and does not require supplying data.<p>The following variables can be configured in a record producer to provide additional\n        capabilities as follows:<ul class=\"ul\" id=\"hrAU-createCaseFromProducer_GR_O_S__ul_jhc_rj2_h3b\">\n          <li class=\"li\"><samp class=\"ph codeph\">job</samp> – References sn_hr_core_job and maps to subject_person_job in an\n            HR case</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">opened_for</samp> – References sys_user and maps opened_for in an HR\n            case</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">concurrent_job</samp> – If the record producer includes this variable (by\n            activating checkbox) and parameters have job information, creates a new job in\n            sn_hr_core_job\n            table     </li>\n\n        </ul></p>","params":[{"name":"current","type":"GlideRecord","description":"GlideRecord for case to be created."},{"name":"producer","type":"Object","description":"Comma-separated key value pair containing data as questions and answers that\n                are automatically provided when a user submits an answer to a record producer\n                question."},{"name":"cat_item.sys_id","type":"String","description":"Looks up the HR service of case being created and variable names to populate\n                the description."}],"returns":{"type":"Object","description":"New case in related table, varies by product."},"example":[{"code":"new sn_hr_core.hr_ActivityUtils(current).createCaseFromProducer(producer, cat_item.sys_id);","description":"This method is intended to be called as-is to create a producer and does not require\n        supplying data.","output":""}]}]},"hr_Utils":{"meta":{"has_constructor":true,"description":"Provides basic functionality for the HR application. The hr_Utils API requires the HR core plugin (com.sn_hr_core).","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates an hr_Utils object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getPrimaryJob","description":"Gets the Sys ID of the active primary job for a provided user.","params":[{"name":"userID","type":"String","description":"Sys ID of the HR user from the User [sys_user] table assigned an active or\n                future job in which Primary is true."}],"returns":{"type":"String","description":"If present and active, Sys ID of the primary job from the Jobs [sn_hr_core_job]\n                table, null otherwise."},"example":[{"code":"var result = new sn_hr_core.hr_Utils().getPrimaryJob('5137153cc611227c000bbd1bd8cd2007');\ngs.info('Result: ' + result);","description":"","output":"Result: eb3c69463cd63740964fb8b1ce04f9ae"}]},{"name":"switchPrimaryJob","description":"Switches the primary job of a user.","params":[{"name":"userId","type":"String","description":"Sys ID of HR user from the Users [sys_user] table."},{"name":"jobId","type":"String","description":"Job Sys ID from the Jobs [sn_hr_core_job] table."}],"returns":{"type":"String","description":"Encoded JSON with message and status, error otherwise."},"example":[{"code":"var result = new sn_hr_core.hr_Utils().switchPrimaryJob('5137153cc611227c000bbd1bd8cd2007', 'bc884e723c0ebf00964fb8b1ce04f9d7');\ngs.info('Result: ' + result);","description":"","output":"Result: {&quot;message&quot;:&quot;Switched primary job for the user successfully&quot;,&quot;status&quot;:&quot;success&quot;}"}]}]},"IdentificationEngine":{"meta":{"has_constructor":false,"description":"The IdentificationEngine uses the Identification and Reconciliation framework to\n  minimize creation of duplicate CIs and to reconcile CI attributes by only accepting information\n  from authorized data sources when updating the CMDB. You must enable the Configuration Management for Scoped Apps (CMDB) [com.snc.cmdb.scoped]\n   plugin in order to use this class.<br/><br/>When using this class in a scoped application, use the sn_cmdb namespace identifier.","example":""},"properties":{},"methods":[{"name":"createOrUpdateCI","description":"Insert or update configuration items in the CMDB based on identification and\n    reconciliation rules. Use this API instead of updating the CMDB directly.","params":[{"name":"source","type":"String","description":"Identifies the data source of the CI information. These must be one of the\n                choice values defined for the discovery_source field of the cmdb_ci table."},{"name":"input","type":"String","description":"A JSON formatted string of configuration items to be added or updated. Each\n                input string is in the format  'items: [{}], relations:[{}], related[{}]', where\n                each item within the items,  relations, and related lists contains name-value pairs.\n                  <div class=\"p\">The possible name-value pairs within the items list are:<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__d73968e94\">\n                    <li class=\"li\">className - the sys_class_name of the CI to be created or updated.</li>\n\n                    <li class=\"li\">values:{} - the field information for the CI as name-value pairs, where the\n                      name is the field name. When updating reference fields, the value must be the\n                      referenced sys_id.</li>\n\n                    <li class=\"li\">lookup:[{}] - a list of records with each item having name-value pairs like\n                      the items list. </li>\n\n                    <li class=\"li\">related: [{}] - a list of records with each item having name-value pairs\n                      like the items list.</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__d73968e110\">\n                    <li class=\"li\">parent - index of the parent item in the dependency relation</li>\n\n                    <li class=\"li\">child - index of the child item in the dependency relation</li>\n\n                    <li class=\"li\">type - the relationship type. This is one of the name field values from the\n                      cmdb_rel_type table.</li>\n\n                  </ul>\n</div>"}],"returns":{"type":"String","description":"A JSON formatted string that is a list of results for the configuration items\n                in the input string. Each result string is in the format  'items: [{}],\n                relations:[{}]',  where each item within the  items and relations lists contains\n                name-value pairs. <div class=\"p\">The possible name-value pairs within the items list are:  <ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__d73968e161\">\n                    <li class=\"li\">className- the sys_class_name for the CI that was updated or created.</li>\n\n                    <li class=\"li\">operation, which is one of INSERT, UPDATE, UPDATE_WITH_UPGRADE,\n                      UPDATE_WITH_DOWNGRADE, UPDATE_WITH_SWITCH, DELETE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the CI that was updated or created.</li>\n\n                    <li class=\"li\">relatedSysIds -  a list of sys_id values of CIs used during lookup based\n                      identification.</li>\n\n                    <li class=\"li\">maskedAttributes – a list of attributes whose update by a non-authoritative\n                      data source gets skipped as defined by the \n                      <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/configuration-management/task/t_CreateCIReconciliationRule.html\" target=\"_blank\">Reconciliation\n                        Rules</a>.</li>\n\n                    <li class=\"li\">identifierEntrySysId - sys_id of identifier entry used during matching.</li>\n\n                    <li class=\"li\">errors - a list of errors in the format of (error, message string), where\n                      error can be ABANDONED, INVALID_INPUT_DATA, IDENTIFICATION_RULE_MISSING,\n                      IDENTIFICATION_RULE_FOR_LOOKUP_MISSING, NO_LOOKUP_RULES_FOR_DEPENDENT_CI,\n                      NO_CLASS_NAME_FOR_INDEPENDENT_CI, MISSING_DEPENDENCY, MULTIPLE_DEPENDENCIES,\n                      MULTIPLE_DUPLICATE_RECORDS, RELATION_CHAIN_ENDS_AT_QUALIFIER,\n                      QUALIFICATION_LOOP, TYPE_CONFLICT_IN_QUALIFICATION, MULTI_MATCH,\n                      REQUIRED_ATTRIBUTE_EMPTY, RECLASSIFICATION_NOT_ALLOWED</li>\n\n                    <li class=\"li\">duplicateIndices - a list of indexes of items that are duplicates of the\n                      current item.</li>\n\n                    <li class=\"li\">identificationAttempts - a list of attempts in the format of (attributes,\n                      identiferName, attemptResult, searchOnTable) where <ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__d73968e193\">\n                        <li class=\"li\">attributes - the attributes of identifier entry used during\n                          identification</li>\n\n                        <li class=\"li\">identiferName - the CI identifier to which this identifier entry\n                          belongs</li>\n\n                        <li class=\"li\">attemptResult - one of SKIPPED, NO_MATCH, MATCHED, MULTI_MATCH</li>\n\n                        <li class=\"li\">searchOnTable - the table searched during the identification\n                          process.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__d73968e210\">\n                    <li class=\"li\">className - the relationship CI's class name and is always cmdb_rel_ci</li>\n\n                    <li class=\"li\">operation - one of INSERT, UPDATE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the relationship CI inserted or updated</li>\n\n                  </ul>\n</div>"},"example":[{"code":"var payload = {items: [{className:'cmdb_ci_linux_server', \n               values: {name:'stry0900844 CI 2',\n                        serial_number:'9876EFGH',\n                        mac_address:'4653XYZ',\n                        ip_address:'10.10.10.4',\n                        ram:'1238'}}]\n              };\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);\ngs.print(output);\n","description":"Identify an independent CI.","output":"{&quot;items&quot;:[{&quot;className&quot;:&quot;cmdb_ci_linux_server&quot;,&quot;operation&quot;:&quot;INSERT&quot;,\n&quot;sysId&quot;:&quot;33dd7e760f750200293f8fbce1050ee0&quot;,&quot;identifierEntrySysId&quot;:&quot;Unknown&quot;,\n&quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;serial_number&quot;],&quot;identifierName&quot;:&quot;Hardware Rule&quot;,\n&quot;attemptResult&quot;:&quot;NO_MATCH&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;},{&quot;attributes&quot;:[&quot;name&quot;],\n&quot;identifierName&quot;:&quot;Hardware Rule&quot;,&quot;attemptResult&quot;:&quot;NO_MATCH&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;}]}\n],&quot;relations&quot;:[]}"},{"code":"var payload = \n              {items: [ \n                    {className:'cmdb_ci_web_server', \n                     values: {name:'apache linux den 200', \n                              running_process_command: 'xyz',  \n                              running_process_key_parameters: 'abc', \n                              tcp_port:'3452'}}, \n                    {className:'cmdb_ci_linux_server', \n                     values: {name:'lnux100', ram:'2048'}}],\n               relations:[{parent: 0, child: 1, type: 'Runs on::Runs'}]\n              };\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceWatch', input);\ngs.print(output);\n","description":"Identify a dependent CI.","output":"{&quot;items&quot;:[\n{&quot;className&quot;:&quot;cmdb_ci_web_server&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,\n       &quot;sysId&quot;:&quot;5f8af237c0a8010e01a932999468b83a&quot;,&quot;identifierEntrySysId&quot;:&quot;8985a23ec3f00200d8d4bea192d3ae08&quot;,\n       &quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;running_process_command&quot;,&quot;running_process_key_parameters&quot;],\n       &quot;identifierName&quot;:&quot;Application Rule&quot;,&quot;attemptResult&quot;:&quot;MATCHED&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_appl&quot;}]},\n{&quot;className&quot;:&quot;cmdb_ci_linux_server&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,&quot;sysId&quot;:&quot;53958ff0c0a801640171ec76aa0c8f86&quot;,\n       &quot;identifierEntrySysId&quot;:&quot;556eb250c3400200d8d4bea192d3ae92&quot;,\n       &quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;serial_number&quot;],&quot;identifierName&quot;:&quot;Hardware Rule&quot;,\n       &quot;attemptResult&quot;:&quot;SKIPPED&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;},{&quot;attributes&quot;:[&quot;name&quot;],\n       &quot;identifierName&quot;:&quot;Hardware Rule&quot;,&quot;attemptResult&quot;:&quot;MATCHED&quot;,&quot;searchOnTable&quot;:&quot;cmdb_ci_hardware&quot;}]}],\n&quot;relations&quot;:[{&quot;className&quot;:&quot;cmdb_rel_ci&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,\n               &quot;sysId&quot;:&quot;60bcdcebc0a8010e0124fb16964b989f&quot;}]}"},{"code":"var payload = {items: [\n           {className:'cmdb_ci_netgear', \n               values: {name:'ny8500-nbxs08',\n                        ports:'1200'}, \n               lookup: [{className:'cmdb_serial_number',\n                            values:{serial_number:'1234ABCD', serial_number_type:'uuid',absent:'false',valid:'true'}},\n                        {className:'cmdb_serial_number',\n                            values:{serial_number:'3456EFGH', serial_number_type:'system',absent:'false',valid:'true'}}]}]};\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);\ngs.print(output);\n","description":"Identify an independent CI with lookup based identification.","output":"{&quot;items&quot;:[{&quot;className&quot;:&quot;cmdb_ci_netgear&quot;,&quot;operation&quot;:&quot;UPDATE&quot;,&quot;sysId&quot;:&quot;55b35562c0a8010e01cff22378e0aea9&quot;,\n                                &quot;relatedSysIds&quot;:[&quot;c9d5d426538202007c949096a11c0829&quot;,&quot;0dd5d426538202007c949096a11c0829&quot;],\n                                &quot;identifierEntrySysId&quot;:&quot;c12f9be8c3400200d8d4bea192d3aea6&quot;,\n                                &quot;identificationAttempts&quot;:[{&quot;attributes&quot;:[&quot;serial_number&quot;,&quot;serial_number_type&quot;],\n                                                           &quot;identifierName&quot;:&quot;Hardware Rule&quot;,&quot;attemptResult&quot;:&quot;MATCHED&quot;,\n                                &quot;searchOnTable&quot;:&quot;cmdb_serial_number&quot;}]}],\n          &quot;relations&quot;:[]}"}]},{"name":"identifyCI","description":"Determines the operation (insert/update) that will be performed with the specified\n    payload without committing the operation in the database.<p>This works just like <span class=\"keyword apiname\">createOrUpdateCI()</span>, but does not commit the\n        result.</p>","params":[{"name":"jsonString","type":"String","description":"A JSON formatted string of configuration items to be added or updated. Each\n                input string is in the format  'items: [{}], relations:[{}]', where each item within\n                the items and relations lists contains name-value pairs. <div class=\"p\">The possible name-value\n                  pairs within the items list are:<ul class=\"ul\" id=\"IESS-identifyCI_S__d74009e89\">\n                    <li class=\"li\">className - the sys_class_name of the CI to be created or updated.</li>\n\n                    <li class=\"li\">values:{} - the field information for the CI as name-value pairs, where the\n                      name is the field name.</li>\n\n                    <li class=\"li\">lookup:[{}] - a list of records with each item having name-value pairs like\n                      the items list. </li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IESS-identifyCI_S__d74009e102\">\n                    <li class=\"li\">parent - index of the parent item in the dependency relation</li>\n\n                    <li class=\"li\">child - index of the child item in the dependency relation</li>\n\n                    <li class=\"li\">type - the relationship type. This is one of the name field values from the\n                      cmdb_rel_type table.</li>\n\n                  </ul>\n</div>"}],"returns":{"type":"String","description":"A JSON formatted string that is a list of results. Each result string is in the\n                format  'items: [{}], relations:[{}]', where each item within the items and\n                relations lists contains name-value pairs. <div class=\"p\">The possible name-value pairs within\n                  the items list are: <ul class=\"ul\" id=\"IESS-identifyCI_S__d74009e153\">\n                    <li class=\"li\">className- the sys_class_name for the CI that was updated or created.</li>\n\n                    <li class=\"li\">operation, which is one of INSERT, UPDATE, UPDATE_WITH_UPGRADE,\n                      UPDATE_WITH_DOWNGRADE, UPDATE_WITH_SWITCH, DELETE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the CI that was updated or created.</li>\n\n                    <li class=\"li\">relatedSysIds - a list of sys_id values of CIs used during lookup based\n                      identification.</li>\n\n                    <li class=\"li\">identifierEntrySysId - sys_id of identifier entry used during matching.</li>\n\n                    <li class=\"li\">errors - a list of errors in the format of (error, message string), where\n                      error can be ABANDONED, INVALID_INPUT_DATA, IDENTIFICATION_RULE_MISSING,\n                      IDENTIFICATION_RULE_FOR_LOOKUP_MISSING, NO_LOOKUP_RULES_FOR_DEPENDENT_CI,\n                      NO_CLASS_NAME_FOR_INDEPENDENT_CI, MISSING_DEPENDENCY, MULTIPLE_DEPENDENCIES,\n                      MULTIPLE_DUPLICATE_RECORDS, RELATION_CHAIN_ENDS_AT_QUALIFIER,\n                      QUALIFICATION_LOOP, TYPE_CONFLICT_IN_QUALIFICATION, MULTI_MATCH,\n                      REQUIRED_ATTRIBUTE_EMPTY, RECLASSIFICATION_NOT_ALLOWED</li>\n\n                    <li class=\"li\">duplicateIndices - a list of indexes of items that are duplicates of the\n                      current item.</li>\n\n                    <li class=\"li\">identificationAttempts - a list of attempts in the format of (attributes,\n                      identiferName, attemptResult, searchOnTable) where <ul class=\"ul\" id=\"IESS-identifyCI_S__d74009e179\">\n                        <li class=\"li\">attributes - the attributes of identifier entry used during\n                          identification</li>\n\n                        <li class=\"li\">identiferName - the CI identifier to which this identifier entry\n                          belongs</li>\n\n                        <li class=\"li\">attemptResult - one of SKIPPED, NO_MATCH, MATCHED, MULTI_MATCH</li>\n\n                        <li class=\"li\">searchOnTable - the table searched during the identification\n                          process.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IESS-identifyCI_S__d74009e196\">\n                    <li class=\"li\">className - the relationship CI's class name and is always cmdb_rel_ci</li>\n\n                    <li class=\"li\">operation - one of INSERT, UPDATE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the relationship CI inserted or updated</li>\n\n                  </ul>\n</div>"},"example":[]},{"name":"runIdentificationAudit","description":"Run an identification audit against the specified CI to detect duplicates.<p>If duplicates are found, duplication tasks are created. Only use this method on CI types\n        with independent identification rules.</p>","params":[{"name":"gr","type":"GlideRecord","description":"The CI on which to run the audit to detect duplicates. The CI must have\n                independent identification rules."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"Interaction":{"meta":{"has_constructor":false,"description":"Use the <span class=\"keyword apiname\">Interaction</span> API to define the behavior for interaction\n    records. This class requires the Interaction Logging, Routing, and Queueing plugin\n      (com.glide.interaction).<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method has been deprecated.</div><br/><br/>To use this class in a scoped API, use the sn_interaction namespace identifier.","example":""},"properties":{},"methods":[{"name":"accept","description":"Accept a new interaction.<p>Accepting a transfer only works for pending transfers. Find any pending transfers in the\n        Interaction Agent Transfer [interaction_agent_transfer] table.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true if the transfer is accepted."},"example":[{"code":"var GR = new GlideRecord('interaction');\nGR.get('b2c0a3af202a1300964f959e0488de75');\nvar interaction = sn_interaction.Interaction.getInteraction(GR).accept();","description":"","output":""}]},{"name":"create","description":"Create an interaction.","params":[{"name":"options","type":"Object","description":"Field values for an interaction record. The channel field with the channel\n                sys_id and channel metadata are required. <p class=\"p\">If a queue is not included in the\n                  parameter, the system returns <samp class=\"ph codeph\">Interaction b2c0a3af202a1300964f959e0488de75\n                    has no queue specified... running queue matching rules.</samp></p>"}],"returns":{"type":"Object","description":"Interaction"},"example":[{"code":"var interactionObj = sn_interaction.Interaction.create({\n\tchannel: '28a59893873103002ae97e2526cb0b5d',\n\tchannel_metadata:{},\n\topened_for: '46d44a23a9fe19810012d100cca80666',\n\tqueue: 'f3a50867b30303002186a72256a8dcb7'\n});","description":"","output":""}]},{"name":"getInteraction","description":"Get an interaction record.","params":[{"name":"interaction","type":"GlideRecord","description":"Interaction record from the interaction table [interaction] that is retrieved\n                from the system."}],"returns":{"type":"Object","description":"Interaction"},"example":[{"code":"var gr = new GlideRecord('interaction');\ngr.get('608a21bd096a9300964ffbd57ba7dd8d');\nvar interaction = sn_interaction.Interaction.getInteraction(gr);","description":"","output":""}]},{"name":"transferToAgent","description":"Transfer an interaction record to an agent using the sys_id for the agent.<p>When an interaction is transferred from one agent to another, the interaction needs to be\n        accepted or rejected using GlideRecord APIs. Use the GlideRecord API to change the state of\n        the interaction and update. For more information, see the GlideRecord - update method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method has been deprecated.</div></p>","params":[{"name":"SysID","type":"String","description":"The sys_id of the user you want to transfer an interaction record to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var GR = new GlideRecord('interaction');\nGR.get('24b927ef202a1300964f959e0488de2d');\nvar interaction = sn_interaction.Interaction.getInteraction(GR);\ninteraction.transferToAgent('6816f79cc0a8016401c5a33be04be441');","description":"","output":""}]},{"name":"transferToQueue","description":"Transfer an interaction record to an interaction queue.<p>Transferring an interaction from one queue to another closes the original interaction and\n        creates an interaction in the new queue.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method has been deprecated.</div></p>","params":[{"name":"SysID","type":"String","description":"The sys_id of the interaction queue you want to transfer the interaction record\n                to."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var GR = new GlideRecord('interaction');\nGR.get('24b927ef202a1300964f959e0488de2d');\nvar interaction = sn_interaction.Interaction.getInteraction(GR);\ninteraction.transferToQueue('86fee1933b101300088d832b44efc474');","description":"","output":""}]}]},"InteractionQueue":{"meta":{"has_constructor":false,"description":"Use the <span class=\"keyword apiname\">InteractionQueue</span> API to configure the behavior for\n    interaction queues and connectors. <div class=\"note note\"><span class=\"notetitle\">Note:</span> This API has been deprecated, use the Queue and Agent APIs instead.</div><br/><br/>This class requires the Interaction Logging, Routing, and Queueing plugin\n      (com.glide.interaction).<br/><br/>To use this class in a scoped API, use the sn_interaction namespace identifier.","example":""},"properties":{},"methods":[{"name":"acceptNext","description":"Assign the next interaction in a queue to the current user.","params":[],"returns":{"type":"Object","description":"Interaction"},"example":[{"code":"var queueGR = new GlideRecord('interaction_queue');\nqueueGR.get('86fee1933b101300088d832b44efc474');\nvar queue = sn_interaction.InteractionQueue.getQueue(queueGR).acceptNext();","description":"","output":""}]},{"name":"get","description":"Get an existing interaction queue by sys_id.","params":[{"name":"queue","type":"GlideRecord","description":"Queue from the interaction_queue table."}],"returns":{"type":"Object","description":"Interaction Queue"},"example":[{"code":"var queueGR = new GlideRecord(\"interaction_queue\");\nqueueGR.get('86fee1933b101300088d832b44efc474');\nvar queue = sn_interaction.InteractionQueue.getQueue(queueGR);","description":"","output":""}]},{"name":"getAvailableAgents","description":"Returns a list of agents who are online and assigned to a particular queue.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This API has been deprecated, use the Agent API instead.</div></p>","params":[],"returns":{"type":"Array","description":"List of available agents by sys_id."},"example":[{"code":"var queueGR = new GlideRecord('interaction_queue');\nqueueGR.get('86fee1933b101300088d832b44efc474');\nvar queue = sn_interaction.InteractionQueue.getQueue(queueGR);\nqueue.getAvailableAgents();","description":"","output":""}]},{"name":"isAgentFor","description":"Check if a user is an agent for a queue.","params":[{"name":"queue","type":"GlideRecord","description":"Sys ID for a queue in the interaction_queue table."}],"returns":{"type":"Boolean","description":"Returns either true or false"},"example":[]},{"name":"isInSchedule","description":"Find out whether the queue is in schedule.","params":[],"returns":{"type":"object","description":"InteractionQueue"},"example":[{"code":"var queueRecord = new GlideRecord('interaction_queue');\nqueueRecord.get('f3a50867b30303002186a72256a8dcb7');\nvar queueInSchedule = sn_interaction.InteractionQueue.getQueue(queueRecord);\nqueueInSchedule.isInSchedule();","description":"","output":""}]}]},"JSON - Scoped":{"meta":{"has_constructor":false,"description":"Provides scoped methods to create JSON objects from a string, and to turn JSON objects\n    into strings. For scoped applications, the JSON API uses static methods that call the JavaScript ES5 native\n      JSON object.","example":""},"properties":{},"methods":[{"name":"parse","description":"Creates an object or primitive type from a JSON formatted string.","params":[{"name":"str","type":"String","description":"A JSON formatted string."}],"returns":{"type":"Object","description":"An object created from the specified string."},"example":[{"code":"var str = '{\"name\":\"George\",\"lastname\":\"Washington\"}';\nvar obj = JSON.parse(str);\ngs.info('The first name is' + obj.name);","description":"","output":"The first name is George"}]},{"name":"stringify","description":"Creates a string from a JSON object.","params":[{"name":"jsonObject","type":"Object","description":"The JSON object to be turned into a string."}],"returns":{"type":"String","description":"A JSON formatted string."},"example":[{"code":"var obj = {\"name\":\"George\",\"lastname\":\"Washington\"};\nvar str =  JSON.stringify(obj);\ngs.info('The object' + str);\n","description":"","output":"The object {&quot;name&quot;:&quot;George&quot;,&quot;lastname&quot;:&quot;Washington&quot;}"}]}]},"Messaging":{"meta":{"has_constructor":false,"description":"Perform actions in a third-party messaging application. This class requires the Messaging Notification plugin (com.glide.notification.messaging) and\n      an integration with a third-party messaging application such as Slack or Teams. Use these\n      methods in an action script in the Message Actions [messaging_observer_handler] table.<br/><br/>Use the sn_notification namespace to access the Messaging API.","example":""},"properties":{},"methods":[{"name":"send","description":"Sends a custom message to a third-party application in response to a messaging event.\n    For example, you can send a custom welcome message to a Slack channel when the Now Actions\n    application installs.<p>Use this method in an action script in the Message Actions [messaging_observer_handler]\n        table.</p>","params":[{"name":"messagingApplication","type":"GlideRecord","description":"Third-party application to send a message to from the Messaging Entities\n                [messaging_application] table."},{"name":"recipient","type":"String","description":"Recipient of the message. When the instance receives an inbound message, you\n                can send a response to a Slack channel, Team, or individual user ID found in the\n                inbound payload."},{"name":"messagingContent","type":"GlideRecord","description":"Message content to send from the Messaging Contents [messaging_content] table."},{"name":"target","type":"GlideRecord","description":"Record used to define dynamic field values in the message. Table must match the\n                  <span class=\"ph uicontrol\">Target table</span> field in the Messaging Contents record. If the\n                Messaging Contents record does not use a target table, set the value to null."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Send a message to a Teams user\nvar app = new GlideRecord('messaging_application');\napp.get('1f2d26527f4213007f005212bdfa9102');\n\nvar content = new GlideRecord('messaging_content');\ncontent.get('17f1f9617320130082999cfd7bf6a706');\n\nsn_notification.Messaging.send(app, '29:1ojsgDg1xuA_jZ70PDI2_6E7mn7P6Mc0wK7z0n2lblL-SaNXYVI1cR7i6qncllAGvdmhy2-kXh76IEVpUHXdz3w', content, null);\n\n//Send a message to a Slack user\nvar app = new GlideRecord('messaging_application');\napp.get('5d2e38c07f6113007f005212bdfa9160');\n\nvar content = new GlideRecord('messaging_content');\ncontent.get('69c48ba77310130082999cfd7bf6a7af');\n\nsn_notification.Messaging.send(app, 'U8P706QFQ', content, null);\n\n//Send a message to a Slack channel\nvar app = new GlideRecord('messaging_application');\napp.get('5d2e38c07f6113007f005212bdfa9160');\n\nvar content = new GlideRecord('messaging_content');\ncontent.get('69c48ba77310130082999cfd7bf6a7af');\n\nsn_notification.Messaging.send(app, 'CA6232N65', content, null);","description":"","output":""}]}]},"Notify":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">NotifyScoped</span> API allows you to interact with Notify calls and\n    SMS messages using scripts. Access the scoped Notify class and its associated methods from the <samp class=\"ph codeph\">sn_notify</samp>\n      namespace.","example":""},"properties":{},"methods":[{"name":"call","description":"Calls the specified E.164-compliant telephone number.","params":[{"name":"notifyPhoneNumber","type":"String","description":"Notify phone number from which to make the call. When you initiate a call, the\n                outgoing call workflow for the number group associated with this number runs. Ensure\n                this workflow includes a <span class=\"ph uicontrol\">join conference call</span> activity to\n                connect the user to the conference call."},{"name":"toPhoneNumber","type":"String","description":"Phone number to call. Called numbers are added to the conference call."},{"name":"conferenceCall","type":"GlideRecord","description":"Optional. If this parameter is passed in, the callers identified in the\n                  <span class=\"keyword parmname\">toPhoneNumber</span> parameter are automatically joined into the\n                conference call identified by this record. <p class=\"p\">GlideRecord for the Notify Call\n                  [notify_call] table which identifies the conference call record. This record is\n                  automatically added to the outgoing call workflow scratchpad as the\n                  workflow.scratchpad.conference_call variable.</p>"},{"name":"userSysId","type":"String","description":"Optional. Unique identifier (sys_id) of the user associated with the\n                call."},{"name":"groupSysId","type":"String","description":"Optional. Unique identifier (sys_id) of the group associated with the\n                call."},{"name":"sourceRecord","type":"GlideRecord","description":"Optional. Source record that prompted this call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var from = '+14048007337';\nvar to = '+31646810495';\n\n// set up call\nnew sn_notify.NotifyScoped().call(from, to);","description":"This example illustrates how to initiate a call to another phone number.","output":""},{"code":"var notify = new sn_notify.NotifyScoped();\nvar from = '+14041234567';\nvar participants = ['+31612345678', '+31623456789', '+31687654321'];\n\n// set up a conference call\nvar conferenceCall = notify.conferenceCall();\n\n// set up the outbound calls for all conference call participants\nfor (var i in participants) {\n    var to = participants[i];\n    notify.call(from, to, conferenceCall);\n}\n\n","description":"This example illustrates how to initiate a call to a list of telephone numbers and\n        automatically join those numbers into a new conference call.","output":""}]},{"name":"conferenceCall","description":"Creates a new conference call GlideRecord.","params":[{"name":"sourceRecord","type":"GlideRecord","description":"Optional. Record that initiated the request to create the conference call. Used\n                to populate the source and table fields on notify_conference_call record."}],"returns":{"type":"GlideRecord","description":"New Notify conference call [notify_conference_call] record."},"example":[{"code":"var notify = new sn_notify.NotifyScoped();\nvar from = '+14041234567';\nvar participants = ['+31612345678', '+31623456789', '+31687654321'];\n\n// set up a conference call\nvar conferenceCall = notify.conferenceCall();\n\n// set up the outbound calls for all conference call participants\nfor (var i in participants) {\n    var to = participants[i];\n    notify.call(from, to, conferenceCall);\n}","description":"","output":""}]},{"name":"dequeueCall","description":"Resumes a call after it was put in a queue (on hold).<p>Use this method to resume calls that were put in a queue with the\n          <span class=\"keyword apiname\">queueCall()</span> method.</p>","params":[{"name":"callRecord","type":"GlideRecord","description":"GlideRecord object on the Notify Call [notify_call] table with the held call\n                you want to resume."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    sn_notify.NotifyScoped.dequeueCall(notifyCallGr);\n}","description":"The following example shows how to reactivate a call that was put on hold.","output":""}]},{"name":"forwardCall","description":"Forwards the specified call to a different call recipient.","params":[{"name":"call","type":"GlideRecord or String","description":"Notify call record or the telephony provider call ID, of the call to be\n                forwarded."},{"name":"destination","type":"GlideRecord or String","description":"Notify phone number record or an E.164-compliant phone number, of the caller to\n                which to forward the call."},{"name":"dtmf","type":"String","description":"Dual Tone - Multi Frequency (DTMF) code to send upon call connection."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var callID = 'CA92374b5aa561dab476a7001db6026edc'; // Twilio Call ID\nvar phoneNumber = '+91406xxxxxxx';\nvar dtmfTones = null;\n \nvar notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    sn_notify.NotifyScoped.forwardCall(notifyCallGr(or) callID, phoneNumber, dtmfTones)\n}","description":"The following example shows how to forward a call to another phone number.","output":""}]},{"name":"getAvailableClients","description":"Returns a list of client sessions that are available to receive calls.","params":[{"name":"notifyNumber","type":"String","description":"Valid Notify phone number."}],"returns":{"type":"Array","description":"GlideRecord from the notify_client_session table for the specified phone\n                number. <p class=\"p\">Returns \"0\" if there are no available client sessions.</p>"},"example":[{"code":"var clientSessionGr = sn_notify.NotifyScoped.getAvailableClients('+185xxxxxxxx'); \n// Here clientSessionGr is of type GlideRecord on 'notify_client_session' table.\n \nvar isLoggedInUserAvailable = false;\nwhile (clientSessionGr.next()) {\n  if (clientSessionGr.user == gs.getUserID())\n    isLoggedInUserAvailable = clientSessionGr.available;\n}\ngs.info('isLoggedInUserAvailable - ' + isLoggedInUserAvailable);","description":"The following example shows how to use the getAvailableClients() method to index into the\n        notify_client_session table and then iterate across all available Notify clients.","output":""}]},{"name":"getPhoneNumbers","description":"Returns all phone numbers and short codes available to Notify.","params":[],"returns":{"type":"List","description":"List of NotifyPhoneNumber objects, each object representing one phone number\n                available to Notify."},"example":[{"code":"// instantiate notify\nvar notify = new sn_notify.NotifyScoped();\n\n// get all available phone numbers\nvar phoneNumbers = notify.getPhoneNumbers();\n\n// iterate over phone numbers\nfor (var i = 0; i &lt; phoneNumbers.size(); i++) {\n\n  var number = phoneNumbers.get(i);\n\n//perform any actions using each phone number\n\n}","description":"This example illustrates how to obtain the Notify phone numbers and then iterate over the\n        list.","output":""}]},{"name":"getShortCodes","description":"Returns all short codes available to Notify.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// instantiate notify\nvar notify = new sn_notify.NotifyScoped();\n\n// get all available shortcodes\nvar shortCodes = notify.getShortCodes();\n\n// iterate over phone numbers\nfor (var i = 0; i &lt; shortCodes.size(); i++) {\n\nvar shortCode = shortCodes.get(i);\n\ngs.log(shortCode.getNumber());\n\n//perform any actions using each shortcode\n}","description":"This example illustrates how to obtain the Notify short codes and then iterate over the\n        list.","output":""}]},{"name":"getTokens","description":"Returns client tokens for any active telephony drivers for use in WebRTC or mobile\n    clients.<p>This method uses the currently logged-in user record as the client.</p>","params":[{"name":"record","type":"GlideRecord","description":"GlideRecord to use to identify the Notify client, such as a group record or a\n                user record."}],"returns":{"type":"String","description":"Web RTC tokens for the supported drivers, as a JSON string with the following\n                format: {driverName1: “token1”, driverName2: “token2”}, such as\n                \"TwilioDirect\":\"eyJhxxxx.eyJleHAiOiIxxxx.7fejxxx_mbLxxx\""},"example":[{"code":"// get Notify client Tokens per active Notify driver for the currently logged in user\nvar json = new sn_notify.NotifyScoped().getTokens();\n \n// Parse the JSON that was return into a tokens object\nvar tokens = JSON.parse(json);\n\n// Log line\ngs.log('Notify client tokens for the currently logged in user');\n\n // iterate over the driver tokens\nfor (var driver in tokens) {\n \tgs.log(driver + ' Driver token: ' + tokens[driver]);\n}","description":"This example shows how to obtain the client tokens for the currently logged in user.","output":""},{"code":"// instantiate Notify\nvar notify = new sn_notify.NotifyScoped.Notify();\n \n// get all Notify Groups\nvar notifyGroup = new GlideRecord(\"notify_group\");\nnotifyGroup.query();\n \n// iterate over all notify groups\nwhile (notifyGroup.next()) {\n  // generate Notify Client tokens per active Notify Driver for this group\n  var json = notify.getTokens(notifyGroup);\n  var tokens = JSON.parse(json);\n \n  for (var driver in tokens) {\n    gs.log(gs.getMessage(\"Notify Client token for {0} driver and Notify Group '{1}': {2}\", [driver, notifyGroup.getValue('name'), tokens[driver]]));\n  }\n}","description":"This example shows how to obtain the client tokens for every Notify group.","output":""},{"code":"var notify = new sn_notify.NotifyScoped();\nvar gr = new GlideRecord('sys_user');\nif (gr.get(gs.getUserID())) {\n  gs.info(notify.getTokens(gr));\n}","description":"This example illustrates how to obtain the client tokens for the active telephony\n        drivers.","output":"{&quot;TwilioDirect&quot;:&quot;eyJhxxxx.eyJleHAiOiIxxxx.7fejxxx_mbLxxx&quot;}"}]},{"name":"getTokenTTL","description":"Returns the maximum amount of time that a client session stays active for a specified\n    telephony driver before automatically timing out.","params":[{"name":"owner","type":"String","description":"Name of the telephony driver for which to retrieve the session length. <p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"NotifyScoped-getTokenTTL_S__ul_ql5_vgc_1gb\">\n                  <li class=\"li\">Twilio: for the old driver</li>\n\n                  <li class=\"li\">TwilioDirect: for the new driver</li>\n\n                </ul>"}],"returns":{"type":"Integer","description":"Maximum length of the session (in seconds). <p class=\"p\">Default: 1800\n                seconds</p>"},"example":[{"code":"var owner = \"TwilioDirect\";  // Valid driver\nvar ttl = SNC.Notify.getTokenTTL(owner);\ngs.info(\"Token TTL for \" + owner + \" --&gt; \" + ttl);\n \nowner = \"Abcxyz\";  // Invalid driver\nttl = SNC.Notify.getTokenTTL(owner);\n// For an invalid driver, we throw NoSuchNotifyDriverException saying that Abcxyzdriver is not available\n// and return the default value of TTL\ngs.info(\"Token TTL for \" + owner + \" --&gt; \" + ttl); ","description":"The following example shows how to properly call this method and the associated response.\n        It also shows what is returned if an invalid driver is passed.","output":""}]},{"name":"hasCapability","description":"Determines whether the specified phone number has the specified capability.<p>The telephony driver associated with the phone number contains a list of all of the\n        capabilities of the phone.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> In the base system, the Notify JS driver only has 'show_speakers' as a capability;\n          this can be modified.</div></p>","params":[{"name":"notifyPhoneNumber","type":"String","description":"Phone number for which to check for the specified capability."},{"name":"capability","type":"String","description":"Capability to detect. The string text must be an exact match to what is in the\n                phone."}],"returns":{"type":"Boolean","description":"Flag that indicates whether the specified phone has the specified\n                  capability.<ul class=\"ul\" id=\"NotifyScoped-hasCapabilitiy_S_S__ul_ryg_y2g_yfb\">\n                  <li class=\"li\">true: phone has the capability</li>\n\n                  <li class=\"li\">false: phone does not have the capability</li>\n\n                </ul>"},"example":[{"code":"// Each driver has a defined set of capabilities.\n\nvar capability = 'show_speakers';\ngs.info(sn_notify.NotifyScoped.hasCapability('+185xxxxxxxx', capability)); // true\n \ncapability = 'send_sms';\ngs.info(sn_notify.NotifyScoped.hasCapability('+185xxxxxxxx', capability)); // false","description":"This example shows how to check if a phone has a specific capability.","output":""}]},{"name":"kick","description":"Removes the specified caller from the current Notify conference call.","params":[{"name":"participant","type":"GlideRecord","description":"GlideRecord object containing the Notify Participant [notify_participant]\n                record of the caller to remove from the conference call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var participant = new GlideRecord('notify_participant');\nparticipant.get('&lt;sys_id&gt;');\nif (participant.isValid()) {\n    new sn_notify.NotifyScoped().kick(participant);\n}","description":"This example shows how to remove a participant from a call.","output":""}]},{"name":"modifyCall","description":"Performs one or more activities on an active Notify phone call.<p>Use this method to change the behavior of a call. For example, transferring a call, playing\n        audio, or forcing a hangup.<div class=\"note note\"><span class=\"notetitle\">Note:</span> The scoped implementation of this method only supports\n          custom Notify activities. Unlike the global implementation, it does not provide a\n          <span class=\"keyword apiname\">NotifyAction</span> API. For details on how to create a custom Notify\n          activity, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/administer/workflow-activities/concept/c_NotifyActivities.html\" target=\"_blank\">Notify workflow\n            activities</a>.</div></p>","params":[{"name":"callRecord","type":"GlideRecord","description":"Notify Call [notify_call] record of the call for which to apply the\n                actions."},{"name":"notifyAction","type":"NotifyAction","description":"NotifyAction object describing one or more activities to perform on the\n                call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"mute","description":"Mutes the specified conference call participant.","params":[{"name":"participantRecord","type":"GlideRecord","description":"GlideRecord from the notify_participant table for the participant to\n                mute."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\n    sn_notify.NotifyScoped.mute(notifyParticipantGr);\n}","description":"The following example shows how to mute a caller.","output":""}]},{"name":"queueCall","description":"Puts the specified call into a queue (on hold).<p>Resume a queued call using the <span class=\"keyword apiname\">dequeueCall()</span> method.</p>","params":[{"name":"callRecord","type":"GlideRecord","description":"GlideRecord object of the Notify Call  record (notify_call table) to put on\n                hold."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var call = new GlideRecord('notify_call');\ncall.get('&lt;call record sys_id&gt;');\nif (call.isValid()) {\n    new sn_notify.NotifyScoped().queueCall(call);\n}","description":"","output":""}]},{"name":"sendBulkSMS","description":"Sends a specified SMS message to the specified list of Notify clients (phone\n    numbers).","params":[{"name":"notifyPhoneNumber","type":"NotifyPhoneNumber","description":"Phone number from which the SMS message is being sent."},{"name":"toPhoneNumbers","type":"String","description":"Comma separated list of E.164-compliant phone numbers to which to send the SMS\n                message."},{"name":"messageBody","type":"String","description":"SMS text to send."},{"name":"source","type":"GlideRecord","description":"Source record that prompted this SMS message, such as an incident."}],"returns":{"type":"String","description":"Unique sys_id of the Notify Message [notify_message] record created by this\n                function."},"example":[{"code":"var incidentGr = new GlideRecord('incident');\nincidentGr.get(active incident sys_id');\nif (incidentGr.isValid()) {\n    sn_notify.NotifyScoped.sendBulkSMS('+15413970605', ['+919885XXXXXX', '+919775XXXXXX'], 'Test automation message', incidentGr);\n}","description":"This example shows how to send an SMS message to multiple phone numbers (bulk SMS).","output":""}]},{"name":"sendSMS","description":"Sends an SMS text message to an E.164-compliant phone number.<p>This method creates a new record on the Notify Message [notify_message] table and\n        associates it with the source record.</p>","params":[{"name":"notifyPhoneNumber","type":"NotifyPhoneNumber","description":"Notify phone number or short code to which to send this SMS message."},{"name":"toPhoneNumber","type":"String","description":"E.164-compliant phone number to which to send the SMS message."},{"name":"messageBody","type":"String","description":"SMS text message."},{"name":"source","type":"GlideRecord","description":"Source record that prompted this SMS message, such as an incident."}],"returns":{"type":"String","description":"Unique message SID; stored in the Notify Message [notify_message] record as\n                message_id."},"example":[{"code":"var incidentGr = new GlideRecord('incident');\nincidentGr.get(active incident sys_id');\nif (incidentGr.isValid()) {\n    sn_notify.NotifyScoped.sendSMS('+15413970605', '+919885XXXXXX', 'Test automation message', incidentGr);\n}","description":"The following example shows how to send an SMS message.","output":""}]},{"name":"unmute","description":"Unmutes the specified conference call participant.","params":[{"name":"participantRecord","type":"GlideRecord","description":"GlideRecord from the notify_participant table for the participant to\n                unmute."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGr.isValid) {\n    sn_notify.NotifyScoped.unmute(notifyParticipantGr);\n}","description":"This example shows how to unmute a specified call participant.","output":""}]}]},"NotifyConferenceUtil":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">NotifyConferenceUtil</span> API provides methods to manage Notify\n    conference calls and SMS messages for various telephony service providers, such as Zoom and\n    WebEx. Using the <span class=\"keyword apiname\">NotifyConferenceUtil</span> API you can:<br/><br/><ul class=\"ul\" id=\"NotifyConferenceUtils__ul_qvb_kqy_4hb\">\n        <li class=\"li\">Create new conference calls</li>\n\n        <li class=\"li\">Add participants by phone number or user ID</li>\n\n        <li class=\"li\">Remove participants from a conference call</li>\n\n        <li class=\"li\">Mute participants in a conference call</li>\n\n        <li class=\"li\">Unmute participants in a conference call</li>\n\n        <li class=\"li\">Obtain the capabilities of a specified service provider</li>\n\n        <li class=\"li\">End a conference call</li>\n\n      </ul><br/><br/>You can use this API in both scoped and global scripts. To use this API you must activate the\n      Conference Notify plugin (com.snc.notify) which requires a separate subscription. For details\n      on activating this plugin, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/notify2/task/t_ActivateNotify.html\" target=\"_blank\">Activate Notify</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a NotifyConferenceUtils object (constructor).","params":[],"returns":{"type":"","description":""},"example":[{"code":"function () {\n\tvar confGR = new GlideRecord('notify_conference_call');\n\tconfGR.get('76d3364d0b5133008e64aabcb4673a6d');\n\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar actionResult = confUtils.addToConferenceByPhoneNumber(\"+917799555331\", confGR)\n\tif (actionResult.status)\n\t\tgs.info('Participant has been added to conference');\n\telse {\n\t\tgs.info('join operation failed');\n\t\tactionResult.warnMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t});\n\t\tactionResult.errorMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t})\n\t}\n})();","description":"","output":""}]},{"name":"addToConferenceByPhoneNumber","description":"Adds a participant to a specified conference call using their phone number to identify\n    the participant.","params":[{"name":"toNumber","type":"String","description":"Phone number of the participant to add to the conference call."},{"name":"confGR","type":"GlideRecord","description":"GlideRecord of the conference call to which to add the specified participant.\n                These records are located in the Notify Conference Call [notify_conference_call]\n                table."}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d74105e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d74105e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d74105e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d74105e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d74105e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"function () {\n\tvar confGR = new GlideRecord('notify_conference_call');\n\tconfGR.get('76d3364d0b5133008e64aabcb4673a6d');\n\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar actionResult = confUtils.addToConferenceByPhoneNumber(\"+917799555331\", confGR)\n\tif (actionResult.status)\n\t\tgs.info('Participant has been added to conference');\n\telse {\n\t\tgs.info('join operation failed');\n\t\tactionResult.warnMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t});\n\t\tactionResult.errorMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t})\n\t}\n})();","description":"","output":""}]},{"name":"addToConferenceByUserId","description":"Adds a participant to the conference call referenced by the passed in GlideRecord using\n    their unique user identifier.","params":[{"name":"userId","type":"String","description":"Sys ID of the participant to add to the specified conference call. This\n                information is located in the User [sys_user] table."},{"name":"confGR","type":"GlideRecord","description":"GlideRecord of the conference call to add the specified participant. These\n                records are located in the Notify Conference Call [notify_conference_call]\n                table."}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d74105e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d74105e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d74105e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d74105e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d74105e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"(function () {\n\tvar confGR = new GlideRecord('notify_conference_call');\n\tconfGR.get('76d3364d0b5133008e64aabcb4673a6d');\n\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar actionResult = confUtils.addToConferenceByUserId(gs.getUserID(), confGR)\n\tif (actionResult.status)\n\t\tgs.info('Participant has been added to conference');\n\telse {\n\t\tgs.info('join operation failed');\n\t\tactionResult.warnMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t});\n\t\tactionResult.errorMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t})\n\t}\n})();\n","description":"","output":""}]},{"name":"doConferenceAction","description":"Performs the specified conference call action, such as starting/ending a conference\n    call or joining, removing, muting, or unmuting participants from a conference call.<p>You can start a new conference call and add participants within a single call to this\n        method or call the method multiple times to start the call and then manage participants\n        separately. In addition, through the passed in data object, you can configure the method\n          to:<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__ul_rqn_z2y_vhb\">\n          <li class=\"li\">Save\n            pointers\n            in the conference call record to the specific record (source record),\n            such as an incident or problem, that is the topic of discussion for the conference\n            call.</li>\n\n          <li class=\"li\">Allow/disallow multiple conference calls for a source record.</li>\n\n          <li class=\"li\">Automatically log the participants that were in the conference call in the \"Work\n            Notes\" field of the source record.</li>\n\n          <li class=\"li\">Have a message read aloud when a participant answers an outgoing call from the\n            conference.</li>\n\n        </ul></p>","params":[{"name":"action","type":"String","description":"Defines the conference call action to perform.<div class=\"p\">The\n                following are the available conference call actions:<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e553\">\n                  <li class=\"li\">start: Starts the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">end: Terminates the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">join: Adds the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array to the conference call identified in <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiJoin: Adds the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array to the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">selfJoin: Adds the currently logged in user to the conference call (no entry\n                    in <span class=\"keyword parmname\">data.items</span> required.)</li>\n\n                  <li class=\"li\">kick: Removes the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array from the conference call identified in\n                    <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiKick: Removes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">mute: Mutes the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array on the conference call identified in <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiMute: Mutes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array on the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">unmute: Unmutes the participant specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiUnmute: Unmutes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                </ul>\n</div>"},{"name":"data","type":"Object","description":"Object that describes the conference call."},{"name":"data.addToWorkNotes","type":"Boolean","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e178\">Flag that indicates whether to add information\n                about the participants that were included in the conference call in the work notes\n                field of the associated record.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e182\">For this functionality to work, you must also\n                  specify values in the <span class=\"keyword parmname\">data.table</span> and\n                    <span class=\"keyword parmname\">data.sysId</span> parameters. These parameters identify the record\n                  in which to add the work notes.</span></p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e194\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>"},{"name":"data.allowMulticonference","type":"Boolean","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e220\">Flag that indicates whether to allow multiple\n                conference calls for a specific record at one time.</span>\n              <p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d74105e223\">For this functionality to work, you must also specify values in the\n                  <span class=\"keyword parmname\">data.table</span> and <span class=\"keyword parmname\">data.sysId</span> parameters.\n                These parameters identify the record that is allowed to have multiple conference\n                calls.</p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e235\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.confId","type":"String","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e253\">Sys ID of the conference call. </span>\n              <p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e257\">The conference Sys ID is located in the Notify\n                  Conference Call [notify_conference_call] table.</span></p>\n<p class=\"p\">Actions for which this\n                parameter is required:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e261\">\n                <li class=\"li\">end</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>\n<div class=\"p\">\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> Participant actions such as mute, unmute, and kick do not require this\n                  parameter to be set as the method obtains this information from the Notify\n                  Conference Call Participant [notify_participant] table.</div>\n\n              </div>"},{"name":"data.fromNumber","type":"String","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e293\">Service provider number to call into for the\n                conference call.</span>\n              <p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d74105e296\">Locate this value in the Number or Phone number column of the Notify Phone Number\n                [notify_number] table.</p>\n<p class=\"p\">Actions for which this parameter is required:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e300\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.isNewConference","type":"Boolean","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e319\">Flag that indicates whether this is a new or an\n                existing conference call.</span>\n              <p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e324\">\n                <li class=\"li\">true: New conference call</li>\n\n                <li class=\"li\">false: Existing conference call</li>\n\n              </ul>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e336\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.items","type":"Array","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e354\">Information for each participant to include in the\n                conference call.</span>\n              <p class=\"p\">Valid array values:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e359\">\n                <li class=\"li\">id: Sys ID of user; located in the User [sys_User] table.<p class=\"p\">Valid actions: join,\n                    multiJoin, start</p>\n</li>\n\n                <li class=\"li\">notifyParticipantId: Sys ID of the Notify participant; located in the Notify\n                  Participant [notify_participant] table.<p class=\"p\">Valid actions: join, kick, multiJoin,\n                    mute, start, unmute</p>\n</li>\n\n                <li class=\"li\">phoneNumber: Phone number of the participant. If this value is passed in\n                  conjunction with either the <span class=\"keyword parmname\">id</span> or\n                  <span class=\"keyword parmname\"> notifyParticipantId</span>, this value supersedes\n                  the phone numbers in the user/participant record and is used to place the\n                    call.<p class=\"p\">Valid actions: join, multiJoin, start</p>\n</li>\n\n                <li class=\"li\">email: Email address of the participant.<p class=\"p\">Valid actions: join, multiJoin,\n                    start</p>\n</li>\n\n              </ul>"},{"name":"data.message","type":"String","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e403\">Message that is read aloud when a user answers the call,\n                such as, \"P1 incident has been created please login to instance.\"</span>\n              <p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e408\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n              </ul>"},{"name":"data.serviceProvider","type":"String","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e432\">Required. Name of conference service provider,\n                such as Zoom or Webex.</span>\n              <p class=\"p\">Actions for which this parameter is required:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e437\">\n                <li class=\"li\">all</li>\n\n              </ul>"},{"name":"data.sysId","type":"String","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e455\">Sys ID of the source record to associate with the\n                conference call.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e459\">For example, if a conference call is held to discuss\n                  a specific incident or problem, put the Sys ID of the incident or problem record\n                  in this value. This Sys ID is stored in the Source column of the NotifyConference\n                  Call [notify_conference_call] table and can later be tracked. </span></p>\n<p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e462\">This parameter is used in conjunction with the\n                    <span class=\"keyword parmname\">data.Table</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                    <span class=\"keyword parmname\">allowMulticonference</span> parameters.</span></p>\n<p class=\"p\">Actions for\n                which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e475\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.table","type":"String","description":"<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d74105e493\">Table that contains the source record to associate with\n                the conference call. A source record can be any record, such as an \"incident\" or\n                \"problem\", that is the topic of discussion in the conference call. </span>\n              <p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d74105e496\">This table name is stored in the Table column of the\n                NotifyConference Call [notify_conference_call] table and can be tracked. </p>\n<p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d74105e498\">This parameter is used in conjunction with the\n                  <span class=\"keyword parmname\">data.sysId</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                  <span class=\"keyword parmname\">allowMulticonference</span> parameters. </p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e511\">\n                <li class=\"li\">start</li>\n\n              </ul>"}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d74105e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"(function (confId) {\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar data = confUtils.getConferenceInputDataTemplate();\n\tdata.table = 'incident';\n\tdata.sysId = '1234';\n\tdata.addToWorkNotes = false;\n\tdata.confId = confId;\n\tdata.message = 'p1 incident has been created';\n\tdata.fromNumber = 'twilio/Telephony driver number';\n\tdata.items.push({ id: 'user3SysId', phoneNumber: '+917799555332' });\n\tdata.items.push({ id: 'user4SysId', email: 'yln99518@gmail.com' });\n\n\tvar result = confUtils.doConferenceAction('start', data);\n\tif (result.status) {\n\t\tgs.info('Start conference action succeeded');\n\t} else\n\t\tgs.info('Start conference action failed');\n\n\tresult.errorMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.warnMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.successMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n})('activeConfSysId');\n","description":"","output":""}]},{"name":"getConferenceInputDataTemplate","description":"Returns a JSON data template to use with the <span class=\"keyword apiname\">doConferenceAction()</span>\n    method. Using this template automatically structures the data object so that you don't have to\n    manually create it.<p>Call this method prior to calling the <span class=\"keyword apiname\">doConferenceAction()</span> method. For\n        the desired conference call action, set the desired parameters within the template, and then\n        pass the template in the <span class=\"keyword apiname\">doConferenceAction()</span> call. For additional\n        information on the valid parameters for each action, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/app-store/dev_portal/API_reference/NotifyConferenceUtils/concept/NotifyConferenceUtils.html#NUtil-doConferenceAction_S_O\" target=\"_blank\">doConferenceAction()</a>.</p><p><span class=\"notetitle\">Note:</span> This is a helper method. You can also manually construct this object and pass that\n        object into the <span class=\"keyword apiname\">doConferenceAction()</span> method and have the same\n        outcome.</p>","params":[],"returns":{"type":"data.items","description":"<span class=\"ph\" id=\"NUtil-getConferenceInputDataTemplate__d74105e354\">Information for each participant to include in the\n                conference call.</span>\n              <p class=\"p\">Valid array values:</p>\n<ul class=\"ul\" id=\"NUtil-getConferenceInputDataTemplate__d74105e359\">\n                <li class=\"li\">id: Sys ID of user; located in the User [sys_User] table.<p class=\"p\">Valid actions: join,\n                    multiJoin, start</p>\n</li>\n\n                <li class=\"li\">notifyParticipantId: Sys ID of the Notify participant; located in the Notify\n                  Participant [notify_participant] table.<p class=\"p\">Valid actions: join, kick, multiJoin,\n                    mute, start, unmute</p>\n</li>\n\n                <li class=\"li\">phoneNumber: Phone number of the participant. If this value is passed in\n                  conjunction with either the <span class=\"keyword parmname\">id</span> or\n                  <span class=\"keyword parmname\"> notifyParticipantId</span>, this value supersedes\n                  the phone numbers in the user/participant record and is used to place the\n                    call.<p class=\"p\">Valid actions: join, multiJoin, start</p>\n</li>\n\n                <li class=\"li\">email: Email address of the participant.<p class=\"p\">Valid actions: join, multiJoin,\n                    start</p>\n</li>\n\n              </ul>"},"example":[{"code":"(function (confId) {\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar data = confUtils.getConferenceInputDataTemplate();\n\tdata.confId = confId;\n\tvar result = confUtils.doConferenceAction('end', data);\n\tif (result.status) {\n\t\tgs.info('Conference call has been ended');\n\t} else\n\t\tgs.info('End conference call action failed');\n\n\tresult.errorMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.warnMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.successMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n})('activeConfSysId');","description":"","output":""}]},{"name":"getServiceProvidersCapabilities","description":"Returns the capabilities of all telephony service provider drivers in the\n    instance.<p>Possible capabilities include:<ul class=\"ul\" id=\"NUtil-getServiceProvidersCapabilities__ul_pq5_qfv_nhb\">\n          <li class=\"li\">archive: archives the conference after it ends</li>\n\n          <li class=\"li\">beepOnLeave: plays a \"beep\" tone when a participant leaves the conference call</li>\n\n          <li class=\"li\">beepOnJoin: plays a \"beep\" tone when a participant joins the conference call</li>\n\n          <li class=\"li\">end: ends the identified conference call</li>\n\n          <li class=\"li\">filesharing: allows file sharing between participants</li>\n\n          <li class=\"li\">join: adds a participant to a conference call</li>\n\n          <li class=\"li\">kick: removes a participant from a conference call</li>\n\n          <li class=\"li\">multiJoin: adds multiple participants to a conference call</li>\n\n          <li class=\"li\">multiKick: removes multiple participants from a conference call</li>\n\n          <li class=\"li\">muteOnJoin: mutes a participant when they initially join a conference call</li>\n\n          <li class=\"li\">multiUnmute: unmutes multiple participants for a conference call</li>\n\n          <li class=\"li\">record: records conference calls</li>\n\n          <li class=\"li\">recording: provides an on-screen indicator when the conference call is being\n            recorded</li>\n\n          <li class=\"li\">screenSharing: allows participant screens to be shared with the group</li>\n\n          <li class=\"li\">selfJoin: adds the current logged in user to a  conference call</li>\n\n          <li class=\"li\">speaking: provides an on-screen message as to who is currently speaking</li>\n\n          <li class=\"li\">start: starts the identified conference call</li>\n\n          <li class=\"li\">unmute: unmutes a participant in a conference call</li>\n\n        </ul></p>","params":[],"returns":{"type":"Object","description":"Key-value pairs of the status of each driver capability.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NUtil-getServiceProvidersCapabilities__ul_jbq_mdt_rhb\">\n                  <li class=\"li\">isSupported = 0: capability is not supported</li>\n\n                  <li class=\"li\">isSupported = 1: capability is supported</li>\n\n                </ul>"},"example":[{"code":"(function () {\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar providerToCapability = confUtils.getServiceProvidersCapabilites();\n\tfor (var provider in providerToCapability) {\n\t\tgs.info('{0} supported capabilities \\n\\n', provider);\n\t\tvar capabilities = providerToCapability[provider]\n\t\tfor (var cap in capabilities)\n\t\t\tif(confUtils.isActionSupported(capabilities[cap].isSupported))\n\t\t\t\tgs.info('\"{0}\" action supported', cap);\n\t\t\telse\n\t\t\t\tgs.info(\"'{0}' action is not supported by this conference driver\", cap);\n\t}\n})();\n","description":"List driver capabilities for all telephony service provider drivers in the instance.","output":"{\n    &quot;Telephony&quot;: {\n        &quot;start&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;end&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;selfJoin&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;join&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;multiJoin&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;mute&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;multiMute&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;unmute&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;multiUnmute&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;kick&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;multiKick&quot;: {\n            &quot;isSupported&quot;: 1,\n            &quot;meta&quot;: {}\n        },\n        &quot;record&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;speaking&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;recording&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;screenSharing&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;fileSharing&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;archive&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;muteOnJoin&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;beepOnJoin&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        },\n        &quot;beepOnLeave&quot;: {\n            &quot;isSupported&quot;: 0,\n            &quot;meta&quot;: {}\n        }\n    }\n}"}]},{"name":"isActionSupported","description":"Determines whether a Notify conference action is supported by a telephony service\n    provider.<p>To use this method, you must first call the\n          <span class=\"keyword apiname\">getServiceProviderCapabilities()</span> method. This method returns an object\n        that contains information about the availability of each possible Notify conference action\n        for each service provider configured in your instance.</p><p>For example:</p><p><pre class=\"pre codeblock\">{\n    \"Telephony\": {\n        \"start\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"end\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"selfJoin\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"join\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiJoin\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"mute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiMute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"unmute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiUnmute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"kick\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiKick\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"record\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"speaking\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"recording\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"screenSharing\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"fileSharing\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"archive\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"muteOnJoin\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"beepOnJoin\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"beepOnLeave\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        }\n    }\n}</pre></p>","params":[{"name":"action","type":"Number","description":"<p class=\"p\">Value of the <span class=\"keyword parmname\">isSupported</span> parameter returned by the\n                    <span class=\"keyword apiname\">getServiceProvidersCapabilities()</span> method for a specific\n                  action and service provider.</p>\n\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> Although the <span class=\"keyword parmname\">isSupported</span> value may appear to be a\n                  Boolean, it is actually a Number. Do not try and evaluate the capabilities as\n                  Boolean values. Use this method as the associated values may be expanded in future\n                  versions.</div>"}],"returns":{"type":"Boolean","description":"Flag that indicates whether the telephony service provider supports the\n                specified action.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NUtil-isActionSupported_N__ul_pkt_mf2_vhb\">\n                  <li class=\"li\">true: action is supported by the service provider</li>\n\n                  <li class=\"li\">false: action is not supported by the service provider</li>\n\n                </ul>"},"example":[{"code":"(function () {\n  var confUtils = new NotifyConferenceUtils();\n  var providerToCapability = confUtils.getServiceProvidersCapabilites();\n    for (var provider in providerToCapability) {\n      gs.info('{0} supported capabilities \\n\\n', provider);\n      var capabilities = providerToCapability[provider]\n      for (var cap in capabilities)\n        if (confUtils.isActionSupported(capabilities[cap].isSupported))\n          gs.info('\"{0}\" action supported', cap);\n        else\n          gs.info(\"'{0}' action is not supported by this conference driver\", cap);\n    }\n})();","description":"","output":""}]},{"name":"kickByParticipantGR","description":"Removes the participant associated with the passed in GlideRecord from the current\n    conference call.","params":[{"name":"notifyParticipantGR","type":"GlideRecord","description":"GlideRecord object of the participant to remove from the conference call. These\n                records are located in the Notify Participant [notify_participant] table."}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d74105e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d74105e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d74105e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d74105e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d74105e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"(function () {\n    var confUtils = new NotifyConferenceUtils();\n    var participantGR = new GlideRecord('notify_participant');  // Participant record contains conf call ID\n    participantGR.get('validParticipantSysId');\n    var actionResult = confUtils.kickByParticipantGR(participantGR);\n    if (actionResult.status)\n        gs.info('Participant has been kicked out of conference');\n    else {\n        gs.info('kick operation failed');\n        actionResult.warnMessages.forEach(function (msg) {\n            gs.info(msg);\n        });\n        actionResult.errorMessages.forEach(function (msg) {\n            gs.info(msg);\n        })\n    }\n})()\n","description":"","output":""}]},{"name":"muteByParticipantGR","description":"Mutes the participant associated with the passed in GlideRecord on the current\n    conference call.","params":[{"name":"notifyParticipantGR","type":"Object","description":"GlideRecord object of the participant to mute. These records are located in the\n                Notify Participant [notify_participant] table."}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d74105e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d74105e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d74105e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d74105e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d74105e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"(function () {\n    var confUtils = new NotifyConferenceUtils();\n    var participantGR = new GlideRecord('notify_participant');\n    participantGR.get('validSysId');\n    var actionResult = confUtils.muteByParticipantGR(participantGR);\n    if (actionResult.status)\n        gs.info('Participant has been muted');\n    else {\n        gs.info('mute operation failed');\n        actionResult.warnMessages.forEach(function (msg) {\n            gs.info(msg);\n        });\n        actionResult.errorMessages.forEach(function (msg) {\n            gs.info(msg);\n        })\n    }\n})()","description":"","output":""}]},{"name":"unmuteByParticipantGR","description":"Unmutes the participant associated with the passed in GlideRecord on the current\n    conference call.","params":[{"name":"notifyParticipantGR","type":"GlideRecord","description":"GlideRecord object of the participant to unmute. These records are located in\n                the Notify Participant [notify_participant] table."}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d74105e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d74105e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d74105e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d74105e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d74105e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"(function () {\n    var confUtils = new NotifyConferenceUtils();\n    var participantGR = new GlideRecord('notify_participant');\n    participantGR.get('validSysId');\n    var actionResult = confUtils.unmuteByParticipantGR(participantGR);\n    if (actionResult.status)\n        gs.info('Participant has been Unmuted');\n    else {\n        gs.info('Unmute operation failed');\n        actionResult.warnMessages.forEach(function (msg) {\n            gs.info(msg);\n        });\n        actionResult.errorMessages.forEach(function (msg) {\n            gs.info(msg);\n        })\n    }\n})();\n","description":"","output":""}]}]},"NotifyPhoneNumber":{"meta":{"has_constructor":false,"description":"The Scoped NotifyPhoneNumber API allows you to query information about a Notify phone\n    number. Access the scoped <span class=\"keyword apiname\">NotifyPhoneNumber</span> API and its associated methods in the\n        <samp class=\"ph codeph\">sn_notify</samp> namespace.","example":""},"properties":{},"methods":[{"name":"getDialCode","description":"Returns the international dialing code for a Notify phone number.","params":[],"returns":{"type":"String","description":"International phone code for a country."},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getDialCode());\n}","description":"This example shows how to obtain the dial code for a phone number.","output":""}]},{"name":"getID","description":"Returns the ID of this phone number as defined by the telephony provider.","params":[],"returns":{"type":"String","description":"Identifier of the number within the telephony provider."},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getID());\n}","description":"This example shows how to obtain the unique identifier for a phone number.","output":""}]},{"name":"getNumber","description":"Returns the numerical phone number for the current Notify caller.","params":[],"returns":{"type":"String","description":"E.164-compliant phone number."},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getNumber());\n}","description":"This example shows how to obtain a Notify caller's phone number.","output":""}]},{"name":"getOwner","description":"Returns the telephony provider associated with this phone number.","params":[],"returns":{"type":"String","description":"Telephony provider associated with the number: Twilio."},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getOwner());\n}","description":"This example shows how to obtain the telephony provide that owns the specified phone\n        number.","output":""}]},{"name":"getTerritory","description":"Returns the country associated with the phone number.","params":[],"returns":{"type":"String","description":"Name of the country to which the phone number belongs."},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getTerritory());\n}","description":"This example shows how to obtain the country of a Notify caller.","output":""}]},{"name":"supportsConferenceCall","description":"Determines if the Notify phone number supports conference calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports conference\n                  calling.<ul class=\"ul\" id=\"NPNScoped-supportsConferenceCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support conference calling</li>\n\n                  <li class=\"li\">false: phone number does not support conference calling</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsConferenceCall());\n}","description":"This example shows how to determine if a Notify caller supports conference calls.","output":""}]},{"name":"supportsIncomingPhoneCall","description":"Determines if the Notify phone number supports receiving phone calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports incoming phone\n                  calls.<ul class=\"ul\" id=\"NPNScoped-supportsIncomingPhoneCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support incoming phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support incoming phone calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsIncomingPhoneCall());\n}","description":"This example shows how to determine if a Notify caller can receive incoming phone\n        calls.","output":""}]},{"name":"supportsIncomingSMS","description":"Determines if the Notify phone number supports receiving SMS messages.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports incoming SMS\n                  messages.<ul class=\"ul\" id=\"NPNScoped-supportsIncomingSMS__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support incoming SMS messages</li>\n\n                  <li class=\"li\">false: phone number does not support incoming SMS messages</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsIncomingSMS());\n}","description":"This example shows how to determine if a Notify caller can receive incoming SMS\n        messages.","output":""}]},{"name":"supportsOutgoingPhoneCall","description":"Determines if the Notify phone number supports initiating phone calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports initiating\n                outgoing phone calls.<ul class=\"ul\" id=\"NPNScoped-supportsOutgoingPhoneCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support initiating outgoing phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support initiating outgoing phone calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notfy.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsOutgoingPhoneCall());\n}","description":"This example shows how to determine if a Notify caller can make outgoing phone calls.","output":""}]},{"name":"supportsOutgoingSMS","description":"Determines if the Notify phone number supports sending SMS messages.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports sending SMS\n                  messages.<ul class=\"ul\" id=\"NPNScoped-supportsOutgoingSMS__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support sending SMS messages</li>\n\n                  <li class=\"li\">false: phone number does not support sending SMS messages</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsOutgoingSMS());\n}","description":"This example shows how to determine if a Notify caller can initiate outgoing SMS\n        messages.","output":""}]},{"name":"supportsRecording","description":"Determines if the Notify phone number supports recording phone calls.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports recording phone\n                  calls.<ul class=\"ul\" id=\"NPNScoped-supportsRecording__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support recording phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support recording phone calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notify.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsRecording());\n}","description":"This example shows how to determine if a Notify caller can record calls.","output":""}]},{"name":"supportsWebRTC","description":"Determines if the Notify phone number supports calls to a browser, such as in a WebRTC\n    implementation.","params":[],"returns":{"type":"Boolean","description":"Value that indicates whether the Notify phone number supports\n                browser-to-browser (WebRTC) calls.<ul class=\"ul\" id=\"NPNScoped-supportsWebRTC__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support browser-to-browser (WebRTC) calls</li>\n\n                  <li class=\"li\">false: phone number does not support browser-to-browser (WebRTC) calls</li>\n\n                </ul>"},"example":[{"code":"var numbers = sn_notify.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsWebRTC());\n}","description":"This example shows how to determine if a Notify caller can initiate/accept\n        browser-to-browser calls.","output":""}]}]},"OrderGuide - Scoped":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">OrderGuide</span> API enables you to initialize and view an order guide\n    details. To use this class in a scoped application, use the sn_sc namespace identifier. The\n    Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api) that is enabled by\n    default is required to access the <span class=\"keyword apiname\">OrderGuide</span> API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the OrderGuide class with the specified sys_id.","params":[{"name":"sys_id","type":"String","description":"sys_id of the OrderGuide."}],"returns":{"type":"","description":""},"example":[{"code":"var cart=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");","description":":","output":""}]},{"name":"getID","description":"Returns the sys_id of the order guide.","params":[],"returns":{"type":"String","description":"sys_id of the order guide."},"example":[{"code":"var cart=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log(cart.getID());\n","description":":","output":"6690750f4f7b4200086eeed18110c761"}]},{"name":"init","description":"Initialises the order guide with the specified catalog items and the variables, and\n    returns the order guide.","params":[{"name":"request","type":"Map","description":"A JSON object with the Catalog item and variable details."}],"returns":{"type":"Map","description":"A JSON object with the initialised order guide details."},"example":[{"code":"var guide = new sn_sc.OrderGuide('6690750f4f7b4200086eeed18110c761');\n \nvar map = {};\nmap.variables = {};\n//map.sysparm_id = '6690750f4f7b4200086eeed18110c761';\nmap.variables['IOce433d0f4f7b4200086eeed18110c74d'] = '221f3db5c6112284009f4becd3039cc9'; //Here ce433d0f4f7b4200086eeed18110c74d is the sys_id of the variable and 221f3db5c6112284009f4becd3039cc9 is its value\nvar includedItems = guide.init(map)","description":":","output":"{\n&quot;cascade_variable_map&quot;:{\n},\n&quot;items&quot;:[\n{\n&quot;order&quot;:&quot;-1&quot;,\n&quot;quantity&quot;:&quot;1&quot;,\n&quot;show_quantity&quot;:false,\n&quot;sys_id&quot;:&quot;a4022d7b87c20300e3010cf888cb0bb2&quot;\n},\n{\n&quot;order&quot;:&quot;300&quot;,\n&quot;quantity&quot;:&quot;1&quot;,\n&quot;show_quantity&quot;:false,\n&quot;sys_id&quot;:&quot;186d917a6fab7980575967ddbb3ee4f2&quot;\n},\n{\n&quot;order&quot;:&quot;600&quot;,\n&quot;quantity&quot;:&quot;1&quot;,\n&quot;show_quantity&quot;:false,\n&quot;sys_id&quot;:&quot;8b3ae7fedc1be1004ece5c08239e522b&quot;\n}\n],\n&quot;variable_assignments&quot;:{\n}\n}"}]},{"name":"isIncludeItems","description":"Specifies if the <span class=\"ph uicontrol\">Show Include Toggle</span> (include_items) check box\n    is selected for the specified order guide.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"ph uicontrol\">Show Include Toggle</span> field does not appear on the Order\n          guide form by default.</div></p>","params":[],"returns":{"type":"Boolean","description":"Returns true if the <span class=\"ph uicontrol\">Show Include Toggle</span> check box is\n                selected for the specified order guide. Else, returns false."},"example":[{"code":"var orderGuide=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log(orderGuide.isIncludeItems());","description":"","output":"true"}]},{"name":"isTwoStep","description":"Specifies if the two-step checkout is enabled.","params":[],"returns":{"type":"Boolean","description":"Returns true if the two-step checkout is enabled. Else returns false."},"example":[{"code":"var orderGuide=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log(orderGuide.isTwoStep());","description":":","output":"false"}]},{"name":"isUseCustomCart","description":"Specifies if a separate cart (different from that for catalog items) usage is enabled\n    for a two-step order guide.","params":[],"returns":{"type":"Boolean","description":"Returns true if a separate cart usage is enabled for a two-step order guide.\n                Else, returns false."},"example":[{"code":"var orderGuide=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log (orderGuide.isUseCustomCart());","description":":","output":"false"}]},{"name":"navigateFromMap","description":"Navigates to the catalog items of an order guide.","params":[{"name":"itemDetails","type":"Map","description":"A JSON object with details of catalog items in the order guide."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var orderGuide=new sn_sc.OrderGuide.navigateFromMap(itemdetails);","description":":","output":""}]}]},"PAScorecard":{"meta":{"has_constructor":false,"description":"The PAScorecard API enables you to fetch data about indicators and their associated\n    records, such as breakdowns. ","example":""},"properties":{},"methods":[{"name":"addParam","description":"Add a query parameter to filter the returned scores.<p>Call this method multiple times on the same PAScorecard object to pass multiple parameters,\n        such as the indicator sys_id and a breakdown sys_id. After specifying all parameters, call\n          <span class=\"keyword apiname\">query()</span> to run the query.</p><p>If you query a PAScorecard object with no parameters, the API returns a list of all\n        indicators that are displayed on the <span class=\"ph\">Analytics Hub</span>, with their scores.</p>","params":[{"name":"uuid","type":"String","description":"Enter a colon-separated list of sys_id values to specify which indicators,\n                breakdowns, aggregates, and domains to query. The parameter follows this\n                    format:<p class=\"p\"><span class=\"ph\">&lt;indicator sys_id&gt;:&lt;breakdown sys_id&gt;:&lt;element\n          sys_id&gt;:&lt;lvl-2 breakdown sys_id&gt;:&lt;lvl-2 element sys_id&gt;:&lt;aggregate\n          sys_id&gt;:&lt;domain_sys_id&gt;</span></p>\n<p class=\"p\">The parameter must begin with the sys_id of an indicator record.\n                  Optionally, you can append the sys_id values of a breakdown and breakdown element\n                  to group the response based on the breakdown, and the sys_id of an aggregate to\n                  apply that aggregate. You can use a breakdown with an aggregate, or use only\n                  one.</p>\n<p class=\"p\">For information about obtaining the sys_id values of records, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/table-administration/concept/c_UniqueRecordIdentifier.html\" target=\"_blank\">Unique record identifier (sys_id)</a>.</p>\n\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> If an indicator is configured to use a\n                    <span class=\"ph uicontrol\">Default time series</span>, all  <span class=\"ph\">Analytics Hub</span> values for that indicator use that time series aggregation.</div>"},{"name":"breakdown","type":"String","description":"Enter the sys_id of a breakdown to return chart information\n              organized as defined by the breakdown. For example, enter the sys_id of a priority\n              breakdown to return separate task chart information for each priority value, such as\n              Number of open incidents / Priority / 2 - High."},{"name":"breakdown_relation","type":"String","description":"Specify the sys_id of a breakdown relation to break down the returned data\n                using that relation. You can view available breakdown relations by setting the\n                  <span class=\"keyword parmname\">include_available_breakdowns</span> parameter to\n                  <kbd class=\"ph userinput\">true</kbd>."},{"name":"elements_filter","type":"String","description":"Specify the sys_id of an elements filter to apply that filter to the returned\n                data."},{"name":"display","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to return only\n              indicators that are displayed on the <span class=\"ph\">Analytics Hub</span>. Set this parameter to <kbd class=\"ph userinput\">all</kbd> to return all indicators. This\n              parameter is <samp class=\"ph codeph\">true</samp> by default."},{"name":"favorites","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to return only\n              indicators that are favorites of the querying user."},{"name":"key","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to return results only\n              for key indicators."},{"name":"target","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to return results only\n              for indicators that have a target set on the <span class=\"ph\">Analytics Hub</span>."},{"name":"contains","type":"String","description":"Enter a comma-separated list of names or descriptions to\n              return results only from indicators with a matching value."},{"name":"tags","type":"String","description":"Enter an indicator group sys_id to return the indicators in that group. Do not\n                use <span class=\"keyword parmname\">uuid</span> with this parameter."},{"name":"per_page","type":"String","description":"Enter the maximum number of indicators each query can\n              return on a page. By default this value is 10, and the maximum is 100."},{"name":"page","type":"String","description":"Specify the page number. For example, when querying 20 <span class=\"ph\">Analytics Hub</span>s with the default per_page value (10), specify a page value of 2 to retrieve <span class=\"ph\">Analytics Hub</span>s 11-20."},{"name":"sortby","type":"String","description":"Specify the value to use when sorting results. Valid values\n              for this parameter are value, change, changeperc, gap, gapperc, duedate, name, order,\n              default, group, indicator_group, frequency, target, date, trend, bullet, and\n              direction. By default, queries sort records by value."},{"name":"sortdir","type":"String","description":"Specify the sort direction, ascending or descending. By\n              default, queries sort records in descending order. Set this parameter to\n                <samp class=\"ph codeph\">asc</samp> to sort in ascending order."},{"name":"display_value","type":"String","description":"Data retrieval operation for reference and choice fields.<div class=\"p\">Based on this\n                  value, the display value and/or the actual value in the database are retrieved.<ul class=\"ul\" id=\"PASc-addParam_S_S__ul_vzj_1pw_pp\">\n                    <li class=\"li\"><span class=\"keyword option\">true</span> returns display values for all of the fields.</li>\n\n                    <li class=\"li\"><span class=\"keyword option\">false</span> returns actual values from the database. If a value\n                      is not specified, this parameter defaults to <span class=\"keyword option\">false</span>.</li>\n\n                    <li class=\"li\"><span class=\"keyword option\">all</span> returns both actual and display values.</li>\n\n                  </ul>\n</div>"},{"name":"exclude_reference_link","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to hide additional\n              information provided for reference fields, such as the URI to the reference\n              resource."},{"name":"include_scores","type":"String","description":"<span class=\"ph\">Set to\n                  <kbd class=\"ph userinput\">true</kbd> to return indicator scores for the entire time range\n                selected on the <span class=\"ph\">Analytics Hub</span>. If a value is not specified, this parameter defaults to false and returns only\n                the most recent score value.</span><p class=\"p\">To constrain the date range of the scores that are returned, combine this\n                  parameter with the <span class=\"keyword parmname\">from</span> and <span class=\"keyword parmname\">to</span>\n                  parameters.</p>"},{"name":"from","type":"String","description":"<span class=\"ph\">Specify the earliest date to\n                return scores from. Only scores from this date or later are returned. The date\n                format must match the ISO-8601 standard.</span><p class=\"p\">This parameter requires that <span class=\"keyword parmname\">include_scores</span> is set to\n                    <kbd class=\"ph userinput\">true</kbd>.</p>"},{"name":"to","type":"String","description":"<span class=\"ph\">Specify the latest date to return\n                scores from. Only scores from this date or earlier are returned. The date format\n                must match the ISO-8601 standard. </span><p class=\"p\">This parameter requires that <span class=\"keyword parmname\">include_scores</span> is set to\n                    <kbd class=\"ph userinput\">true</kbd>.</p>"},{"name":"step","type":"String","description":"Specify a numeric value to skip scores, based on the\n              indicator frequency. For example, specify a value of 3 to return only scores from\n              every third day for a daily indicator, or from every third week for a weekly\n              indicator."},{"name":"limit","type":"String","description":"Specify the maximum number of scores to return."},{"name":"include_available_breakdowns","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to return all available\n              breakdowns for an indicator. If a value is not specified, this parameter defaults to\n              false and returns no breakdowns."},{"name":"include_available_aggregates","type":"String","description":"Set to <kbd class=\"ph userinput\">true</kbd> to return all possible\n              aggregates for an indicator, including aggregates that have already been applied. If a\n              value is not specified, this parameter defaults to false and returns no\n              aggregates."},{"name":"include_realtime","type":"String","description":"Set this parameter to <kbd class=\"ph userinput\">true</kbd> to return\n              the realtime_enabled element which indicates if real-time scores are enabled for the\n              indicator, and the realtime_value element which contains the real-time score value.\n              This parameter is not supported for formula indicators."},{"name":"include_target_color_scheme","type":"String","description":"Set this parameter to <kbd class=\"ph userinput\">true</kbd> to return\n              the target_color_scheme element that contains the minimum and maximum values, and the\n              color of each section of the target color scheme for the <span class=\"ph\">Analytics Hub</span>."},{"name":"include_forecast_scores","type":"String","description":"<span class=\"ph\">Set this parameter to\n                  <kbd class=\"ph userinput\">true</kbd> to return the forecast_scores element that contains an\n                array of date-value pairs that define the forecast data for the <span class=\"ph\">Analytics Hub</span>.</span><p class=\"p\">This paramater requires that the <span class=\"keyword parmname\">include_scores</span>\n                  parameter is also set to <kbd class=\"ph userinput\">true</kbd>.</p>"},{"name":"include_trendline_scores","type":"String","description":"<span class=\"ph\">Set this parameter to\n                  <kbd class=\"ph userinput\">true</kbd> to return the trendline_scores element that contains\n                an array of date-value pairs that define the <span class=\"ph\">Analytics Hub</span> trendline.</span><p class=\"p\">This paramater requires that the <span class=\"keyword parmname\">include_scores</span>\n                  parameter is also set to <kbd class=\"ph userinput\">true</kbd>.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sc = new SNC.PAScorecard(); //in a scoped app, do not use the SNC namespace\nsc.addParam('uuid', 'fb007202d7130100b96d45a3ce6103b4');       // Number of open incidents\nsc.addParam('breakdown', '0df47e02d7130100b96d45a3ce610399');  // by Priority\nvar result = sc.query();  // Query results, which are returned as an object\nfor (var i = 0; i &lt; result.length; i++)\ngs.info(result[i].name + ': ' + result[i].value + ' ' + result[i].unit.display_value);\n","description":"In this example, the uuid parameter specifies the Number of open incidents indicator, and\n        the breakdown parameter specifies the Priority breakdown. Both parameters have the sys_id of\n        the respective records as their values. The query() function returns the results as an\n        object.","output":""}]},{"name":"query","description":"Perform a query based on the specified parameters and return the results as an\n    object.<p>Before calling this method, configure parameters for the PAScorecard object by calling\n          <span class=\"keyword apiname\">addParam(String parameter, String value)</span>.</p>","params":[],"returns":{"type":"Object","description":"The PAScorecard object."},"example":[]},{"name":"result","description":"Get the last query result as an object.<p><span class=\"ph\" id=\"PASc-result__ph_pascorecard_result_noquery\">This method does not perform a query. To perform a\n          query before returning the result, use <span class=\"keyword apiname\">query()</span>.</span></p><p>This function cannot run in a scope other than global.</p>","params":[],"returns":{"type":"Object","description":"The results from the last query, returned as a JS object."},"example":[]}]},"PASnapshot":{"meta":{"has_constructor":false,"description":"The PASnapshot API enables you to query information about <span class=\"ph\">Performance Analytics</span> snapshots.\n    Snapshots are <span class=\"ph\">the lists of records (sys_ids) that are collected at the\n              time that the scores for those records are collected. A snapshot is made only for\n              indicators with <span class=\"ph uicontrol\">Collect records</span> selected.</span> You can query information about a snapshot at a certain date using the indicator sys_id and\n      date, and perform comparisons between snapshots for an indicator at different dates.","example":""},"properties":{},"methods":[{"name":"getCompareIDs","description":"Compare records in snapshots for a specified indicator at multiple dates, such as to\n    identify records included in one snapshot but not the other.","params":[{"name":"sys_id","type":"String","description":"The indicator sys_id."},{"name":"date1","type":"Number","description":"The date of the first snapshot, in the format yyyymmdd."},{"name":"date2","type":"Number","description":"The date of the second snapshot, in the format yyyymmdd."},{"name":"type","type":"String","description":"Specifies what data to retrieve. Valid values are:<ul class=\"ul\" id=\"PASn-getCompareIDs_S_n_n_S__ul_pdr_xnr_nw\">\n                  <li class=\"li\">all1: all records in the first snapshot</li>\n\n                  <li class=\"li\">all2: all records in the second snapshot</li>\n\n                  <li class=\"li\">shared: records that are in both snapshots</li>\n\n                  <li class=\"li\">movedin: records that are in the second snapshot, but not the first</li>\n\n                  <li class=\"li\">movedout: records that are in the first snapshot, but not the second</li>\n\n                </ul>"}],"returns":{"type":"String","description":"A comma-separated list of sys_id values."},"example":[{"code":"var snapshot2 = PASnapshot.getCompareIDs('fb007202d7130100b96d45a3ce6103b4', 20160430, 20160531, 'shared');\ngs.info(snapshot2);","description":"","output":"*** Script:\n        09c01200d7002100b81145a3ce6103ab,19c01200d7002100b81145a3ce6103e9,fcc01200d7002100b81145a3ce61035b,…."}]},{"name":"getCompareQuery","description":"Get the query used to compare records in snapshots for a specified indicator at\n    multiple dates.","params":[{"name":"sys_id","type":"String","description":"The indicator sys_id."},{"name":"date1","type":"Number","description":"The date of the first snapshot, in the format yyyymmdd."},{"name":"date2","type":"Number","description":"The date of the second snapshot, in the format yyyymmdd."},{"name":"type","type":"String","description":"Specifies what data to retrieve. Valid values are:<ul class=\"ul\" id=\"PASn-getCompareQuery_S_n_n_S__ul_pdr_xnr_nw\">\n                  <li class=\"li\">all1: all records in the first snapshot</li>\n\n                  <li class=\"li\">all2: all records in the second snapshot</li>\n\n                  <li class=\"li\">shared: records that are in both snapshots</li>\n\n                  <li class=\"li\">movedin: records that are in the second snapshot, but not the first</li>\n\n                  <li class=\"li\">movedout: records that are in the first snapshot, but not the second</li>\n\n                </ul>"}],"returns":{"type":"String","description":"The table, view, and encoded query as a JSON string."},"example":[{"code":"var snapshot4 = PASnapshot.getCompareQuery('fb007202d7130100b96d45a3ce6103b4', 20160530, 20160531, 'all1');\ngs.info(snapshot4);\n","description":"","output":"*** Script: {&quot;view&quot;:&quot;&quot;,&quot;query&quot;:&quot;sys_idINjavascript:new\n        PAUtils().getCompareSnapshotIDs(\\&quot;fb007202d7130100b96d45a3ce6103b4\\&quot;,\\&quot;20160530\\&quot;,\\&quot;20160531\\&quot;,\\&quot;all1\\&quot;)&quot;,&quot;table&quot;:&quot;incident&quot;}"}]},{"name":"getIDs","description":"Get the sys_id values for all records contained in the snapshot for a specified\n    indicator at the specified date.","params":[{"name":"sys_id","type":"String","description":"The indicator sys_id."},{"name":"date","type":"Number","description":"The date when the snapshot was taken, in the format yyyymmdd."}],"returns":{"type":"String","description":"A comma-separated list of sys_id values."},"example":[{"code":"var snapshot1 = PASnapshot.getIDs('fb007202d7130100b96d45a3ce6103b4', 20160530);\ngs.info(snapshot1);","description":"","output":"*** Script:\n        09c01200d7002100b81145a3ce6103ab,19c01200d7002100b81145a3ce6103e9,fcc01200d7002100b81145a3ce61035b,…."}]},{"name":"getQuery","description":"Get the query used to generate the snapshot for a specified indicator at the specified\n    date.","params":[{"name":"sys_id","type":"String","description":"The indicator sys_id."},{"name":"date","type":"Number","description":"The date when the snapshot was taken, in the format yyyymmdd."}],"returns":{"type":"String","description":"The table, view, and encoded query as a JSON string."},"example":[{"code":"var snapshot3 = PASnapshot.getQuery('fb007202d7130100b96d45a3ce6103b4', 20160530);\ngs.info(snapshot3);","description":"","output":"*** Script: {&quot;view&quot;:&quot;&quot;,&quot;query&quot;:&quot;sys_idINjavascript:new\n        PAUtils().getSnapshotIDs(\\&quot;fb007202d7130100b96d45a3ce6103b4\\&quot;,\\&quot;20160530\\&quot;)&quot;,&quot;table&quot;:&quot;incident&quot;}"}]}]},"Queue":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">Queue</span> API allows you to retrieve or join a <span class=\"ph\">Connect Support</span> chat queue. To use this class in a scoped application, use the sn_connect namespace identifier. The\n      Connect Scriptable APIs plugin (ID: com.glide.connect.scriptable) should be enabled to access\n      the <span class=\"keyword apiname\">Queue</span> API.","example":""},"properties":{},"methods":[{"name":"get","description":"Get an existing chat queue by sys_ID.","params":[{"name":"SysID","type":"String","description":"The sysID of a queue from the chat_queue table."}],"returns":{"type":"Object","description":"Returns a conversation queue object."},"example":[{"code":"var queue = sn_connect.Queue.get(\"ab73be7dc09a4300964f336ee6b74361\");","description":":","output":""}]},{"name":"join","description":"Add the current user to an existing <span class=\"ph\">Connect Support</span> chat queue. Use a sysID\n    from the chat_queue table.","params":[{"name":"Question","type":"String","description":"Type a question to add to the queue."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var queue = sn_connect.Queue.get(\"ab73be7dc09a4300964f336ee6b74361\");\nqueue.join(\"How do I access my email?\");","description":":","output":""}]}]},"RenderProperties":{"meta":{"has_constructor":false,"description":"The RenderProperties API provides methods about the current page and is available in\n  Jelly scripts and in UI-action conditions and scripts. Access <span class=\"keyword apiname\">RenderProperties</span> methods using the static variable\n    <samp class=\"ph codeph\">RP</samp>.","example":""},"properties":{},"methods":[{"name":"getEncodedQuery","description":"Returns the encoded query from the URL sent to the page.","params":[],"returns":{"type":"String","description":"Returns the encoded query from the URL sent to the form."},"example":[]},{"name":"getListControl","description":"Returns the list control object for the page.","params":[],"returns":{"type":"ScopedSysListControl object","description":"The list control object for the page."},"example":[]},{"name":"getParameterValue","description":"Returns the value of the specified URL parameter.","params":[{"name":"parameterName","type":"String","description":"Name of the parameter passed on the URL."}],"returns":{"type":"String","description":"The parameter's value."},"example":[]},{"name":"getReferringURL","description":"Returns the URL where the request originated.","params":[],"returns":{"type":"String","description":"The URL of the page where the request originated."},"example":[]},{"name":"getViewName","description":"Returns the name of the view in use.","params":[],"returns":{"type":"String","description":"The name of the view being used."},"example":[]},{"name":"getWindowProperties","description":"Returns the window's properties.","params":[],"returns":{"type":"Object","description":"The window's properties"},"example":[]},{"name":"isInDevStudio","description":"Returns true if the page is part of Studio.","params":[],"returns":{"type":"Boolean","description":"Returns true if the page is part of Studio."},"example":[]},{"name":"isInteractive","description":"Returns true if this is an interactive session. An interactive session is when a user\n    has logged in as opposed to a REST request.","params":[],"returns":{"type":"Boolean","description":"True if this is an interactive session."},"example":[]},{"name":"isManyToMany","description":"Returns true when the <samp class=\"ph codeph\">sysparm_collection_related_file</samp> URL parameter is\n    set.","params":[],"returns":{"type":"Boolean","description":"Returns true when the <samp class=\"ph codeph\">sysparm_collection_related_file</samp> URL\n                parameter is set."},"example":[]},{"name":"isRelatedList","description":"Returns true when the <samp class=\"ph codeph\">sys_is_related_list</samp> URL-parameter is true.\n    Returns false if the parameter is not present.","params":[],"returns":{"type":"Boolean","description":"True if the URL parameter <samp class=\"ph codeph\">sys_is_related_list</samp> is true."},"example":[]}]},"ReportCiStatusOutputJS":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword parmname\">ReportCiStatusOutputJS</span> methods are getters that return\n    specific object properties for the DiscoveryAPI <span class=\"keyword parmname\">reportCiIpAddressStatus</span>\n    method and then convert the information into a JSON string. ","example":""},"properties":{},"methods":[{"name":"getCiOperationStatus","description":"Used to return the state of the scanned CI.<p>This is a calculated field based on the last_state field in discovery_device_history table\n        and the state field in the discovery_status table.</p>","params":[],"returns":{"type":"string","description":"The three possible states returned by this method are:<ul class=\"ul\" id=\"r_RepCiStatOutgetCiOperationStatus__ul_kll_ngb_scb\">\n                  <li class=\"li\">Processing: Discovery is still processing the request.</li>\n\n                  <li class=\"li\">Successful: A CI was created or updated.</li>\n\n                  <li class=\"li\">NotSuccessful: A CI was not created or updated, and the Discovery status was\n                    Completed or Cancelled.</li>\n\n                </ul>"},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(CiOperationStatus): \" + ipResultObj.getCiOperationStatus());\n","description":"","output":""}]},{"name":"getCmdbCI","description":"Used to return the value in the cmdb_ci field from the discovery_device_history table\n    for the CI being scanned.","params":[],"returns":{"type":"string","description":"Sys_id of the CI created or updated. This value can be null in the case of\n                intermediate results before a CI is created."},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(cmdb): \" + ipResultObj.getCmdbCI());\n","description":"","output":""}]},{"name":"getDiscoveryState","description":"Used to return the value from the <span class=\"ph uicontrol\">State</span> field in the Discovery\n    Status [discovery_status] table.<p>The values returned by this method are used to calculate the value returned by the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_RepCiStatOutgetCiOperationStatus\" title=\"Used to return the state of the scanned CI.\">getCiOperationStatus()</a> method</p>","params":[],"returns":{"type":"string","description":"The possible states returned by this method are:<ul class=\"ul\" id=\"r_RepCiStatOutgetDiscoveryState__ul_kll_ngb_scb\">\n                  <li class=\"li\">Starting</li>\n\n                  <li class=\"li\">Active</li>\n\n                  <li class=\"li\">Complete</li>\n\n                  <li class=\"li\">Cancelled</li>\n\n                </ul>"},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(discoveryState): \" + ipResultObj.getDiscoveryState());\n","description":"","output":""}]},{"name":"getIpAddress","description":"Used to return the value from the source field in the discovery_device_history table\n    for the CI being scanned.","params":[],"returns":{"type":"string","description":"The IP address of the CI being scanned."},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(IpAddress): \" + ipResultObj.getIpAddress());","description":"","output":""}]},{"name":"getIssues","description":"Used to return the value from the issues field in the discovery_device_history table\n    for the CI being scanned.","params":[],"returns":{"type":"integer","description":"Number of issues in this Discovery for this CI."},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(issues): \" + ipResultObj.getIssues());","description":"","output":""}]},{"name":"getIssuesLink","description":"Used to return the value from the issues_link field in the discovery_device_history\n    table for the CI being scanned.","params":[],"returns":{"type":"string","description":"The issues_link field from the discovery_device_history table.<p class=\"p\">This value may\n                  be null or an anchor tag defining a hyperlink to a page that provides the list of\n                  issues associated with the Discovery Status and CI (IP address).</p>"},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(issues_link): \" + ipResultObj.getIssuesLink());","description":"","output":""}]},{"name":"toJson","description":"Used to serialized the <span class=\"keyword parmname\">ReportCiStatusOutputJS</span> object.<p>This method throws the <span class=\"keyword parmname\">IllegalArgumentException</span> exception,\n          <samp class=\"ph codeph\">Cannot serialize object, e</samp> when the method is unable to serialize the\n        object. The <span class=\"ph uicontrol\">e</span> is the exception object, which provides the exception\n        message and trace.</p>","params":[],"returns":{"type":"string","description":"Serialized instance of the <span class=\"keyword parmname\">ReportCiStatusOutputJS</span> object\n                into a JSON string."},"example":[{"code":"var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(json): \" + ipResultObj.toJson());","description":"","output":""}]}]},"ResponseTemplate":{"meta":{"has_constructor":true,"description":"Provides methods for managing response templates. Response templates are reusable messages that agents can copy to case or task forms. They\n      provide quick and consistent messages to users and display standard chat response messages to\n      requesters in <span class=\"ph\">Agent Chat</span>. To\n      access the methods in this class, the response templates plugin must be activated. This API is\n      located in the sn_templated_snip namespace.<br/><br/>For additional information on response templates, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/human-resources/concept/response-templates-templated-snippets.html\" target=\"_blank\">Response templates</a>.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new ResponseTemplate object.","params":[],"returns":{"type":"","description":""},"example":[{"code":"new sn_templated_snip.ResponseTemplate().query(\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\", 0, 0, true, \"\"); ","description":"","output":""}]},{"name":"query","description":"Returns all response templates from a specified table that match the passed in query\n    criteria.","params":[{"name":"tableName","type":"String","description":"Name of the table to use to search the sn_templated_snip_note_template table to\n                locate corresponding response templates. For example, incident or\n                sn_hr_core_case."},{"name":"recordId","type":"String","description":"Sys ID of the record to use to render the variables in the response\n                template."},{"name":"searchTerm","type":"String","description":"Optional. Text to use to filter the list of matching response templates. <p class=\"p\">The\n                  method performs a CONTAINS search of this text on the name and body fields and a\n                  STARTS WITH search on the short name field. For example, if the search term is\n                  \"crash\", the method returns any response template that matches the query criteria\n                  and has crash in the name or body or the short name starts with\n                  crash.</p>\n<p class=\"p\">Response templates with exact matches on short name appear first in\n                  the return results. All other returned response templates are sorted by\n                  name.</p>\n<p class=\"p\">Default: Return all matching response templates.</p>"},{"name":"limit","type":"Number","description":"Optional. Maximum number of response templates to return.<p class=\"p\">Default:\n                50</p>"},{"name":"offset","type":"Number","description":"Optional. For pagination, the index at which to start the search.<p class=\"p\">Default:\n                  0</p>"},{"name":"includeEvaluatedBody","type":"Boolean","description":"Optional. Flag that indicates whether to render the template variables.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_msx_dpx_c3b\">\n                  <li class=\"li\">false: Do not render the template variables. The response contains the message\n                      variables.<div class=\"p\">For example:\n                      <pre class=\"pre msgblock\">Please note that your case ${number} has been escalated to ${assignment_group}.</pre>\n</div>\n</li>\n\n                  <li class=\"li\">true: Renders the template variables and returns <span class=\"keyword parmname\">evaluated_response\n                    </span> in the return results. <div class=\"p\">For example:\n                      <pre class=\"pre msgblock\">Please note that your case INC100001 has been escalated to Facilities.</pre>\n</div>\n</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>"},{"name":"errorFormat","type":"String","description":"Optional. HTML formatting to use for errors. <p class=\"p\">For\n                example:</p>\n<p class=\"p\"><samp class=\"ph codeph\">\"&lt;span\n                style='color:#ffff00'&gt;${%s}&lt;/span&gt;\"</samp></p>\n<p class=\"p\">Default: <samp class=\"ph codeph\">\"&lt;span\n                  style='color:#ff0000'&gt;${%s}&lt;/span&gt;\"</samp></p>"},{"name":"opts","type":"Object","description":"Optional. Parameters to pass to the\n              sn_templated_snip.response_template extension point. The format and content of these\n              parameters are dependent on the implementation of the extension point. For additional\n              information on extension points, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/build/applications/concept/extension-points.html\" target=\"_blank\">Using extension points to extend\n                application functionality</a>."}],"returns":{"type":"Object","description":"Array of all templates that match the specified search criteria. Response\n                templates with exact matches on short name appear first in the return results. All\n                other returned response templates are sorted by name.<p class=\"p\">Each node in the Array may\n                  contain the following parameters:</p>\n<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_dcs_nxx_c3b\">\n                  <li class=\"li\"><span class=\"keyword parmname\">sys_id</span>: String. Unique identifier of the response\n                    template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Name of the response template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">short_name</span>: String. Short name of the response\n                    template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">body</span>: HTML. Body of the response template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">short_name_match</span>: Boolean. Flag that indicates whether an\n                    exact match occurred on the short name of the response template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">evaluated_response</span>: Array. Results of the template\n                      evaluation.<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_hyc_myx_c3b\">\n                      <li class=\"li\"><span class=\"keyword parmname\">success</span>: Boolean. Flag that indicates whether all\n                        variables rendered properly.</li>\n\n                      <li class=\"li\"><span class=\"keyword parmname\">evaluated_body</span>: HTML. Rendered response template\n                        body.</li>\n\n                      <li class=\"li\"><span class=\"keyword parmname\">error</span>: Array. Entry for each evaluation error that\n                          occurred.<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_qlb_bzx_c3b\">\n                          <li class=\"li\"><span class=\"keyword parmname\">inAccessibleVariables</span>: String. Variables in the\n                            response template body that could not be resolved.</li>\n\n                          <li class=\"li\"><span class=\"keyword parmname\">unEvaluatedVariables</span>: String. Variablesin the\n                            response template body that were not evaluated.</li>\n\n                          <li class=\"li\"><span class=\"keyword parmname\">message</span>: String. Error message.</li>\n\n                        </ul>\n</li>\n\n                    </ul>\n</li>\n\n                </ul>"},"example":[{"code":"query(\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\", 0, 0, false, \"\");","description":"This example shows how to query for response templates associated with the incident\n        table.","output":"[\n  {\n    &quot;sys_id&quot;: &quot;5fc1d65993003300a9bc1d1e867ffb9c&quot;,\n    &quot;name&quot;: &quot;Incident escalation&quot;,\n    &quot;short_name&quot;: &quot;escalation&quot;,\n    &quot;template_body&quot;: &quot;&lt;p&gt;Dear ${caller_id.first_name},&lt;/p&gt;\\r\\n&lt;p&gt;Please note that your incident ${number} has been escalated to ${assignment_group}. An agent will be assigned on your case and will keep you updated. If you have more questions please reach out to our team.&lt;/p&gt;\\r\\n&lt;p&gt;Regards,&lt;/p&gt;\\r\\n&lt;p&gt;${sys_updated_by}&lt;/p&gt;&quot;\n  }\n]"},{"code":"query(\"incident\",\"fe4225a40a0a0b5700d0b8a790747812\", \"\", 0, 0, false, \"\");","description":"Same query with an error response.","output":"[\n  {\n    &quot;sys_id&quot;: &quot;5fc1d65993003300a9bc1d1e867ffb9c&quot;,\n    &quot;name&quot;: &quot;Incident escalation&quot;,\n    &quot;short_name&quot;: &quot;escalation&quot;,\n    &quot;template_body&quot;: &quot;&lt;p&gt;Dear ${caller.first_name},&lt;/p&gt;\\r\\n&lt;p&gt;Please note that your incident ${number} has been escalated to ${assignment_group}. An agent will be assigned on your case and will keep you updated. If you have more questions please reach out to our team.&lt;/p&gt;\\r\\n&lt;p&gt;Regards,&lt;/p&gt;\\r\\n&lt;p&gt;${sys_updated_by}&lt;/p&gt;&quot;,\n    &quot;evaluated_response&quot;: {\n      &quot;success&quot;: false,\n      &quot;error&quot;: {\n        &quot;unEvaluatedVariables&quot;: &quot;caller.first_name&quot;,\n        &quot;message&quot;: &quot;Cannot evaluate following variables: caller.first_name&quot;\n      },\n      &quot;evaluated_body&quot;: &quot;&lt;p&gt;Dear &lt;span style='color:#ff0000'&gt;${caller.first_name}&lt;/span&gt;,&lt;/p&gt;\\r\\n&lt;p&gt;Please note that your incident INC0000049 has been escalated to Hardware. An agent will be assigned on your case and will keep you updated. If you have more questions please reach out to our team.&lt;/p&gt;\\r\\n&lt;p&gt;Regards,&lt;/p&gt;\\r\\n&lt;p&gt;admin&lt;/p&gt;&quot;\n    }\n  }\n]"}]},{"name":"render","description":"Renders the HTML body of a specified response template.<p>During rendering, all variables are resolved using the information from the specified table\n        and record. If variables cannot be resolved, or any other problem occurs during rendering,\n        the method returns an error message in the results.</p>","params":[{"name":"templateId","type":"String","description":"Sys ID of the response template to render."},{"name":"tableName","type":"String","description":"Name of the table to use when rendering the variables on the response\n                template."},{"name":"recordId","type":"String","description":"Sys ID of the record to use when rendering the variables on the response\n                template. This record must be in the table specified by\n                  <span class=\"keyword parmname\">tableName</span>."},{"name":"errorFormat","type":"String","description":"Optional. HTML formatting to use for errors. <p class=\"p\">For\n                example:</p>\n<p class=\"p\"><samp class=\"ph codeph\">\"&lt;span\n                style='color:#ffff00'&gt;${%s}&lt;/span&gt;\"</samp></p>\n<p class=\"p\">Default: <samp class=\"ph codeph\">\"&lt;span\n                  style='color:#ff0000'&gt;${%s}&lt;/span&gt;\"</samp></p>"},{"name":"opts","type":"Object","description":"Optional. Parameters to pass to the\n              sn_templated_snip.response_template extension point. The format and content of these\n              parameters are dependent on the implementation of the extension point. For additional\n              information on extension points, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/build/applications/concept/extension-points.html\" target=\"_blank\">Using extension points to extend\n                application functionality</a>."}],"returns":{"type":"Object","description":"Results of the render.<ul class=\"ul\" id=\"RT-render_S_S_S_S_O__ul_q1m_d3y_c3b\">\n                  <li class=\"li\"><span class=\"keyword parmname\">success</span>: Flag that indicates whether the render was\n                    successful.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">evaluated_body</span>: String. For success, rendered response\n                    template body. For error, response template body which includes both rendered\n                    and non-renderable variables.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">error</span>: Object. Error message if render was\n                      unsuccessful.<ul class=\"ul\" id=\"RT-render_S_S_S_S_O__ul_cdl_d14_d3b\">\n                      <li class=\"li\"><span class=\"keyword parmname\">unEvaluatedVariables</span>: Variables that could not be\n                        rendered.</li>\n\n                      <li class=\"li\"><span class=\"keyword parmname\">message</span>: Error message.</li>\n\n                    </ul>\n</li>\n\n                </ul>"},"example":[{"code":"render(\"5fc1d65993003300a9bc1d1e867ffb9c\",\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\")","description":"This code example shows how to request a rendered response template for the incident\n        table.","output":"{\n  &quot;success&quot;: true,\n  &quot;evaluated_body&quot;: &quot;&lt;p&gt;Dear Beth,&lt;/p&gt;\\r\\n&lt;p&gt;Please note that your incident INC0000049 has been escalated to Hardware. An agent will be assigned on your case and will keep you updated. If you have more questions please reach out to our team.&lt;/p&gt;\\r\\n&lt;p&gt;Regards,&lt;/p&gt;\\r\\n&lt;p&gt;admin&lt;/p&gt;&quot;\n}"},{"code":"render(\"5fc1d65993003300a9bc1d1e867ffb9c\",\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\")","description":"Same render request but returning an error response.","output":"{\n  &quot;success&quot;: false,\n  &quot;error&quot;: {\n    &quot;unEvaluatedVariables&quot;: &quot;caller.first_name&quot;,\n    &quot;message&quot;: &quot;Cannot evaluate following variables: caller.first_name&quot;\n  },\n  &quot;evaluated_body&quot;: &quot;&lt;p&gt;Dear &lt;span style='color:#ff0000'&gt;${caller.first_name}&lt;/span&gt;,&lt;/p&gt;\\r\\n&lt;p&gt;Please note that your incident INC0000049 has been escalated to Hardware. An agent will be assigned on your case and will keep you updated. If you have more questions please reach out to our team.&lt;/p&gt;\\r\\n&lt;p&gt;Regards,&lt;/p&gt;\\r\\n&lt;p&gt;admin&lt;/p&gt;&quot;\n}"}]}]},"RESTAPIRequest":{"meta":{"has_constructor":false,"description":"A RESTAPIRequest object allows you to access scripted REST API request details in\n  scripts. <div class=\"note note\" id=\"c_RESTAPIRequest__note_non_instantiable_ws\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div>","example":""},"properties":{"body":{"description":"The body of the request.","type":"<a class=\"xref\" href='https://developer.servicenow.com/app.do#!/api_doc?v=newyork#c_RESTAPIRequestBody' title=\"A RESTAPIRequestBody object allows you to access the body content of a scripted REST API request in scripts.\">RESTAPIRequestBody</a>"},"headers":{"description":"All headers from the request.","type":"object"},"pathParams":{"description":"The path parameters passed in the request URI.","type":"Object"},"queryParams":{"description":"The query parameters from the web service request.","type":"Object"},"queryString":{"description":"The entire query added to the endpoint URI.","type":"String"},"uri":{"description":"The request URI, excluding domain information.","type":"String"},"url":{"description":"The entire request URL.","type":"String"}},"methods":[{"name":"getHeader","description":"Returns the value of a specific header from the web service request.","params":[{"name":"header","type":"String","description":"The name of the header, such as <span class=\"keyword parmname\">accept</span> or\n                  <span class=\"keyword parmname\">content-type</span>."}],"returns":{"type":"String","description":"The value of the specified header."},"example":[{"code":"var acceptHeader = request.getHeader('accept');","description":"","output":""}]},{"name":"getSupportedResponseContentTypes","description":"Get the content types specified in the request Accept header.","params":[],"returns":{"type":"Array","description":"An array of string values where each string is a content type, such as\n                application/json."},"example":[]}]},"RESTAPIRequestBody":{"meta":{"has_constructor":false,"description":"A RESTAPIRequestBody object allows you to access the body content of a scripted REST\n  API request in scripts. The format of a RESTAPIRequestBody object may be JSON or XML, depending on the content-type\n   header value from the request.<div class=\"note note\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div><br/><br/>Single entry example-request-body in JSON format.\n   <pre ng-prism='' source='{\n \"name\": \"user1\",\n \"id\": 1234,\n \"roles\": [\n  {\n   \"name\": \"admin\"\n  },\n  {\n   \"name\": \"itil\"\n  }\n ]\n}' class='language-javascript monospaceing'></pre><br/><br/>Multiple entry example-request-body in JSON\n   format.<pre ng-prism='' source='[{\n \"name\": \"user1\",\n \"id\": 1234,\n \"roles\": [\n  {\n   \"name\": \"admin\"\n  },\n  {\n   \"name\": \"itil\"\n  }\n ]\n},{\n \"name\": \"user2\",\n \"id\":9876,\n \"roles\": [\n  {\n   \"name\":\"admin\"\n  }\n ]\n}]' class='language-javascript monospaceing'></pre><br/><br/><span class=\"importanttitle\">Important:</span> If the request\n        body format is not of a <samp class=\"ph codeph\">json</samp> or <samp class=\"ph codeph\">xml</samp> subtype, use only the\n        request body <samp class=\"ph codeph\">dataStream</samp> field to access the request body. Using request\n        body <samp class=\"ph codeph\">data</samp>, <samp class=\"ph codeph\">dataString</samp>, <samp class=\"ph codeph\">nextEntry()</samp>, or\n          <samp class=\"ph codeph\">hasNext()</samp> with a non-json or non-xml format results in a\n          <samp class=\"ph systemoutput\">500</samp> error response.","example":""},"properties":{"data":{"description":"The content of the request body.","type":"Object or Array"},"dataStream":{"description":"The content of the request body, as a stream.","type":"Object"},"dataString":{"description":"The content of the request body, as a String.","type":"String"}},"methods":[{"name":"hasNext","description":"Determine if there are additional entries in the request body.<p>Use this method with the nextEntry() method to iterate over multiple request body\n        entries.</p>","params":[],"returns":{"type":"boolean","description":"True if there are additional entries available. This method returns true only\n                once if the request contains a single entry."},"example":[{"code":"var requestBody = request.body;\nrequestBody.hasNext(); // returns true if the request contains a single entry or multiple entries\n\n//calling second time\nrequestBody.hasNext(); // returns false if the request contains a single entry, or true if the request contains multiple entries","description":"","output":""}]},{"name":"nextEntry","description":"Retrieve one entry from the request body as a script object.<p>Use this method with the hasNext() method to iterate over multiple request body\n        entries.</p>","params":[],"returns":{"type":"Object","description":"A single entry from the request body."},"example":[{"code":"var requestBody = request.body;\nvar requestEntry = requestBody.nextEntry(); // returns available entry if there is only one entry, or the first entry if there are multiple.\nvar name = requestEntry.name; // ‘user1’\n\n// Calling second time\nrequestEntry = requestBody.nextEntry(); // returns undefined if there is only one entry, or the second entry if there are multiple.","description":"","output":""},{"code":"var requestBody = request.body;\nwhile(requestBody.hasNext()){\nvar entry = requestBody.nextEntry();\n}","description":"This example demonstrates using hasNext() with nextEntry().","output":""}]}]},"RESTAPIResponse":{"meta":{"has_constructor":false,"description":"A RESTAPIResponse object allows you to build a RESTful response to a scripted REST API\n  request. <div class=\"note note\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div>","example":""},"properties":{},"methods":[{"name":"getStreamWriter","description":"Returns the ResponseStreamWriter for this response, allowing you to write directly to\n    the response stream.<p>Set the content type and status code using the <span class=\"keyword apiname\">setHeaders</span> and\n          <span class=\"keyword apiname\">setStatus</span> functions prior to calling the\n          <span class=\"keyword apiname\">getStreamWriter</span> function.</p>","params":[],"returns":{"type":"<a class=\"xref\" href='https://developer.servicenow.com/app.do#!/api_doc?v=newyork#c_RESTAPIResponseStream' title=\"A RESTAPIResponseStream object allows you to write directly to the scripted REST API response stream.\">RESTAPIResponseStream</a>","description":"The ResponseStreamWriter for this response. You can use this object to write\n                directly to the response stream."},"example":[{"code":"response.setContentType('application/json');\nresponse.setStatus(200);\nvar writer = response.getStreamWriter();","description":"","output":""}]},{"name":"setBody","description":"Sets the body content to send in the web service response.","params":[{"name":"body","type":"Object","description":"<p class=\"p\">The response body, as a JavaScript object.</p>\n\n                <p class=\"p\">The body content is automatically serialized to JSON or XML depending on the\n                  value of the <span class=\"keyword parmname\">Accept</span> header passed in the request.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var body = {};\nbody.name = \"incident\";\nbody.number = \"1234\";\nbody.caller = {\"id\": \"user1\"};\nresponse.setBody(body);\n","description":"","output":""},{"code":"var bodyArray = [];\nvar body = {};\nbody.name = \"incident\";\nbody.number = \"1234\";\nbody.caller = {\"id\":\"user1\"};\nbodyArray.push(body);\nresponse.setBody(bodyArray);","description":"","output":""}]},{"name":"setContentType","description":"Assigns a value to the Content-Type header in the web service response.<p>You must set a response content type before writing the response. The content type is set\n        automatically for string responses, based on the request Accept header value.</p><p>Setting an invalid content type causes the response to default to JSON. Failing to set a\n        content type results in a status code 500 error when sending a binary response.</p><p>See the <a class=\"extRef\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\" target=\"_blank\">W3 Content-Type header documentation</a> for more\n        information about this header.</p>","params":[{"name":"contentType","type":"String","description":"The content type of the response body, such as application/json."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"responseBuilder.setContentType('application/json');","description":"","output":""}]},{"name":"setError","description":"Configure the response to return an error.","params":[{"name":"error","type":"Object","description":"An error object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setHeader","description":"Assign a value to a REST service response header.","params":[{"name":"header","type":"String","description":"The header you want to set."},{"name":"value","type":"String","description":"The value to assign the specified header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"responseBuilder.setHeader(\"Location\",\"&lt;URI&gt;\");","description":"","output":""}]},{"name":"setHeaders","description":"Sets the headers for the web service response.","params":[{"name":"headers","type":"Object","description":"A JavaScript object listing each header and the value to assign that\n                header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var headers = {};\nheaders.X-Total-Count=100;\nheaders.Location=‘https://instance.service-now.com/&lt;endpoint_to_resource&gt;';\nresponse.setHeaders(headers);","description":"","output":""}]},{"name":"setLocation","description":"Assigns a value to the Location header in the web service response.<p>See the <a class=\"extRef\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30\" target=\"_blank\">W3 Location header documentation</a> for more\n        information about this header.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setStatus","description":"Sets the status code number for the web service response.","params":[{"name":"status","type":"Number","description":"The status code to send in the response, such as 200 to indicate success.\n                Passing a non-numerical value, such as a string, causes the status code to default\n                to 0."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"response.setStatus(200);","description":"","output":""}]}]},"RESTAPIResponseStream":{"meta":{"has_constructor":false,"description":"A RESTAPIResponseStream object allows you to write directly to the scripted REST API\n  response stream. Use RESTAPIResponseStream methods to build web service APIs in the <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/integrate/custom-web-services/concept/c_CustomWebServices.html\" target=\"_blank\">Scripted REST APIs</a> feature.<div class=\"note note\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div>","example":""},"properties":{},"methods":[{"name":"writeStream","description":"Write an input stream to the response stream.<p>You must set the content type and status code before calling the\n          <span class=\"keyword apiname\">writeStream()</span> method or the response will fail. You cannot modify these\n        values after calling the <span class=\"keyword apiname\">writeStream()</span> method.</p><p><span class=\"notetitle\">Note:</span> \n        <p class=\"p\">It is the responsibility of the script author to obtain the stream from a third-party\n          service. </p></p>","params":[{"name":"stream","type":"Object","description":"An attachment or a response stream from a third-party service."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\n\n    response.setContentType('application/json');\n    response.setStatus(200);\n\n    var gsa = new GlideSysAttachment();\n    var attachmentStream = new gsa.getContentStream(&lt;sys_id of attachment&gt;); \n    var writer = response.getStreamWriter();\n    writer.writeStream(attachmentStream);\n\n})(request, response);","description":"The following example is for scoped applications:","output":""},{"code":"(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\n\n    response.setContentType('application/json');\n    response.setStatus(200);\n\n    var attachmentStream = new GlideSysAttachmentInputStream(&lt;sys_id of attachment&gt;);\n    var writer = response.getStreamWriter();\n    writer.writeStream(attachmentStream);\n\n})(request, response);","description":"The following example is for global applications:","output":""}]},{"name":"writeString","description":"Write string data to the response stream.<p>You must set the content type and status code before calling the\n          <span class=\"keyword apiname\">writeString()</span> method or the response will fail. You cannot modify these\n        values after calling the <span class=\"keyword apiname\">writeString()</span> method.</p>","params":[{"name":"data","type":"String","description":"The string to add to the response data."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"response.setContentType('application/json');\nresponse.setStatus(200);\nvar writer = response.getStreamWriter();\nvar body ={\n  name:user1,\n  id: 1234,\n  roles: [\n    {\n      name: admin\n    },\n    {\n      name: itil\n    }\n  ]\n}\nwriter.writeString(\"{'name':'user','id':'1234'}\");\nwriter.writeString(JSON.stringify(body));","description":"","output":""}]}]},"RESTMessageV2":{"meta":{"has_constructor":true,"description":"The RESTMessageV2 API allows you to send\n  outbound REST messages\n  using JavaScript. Use the RESTResponseV2 API to manage the response returned by the REST provider.<br/><br/>You can use this API in scoped applications, or within the global scope.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a RESTMessageV2 object using information from a REST message\n    record.<p>You must have a REST message record defined before you can use this constructor.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"name","type":"String","description":"The name of the REST message record."},{"name":"methodName","type":"String","description":"The name of the HTTP method to use, such as GET or PUT."}],"returns":{"type":"","description":""},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.","description":"","output":""}]},{"name":"constructor","description":"Instantiates an empty RESTMessageV2 object.<p>When using an object instantiated this way, you must manually specify an HTTP method and\n        endpoint.</p>","params":[],"returns":{"type":"","description":""},"example":[{"code":"var sm = new sn_ws.RESTMessageV2();","description":"","output":""}]},{"name":"execute","description":"Send the REST message to the endpoint.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[],"returns":{"type":"<a class=\"xref\" href='https://developer.servicenow.com/app.do#!/api_doc?v=newyork#c_RESTResponseV2API' title=\"The RESTResponseV2 API allows you to use the data returned by an outbound REST message in JavaScript code.\">RESTResponse</a>","description":"The response returned by the REST provider."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.","description":"","output":""}]},{"name":"executeAsync","description":"Send the REST message to the endpoint asynchronously. The instance does not wait for a\n    response from the web service provider when making asynchronous calls.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance. When using <samp class=\"ph codeph\">executeAsync</samp>,\n        consider processing the response body in a separate business rule to take advantage of the\n        asynchronous call.</p>","params":[],"returns":{"type":"<a class=\"xref\" href='https://developer.servicenow.com/app.do#!/api_doc?v=newyork#c_RESTResponseV2API' title=\"The RESTResponseV2 API allows you to use the data returned by an outbound REST message in JavaScript code.\">RESTResponse</a>","description":"The response returned by the REST provider."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.executeAsync(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.\n","description":"","output":""}]},{"name":"getEndpoint","description":"Get the URL of the endpoint for the REST message.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[],"returns":{"type":"String","description":"The URL of the REST web service provider."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar endpoint = sm.getEndpoint();","description":"","output":""}]},{"name":"getRequestBody","description":"Get the content of the REST message body.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[],"returns":{"type":"String","description":"the REST message body."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar body = sm.getRequestBody();","description":"","output":""}]},{"name":"getRequestHeader","description":"Get the value for an HTTP header specified in the REST message.<p>By default, this method cannot return the value for a header set automatically by the\n        system. To grant this method access to all headers, set the property glide.http.log_debug to\n        true.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"headerName","type":"String","description":"The request header you want to get the value for."}],"returns":{"type":"String","description":"The value of the specified header."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar header = sm.getRequestHeader(\"Accept\");","description":"","output":""}]},{"name":"getRequestHeaders","description":"Get HTTP headers that were set by the REST client and the associated\n    values.<p>This method does not return headers set automatically by the system. To configure this\n        method to return all headers, set the property glide.http.log_debug to true.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[],"returns":{"type":"Object","description":"An Object that maps the name of each header to the associated value."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar headers = sm.getRequestHeaders();","description":"","output":""}]},{"name":"saveResponseBodyAsAttachment","description":"Configures the REST message to save the returned response body as an attachment\n    record.<p>When you use this function with a REST message that is sent\n        through a MID server, the MID server user must have any roles required to read and write\n        attachment records, as well as any roles required to read and write records on the table\n        specified in the <span class=\"keyword parmname\">tableName</span> parameter.</p><p>The response body does not need to be a binary file to be saved as an\n        attachment. Response bodies using text formats, such as JSON or XML can also be saved. If\n        the instance fails to save the attachment, call <span class=\"keyword apiname\">getErrorMessage()</span> on the\n        related RESTResponseV2 object for error details.</p>","params":[{"name":"tableName","type":"String","description":"Specify the table that contains the record you want to attach the saved file\n                to."},{"name":"recordSysId","type":"String","description":"Specify the sys_id of the record you want to attach the saved file to."},{"name":"fileName","type":"String","description":"Specify the file name to give to the saved file."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function sampleRESTMessageV2() {\n  try{\n    var request  = new sn_ws.RESTMessageV2();        \n    request.setHttpMethod('get');\n\n    var attachment_sys_id  = '&lt;attachment_record_sys_id&gt;', \n      tablename = 'incident',\n      recordSysId = '&lt;incident_sys_id&gt;',            \n      response,            \n      httpResponseStatus,             \n      filename ='&lt;filename&gt;';\n\n    //endpoint - ServiceNow REST Attachment API        \n    request.setEndpoint('https://&lt;instance_name&gt;.service-now.com/api/now/attachment/' + attachment_sys_id  +'/file');        \n    request.setBasicAuth('&lt;username&gt;', '&lt;password&gt;');\n\n    //RESTMessageV2 - saveResponseBodyAsAttachment(String tableName, String recordSysId, String fileName)        \n    request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);        \n\n    response = request.execute();        \n    httpResponseStatus = response.getStatusCode();  \n      \n    gs.print(\" http response status_code:  \" + httpResponseStatus);    \n  }\n  catch(ex){\n    var message  = ex.getMessage();        \n    gs.print(message);    \n  }\n})();","description":"","output":""}]},{"name":"saveResponseBodyAsAttachment","description":"Configure the REST message to save the returned response body as an encrypted\n    attachment record.<p>When you use this function with a REST message that is sent\n        through a MID server, the MID server user must have any roles required to read and write\n        attachment records, as well as any roles required to read and write records on the table\n        specified in the <span class=\"keyword parmname\">tableName</span> parameter.</p><p>The response body does not need to be a binary file to be saved as an\n        attachment. Response bodies using text formats, such as JSON or XML can also be saved. If\n        the instance fails to save the attachment, call <span class=\"keyword apiname\">getErrorMessage()</span> on the\n        related RESTResponseV2 object for error details.</p>","params":[{"name":"tableName","type":"String","description":"Specify the table that contains the record you want to attach the saved file\n                to."},{"name":"recordSysId","type":"String","description":"Specify the sys_id of the record you want to attach the saved file to."},{"name":"fileName","type":"String","description":"Specify the file name to give to the saved file."},{"name":"encryptContext","type":"String","description":"Specify the sys_id of an encryption context. The saved file is encrypted using\n                this context."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setAuthenticationProfile","description":"Set the credentials for the REST message using an existing basic auth or OAuth 2.0\n    profile.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"type","type":"String","description":"The type of authentication profile to use. Valid values are 'basic' to use\n                basic authentication, or 'oauth2' to use OAuth 2.0."},{"name":"profileId","type":"String","description":"The sys_id of an authentication profile record. When using basic auth, specify\n                the sys_id of a Basic Auth Configuration [sys_auth_profile_basic] record. When using\n                OAuth 2.0, specify the sys_id of a OAuth Entity Profile [oauth_entity_profile]\n                record."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var requestBody;\nvar responseBody;\nvar status;\nvar sm;\ntry{\n       // Might throw exception if message doesn't exist or not visible due to scope.\n\tsm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\", \"get\");  \n\n       //set auth profile to an OAuth 2.0 profile record.\n\tsm.setAuthenticationProfile('oauth2', '1234adsf123212131123qasdsf'); \n\n\tsm.setStringParameter(\"symbol\", \"NOW\");\n\tsm.setStringParameterNoEscape(\"xml_data\",\"&lt;data&gt;test&lt;/data&gt;\");\n\n       //In milliseconds. Wait at most 10 seconds for response from http request.\n\tsm.setHttpTimeout(10000); \n       //Might throw exception if http connection timed out or some issue \n       //with sending request itself because of encryption/decryption of password.\n\tresponse = sm.execute();\t\n       responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();\n\tstatus = response.getStatusCode();\n} catch(ex) {\n\tresponseBody = ex.getMessage();\n\tstatus = '500';\n} finally {\n\trequestBody = sm ? sm.getRequestBody():null;\n}","description":"","output":""}]},{"name":"setBasicAuth","description":"Sets basic authentication headers for the REST message.<p>Setting security values using this method overrides\n        basic\n        authentication values defined for the REST message record.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"userName","type":"String","description":"The username you want to use to authenticate the REST message."},{"name":"userPass","type":"String","description":"The password for the specified user."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setBasicAuth(\"username\",\"password\");","description":"","output":""}]},{"name":"setEccCorrelator","description":"Associate outbound requests and the resulting response record in the ECC queue. This\n    method only applies to REST messages sent through a MID Server.<p>The correlator provided populates the <span class=\"ph uicontrol\">Agent correlator</span> field on the\n        ECC queue record for the response. Provide a unique correlator for each outbound request to\n        associate the correct results in the ECC queue with the request when designing asynchronous\n        automation through a MID Server.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"correlator","type":"String","description":"A unique identifier"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccCorrelator(\"unique_identifier\");","description":"","output":""}]},{"name":"setEccParameter","description":"Override a value from the database by writing to the REST message payload. This method\n    only applies to REST messages sent through a MID Server.<p>Use this method when a value from the REST message in the database is invalid, such as when\n        the endpoint URL is longer than the maximum REST endpoint field length. You can set only the\n        endpoint URL using this method by passing source as the name parameter.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"name","type":"String","description":"The name of the parameter, such as source."},{"name":"value","type":"String","description":"The value to assign to the specified parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccParameter(\"source\",\"http://very.long.endpoint.url\");","description":"","output":""}]},{"name":"setEndpoint","description":"Set the endpoint for the REST message.<p>By default, the REST message uses the endpoint specified in the REST message record. Use\n        this method to override this default. You must call this method when using the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_RMV2-RESTMessageV2\" title=\"Instantiates an empty RESTMessageV2 object.\">RESTMessageV2 - RESTMessageV2()</a> constructor with no parameters.</p>","params":[{"name":"endpoint","type":"String","description":"The URL of the REST provider you want to interface with."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2();\nsm.setEndpoint(\"http://web.service.endpoint\");","description":"","output":""}]},{"name":"setHttpMethod","description":"The HTTP method this REST message performs, such as GET or PUT.<p>You must set an HTTP method when using the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_RMV2-RESTMessageV2\" title=\"Instantiates an empty RESTMessageV2 object.\">RESTMessageV2 - RESTMessageV2()</a> constructor with no parameters.</p>","params":[{"name":"method","type":"String","description":"The HTTP method to perform."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2();\nsm.setHttpMethod(\"post\");","description":"","output":""}]},{"name":"setHttpTimeout","description":"Set the amount of time the REST message waits for a response from the web service\n    provider before the request times out.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"timeoutMs","type":"Number","description":"The amount of time, in milliseconds, before the call to the REST provider times\n                out."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setHttpTimeout(6000);","description":"","output":""}]},{"name":"setLogLevel","description":"Set the log level for this message and the corresponding response.<p>Setting a log level using the RESTMessageV2 API overrides the log level configured on the\n        REST message record. This log level may not apply if the endpoint domain is blacklisted, or\n        if the property <span class=\"keyword parmname\">glide.outbound_http_log.override</span> is true. To view\n        outbound web service logs, navigate to <span class=\"ph menucascade\"><span class=\"ph uicontrol\">System Logs</span> &gt; <span class=\"ph uicontrol\">Outbound HTTP Requests</span></span>.</p>","params":[{"name":"level","type":"String","description":"The log level. Valid values are basic, elevated, and all."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rm = new sn_ws.RESTMessageV2();\nrm.setLogLevel(‘all’);","description":"","output":""}]},{"name":"setMIDServer","description":"Configure the REST message to communicate through a MID Server.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"midServer","type":"String","description":"The name of the MID Server to use. Your instance must have an active MID Server\n                with the specified name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setMIDServer(\"mid_server_name\");","description":"","output":""}]},{"name":"setMutualAuth","description":"Set the mutual authentication protocol profile for the REST message.<p>Setting a protocol profile using this method overrides the protocol profile selected for\n        the REST message record.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"profileName","type":"String","description":"The <span class=\"ph uicontrol\">Name</span> of the protocol profile to use for mutual\n                authentication."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setMutualAuth(\"mutual_auth_profile_name\");","description":"","output":""}]},{"name":"setQueryParameter","description":"Append a parameter to the end of the request URL with the form name=value.<p>For example, the code\n        setQueryParameter(\"sysparm_query\",\"active=true^ORDERBYnumber^ORDERBYDESCcategory\"); appends\n        the text sysparm_query=active=true^ORDERBYnumber^ORDERBYDESCcategory to the request URL.</p>","params":[{"name":"name","type":"String","description":"The name of the URL parameter to pass."},{"name":"value","type":"String","description":"The value to assign the URL parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2();\n//Set up message, including endpoint and authentication\nsm.setQueryParameter(\"sysparm_query\",\"active=true^ORDERBYnumber^ORDERBYDESCcategory\");","description":"","output":""}]},{"name":"setRequestBody","description":"Set the body content to send to the web service provider when using PUT or POST HTTP\n    methods.<p>When you set the body content using this method, variables in the body are not substituted\n        for parameters from the REST message function record. You must explicitly define all values\n        within the REST message body.</p>","params":[{"name":"body","type":"String","description":"The request body to send."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Update user\",\"post\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar body = \"&lt;Message body content&gt;\";\nsm.setRequestBody(body);","description":"","output":""}]},{"name":"setRequestBodyFromAttachment","description":"Sets the request body using an existing attachment record.<p>When you use this function with a REST message that is sent\n        through a MID server, the MID server user must have any roles required to read attachment\n        records.</p>","params":[{"name":"attachmentSysId","type":"String","description":"The sys_id of the Attachment [sys_attachment] record you want to send in this\n                REST message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function sampleRESTMessageV2() {\n    try {\n        var request = new sn_ws.RESTMessageV2();\n        request.setHttpMethod('post');\n        request.setEndpoint('&lt;web service endpoint URL&gt;');\n        request.setRequestBodyFromAttachment('&lt;attachment sys_id&gt;');\n        \n        var response = request.execute();\n        var httpResponseStatus = response.getStatusCode();\n      \n        gs.print(\"http response status_code: \" + httpResponseStatus);        \n    }\n    catch (ex) {\n        var message = ex.getMessage();\n        gs.print(message);\n    }\n})();","description":"","output":""}]},{"name":"setRequestBodyFromStream","description":"Set the body content of a PUT or POST message using a binary stream.<p>You can use this method to send binary files such as images or archives using REST\n        messages. If the request is not a PUT or POST request, the request body is ignored.</p>","params":[{"name":"stream","type":"Object","description":"The binary data to send, such as an attachment or a stream from a 3rd-party\n                service."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setRequestHeader","description":"Set an HTTP header in the REST message to the specified value.<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"name","type":"String","description":"The name of the header."},{"name":"value","type":"String","description":"The value to assign to the specified header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setRequestHeader(\"Accept\",\"Application/json\");","description":"","output":""}]},{"name":"setRequestorProfile","description":"Override the default requestor profile for the REST message in order to retrieve an\n    OAuth access token associated with a different requestor.<p>This method applies only to REST messages configured to use OAuth 2.0 authentication. This\n        method is optional and is unnecessary in most configurations.</p>","params":[{"name":"requestorContext","type":"String","description":" "},{"name":"requestorId","type":"String","description":" "}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setStringParameter","description":"Set a REST message function variable with the specified name from the REST message\n    record to the specified value.<p>XML reserved characters in the value are converted to the equivalent escaped characters.\n        Use <span class=\"keyword apiname\">setStringParameterNoEscape</span> to set a variable without escaping XML\n        reserved characters.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"name","type":"String","description":"The name of the REST message variable. This parameter must be defined in the\n                REST message record before you can assign a value to it."},{"name":"value","type":"String","description":"The value to assign the variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameter(\"s\",\"NOW\");","description":"","output":""}]},{"name":"setStringParameterNoEscape","description":"Set a REST message function variable with the specified name from the REST message\n    record to the specified value.<p>This method is equivalent to <span class=\"keyword apiname\">setStringParameter</span> but does not escape XML\n        reserved characters.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>","params":[{"name":"name","type":"String","description":"The name of the REST message variable. This parameter must be defined in the\n                REST message record before you can assign a value to it."},{"name":"value","type":"String","description":"The value to assign the variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameterNoEscape(\"s\",\"NOW\");","description":"","output":""}]}]},"RESTResponseV2":{"meta":{"has_constructor":false,"description":"The RESTResponseV2 API allows you to use the data returned by an outbound REST message\n  in JavaScript code. A RESTResponseV2 object is returned by the RESTMessageV2 functions execute() and\n   executeAsync().<br/><br/>You can use this API in scoped applications, or within the global scope.","example":""},"properties":{},"methods":[{"name":"getAllHeaders","description":"Return all headers contained in the response, including any duplicate\n    headers.","params":[],"returns":{"type":"List<GlideHTTPHeader>","description":"The list of headers contained in the response. Each header is represented as a\n                GlideHTTPHeader object which contains the header <var class=\"keyword varname\">name</var> and\n                  <var class=\"keyword varname\">value</var>."},"example":[{"code":"var r = new sn_ws.RESTMessageV2('&lt;A REST message&gt;', 'get');\nvar response = r.execute();\nvar headers = response.getAllHeaders();\nfor(var i in headers){\n  gs.print(headers[i].name + ': ' + headers[i].value);\n}","description":"","output":""}]},{"name":"getBody","description":"Get the content of the REST response body.<p>Use this function when you want to get the request body as text content. Do not use this\n        method when saving the response as a binary attachment. If a RESTMessageV2 object called the\n          <span class=\"keyword apiname\">saveResponseBodyAsAttachment(...)</span> function, using\n          <span class=\"keyword apiname\">getBody()</span> on the associated RESTResponseV2 object will cause an error.\n        When saving the response as an attachment, if the outbound REST message fails, call\n          <span class=\"keyword apiname\">getErrorMessage()</span> on the response to retrieve the body content.</p>","params":[],"returns":{"type":"String","description":"The REST response body."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar responseBody = response.getBody();","description":"","output":""}]},{"name":"getCookies","description":"Returns all cookies included in the response.","params":[],"returns":{"type":"Object","description":"The list of cookies. Iterate through the list to perform operations on each\n                cookie."},"example":[{"code":"var cookies = response.getCookies();\nvar i;\nfor(i=0;i&lt;cookies.size();i++) {\n   gs.print(‘cookie: ‘ + cookies.get(i));\n}\n","description":"","output":""}]},{"name":"getErrorCode","description":"Get the numeric error code if there was an error during the REST transaction.<p>This error code is specific to the <span class=\"ph\">Now Platform</span>, it is not an HTTP\n        error code. Provide this error code if you require assistance from ServiceNow Customer\n        Support</p>","params":[],"returns":{"type":"Number","description":"The numeric error code, such as 1 for socket timeout."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar errorCode = response.getErrorCode();","description":"","output":""}]},{"name":"getErrorMessage","description":"Get the error message if there was an error during the REST transaction.","params":[],"returns":{"type":"String","description":"The error message."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar errorMsg = response.getErrorMessage();","description":"","output":""}]},{"name":"getHeader","description":"Get the value for a specified header.","params":[{"name":"name","type":"String","description":"The name of the header that you want the value for, such as Set-Cookie."}],"returns":{"type":"String","description":"The value of the specified header."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar headerVal = response.getHeader(\"Content-Type\");","description":"","output":""}]},{"name":"getHeaders","description":"Get all headers returned in the REST response and the associated values.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If a header is present more than once in the response, such as a Set-Cookie header,\n          this function returns only the last of the duplicate headers. To return all headers\n          including duplicates, use the <span class=\"keyword apiname\">getAllHeaders()</span> function.</div></p>","params":[],"returns":{"type":"Object","description":"An Object that maps the name of each header to the associated value."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar headers = response.getHeaders();","description":"","output":""}]},{"name":"getQueryString","description":"Get the fully-resolved query sent to the REST endpoint..<p>This query contains the endpoint URL as well as any values assigned to variables in the\n        REST message. Use this method only with responses to direct requests. This method is not\n        supported for requests sent asynchronously, or requests sent using a MID server.</p>","params":[],"returns":{"type":"String","description":"The fully-resolved query."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar queryString = response.getQueryString();","description":"","output":""}]},{"name":"getResponseAttachmentSysid","description":"Get the sys_id value of the attachment created from the response body\n    content.<p>If the RESTMessageV2 object associated with this response called the\n          <span class=\"keyword apiname\">saveResponseBodyAsAttachment(...)</span> function, use\n          <span class=\"keyword apiname\">getResponseAttachmentSysid()</span> to get the sys_id of the created\n        attachment record. Use this function when you want to perform additional operations with the\n        new attachment record.</p>","params":[],"returns":{"type":"String","description":"The sys_id of the new attachment record."},"example":[]},{"name":"getStatusCode","description":"Get the numeric HTTP status code returned by the REST provider.","params":[],"returns":{"type":"Number","description":"The numeric status code returned by the REST provider, such as 200 for a\n                successful response."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar statusCode = response.getStatusCode();","description":"","output":""}]},{"name":"haveError","description":"Indicate if there was an error during the REST transaction.","params":[],"returns":{"type":"boolean","description":"Returns true if there was an error, false if there was no error."},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar error = response.haveError();","description":"","output":""}]},{"name":"waitForResponse","description":"Set the amount of time the instance waits for a response from the web service\n    provider.<p>This method overrides the property glide.rest.outbound.ecc_response.timeout for this REST\n        response.</p>","params":[{"name":"timeoutSecs","type":"Number","description":"The amount of time, in seconds, to wait for this response."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.executeAsync();\nresponse.waitForResponse(60);","description":"","output":""}]}]},"SentimentAnalyser":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">SentimentAnalyser</span> API performs sentiment analysis on a string value.\n    To use this class in a scoped application, use the sn_nlp_sentiment namespace identifier. The\n    Sentiment Analysis plugin ( com.snc.sentiment_analysis) must be enabled to access the\n      <span class=\"keyword apiname\">SentimentAnalyser</span> API. <span class=\"keyword apiname\">Sentiment Analysis</span> API should be used in a script that is treated as an\n      admin-executing script. For example, we should use the <span class=\"keyword apiname\">Sentiment Analysis</span>\n      API in Script Action or Scheduled Job.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the SentimentAnalyser class with the specified connector\n    configuration that is used for sentiment analysis.","params":[{"name":"configGR","type":"GlideRecord","description":"GlideRecord object of a connector configuration"}],"returns":{"type":"","description":""},"example":[{"code":"var sa = new sn_nlp_sentiment.SentimentAnalyser(configGR);","description":"","output":""}]},{"name":"constructor","description":"Creates an instance of the SentimentAnalyser class with the default connector\n    configuration that is used for sentiment analysis.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var sa = new sn_nlp_sentiment.SentimentAnalyser();","description":"","output":""}]},{"name":"analyze","description":"Performs sentiment analysis on the specified text.","params":[{"name":"inputText","type":"String","description":"Text on which sentiment analysis should be performed."}],"returns":{"type":"JSON object","description":"Result of the sentiment analysis specifying the status, score, normalised\n                score, sys_id of the relevant connector configuration, and error message."},"example":[{"code":"\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyze (\"Example string\");","description":"","output":"{&quot;status&quot;: &quot;Success&quot;, &quot;score&quot;: &quot;0.7&quot;, &quot;normalizedScore&quot;: &quot;0.7&quot;, &quot;connectorConfig&quot;: &quot;10932aa773101300734e234ffff6a777&quot;, &quot;errorMessage&quot;:&quot;&quot;}"}]},{"name":"analyzeMultiple","description":"Performs sentiment analysis on an array of strings.","params":[{"name":"inputTextArray","type":"Array","description":"Array of text (string) on which sentiment analysis should be performed."}],"returns":{"type":"JSON Array","description":"An array that gives the result of the sentiment analysis performed on multiple\n                texts specifying the status, score, normalized score, sys_id of the relevant\n                connector configuration, and error message."},"example":[{"code":"\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyzeMultiple ([\"Example string1\",\"Example string2\"]);","description":"","output":"[{&quot;text&quot;: &quot;I am happy&quot;,&quot;result&quot;: {Success&quot;, &quot;score&quot;: &quot;0.7&quot;, &quot;normalizedScore&quot;: &quot;0.7&quot;, &quot;connectorConfig&quot;: &quot;10932aa773101300734e234ffff6a777&quot;, &quot;errorMessage&quot;:&quot;&quot;}},{&quot;text&quot;: &quot;I am not happy&quot;,&quot;result&quot;: {Success&quot;, &quot;score&quot;: &quot;-0.7&quot;, &quot;normalizedScore&quot;: &quot;-0.7&quot;, &quot;connectorConfig&quot;: &quot;10932aa773101300734e234ffff6a777&quot;, &quot;errorMessage&quot;:&quot;&quot;}}]"}]},{"name":"analyzeMultipleWithLanguage","description":"Performs sentiment analysis on an array of strings in the specified\n    language.","params":[{"name":"inputTextArray","type":"Array","description":"Array of text (string) on which sentiment analysis should be performed."},{"name":"language","type":"String","description":"Language for the input text. This can very for different sentiment\n                services."}],"returns":{"type":"JSON Array","description":"An array with the result of the sentiment analysis performed on multiple texts\n                of the mentioned language, specifying the status, score, normalized score, sys_id of\n                the relevant connector configuration, and error message."},"example":[{"code":"\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyzeMultipleWithLanguage ([\"Example string1\",\"Example string2\"], \"en\");","description":"","output":"[{&quot;text&quot;: &quot;I am happy&quot;,&quot;result&quot;: {Success&quot;, &quot;score&quot;: &quot;0.7&quot;, &quot;normalizedScore&quot;: &quot;0.7&quot;, &quot;connectorConfig&quot;: &quot;10932aa773101300734e234ffff6a777&quot;, &quot;errorMessage&quot;:&quot;&quot;}},{&quot;text&quot;: &quot;I am not happy&quot;,&quot;result&quot;: {Success&quot;, &quot;score&quot;: &quot;-0.7&quot;, &quot;normalizedScore&quot;: &quot;-0.7&quot;, &quot;connectorConfig&quot;: &quot;10932aa773101300734e234ffff6a777&quot;, &quot;errorMessage&quot;:&quot;&quot;}}]"}]},{"name":"analyzeWithLanguage","description":"Performs sentiment analysis on a specified text and language.","params":[{"name":"inputText","type":"String","description":"Text on which sentiment analysis should be performed."},{"name":"language","type":"String","description":"Language for the input text. This can very for different sentiment\n                services."}],"returns":{"type":"JSON object","description":"Result of the sentiment analysis specifying the status, score, normalized\n                score, sys_id of the relevant connector configuration, and error message."},"example":[{"code":"\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyze (\"Example string\", \"en\");","description":"","output":"{&quot;status&quot;: &quot;Success&quot;, &quot;score&quot;: &quot;0.7&quot;, &quot;normalizedScore&quot;: &quot;0.7&quot;, &quot;connectorConfig&quot;: &quot;10932aa773101300734e234ffff6a777&quot;, errorMessage&quot;:&quot;&quot;}"}]},{"name":"getConnectorByName","description":"Returns the GlideRecord of the specified connector configuration.","params":[{"name":"connectorName","type":"String","description":"Name of the connector configuration."}],"returns":{"type":"GlideRecord object","description":"GlideRecord of the specified connector configuration."},"example":[{"code":"\n      var sa = new sn_nlp_sentiment.SentimentAnalyser();\n      var connector = sa.getConnectorByName(\"xxx\");","description":"","output":"GlideRecord object of the connector configuration with name &quot;xxx&quot;, null if no connector is named as &quot;xxx&quot;."}]},{"name":"getDefaultConnector","description":"Returns the GlideRecord of the default connector configuration.","params":[],"returns":{"type":"GlideRecord object","description":"GlideRecord of the default connector configuration."},"example":[{"code":"\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var defaultConnector = sa.getDefaultConnector();","description":"","output":"GlideRecord object of the default connector configuration, null if no default connector is defined."}]}]},"SkillDeterminationUtils":{"meta":{"has_constructor":true,"description":"Provides utility methods to get or set work item skill data. The SkillDeterminationUtils API requires the Skill Determination\n      (com.snc.skill_determination) plugin and is provided within the sn_skill_rule namespace.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor to create an instance of SkillDeterminationUtils.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var util = new sn_skill_rule.SkillDeterminationUtils();","description":"","output":""}]},{"name":"assignSkillsToWorkItem","description":"Assigns an array of active skill objects to a work item.","params":[{"name":"skills","type":"Array","description":"Array of active skill objects to be assigned."},{"name":"skill.skillName","type":"String","description":"Name of the skill."},{"name":"skill.skillSysId","type":"String","description":"Sys ID of the skill."},{"name":"skill.mandatory","type":"Boolean","description":"True if the skill is mandatory, false otherwise."},{"name":"skill.skillLevelName","type":"String","description":"Optional skill level name."},{"name":"skill.skillLevelSysId","type":"String","description":"Optional skill level Sys ID."},{"name":"gr","type":"GlideRecord","description":"GlideRecord of the work item on which to assign skills."}],"returns":{"type":"None","description":" "},"example":[{"code":"// Create an interaction record\nvar gr = new GlideRecord('interaction');\ngr.insert();\n\nvar util = new sn_skill_rule.SkillDeterminationUtils();\n\n// Get interaction skills interaction \n// and specify if any are mandatory\nvar result = util.determineWorkItemSkills(gr);\n\n// Assign skills determined by result and \n// assign them to the interaction work item\nutil.assignSkillsToWorkItem(result, gr);","description":"The examples below create an Interaction record using the table name (interaction) and show\n        how to assign skills to the interaction work item, creating a record in the Interaction\n        Skills [interaction_m2m_skill] table.","output":"Use case 1: Use returned results from determineWorkItemSkills() to assign skills to a work\n        item from the Interaction table."},{"code":"var gr = new GlideRecord('interaction');\ngr.insert();\n\nvar util = new sn_skill_rule.SkillDeterminationUtils();\n\nvar skills = [{\"skillSysId\":\"2eb1c2029f100200a3bc1471367fcfe4\", \"skillName\":\"IT\", \"mandatory\":true, \"skillLevelName\":\"\", \"skillLevelSysId\":null}];\n\nutil.assignSkillsToWorkItem(skills, gr);","description":"Use case 2: Manually insert skills array. In this case, assign IT skills to the Interaction\n        work item.","output":""}]},{"name":"determineWorkItemSkills","description":"Gets skills for a specified work item, indicates if the skills are mandatory, and lists\n    any skill levels.","params":[{"name":"gr","type":"GlideRecord","description":"GlideRecord of a work item from any interaction or task table\n                extension."}],"returns":{"type":"Array","description":"One or more skill objects.<ul class=\"ul\" id=\"determineWorkItemSkills_GR__ul_bwb_5nb_j3b\">\n                  <li class=\"li\">skillSysId: String. Sys ID of the skill from the Skills  [cmn_skill]\n                    table.</li>\n\n                  <li class=\"li\">skillName: String. Name of the skill.</li>\n\n                  <li class=\"li\">mandatory: Boolean. True if mandatory, false otherwise.</li>\n\n                  <li class=\"li\">skillLevelName: If skill exists, name of the skill level. </li>\n\n                  <li class=\"li\">skillLevelSysId: If skill exists, Sys ID of the skill level from the Skill\n                    Levels  [cmn_skill_level] table. </li>\n\n                </ul>"},"example":[{"code":"// Create an interaction record\nvar gr = new GlideRecord('interaction');\ngr.insert();\n\nvar util = new sn_skill_rule.SkillDeterminationUtils();\n\nvar result = util.determineWorkItemSkills(gr);\ngs.info(JSON.stringify(result));","description":"The following script creates an interaction record, gets skills for the interaction work\n        item, and indicates if the skills are mandatory.","output":"[{&quot;skillSysId&quot;:&quot;6c0f025c7f672300a8b1bdc8adfa917f&quot;,\n&quot;skillName&quot;:&quot;Premier Support Certified&quot;,\n&quot;mandatory&quot;:false,&quot;skillLevelName&quot;:&quot;&quot;,\n&quot;skillLevelSysId&quot;:null}]"}]}]},"SMSPreferenceHandler":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">SMSPreferenceHandler</span> API provides methods to manage SMS\n    configurations. This API is implemented as the script include SMSPreferenceHandlerSNC and resides in the\n      sn_sms_pref namespace. To use this API you must install the Notify plugin (com.snc.notify)\n      which requires a separate subscription. You can activate this plugin if you have the admin\n      role.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates the SMSPreferenceHandler script include object.","params":[{"name":"provider","type":"String","description":"Name of the telephony service provider."}],"returns":{"type":"","description":""},"example":[{"code":"var handler = new sn_sms_pref.SMSPreferenceHandler('TwilioDirect'); // Pass the provider name\nvar config = handler.getConfig();","description":"","output":""}]},{"name":"getConfig","description":"Returns the preferences configuration record for the current telephony service\n    provider.<p>The method queries all preference configuration records from the SMS Preference\n        Configuration [sn_sms_pref_configuration] table for the current telephony service provider,\n        sorts the results by the Order field (lowest to highest), and then returns the first\n        record.</p>","params":[],"returns":{"type":"GlideRecord","description":"Preference configuration record for the current telephony service provider. If\n                no record exists, then null."},"example":[{"code":"var handler = new sn_sms_pref.SMSPreferenceHandler('TwilioDirect'); // Pass the provider name\nvar config = handler.getConfig();","description":"","output":""}]}]},"SOAPMessageV2":{"meta":{"has_constructor":true,"description":"The SOAPMessageV2 API allows you to send an outbound SOAP message using\n  JavaScript. Use the SOAPResponseV2 API to manage the response returned by the SOAP provider.<br/><br/>You can use this API in scoped applications, or within the global scope.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiate a SOAPMessageV2 object from a\n    SOAP message record\n    and a function associated with that record.<p>Values such as the endpoint, authentication, or MID Server settings from the SOAP message\n        record apply to this object.</p>","params":[{"name":"soapMessage","type":"String","description":"The SOAP message record you want to use as the base for this object."},{"name":"soapFunction","type":"String","description":"The SOAP function you want to execute. Available SOAP functions depend on the\n                WSDL supplied by the web service provider."}],"returns":{"type":"","description":""},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.","description":"","output":""}]},{"name":"constructor","description":"Instantiates an empty SOAPMessageV2 object.<p>When using an object instantiated this way, you must manually specify a SOAP action and\n        endpoint.</p>","params":[],"returns":{"type":"","description":""},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2();","description":"","output":""}]},{"name":"execute","description":"Send the SOAP message to the endpoint.","params":[],"returns":{"type":"<a class=\"xref\" href='https://developer.servicenow.com/app.do#!/api_doc?v=newyork#c_SOAPResponseV2API' title=\"The SOAPResponseV2 API allows you to use the data returned by an outbound SOAP message in JavaScript code.\">SOAPResponseV2</a>","description":"The response returned by the SOAP provider."},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.","description":"","output":""}]},{"name":"executeAsync","description":"Send the SOAP message to\n    the ECC queue.<p>SOAP messages in the ECC queue are processed by the SOAPClient business rule.</p><p>By default, this business rule does not run asynchronously. To configure this business rule\n        to run asynchronously, set the <span class=\"ph uicontrol\">When</span> value to Async and add\n        current.update() to the end of the <span class=\"ph uicontrol\">Script</span>. The instance does not wait\n        for a response from the web service provider when sending a message through the ECC\n        queue.</p>","params":[],"returns":{"type":"<a class=\"xref\" href='https://developer.servicenow.com/app.do#!/api_doc?v=newyork#c_SOAPResponseV2API' title=\"The SOAPResponseV2 API allows you to use the data returned by an outbound SOAP message in JavaScript code.\">SOAPResponseV2</a>","description":"The response returned by the SOAP provider.<div class=\"note note\"><span class=\"notetitle\">Note:</span>  Attempting to use the SOAP\n                  response object before the response has been processed may result in a timeout\n                  error.</div>"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.executeAsync();","description":"","output":""}]},{"name":"getEndpoint","description":"Get the endpoint for the SOAP message.","params":[],"returns":{"type":"String","description":"The URL of the SOAP web service provider."},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar endpoint = sm.getEndpoint();","description":"","output":""}]},{"name":"getRequestBody","description":"Get the content of the SOAP message body.","params":[],"returns":{"type":"String","description":"The SOAP message body."},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.execute();\nvar requestBody = sm.getRequestBody();","description":"","output":""}]},{"name":"getRequestHeader","description":"Get the value for an HTTP header specified by the SOAP client.<p>By default, this method cannot return the value for a header set automatically by the\n        system. To grant this method access to all headers, set the property glide.http.log_debug to\n        true.</p>","params":[{"name":"headerName","type":"String","description":"The request header you want to get the value for."}],"returns":{"type":"String","description":"The value of the specified header."},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar header = sm.getRequestHeader(\"Accept\");","description":"","output":""}]},{"name":"getRequestHeaders","description":"Get HTTP headers that were set by the SOAP client and the associated\n    values.<p>This method does not return headers set automatically by the system. To configure this\n        method to return all headers, set the property glide.http.log_debug to true.</p>","params":[],"returns":{"type":"Object","description":"An Object that maps the name of each header to the associated value."},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar requestHeaders = sm.getRequestHeaders();","description":"","output":""}]},{"name":"setBasicAuth","description":"Set basic authentication headers for the SOAP message.<p>Setting basic authentication headers using this method overrides\n        basic\n        authentication values defined in the SOAP message record.</p>","params":[{"name":"userName","type":"String","description":"The username to use when authenticating the SOAP message."},{"name":"userPass","type":"String","description":"The password for the specified user."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setBasicAuth(\"username\",\"password\");","description":"","output":""}]},{"name":"setEccCorrelator","description":"Associate outbound requests and the resulting response record in the ECC\n    queue.<p>This method only applies to SOAP messages sent through a MID Server. The correlator\n        provided populates the <span class=\"ph uicontrol\">Agent correlator</span> field on the ECC queue record\n        for the response. Provide a unique correlator for each outbound request to associate the\n        correct results in the ECC queue with the request when designing asynchronous automation\n        through a MID Server.</p>","params":[{"name":"correlator","type":"String","description":"A unique identifier."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccCorrelator(\"unique_id\");","description":"","output":""}]},{"name":"setEccParameter","description":"Override a value from the database by writing to the SOAP message payload.<p>This method only applies to SOAP messages sent through a MID Server. Use this method when a\n        value from the SOAP message in the database is invalid, such as when the endpoint URL is\n        longer than the maximum <span class=\"ph uicontrol\">SOAP endpoint</span> field length.</p><p>These are valid values for the name parameter.<ul class=\"ul\" id=\"r_SMV2-setEccParameter_String_name_String_value__ul_cfp_wck_xq\">\n          <li class=\"li\"><span class=\"keyword parmname\">source</span>: the endpoint URL.</li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">name</span>: the SOAP message function to run.</li>\n\n        </ul></p>","params":[{"name":"name","type":"String","description":"The name of the ECC parameter."},{"name":"value","type":"String","description":"The value to assign to the specified ECC parameter."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccParameter(\"source\",\"http://very.long.endpoint\");","description":"","output":""}]},{"name":"setEndpoint","description":"Set the endpoint for the SOAP message.<p>By default, the SOAP message uses the endpoint specified in the SOAP message record. Use\n        this method to override the default. You must call this method when using the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_SMV2-SOAPMessageV2\" title=\"Instantiates an empty SOAPMessageV2 object.\">SOAPMessageV2()</a> constructor with no\n        parameters.</p>","params":[{"name":"endpoint","type":"String","description":"The URL of the SOAP web service provider you want to interface with."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2();\nsm.setEndpoint(\"http://web.service.endpoint\");","description":"","output":""}]},{"name":"setHttpTimeout","description":"Set the amount of time the SOAP message waits for a response from the web service\n    provider before the request times out.","params":[{"name":"timeoutMs","type":"Number","description":"The amount of time to wait for a response from the web service provider, in\n                milliseconds."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setHttpTimeout(6000);","description":"","output":""}]},{"name":"setLogLevel","description":"Sets the log level for this message and the corresponding response.<p>Setting a log level using the SOAPMessageV2 API overrides the log level configured on the\n        SOAP message record. This log level may not apply if the endpoint domain is blacklisted, or\n        if the property <span class=\"keyword parmname\">glide.outbound_http_log.override</span> is true. To view\n        outbound web service logs, navigate to <span class=\"ph menucascade\"><span class=\"ph uicontrol\">System Logs</span> &gt; <span class=\"ph uicontrol\">Outbound HTTP Requests</span></span>.</p>","params":[{"name":"level","type":"String","description":"The log level. Valid values are basic, elevated, and all."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setMIDServer","description":"Configure the SOAP message to be sent through a MID Server.<p>By default, the SOAP message uses the MID Server specified in the SOAP message function\n        record. Use this method to override the default.</p>","params":[{"name":"midServerName","type":"String","description":"The name of the MID Server you want to send the SOAP message through. Your\n                instance must have an active MID Server with the specified name."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setMutualAuth","description":"Set the mutual authentication\n    protocol\n    profile for the SOAP message.<p>Setting a protocol profile using this method overrides the protocol profile selected for\n        the SOAP message record.</p>","params":[{"name":"profileName","type":"String","description":"The name of the protocol profile to use for mutual authentication."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setMutualAuth(\"auth_profile_name\");","description":"","output":""}]},{"name":"setRequestBody","description":"Set the body content to send to the web service provider.<p>When you set the body content using this method, variables in the body are not substituted\n        for parameters from the SOAP message function record. You must explicitly define all values\n        within the SOAP message body.</p>","params":[{"name":"requestBody","type":"String","description":"The body of the SOAP message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar body = \"&lt;SOAP message body&gt;\";\nsm.setRequestBody(body);","description":"","output":""}]},{"name":"setRequestHeader","description":"Set an HTTP header in the SOAP message to the specified value.","params":[{"name":"headerName","type":"String","description":"The name of the header."},{"name":"headerValue","type":"String","description":"The value to assign to the specified header."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setRequestHeader(\"Accept\",\"Application/json\");","description":"","output":""}]},{"name":"setSOAPAction","description":"Define the SOAP action this SOAP message performs.<p>The WSDL for your web service provider lists SOAP actions you can perform. You must call\n        this method when using the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_SMV2-SOAPMessageV2\" title=\"Instantiates an empty SOAPMessageV2 object.\">SOAPMessageV2()</a> constructor with no parameters.</p>","params":[{"name":"soapAction","type":"String","description":"The SOAP action this SOAP message performs."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2();\nsm.setSOAPAction(\"GetQuote\");\n//construct SOAP message by specifying endpoint and auth\nsm.execute();","description":"","output":""}]},{"name":"setStringParameter","description":"Set a variable with the specified name from the SOAP message record to the specified\n    value.<p>XML reserved characters in the value are converted to the equivalent escaped\n        characters.</p>","params":[{"name":"name","type":"String","description":"The name of the SOAP message variable."},{"name":"value","type":"String","description":"The value to assign to the specified variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameter(\"symbol\",\"NOW\");","description":"","output":""}]},{"name":"setStringParameterNoEscape","description":"Set a variable with the specified name from the SOAP message record to the specified\n    value.<p>This method is equivalent to setStringParameter but does not escape XML reserved\n        characters.</p>","params":[{"name":"name","type":"String","description":"The name of the SOAP message variable."},{"name":"value","type":"String","description":"The value to assign to the specified variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameterNoEscape(\"symbol\",\"NOW\");","description":"","output":""}]},{"name":"setWSSecurity","description":"Sets web service security values for the SOAP message.<p>Setting security values using this method overwrites\n        web\n        service security values defined for the SOAP message record.</p>","params":[{"name":"keystoreId","type":"String","description":"The sys_id of the Java or PKCS12 key store to use."},{"name":"keystoreAlias","type":"String","description":"The alias that identifies the public and private keys."},{"name":"keystorePassword","type":"String","description":"The password assigned to the key store record."},{"name":"certificateId","type":"String","description":"The sys_id of the trusted server certificate."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setWSSecurity(\"70d65e074f3812001f6eac118110c71a\",\"Quote keys\",\"UXr82cqX75Z7MaSa+EyjGA==\",\"ba969a074f3812001f6eac118110c76d\");","description":"","output":""}]}]},"SOAPResponseV2":{"meta":{"has_constructor":false,"description":"The SOAPResponseV2 API allows you to use the data returned by an outbound SOAP message\n  in JavaScript code. A SOAPResponseV2 object is returned by the SOAPMessageV2 functions execute() and\n   executeAsync().<br/><br/>You can use this API in scoped applications, or within the global scope.","example":""},"properties":{},"methods":[{"name":"getAllHeaders","description":"Return all headers contained in the response, including any duplicate\n    headers.","params":[],"returns":{"type":"List<GlideHTTPHeader>","description":"The list of headers contained in the response. Each header is represented as a\n                GlideHTTPHeader object which contains the header <var class=\"keyword varname\">name</var> and\n                  <var class=\"keyword varname\">value</var>."},"example":[{"code":"var r = new sn_ws.SOAPMessageV2('&lt;A SOAP message&gt;', 'get');\nvar response = r.execute();\nvar headers = response.getAllHeaders();\nfor(var i in headers){\n  gs.print(headers[i].name + ': ' + headers[i].value);\n}","description":"","output":""}]},{"name":"getBody","description":"Get the content of the SOAP response body.","params":[],"returns":{"type":"String","description":"The SOAP response body."},"example":[{"code":"var body = response.getBody();","description":"","output":""}]},{"name":"getCookies","description":"Returns all cookies included in the response.","params":[],"returns":{"type":"Object","description":"The list of cookies. Iterate through the list to perform operations on each\n                cookie."},"example":[{"code":"var cookies = response.getCookies();\nvar i;\nfor(i=0;i&lt;cookies.size();i++) {\n   gs.print(‘cookie: ‘ + cookies.get(i));\n}","description":"","output":""}]},{"name":"getErrorCode","description":"Get the numeric error code if there was an error during the SOAP\n    transaction.<p>This error code is specific to the <span class=\"ph\">Now Platform</span>, it is not an HTTP error code.\n        Provide this error code if you require assistance from ServiceNow Customer Support.</p>","params":[],"returns":{"type":"Number","description":"The numeric error code, such as 1 for a socket timeout."},"example":[{"code":"var errorCode = response.getErrorCode();","description":"","output":""}]},{"name":"getErrorMessage","description":"Get the error message if there was an error during the SOAP transaction.","params":[],"returns":{"type":"String","description":"The error message."},"example":[{"code":"var errorMsg = response.getErrorMessage();","description":"","output":""}]},{"name":"getHeader","description":"Get the value for a specified HTTP header.","params":[{"name":"name","type":"String","description":"The name of the header that you want the value for, such as Set-Cookie."}],"returns":{"type":"String","description":"The value of the specified header."},"example":[{"code":"var headerVal = response.getHeader(\"Accept\");","description":"","output":""}]},{"name":"getHeaders","description":"Get all HTTP headers returned in the SOAP response and the associated\n    values.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If a header is present more than once in the response, such as a Set-Cookie header,\n          this function returns only the last of the duplicate headers. To return all headers\n          including duplicates, use the <span class=\"keyword apiname\">getAllHeaders()</span> function.</div></p>","params":[],"returns":{"type":"Object","description":"An Object that maps the name of each header to the associated value."},"example":[{"code":"var headers = response.getHeaders();","description":"","output":""}]},{"name":"getStatusCode","description":"Get the numeric HTTP status code returned by the SOAP provider.","params":[],"returns":{"type":"Number","description":"The numeric status code returned by the SOAP provider, such as 200 for a\n                successful response."},"example":[{"code":"var statusCode = response.getStatusCode();","description":"","output":""}]},{"name":"haveError","description":"Indicate if there was an error during the SOAP transaction.","params":[],"returns":{"type":"boolean","description":"Returns true if there was an error, false if there was no error."},"example":[{"code":"var error = response.haveError();","description":"","output":""}]},{"name":"waitForResponse","description":"Set the amount of time the instance waits for a response from the web service\n    provider.<p>This method overrides the property glide.soap.outbound.ecc_response.timeout for this SOAP\n        response.</p>","params":[{"name":"timeoutSecs","type":"Number","description":"The amount of time, in seconds, to wait for this response."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"response.waitForResponse(60);","description":"","output":""}]}]},"SPScriptedFacet":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Define facet items, filters, or mapped\n                queries for a facets object.</span> The <span class=\"keyword apiname\">SPScriptedFacet</span> API can only be used in a facet generation script in a\n        <span class=\"ph\">Service Portal</span> search source. The\n      facet generation script is only visible when <span class=\"ph uicontrol\">Is scripted source</span> is\n      selected.<br/><br/>There is no constructor for this class. Instead, use the createFacet() or\n      createMultiChoiceFacet() methods of the <span class=\"keyword apiname\">SPScriptedFacetService</span> class to\n      generate a facets object.","example":""},"properties":{},"methods":[{"name":"addFacetItem","description":"Adds facet items or mapped queries to a facets object.<p>Before adding facet items to a facets object, create the facets object using the\n        createFacet() or createMultiChoiceFacet() methods of the\n          <span class=\"keyword apiname\">SPScriptedFacetService</span> class.</p>","params":[{"name":"label","type":"String","description":"The display label for the facet item or mapped query."},{"name":"valueObj","type":"Object","description":"The facet item or mapped query for the facet. Can only contain types String,\n                Number, Boolean, and Double."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"(function(query, facetService, searchResults, facets) {\n\t/* Calculate your facets here using facetService */\n\t/* var stateFacet = facetService.createFacet('State', 'state'); */\n\t/* stateFacet.addFacetItem('Facet Item Label', '123'); */\n\n\tcreateCreatedFacet();\n\t\n\tfunction createCreatedFacet() {\n\t\tif (!facets.created &amp;&amp; searchResults.length == 0)\n\t\t\treturn;\n\t\t\n\t\tvar gr = new GlideAggregate(\"incident\");\n\t\tgr.addQuery(\"123TEXTQUERY321\", query);\n\t\tif (facets.created) {\n\t\t\tif (facets.created == \"today\") {\t\ngr.addEncodedQuery(\"sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()\");\n\t\t\t}\n\t\t\tif (facets.created == \"before\") {\n\t\t\t\tgr.addEncodedQuery(\"sys_created_on&lt;javascript:gs.beginningOfToday()\");\n\t\t\t}\n\t\t}\n\t\tgr.query();\n\t\t\n\t\tvar queryMap = {\n\t\t\ttoday: \"Today\",\n\t\t\tbefore: \"Before Today\"\n\t\t};\n\n\t\tvar createdFacet = facetService.createFacet(\"Created\", \"created\");\n\t\tif (facets.created) {\n\t\t\tcreatedFacet.addFacetItem(queryMap[facets.created], facets.created);\n\t\t} else {\n\t\t\tcreatedFacet.addFacetItem(queryMap.today, \"today\");\n\t\t\tcreatedFacet.addFacetItem(queryMap.before, \"before\");\n\t\t}\n\t}\n\t\n})(query, facetService, searchResults, facets);\n","description":"Can only be used in a facet generation script in a Service Portal advanced search\n        source.","output":""}]}]},"SPScriptedFacetService":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Generate a multi choice or single\n                choice facets object for an advanced search source.</span> The <span class=\"keyword apiname\">SPScriptedFacetService</span> API can only be used in a facet generation\n      script in a <span class=\"ph\">Service Portal</span> search\n      source. The facet generation script is only visible when <span class=\"ph uicontrol\">Is scripted\n        source</span> is selected.<br/><br/>There is no constructor for this class. Instead, use the createFacet() or\n      createMultiChoiceFacet() methods to generate a facets object.","example":""},"properties":{},"methods":[{"name":"createFacet","description":"Creates a single choice facets object.<p>After creating the facets object, add facet items or mapped queries to the facet using the\n        addFacetItem() method of the <span class=\"keyword apiname\">SPScriptedFacet</span> class.</p>","params":[{"name":"label","type":"String","description":"Label for the facet."},{"name":"id","type":"String","description":"ID for the facet."}],"returns":{"type":"Object","description":"Single choice facets object. Returns an error when:<ul class=\"ul\" id=\"SPSFServiceScoped-createFacet_S_S__ul_obk_vvw_xcb\">\n                  <li class=\"li\">A duplicate label or ID is found. </li>\n\n                  <li class=\"li\">A label or ID is not defined. </li>\n\n                </ul>"},"example":[{"code":"var stateFacet = facetService.createFacet(\"State\", \"state\");","description":"Can only be used in a facet generation script in a Service Portal advanced search\n        source.","output":""}]},{"name":"createMultiChoiceFacet","description":"Creates a multi choice facets object.<p>After creating the facets object, add facet items or mapped queries to the facet using the\n        addFacetItem() method of the <span class=\"keyword apiname\">SPScriptedFacet</span> class.</p>","params":[{"name":"label","type":"String","description":"Label for the facet."},{"name":"id","type":"String","description":"ID for the facet."}],"returns":{"type":"Object","description":"Multi choice facets object. Returns an error when:<ul class=\"ul\" id=\"SPSFServiceScoped-createMultiSelectFacet_S_S__ul_obk_vvw_xcb\">\n                  <li class=\"li\">A duplicate label or ID is found. </li>\n\n                  <li class=\"li\">A label or ID is not defined. </li>\n\n                </ul>"},"example":[{"code":"var stateFacet = facetService.createMultiChoiceFacet(\"State\", \"state\");","description":"Can only be used in a facet generation script in a Service Portal advanced search\n        source.","output":""}]}]},"StandardCredentialsProvider":{"meta":{"has_constructor":true,"description":"Use StandardCredentialsProvider API to retrieve credential information. You can use this API in scoped applications, or within the global scope. In scoped scripts,\n      use the <samp class=\"ph codeph\">sn_cc</samp> namespace identifier.<br/><br/>This function retrieves credential information by sys ID and by given credential\n      attributes.<br/><br/><pre ng-prism='' source='//Get a single credential\n\n      var provider = new sn_cc.StandardCredentialsProvider();\n      var credential = provider.getCredentialByID(\"put a sys_id here\");\n      var userName = credential.getAttribute(\"user_name\");\n      var password = credential.getAttribute(\"password\");\n      //using getAttribute for new keys in extended tables, for example \n      //cloud management credential has the \"user_public_key\" attribute\n      var userPublicKey = credential.getAttribute(\"user_public_key\");\n\n\n//Get a list of SSH credentials\n\n      var provider = new sn_cc.StandardCredentialsProvider();\n      var credentials = provider.getCredentials([\"ssh\"]);\n      for (var i = 0; i &lt; credentials.length; i++) {\n      \tvar credential = credentials[i];\n             gs.info(credential.getAttribute(\"name\"));\n      }\n' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Use StardardCredentialsProvider() to retrieve credential information.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getCredentialByID","description":"This function retrieves a credential object identified by the given sys ID.","params":[{"name":"sys ID","type":"String","description":"A string representing the sys ID of the credential record."}],"returns":{"type":"StandardCredential","description":"A credential."},"example":[{"code":"var provider = new sn_cc.StandardCredentialsProvider();\n         var credentials = provider.getCredentials([\"ssh\"]);\n         for (var i = 0; i &lt; credentials.length; i++) {\n      \tvar credential = credentials[i];\n             gs.info(credential.getAttribute(\"name\"));\n      }\n","description":"","output":""}]},{"name":"getCredentials","description":"This function returns an array of all credentials that match the given types and\n    tags.","params":[{"name":"types","type":"String","description":"Types is an array of credential type names. For example, [\"ssh\",\n                  \"windows\"]<div class=\"note note\"><span class=\"notetitle\">Note:</span> If types are null or empty, any match returns a credential. If\n                  types are specified, the credentials whose type matches one of the types\n                  returns.</div>"},{"name":"handles","type":"String","description":"Handles is a comma-separated list of handle names. For example,\n                \"ssh,jdbc\""}],"returns":{"type":"StandardCredential","description":"Information about the ConnInfo..."},"example":[{"code":"var provider = new sn_cc.StandardCredentialsProvider();\n         var credentials = provider.getCredentials([\"ssh\"]);\n         for (var i = 0; i &lt; credentials.length; i++) {\n      \tvar credential = credentials[i];\n             gs.info(credential.getAttribute(\"name\"));\n      }\n","description":"","output":""}]}]},"Subflow":{"meta":{"has_constructor":false,"description":"Runs published <span class=\"ph\">Flow Designer</span> subflows. The Subflow API can only be used in server scripts.<br/><br/>Use the sn_fd namespace to access the Subflow API.<br/><br/>Before interacting with a subflow using the Subflow API, you must first create and publish\n      the subflow in the <span class=\"ph\">Flow Designer</span>\n      interface. Because the Subflow API only interacts with pre-built subflows, there is no\n      constructor for the class.<br/><br/>This API is deprecated and replaced by the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#ScriptableFlowAPI\" title=\"Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.\">FlowAPI</a>.","example":""},"properties":{},"methods":[{"name":"startAsync","description":"Runs a published subflow asynchronously.<p>Asynchronous calls are non-blocking, allowing the client to execute other code in the\n        script without having to wait for the subflow to complete.</p>","params":[{"name":"scopeName.subflowName","type":"String","description":"The application scope for the subflow and the internal name of the subflow to\n                run. If scopeName is not included, the scope of the user currently logged in is\n                used. Retrieve the internal name of the subflow using the <span class=\"ph uicontrol\">Internal\n                  name</span> column on the <span class=\"ph\">Flow Designer</span> landing\n                page."},{"name":"inputs","type":"Map","description":"Name-value pairs that define subflow inputs. If a subflow includes mandatory\n                inputs, they must be included. For inputs of Reference or Document ID field types,\n                use a GlideRecord object as the value."}],"returns":{"type":"Object","description":"PlanResponse object containing the following properties: <ul class=\"ul\" id=\"SubflowScoped-startAsync_S_O__ul_bd2_k2v_ncb\">\n                  <li class=\"li\">contextId: sys_id of the execution details record for the executed subflow.\n                    Access the execution details by navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span> and\n                    filtering by sys_id. </li>\n\n                </ul>\n<div class=\"p\">An exception occurs when the subflow:<ul class=\"ul\" id=\"SubflowScoped-startAsync_S_O__ul_ub3_n3t_pcb\">\n                    <li class=\"li\">Does not exist within the specified application scope, or the subflow or\n                      scope name has been misspelled. </li>\n\n                    <li class=\"li\">Is not published.</li>\n\n                    <li class=\"li\">Is passed an input object that does not match the subflow inputs. </li>\n\n                    <li class=\"li\">Exceeds the recursion limit set by the\n                        <span class=\"keyword parmname\">com.glide.hub.flow_engine.indirect_recursion_limit</span>\n                      system property. The default value is three. </li>\n\n                  </ul>\n</div>"},"example":[{"code":"//Run a subflow that takes two inputs: user, a sys_user record, and laptop_welcome_message, a string.\n(function startSubflowAsync() {\n\n\ttry {\n\t\tvar userToProvisionFor = new GlideRecord('sys_user');\n\t\tuserToProvisionFor.get('62826bf03710200044e0bfc8bcbe5df1');\n\n\t\tvar inputs = {};\n\t\tinputs['user'] = userToProvisionFor;\n\t\tinputs['laptop_welcome_message'] = 'Welcome Onboard!!';\n\n\t\tvar result = sn_fd.Subflow.startAsync('sn_devstudio.provisionlaptop', inputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();","description":"","output":""}]}]},"TemplatePrinter":{"meta":{"has_constructor":false,"description":"Scoped TemplatePrinter handles printing from a mail script to the email message. There is no constructor for the scoped TemplatePrinter API. The methods are called in mail\n   scripts using the <span class=\"keyword apiname\">template</span> global variable.","example":""},"properties":{},"methods":[{"name":"print","description":"Prints the string to the email body.","params":[{"name":"string","type":"String","description":"The string to print"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"template.print(\"Incident number - \" + current.number + \"\\n\");","description":"","output":""}]},{"name":"space","description":"Adds non-breaking spaces to the email body.","params":[{"name":"spaces","type":"Number","description":"The number of non-breaking spaces to output to the email body."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"template.space(4);","description":"","output":""}]}]},"Transformer":{"meta":{"has_constructor":true,"description":"Manipulate time-series data to prepare the data for evaluation and\n    analysis. The Transformer class can be used in scoped and global server scripts. When using the\n      Transformer class, use the sn_clotho namespace identifier.<br/><br/>The general use case is to determine the period to be evaluated, select the records from the\n      table with the metric field, define the type of transform to run, and then execute the\n      transform.<pre ng-prism='' source='// create the start and end time\n       var start = new GlideDateTime();\n\tstart.addSeconds(-1 * 60 * 60); \n\tvar end = new GlideDateTime();\n\t\n\t//mb_demo_drone is a table with metric fields. \n\tvar drones = new GlideRecord(\"mb_demo_drone\");\n\tdrones.addQuery(\"model\", \"Kingfisher Phantom\");\n\tdrones.query();\n\n\t//build a transform that returns a simple average\n\tvar builder = new sn_clotho.Transformer(drones);\n\tbuilder.metric(\"mb_demo_mt_rem_battery\").avg().label(\"Original\");\n\n\t//execute transform and return result for visualization\n\tvar result = builder.execute(start,end);' class='language-javascript monospaceing'></pre><br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Create a Transformer object.","params":[{"name":"sourceRecords","type":"GlideRecord","description":"Contains the records for which metrics are to be evaluated. Can be one record\n                or many."}],"returns":{"type":"","description":""},"example":[{"code":"//where drones is a GlideRecord created from a table with a metric field\n\tvar builder = new sn_clotho.Transformer(drones);\n","description":"","output":""}]},{"name":"execute","description":"Run the transform.<p>Use the <span class=\"keyword apiname\">metric()</span> and <span class=\"keyword apiname\">groupBy()</span> methods before calling\n          <span class=\"keyword apiname\">execute()</span>. The <span class=\"keyword apiname\">execute()</span> method can only be called\n        once for each Transformer object.</p><p>Actions performed as part of the transform do not change the data in the <span class=\"ph\">MetricBase</span> database.</p>","params":[{"name":"start","type":"GlideDateTime","description":"The beginning of the period to be evaluated."},{"name":"end","type":"GlideDateTime","description":"The end of the period to be evaluated."}],"returns":{"type":"TransformResult","description":"The transformed data."},"example":[{"code":"var minutesAgoStart = 60;\n\tvar end = new GlideDateTime();\n\tvar start = new GlideDateTime(end);\n\tstart.addSeconds(-1 * 60 * minutesAgoStart);\n\t\n\t// query subject records\n\tvar grDrone = new GlideRecord('mb_demo_drone');\n\tgrDrone.query();\n\t\n\t// building transform; get the average transforms of a metric, grouping by model\n\tvar transformer = new sn_clotho.Transformer(grDrone);\n\ttransformer.groupBy(\"fleet\").metric(\"mb_demo_mt_altitude\").avg().label('avg - %g:fleet:');\n\n\t// execute and return result for visualization\n\tvar tfrmResult = transformer.execute(start, end);","description":"","output":""}]},{"name":"groupBy","description":"Specify a field to be used to group the data.<p>If you are going to use the <span class=\"keyword apiname\">groupBy()</span> method, it must be called before\n        the <span class=\"keyword apiname\">execute()</span> method.</p>","params":[{"name":"field","type":"String","description":"A field in the table to be used to group the transform results."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify the transform\n                characteristics."},"example":[{"code":"var transformer = new sn_clotho.Transformer(grDrone);\n\tvar trnsfrm = transformer.groupBy(\"fleet\");","description":"","output":""}]},{"name":"metric","description":"Specify the metric field to be used in the transform.<p>You can specify multiple metrics to be used in the transform. The\n          <span class=\"keyword apiname\">metric()</span> method cannot be called after the<span class=\"keyword apiname\"> execute()</span>\n        method is called.</p>","params":[{"name":"metricName","type":"String","description":"Name of the metric field."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify the transform\n                characteristics."},"example":[{"code":"var transformer = new sn_clotho.Transformer(grDrone);\nvar trnsfrm = transformer.metric(\"mb_demo_mt_altitude\");","description":"","output":""}]}]},"TransformerDefinition":{"meta":{"has_constructor":true,"description":"Provides methods to instantiate and manage the TransformerDefinition object, which\n    associates a transformation rules list and record path. The scripted <span class=\"keyword apiname\">TransformerDefinition</span> API works in conjunction with the\n        <span class=\"keyword apiname\">Transformer</span> and <span class=\"keyword apiname\">TransformerRuleList</span> APIs to transform\n      structured JSON/XML content into output such as tabular tables or objects.<br/><br/>The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create rules that define\n                how to transform the data in a source document into the desired output. For example,\n                if you are transforming JSON data into a tabular table, each rule that you define in\n                the rules list becomes a column within the tabular table. Each node that is\n                processed in the source document, becomes a row in the output table.<br/><br/>The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a rule list with a\n                JSON/XML record path to define reusable transform definition objects. You can use an\n                object to transform one or more source documents.<br/><br/>In addition, this object provides methods that enable you to obtain the record path of the\n      TransformerDefinition object and to validate whether the definition has a valid\n      TransformerRuleList associated with it.<br/><br/>The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one node/row at a time, to create the desired output\n                data.<br/><br/>You can use the <span class=\"keyword apiname\">TransformerDefinition</span> class in both scoped and global\n      server scripts. When using this class, use the <samp class=\"ph codeph\">sn_tfrm</samp> namespace identifier.\n      Also, before this API is available in an instance, you must activate the Transformation\n      Service plugin (com.glide.transform).","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a TransformerDefinition object.","params":[{"name":"transformerRuleList","type":"Object","description":"TransformerRuleList to associate with this transformer definition."},{"name":"recordPath","type":"String","description":"Optional. Path (JSONPath for JSON, XPath for XML) that identifies the set of\n                records in the source document to transform. A record is a subset of a document that\n                corresponds to a single row of content.<p class=\"p\">For JSON, this value should be the path to\n                  an array or collection of objects to transform.</p>\n<p class=\"p\">For XML, this value should\n                  be the path to the node (collection of child nodes) to transform. </p>\n<p class=\"p\">If\n                    <span class=\"keyword parmname\">recordPath</span> is unspecified, the entire document is inferred\n                  as being a single record. For JSON documents, if the top node is an array and\n                    <span class=\"keyword parmname\">recordPath</span> is unspecified then the top array is the records\n                  container, and each of its entries is a record. </p>"}],"returns":{"type":"","description":""},"example":[{"code":"var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); \n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .addSymbol('ticker', 'quote.symbol') \n  .addSymbol('change_percentage', 'quote.change_change') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addSymbol('close_price', 'quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addSymbol('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close'); \n\n \nvar path = '$.*'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}","description":"","output":""}]},{"name":"recordPath","description":"If set, returns the record path for the source data file associated with the\n    TransformerDefinition object.<p><span class=\"ph\">A record path (JSONPath for JSON, XPath for XML)\n                identifies the set of records in the source document to transform. A record is a\n                subset of a document that corresponds to a single row of content, such as objects in\n                JSON and nodes in XML.</span></p>","params":[],"returns":{"type":"String","description":"If set, the record path associated with the transformer definition. If not set,\n                returns null."},"example":[{"code":"var path = '$.records'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);  \n.\n.\n.\n\nvar recordPath = transformerDefinition.recordfPath();\n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}","description":"","output":""}]},{"name":"validate","description":"Validates whether a valid TransformerRuleList is associated with the\n    TransformerDefintion object.","params":[],"returns":{"type":"Boolean","description":"Flag that indicates whether a valid TransformerRuleList is associated with the\n                specified TransformerDefintion object.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRD-validate__ul_d4k_wgy_qhb\">\n                  <li class=\"li\">true: valid TransformerRuleList associated</li>\n\n                  <li class=\"li\">false: invalid or no TransformerRulList associated</li>\n\n                </ul>"},"example":[{"code":"var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath);\nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n.\n.\n.\n\nif (transformerDefinition.validate()) {\n\n  var results = []; \n  while (transformer.transform()) { \n    results.push(transformer.getRow());\n  }\n}","description":"","output":""}]}]},"TransformerRuleList":{"meta":{"has_constructor":false,"description":"Creates a rule list for transforming JSON or XML documents into a prescribed\n    output. The scripted <span class=\"keyword apiname\">TransformerRuleList</span> API works in conjunction with the\n        <span class=\"keyword apiname\">Transformer</span> and <span class=\"keyword apiname\">TransformerDefinition</span>APIs to transform\n      structured JSON/XML content into output such as tabular tables or objects.<br/><br/>The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create rules that define\n                how to transform the data in a source document into the desired output. For example,\n                if you are transforming JSON data into a tabular table, each rule that you define in\n                the rules list becomes a column within the tabular table. Each node that is\n                processed in the source document, becomes a row in the output table.<br/><br/>The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a rule list with a\n                JSON/XML record path to define reusable transform definition objects. You can use an\n                object to transform one or more source documents.<br/><br/>The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one node/row at a time, to create the desired output\n                data.<br/><br/>When you instantiate the <span class=\"keyword apiname\">TransformRuleList</span> object, you must first define\n      whether it describes a JSON or XML source document using the <span class=\"keyword apiname\">.fromJSON()</span> or\n        <span class=\"keyword apiname\">.fromXML()</span> methods. For example:<br/><br/><pre ng-prism='' source='var trl = sn_tfrm.TransformerRuleList().fromJSON();' class='language-javascript monospaceing'></pre>\n or\n      <pre class=\"pre codeblock\">var trl = sn_tfrm.TransformerRuleList().fromXML();</pre><br/><br/>Then use the <span class=\"keyword apiname\">addRule()</span> method to define the transformation of elements in\n      the source document to elements in the output.<br/><br/>Use \"adapter methods\" to define how to manipulate data elements when the transformation is\n      performed. You can apply one or more adapter methods to each data transformation. Adapter\n      methods enable you to do things such as:<ul class=\"ul\" id=\"TransformerRuleListAPI__ul_nrx_yvv_phb\">\n        <li class=\"li\">Concatenate text or contrived data elements</li>\n\n        <li class=\"li\">Perform mathematical functions, such as add, subtract, divide, and multiply</li>\n\n        <li class=\"li\">Round values up or down (round up/down, ceiling/floor)</li>\n\n        <li class=\"li\">Define whether to use the minimum or maximum value when comparing a source data element\n          to a specified value</li>\n\n        <li class=\"li\">Apply a currency code</li>\n\n        <li class=\"li\">Convert between different units of measure</li>\n\n        <li class=\"li\">Format data elements</li>\n\n        <li class=\"li\">Apply patterns</li>\n\n        <li class=\"li\">Replace specified data elements with a specified value</li>\n\n        <li class=\"li\">Split and rearrange strings</li>\n\n      </ul><br/><br/>You can use the <span class=\"keyword apiname\">TransformerRuleList</span> class in both scoped and global server\n      scripts. When using this class, use the <samp class=\"ph codeph\">sn_tfrm</samp> namespace identifier. Also,\n      before this API is available in an instance, you must activate the Transformation Service\n      plugin (com.glide.transform).","example":""},"properties":{},"methods":[{"name":"addRule","description":"Creates an entry in the associated rules list which defines a field to create in the\n    output.<p>You can create rules for any element in a source node and all its child nodes. For example,\n          <samp class=\"ph codeph\">.addRule('ticker', '$.quote.symbol')</samp> creates the field \"ticker\" in the\n        output and copies over the value in quote.symbol of the source.</p><p><samp class=\"ph codeph\">.addRule('summary')</samp> creates the field \"summary\" in the output but does not\n        correlate to any field in the source. You can then use the adaptor methods\n          <span class=\"keyword apiname\">thenConcat()</span> and <span class=\"keyword apiname\">thenConcatSymbol()</span> to modify the\n        contents of this output field.</p><p>Once you define a rule, you then use adaptor methods, such as <span class=\"keyword apiname\">thenAdd()</span>,\n          <span class=\"keyword apiname\">thenReplace()</span>, and <span class=\"keyword apiname\">thenFloor()</span> to manipulate the\n        rule's output data. You can define as many adaptor methods as needed for a single rule. All\n        adapter methods directly after an <span class=\"keyword apiname\">addRule()</span> call until the next\n          <span class=\"keyword apiname\">addRule()</span> call apply to that rule. Adapter methods are cumulative with\n        the result of all adapter methods being the final value saved in the output field.</p><p>For example, in the following code snippet, <span class=\"keyword apiname\">thenMultiply()</span> and\n          <span class=\"keyword apiname\">thenRoundDown()</span> apply to <span class=\"keyword apiname\">addRule('change_percentage',\n          '$.quote.changePercent')</span>; <span class=\"keyword apiname\">addRule('close_price',\n          '$.quote.close')</span> starts a new rule. If the value in\n          <span class=\"keyword parmname\">$.quote.changePercent</span> is .011, then the final output value is \"1\" (\n        .011 * 100 rounded down to the ones position).</p><p><pre class=\"pre codeblock\">\n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') </pre></p>","params":[{"name":"rule","type":"String","description":"Name of the element in the destination output."},{"name":"path","type":"String","description":"Optional. JSONPath or XPath to the data element in the source document.<p class=\"p\">The\n                  adapter methods <span class=\"keyword apiname\">thenConcat()</span> and\n                    <span class=\"keyword apiname\">thenConcatSymbol()</span> do not require you to define this\n                  parameter if no other adapter methods are defined for the rule. All other adapter\n                  methods require this parameter.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n","description":"","output":""}]},{"name":"setName","description":"Defines a name for the associated TransformerRuleList object for logging\n    purposes.","params":[{"name":"name","type":"String","description":"Name to use to identify the associated TransformerRuleList object. <p class=\"p\">Although\n                  the API does not force this name to be unique, it is helpful if they are unique\n                  within an instance.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n","description":"","output":""}]},{"name":"thenAdaptCurrency","description":"Adds an adapter to the current rule that ties the specified currency code to the output\n    field defined in the associated <span class=\"keyword apiname\">addRule()</span> call.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"currencyCode","type":"String","description":"Currency code to tie to the destination data element, such as USD, EUR, and\n                GBP."},{"name":"outputNumericCurrencyValue","type":"Boolean","description":"Optional. Flag that indicates whether to display the currency code.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptCurrency_S_B__ul_djt_wlw_qhb\">\n                  <li class=\"li\">true: do not display the country code; numeric value only</li>\n\n                  <li class=\"li\">false: display the country code</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n","description":"","output":""}]},{"name":"thenAdaptDuration","description":"Adds an adapter to the current rule that converts the source field from one unit of\n    measure to another, such as from minutes to seconds or weeks to days.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"inputDuration","type":"String","description":"Current unit of measure of the source field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptDuration_S_S__ul_nwd_nnw_qhb\">\n                  <li class=\"li\">NANOSECOND</li>\n\n                  <li class=\"li\">MICROSECOND</li>\n\n                  <li class=\"li\">MILLISECOND</li>\n\n                  <li class=\"li\">SECOND</li>\n\n                  <li class=\"li\">MINUTE</li>\n\n                  <li class=\"li\">HOUR</li>\n\n                  <li class=\"li\">DAY</li>\n\n                  <li class=\"li\">WEEK</li>\n\n                </ul>"},{"name":"outputDuration","type":"String","description":"Unit of measure to convert the source field to in the output.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptDuration_S_S__ul_aly_tnw_qhb\">\n                  <li class=\"li\">NANOSECOND</li>\n\n                  <li class=\"li\">MICROSECOND</li>\n\n                  <li class=\"li\">MILLISECOND</li>\n\n                  <li class=\"li\">SECOND</li>\n\n                  <li class=\"li\">MINUTE</li>\n\n                  <li class=\"li\">HOUR</li>\n\n                  <li class=\"li\">DAY</li>\n\n                  <li class=\"li\">WEEK</li>\n\n                </ul>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('daily', '$.quote.weekly') \n  .thenAdaptDuration('WEEK', 'DAY'); \n","description":"","output":""}]},{"name":"thenAdd","description":"Adds an adapter to the current rule that adds the passed in value to the source\n    field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value to add to the source field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList.fromJSON()\n  .setName('Stock Report 05182019 JSON')\n  .addSymbol('ticker', '$.symbol') \n  .addSymbol('change_percentage', '$.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addSymbol('trade_price', '$.current_price')\n  .thenAdaptCurrency('USD', false) \n  .addMultiply('$.trade_quantity')\n  .thenAdd('4.5'); \n","description":"","output":""}]},{"name":"thenApplyMap","description":"Adds an adapter to the current rule that searches the associated source field for a\n    list of strings and replaces them in the output with the specified replacement\n    values.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"map","type":"Object","description":"Name/value pairs.<ul class=\"ul\" id=\"TRL-thenApplyMap_O__ul_vtw_jbz_qhb\">\n                  <li class=\"li\">name: text to locate in the source data element</li>\n\n                  \n                  <li class=\"li\">value: text to replace it with in the output</li>\n\n                </ul>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company_info', '$.quote.company_info') \n  .thenApplyMap({'Inc.': 'Incorporated', 'St.': 'Street'});\n","description":"In this example, the <span class=\"keyword apiname\">thenApplyMap()</span> call searches the source text in the\n        company_info field for Inc. and St. and replaces them with Incorporated and Street in the\n        company_info field in the output.","output":""}]},{"name":"thenApplyPattern(String matchPattern, String outputPattern","description":"Adds an adapter to the current rule that matches a specified regex pattern to content\n    in the source field and then replaces/reformats that content with a second regex pattern and\n    stores that value in the output.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"matchPattern","type":"String","description":"Regex pattern to use to locate the text to replace/reformat."},{"name":"outputPattern","type":"String","description":"Regex pattern to use to update the located text."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company', '$.quote.company') \n  .thenApplyPattern('(.+)(\\\\w{3}\\\\.)', '$1Incorporated');\n","description":"In this example, any company name that ends with \"Inc.\" is transformed to \"Incorporated\",\n        such as Company Inc. to Company Incorporated.","output":""}]},{"name":"thenCeiling","description":"Adds an action to the current rule to round the source field up at the decimal position\n    specified by the passed in value.<p>Unlike straight rounding where the number is rounded based on the value of the digit in the\n        specified decimal position (0-4 round down, 5-9 round up), ceiling always rounds up. For\n        example, the ceiling value for 2.156 and 2.152 is always 2.16 for the passed in decimal\n        position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively.\n        For negative numbers, the ceiling operation makes the number more positive, as in the\n        ceiling value of -2.156 is -2.15; whereas the same number rounded up makes the value more\n        negative, -2.16.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Decimal position to the right of the decimal point at which to round the number\n                up (apply ceiling). <p class=\"p\">For example, if this value is 2 and the source data element\n                  is 6.421, the resulting value is 6.43.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenCeiling('2') // Always round the interest rate up to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n","description":"","output":""}]},{"name":"thenConcat","description":"Adds an adapter to the current rule that concatenates the passed in string to the\n    output field.<p>Unlike other adapter methods, this method does not have to be applied to a source field.\n        You can use this method to create completely new data strings in the output.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"value","type":"String","description":"Text to concatenate to the end of the current data element."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n","description":"","output":""}]},{"name":"thenConcatSymbol","description":"Adds an adapter to the current rule that concatenates the value of a field previously\n    defined in the rules list to the current output field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"symbol","type":"String","description":"Name of the rules list element to append to the output field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n","description":"","output":""}]},{"name":"thenDivideBy","description":"Adds an adapter to the current rule that divides the source field by the passed in\n    value.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value by which to divide the source field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('dividend_per_share', '$.quote.total_dividend') \n  .thenDivideBy('$.quote.total_shares'); \n","description":"","output":""}]},{"name":"thenDivideInto","description":"Adds an adapter to the current rule that divides the passed in value by the source\n    field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value into which to divide the source field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n","description":"","output":""}]},{"name":"thenFloor","description":"Adds an adapter to the current rule that rounds the source field down at the decimal\n    position specified by the passed in value and stores it in the output.<p>Unlike straight rounding where the number is rounded based on the value of the digit in the\n        specified decimal position (0-4 round down, 5-9 round up), floor always rounds down. For\n        example, the floor value for 2.156 and 2.152 is always 2.15 for the passed in decimal\n        position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively.\n        For negative numbers, the floor operation makes the number more negative, as in the floor\n        value of -2.156 is -2.16; whereas the same number rounded down makes the value more\n        positive, -2.15.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Decimal position to the right of the decimal point at which to round the number\n                down (apply floor). <p class=\"p\">For example, if this value is 2 and the source data element\n                  is 6.427, the resulting value is 6.42.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenFloor('2') // Always round the interest rate down to the hundreths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n","description":"","output":""}]},{"name":"thenFormat","description":"Adds an adapter to the current rule that reformats the content in the source field that\n    matches the specified match pattern, with the specified output pattern.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"matchPattern","type":"String","description":"Pattern to match against the source field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenFormat_S_S__ul_zyx_p5w_qhb\">\n                  <li class=\"li\">@: any character</li>\n\n                  <li class=\"li\">#: decimal digit</li>\n\n                  <li class=\"li\">\\: literal escape (\\@ for the @ symbol)</li>\n\n                </ul>"},{"name":"outputPattern","type":"String","description":"Pattern to replace the content with in the output.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenFormat_S_S__ul_nth_jvw_qhb\">\n                  <li class=\"li\">@: any character</li>\n\n                  <li class=\"li\">#: decimal digit</li>\n\n                  <li class=\"li\">\\: literal escape (\\@ for the @ symbol)</li>\n\n                </ul>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('date', '$.quote.date') \n  .thenFormat('####/##/##', '#### ##-##'); \n","description":"This example reformats the quote date from YYYY/MM/DD to YYYY MM-DD.","output":""}]},{"name":"thenMax","description":"Adds an adapter to the current rule that compares the passed in value against the\n    source field and copies the greater of the two values to the output field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value to compare to the source field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('lowest_interest_rate', '$.quote.interest_rate') \n  .thenMax('3.5') // Interest rate cannot be less than 3.5%\n  .addRule('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n","description":"","output":""}]},{"name":"thenMin","description":"Adds an adapter to the current rule that compares the passed in value against the\n    source field and copies the lower of the two values to the output field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value to compare to the source field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addSymbol('broker_fee_percentage', '$.quote.broker_fee') \n  .thenMin('10') // Maximum of 10% broker fee\n  .addSymbol('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n","description":"","output":""}]},{"name":"thenMultiply","description":"Adds an adapter to the current rule that multiplies the source field by the passed in\n    value.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value by which to multiply the source field."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n","description":"","output":""}]},{"name":"thenReplace","description":"Adds an adapter to the current rule that finds all text within the source field that\n    matches a specified string and replaces it with an updated string.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"matchString","type":"String","description":"String to match against the source field to identify the text to\n                replace."},{"name":"replaceString","type":"String","description":"String with which to replace the matching text."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company', '$.quote.company') \n  .thenReplace('Inc.', 'Incorporated');\n","description":"In this example, any company name that ends with \"Inc.\" is transformed to \"Incorporated\",\n        such as Company Inc. to Company Incorporated.","output":""}]},{"name":"thenRound Up","description":"Adds an adapter to the current rule that rounds the source data element up at the\n    decimal position specified by the passed in value.<p>For negative numbers, the <span class=\"keyword apiname\">thenRoundUp()</span> method makes the number more\n        negative; the round up value of -2.156 is -2.16. The <span class=\"keyword apiname\">thenCeiling()</span> method\n        makes the same number more positive, -2.15.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Decimal position to the right of the decimal point at which to round the number\n                up. <p class=\"p\">For example, if this value is 2 and the source data element is 6.422, the\n                  resulting value is 6.43.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenRoundUp('2') // Always round the interest rate up to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n","description":"","output":""}]},{"name":"thenRoundDown","description":"Adds an adapter to the current rule that rounds the source field down at the decimal\n    position specified by the passed in value.<p>For negative numbers, the <span class=\"keyword apiname\">thenRoundDown()</span> method makes the number more\n        positive; the round down value of -2.156 is -2.15. The <span class=\"keyword apiname\">thenFloor()</span> method\n        makes the same number more negative, -2.16.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Decimal position to the right of the decimal point at which to round the number\n                down. <p class=\"p\">For example, if this value is 2 and the source data element is 6.427, the\n                  resulting value is 6.42.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList90\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenRoundDown('2') // Always round the interest rate down to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n","description":"","output":""}]},{"name":"thenSplit","description":"Adds an adapter to the current rule that splits, reorganizes, and replaces strings\n    within the source field and saves them in the output field.<p>The <span class=\"keyword parmname\">splitPattern</span> parameter denotes how to divide the source text\n        string into segments. This parameter can be a typical word separator such as a space (' '),\n        comma (','), or semicolon (';'), and can also be any string, such as 'name'. For example, if\n        the source text is \"Smith John Michael\" and the <span class=\"keyword parmname\">splitPattern</span> is a\n        space, then the available segments are \"Smith\", \"John\", and \"Michael\". To reference a\n        segment, use $#, where # is the number of the order of the segment in the source text\n        string. For example, if the method call is <samp class=\"ph codeph\">thenSplit(' ', '$2 $3 $1')</samp>, then\n        the output is \"John Michael Smith\". In addition, you can add constants within the output\n        pattern, such as <samp class=\"ph codeph\">thenSplit(' ', 'First name: $2 Middle name: $3 Last name:\n          $1')</samp>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"splitPattern","type":"String","description":"String that denotes how to split the text into segments."},{"name":"replaceString","type":"String","description":"String that defines the output string, including segment references and\n                constants. Not all segments need to be referenced. <p class=\"p\">Reference the segments defined\n                  by the <span class=\"keyword parmname\">splitPattern</span> using $#, where # is the number of the\n                  order of the segment in the source data element. Reference the entire source data\n                  element using $0.</p>"}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('CEO', '$.quote.CEO') \n  .thenSplit(',', '$2 $1');\n","description":"In this example, the CEO name is last name, first name in the source data and in the output\n        it will be transformed to first name last name.","output":""}]},{"name":"thenSubtract","description":"Adds an adapter to the current rule that subtracts the passed in value from the source\n    field and stores it in the output field.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define adaptions\n                  to apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method\n                  such as formatting, rounding, and applying patterns.</div></p>","params":[{"name":"operand","type":"Number","description":"Value to subtract from the source data element."}],"returns":{"type":"Object","description":"Current TransformerRuleList object."},"example":[{"code":"var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock 05182019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('trade_price', '$.quote.current_price') \n  .addMultiply('$.quote.trade_quantity')\n  .thenSubtract('$.quote.discount_dollars'); \n","description":"","output":""}]}]},"TransformPart":{"meta":{"has_constructor":false,"description":"Use the TransformPart class to specify details of the transform to be done. The TransformPart class can be used in scoped and global server scripts. When using the\n      TransformPart class, use the sn_clotho namespace identifier.<br/><br/>There is no constructor for this class. TransformPart objects are returned by many\n      Transformer and TransformPart methods.<br/><br/>The methods of this class define the transforms to be done. The actual transformation is done\n      when the <span class=\"keyword apiname\">execute()</span> method is called on the Transformer object.<br/><br/>The order the TransformPart methods are called is important. <ul class=\"ul\" id=\"TransformPartScopedAPI__ul_xt2_g2k_4bb\">\n        <li class=\"li\">The <span class=\"keyword apiname\">metric()</span> method must be called before calling a transform\n          method.</li>\n\n        <li class=\"li\">You cannot use the <span class=\"keyword apiname\">metric()</span> or <span class=\"keyword apiname\">groupBy()</span> methods\n          after calling a transform method.</li>\n\n        <li class=\"li\">Intermediate transforms are not returned in a result unless the\n            <span class=\"keyword apiname\">collect()</span> method is called for the intermediate result you\n          want.<pre ng-prism='' source='// where tp is a TransformPart object\n// example 1\ntp.avg().add(2);\nvar tr = tp.execute(); \n// tr contains avg+2, but not avg\n \n// example 2\ntp.avg().add(2);\ntp.avg();\nvar tr = tp.execute(); \n// tr contains both avg and avg + 2\n\n// example 3\ntp.avg().collect().add(2);\nvar tr = tp.execute(); \n// tr contains both avg and avg + 2' class='language-javascript monospaceing'></pre>\n</li>\n\n      </ul><br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.","example":""},"properties":{},"methods":[{"name":"add","description":"Add the specified number to the value in each time stamp.","params":[{"name":"constant","type":"Number","description":"The number to add to the value in each time stamp."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"avg","description":"Aggregate the selected metric series into one series containing the average value for\n    each time stamp.","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"bottom","description":"Create a result set that for each time stamp returns specified number of bottom values.\n    This method results in 'count' number of series. Each value retains the label of its source\n    series.","params":[{"name":"count","type":"Number","description":"The number of series to return. The series are labeled 0 to count - 1."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"ceil","description":"Replace the value in any time stamp that is greater than the specified value with the\n    specified value.","params":[{"name":"ceiling","type":"Number","description":"The maximum allowed value for any time stamp."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"collect","description":"Mark this transform for collection.<p>Transforms that are part of a chain, but not the last transform, are by default not\n        collected. A collected transform is returned as part of the transform result.</p>","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"count","description":"Aggregate the selected metric series into one series containing the number of values\n    for each time stamp.","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"div","description":"Divide the value in each time stamp by the specified number.","params":[{"name":"constant","type":"Number","description":"The number by which to divide the value of each time stamp."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"filter","description":"Create a series using the specified aggregator for the specified time.","params":[{"name":"aggregator","type":"Object","description":"Can be:<ul class=\"ul\" id=\"TP-filter_O_O__ul_jdr_lqy_1gb\">\n          <li class=\"li\">AVG</li>\n\n          <li class=\"li\">CHISQUARE</li>\n\n          <li class=\"li\">LAST </li>\n\n          <li class=\"li\">MAX</li>\n\n          <li class=\"li\">MEDIAN</li>\n\n          <li class=\"li\">MIN</li>\n\n          <li class=\"li\">STDDEV</li>\n\n         </ul>\n For definitions of these options, see <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork&amp;id=undefined\" title=\"Transforms enable you to visualize MetricBase data in different ways.\">MetricBase transforms</a>. ."},{"name":"duration","type":"Object","description":"The time period for doing"}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform characteristics."},"example":[]},{"name":"floor","description":"Replace the value in any time stamp that is less than the specified value with the\n    specified value.","params":[{"name":"floor","type":"Number","description":"The minimum value for any time stamp."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"fractiles","description":"Create series made up of the value that the specified percentage of values is below.\n    Returns a series for each fraction in the specified array.<p>The value in a time stamp in a returned series is the value at which the specified\n        fraction of the samples for that time stamp is below. For example, if the fraction is 0.5,\n        then the value in the time stamp is the value where half the values in the input series are\n        below (median).</p>","params":[{"name":"fractions","type":"Array of numbers","description":"The fractions to use on the input series."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform characteristics.\n                Contains one series for each fraction specified."},"example":[{"code":"// returns a single series containing the median for each time stamp, which\n// means that half a time stamp's values are below the returned value \nfractiles([.5]) \n// returns four series, one series for each of the 25%, 50%, 75%, and 100% quartiles \nfractiles([.25, .5, .75, 1])\n// returns the median, 95% percentile, the max value\nfractiles([.50, .95, 1]) ","description":"","output":""}]},{"name":"getResult","description":"Return the part of the result relevant to this transform.<p>The <span class=\"keyword apiname\">collect()</span> method must be called before the\n          <span class=\"keyword apiname\">execute()</span> method, and the <span class=\"keyword apiname\">execute()</span> method must be\n        called before calling the <span class=\"keyword apiname\">getResult()</span> method.</p>","params":[],"returns":{"type":"TransformResult","description":"Contains the transform results associated with this part of the\n                transform."},"example":[{"code":"var t = new sn_clotho.Transformer(drones);\nt.metric(\"mb_demo_mt_altitude\");\nvar avgTform = t.avg();\nt.execute();\nvar avgTformResult = avgTform.getResult();","description":"","output":""}]},{"name":"groupBy","description":"Specify a field to be used to group the data.<p>The <span class=\"keyword apiname\">groupBy()</span> method cannot be called after a transform has been\n        run.</p>","params":[{"name":"field","type":"String","description":"A field in the table to be used to group the transform results."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"interpolate","description":"Create a data value for a NaN data item by interpolating from adjacent data values.","params":[{"name":"count","type":"Object","description":"Specifies the number of data samples in each direction to check for a non NaN\n                value. If if a non NaN value is not found, NaN is used."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"iqr","description":"Perform an Interquartile range transform.<p>Creates a result set of four series. <ul class=\"ul\" id=\"TP-irq__ul_jdr_2r1_scb\">\n          <li class=\"li\">IQR, the median of all entries</li>\n\n          <li class=\"li\">IQR range, below Q1-1.5IQR, or above Q3+1.5IQR</li>\n\n          <li class=\"li\">Q1, the median of the smallest half of entries</li>\n\n          <li class=\"li\">Q3, the median of the largest half of entries </li>\n\n        </ul></p>","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform characteristics."},"example":[]},{"name":"label","description":"Add a label for the resulting series.","params":[{"name":"label","type":"String","description":"The label for the transform results."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"limit","description":"Returns at most the specified number of values, starting at the most recent non-NaN\n    value.","params":[{"name":"count","type":"Object","description":"A number of time stamps."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"log","description":"Run a logarithm on the value in each time stamp where the result is the log of the\n    specified base for the time stamp value.","params":[{"name":"base","type":"Number","description":"The base for the logarithm calculation."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"max","description":"Returns a series with the maximum value for each time stamp.","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"median","description":"Create a series containing the median of values for each time stamp across a set of\n    series.<p>If there are n series in the TranformPart object, then if n is odd, the (n / 2 + 1) value\n        for a time stamp is the median. If n is even, the average of the (n / 2) and (n / 2 + 1)\n        values for a time stamp is the median.</p>","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"metric","description":"Specify the metric field to be used in the transform.<p>You can specify multiple metrics to be used in the transform. The\n          <span class=\"keyword apiname\">metric()</span> method cannot be called after the transform has been run.</p>","params":[{"name":"metric","type":"String","description":"Name of the metric field."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"min","description":"Returns a series with the minimum value for each time stamp.","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"mul","description":"Multiply the value in each time stamp by the specified number.","params":[{"name":"constant","type":"Number","description":"The number by which to multiply the value of each time stamp."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"partition","description":"Partition the series into intervals of the same duration.","params":[{"name":"aggregator","type":"String","description":"The aggregator to use. Can be min, max, avg, or last."},{"name":"duration","type":"GlideDateTime or an ISO 8601 formatted string","description":"The interval length."},{"name":"base","type":"GlideDateTime or an ISO 8601 formatted string","description":"The zero offset for partitioning. For example, if you partition by day (24h),\n                then set the base to Monday at midnight in your time zone. If you partition by 30\n                days, then set the base to  1st day of the most recent month."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"resample","description":"Specify the number of data points to include in the result.<p>Aligns a series with a fixed number of data points in the given range. If the original\n        series has more data points than specified, multiple values are averaged. If the original\n        series has fewer data points than specified, data points are added by interpolating data\n        points between existing data points.</p><p>You can use the <span class=\"keyword apiname\">resample()</span> method to reduce the number of samples in the\n        result to more closely match the number of samples you are going to display.</p>","params":[{"name":"count","type":"Number","description":"The number of samples to include in the result."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"resample","description":"Specify the minimum and maximum number of samples to include in the result.<p>This method is useful when you are showing series with different time periods\n        (granularities).</p><p>This method determines the average number of points per series and if that fits between the\n        specified minimum and maximum, each series is resampled to that average number of points. If\n        the calculated average is greater than the maximum specified or smaller than the minimum\n        specified, the specified maximum or minimum is used.</p>","params":[{"name":"min","type":"Number","description":"The minimum number of samples to include in the result. If not enough samples\n                are available, interpolation is used to create samples."},{"name":"max","type":"Number","description":"The maximum number of samples to include in the result."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform characteristics."},"example":[]},{"name":"resample","description":"Specify an aggregator to use to create a result set over the specified duration. The\n    aggregator can be LAST, AVG, MIN, or MAX.<p>Resamples the underlying data to the requested period. <ul class=\"ul\" id=\"TP-resample_S_GD__ul_y3z_pq1_scb\">\n          <li class=\"li\">When the time series is stored at a 1 minute interval and <samp class=\"ph codeph\">resample(AVG, new\n              GlideDuration(\"1:00\"))</samp> is called, the result will have one data point at\n            every hour reflecting the average of the previous 60 values. </li>\n\n          <li class=\"li\">When the period requested is smaller than the period of the data, interpolation is\n            used to calculate the intervening data points.</li>\n\n        </ul></p><p>You can use the <span class=\"keyword apiname\">resample()</span> method to reduce the number of samples in the\n        result to more closely match the number of samples you are going to display.</p>","params":[{"name":"aggregator","type":"String","description":"Can be LAST, AVG, MIN, or MAX."},{"name":"duration","type":"GlideDuration","description":"The time period for the result set."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform characteristics."},"example":[]},{"name":"resample","description":"Specify an aggregator to use to create a result set of the specified size. The\n    aggregator can be LAST, AVG, MIN, or MAX.<p>You can use the <span class=\"keyword apiname\">resample()</span> method to reduce the number of samples in the\n        result to more closely match the number of samples you are going to display.</p>","params":[{"name":"aggregator","type":"String","description":"Can be LAST, AVG, MIN, or MAX."},{"name":"numValues","type":"Number","description":"The number of samples to include in the result set.<p class=\"p\">When the number of values\n                  requested is greater than the number of values in the data for the requested time\n                  period, <span class=\"keyword apiname\">interpolate()</span> is used to add values between existing\n                  points to reach the requested number of values.</p>"}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform characteristics."},"example":[]},{"name":"round","description":"Round the value in each time stamp to the specified precision.<p>Performs this calculation on each\n        value.<pre class=\"pre codeblock\">(v / precision) * precision</pre></p>","params":[{"name":"precision","type":"Number","description":"The value to be used in the rounding calculation."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"stddev","description":"Create a series containing the standard deviation of values for each time stamp across\n    a set of series.","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"sub","description":"Subtract the specified number from the value in each time stamp.","params":[{"name":"constant","type":"Object","description":"The number to subtract from the value in each time stamp."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"sum","description":"Aggregate the selected metric series into one series containing the sum of all values\n    for each time stamp.","params":[],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]},{"name":"top","description":"Create a result set that for each time stamp returns the specified number of top\n    values. This method results in 'count' number of series. Each value retains the label of its\n    source series.","params":[{"name":"count","type":"Number","description":"The number of series to return. The series are labeled 0 to count - 1."}],"returns":{"type":"TransformPart","description":"A TransformPart object that can be used to specify transform\n                characteristics."},"example":[]}]},"TransformResult":{"meta":{"has_constructor":false,"description":"Provides the result of a transformation run on time-series data. The TransformResult class can be used in scoped and global server scripts. When using the\n      Transformer class, use the sn_clotho namespace identifier.<br/><br/>There is no constructor for this class. TransformResult objects are returned by many\n      TransformPart methods.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.","example":""},"properties":{},"methods":[{"name":"byGroup","description":"Returns an array of Data objects. Returns an error if no group was specified for the\n    transform.","params":[],"returns":{"type":"Array","description":"An array of Data objects, with each object corresponding to a group."},"example":[]},{"name":"getByLabel","description":"Returns the transformed data with the specified label.","params":[{"name":"label","type":"String","description":"The label that identifies the data to be retrieved."}],"returns":{"type":"Data","description":"The Data object with the transform results."},"example":[]},{"name":"getData","description":"Returns a single Data object, or null if the result is empty.","params":[],"returns":{"type":"Data","description":"The Data object with the transform results."},"example":[]},{"name":"toArray","description":"Returns the transformed data as an array. This method turns a Data object into an\n    array.","params":[],"returns":{"type":"Array","description":"The Data object formatted as an array."},"example":[]}]},"UserCriteria":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">UserCriteria</span> API enables you to create, modify, or delete user\n    criteria records using scripts. To use this class in a scoped application, use the sn_uc\n    namespace identifier. The User Criteria Scoped API plugin (ID:\n    com.glideapp.user_criteria.scoped.api) should be enabled to access the\n      <span class=\"keyword apiname\">UserCriteria</span> API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the UserCriteria class with the specified sys_id.","params":[{"name":"sys_id","type":"String","description":"sys_id of the user criteria."}],"returns":{"type":"","description":""},"example":[{"code":"var uc = new sn_uc.UserCriteria(\"31bea3d53790200044e0bfc8bcbe5dec\");","description":"","output":""}]},{"name":"constructor","description":"Creates an instance of the UserCriteria class.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var uc = new sn_uc.UserCriteria();","description":"","output":""}]},{"name":"create","description":"Creates a user criteria with specified values in the user_criteria table. Values\n    specified in columnValues override the values provided via setters.","params":[{"name":"columnValues","type":"Object","description":"Key and value pairs for a column and its value."},{"name":"standardUpdate","type":"Boolean","description":"Set to true to enable the running of engines and workflow."}],"returns":{"type":"String","description":"sys_id of the created user criteria."},"example":[{"code":"\nvar uc = new sn_uc.UserCriteria(); \nuc.setCompanies(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89”);\nuc.setActive(true); \nuc.setUsers(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\");\nvar UserCriteriaId = UserCriteria.create();\ngs.info(UserCriteriaId);\n","description":"","output":"41bea3d53790200044e0bfc8bcbe5dec"}]},{"name":"deleteRecord","description":"Deletes the current user criteria.","params":[],"returns":{"type":"Boolean","description":"If true,  the user criteria is deleted.<p class=\"p\">If false, no user criteria is found\n                  to delete.</p>"},"example":[{"code":"var uc = new sn_uc.UserCriteria(\"31bea3d53790200044e0bfc8bcbe5dec\");\nuc.deleteRecord();","description":"","output":"true"}]},{"name":"read","description":"Displays the mapping for the attribute and value pairs of the catalog item.","params":[{"name":"columns","type":"String","description":"Array of catalog item attributes."}],"returns":{"type":"Object","description":"Mapping for the attribute and value pairs of the catalog item."},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.read({\"name\", \"applies_to\"});","description":"","output":"name: My Catalog Item;\n        applies_to: catalog_item;"}]},{"name":"setActive","description":"Specifies if the user criteria is active.","params":[{"name":"active","type":"Boolean","description":"If true, the user criteria is active. <p class=\"p\">If false, the user criteria is\n                  inactive.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setActive(true); \n","description":"","output":""}]},{"name":"setAdvanced","description":"Specifies if the user criteria has an advanced script.","params":[{"name":"advanced","type":"Boolean","description":"If true, the user criteria has an advanced script.<p class=\"p\">If false, the user\n                  criteria does not have an advanced script.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setAdvanced(true); \n","description":"","output":""}]},{"name":"setCompanies","description":"Sets the company property for the user criteria.","params":[{"name":"companies","type":"String","description":"Comma-separated list of the company sys_ids to be set for the user\n                criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setCompanies(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n","description":"","output":""}]},{"name":"setDepartments","description":"Sets the department property for the user criteria.","params":[{"name":"departments","type":"String","description":"Comma-separated list of the department sys_ids to be set for the user\n                criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setDepartments(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n","description":"","output":""}]},{"name":"setGroups","description":"Sets the group property for the user criteria.","params":[{"name":"groups","type":"String","description":"Comma-separated list of the group sys_ids to be set for the user\n                criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setGroups(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n","description":"","output":""}]},{"name":"setLocations","description":"Sets the location property for the user criteria.","params":[{"name":"locations","type":"String","description":"Comma-separated list of the location sys_ids to be set for the user\n                criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setLocations(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n","description":"","output":""}]},{"name":"setMatchAll","description":"Sets the match_all property for the user criteria.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setMatchAll(true); \n","description":"","output":""}]},{"name":"setName","description":"Sets the name property for the user criteria.","params":[{"name":"name","type":"String","description":"Name of the user criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setName(\"Property1\"); \n","description":"","output":""}]},{"name":"setRoles","description":"Sets the role property for the user criteria.","params":[{"name":"roles","type":"String","description":"Comma-separated list of the role sys_ids to be set for the user\n                criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setRoles(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n","description":"","output":""}]},{"name":"setScript","description":"Sets the script for the user criteria.","params":[{"name":"script","type":"String","description":"Script to be set for the advanced user criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setScript(\"function scriptTest() {\n  var retVal;\n  if (gs.getUser().getRecord().getDisplayValue('department') == 'Product Management') {\n      retVal = true;\n  } else {\n      retVal = false;\n  }\n  return retVal;\n}\"); \n","description":"","output":""}]},{"name":"setUsers","description":"Sets the user property for the user criteria.","params":[{"name":"users","type":"String","description":"Comma-separated list of the user sys_ids to be set for the user\n                criteria."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.setUsers(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n","description":"","output":""}]},{"name":"update","description":"Updates the current catalog item with the specified values.","params":[{"name":"columnValues","type":"Object","description":"Mapping for the column name and the value pairs."},{"name":"reason","type":"String","description":"Reason for updating the catalog item."}],"returns":{"type":"String","description":"Returns the sys_id of  the created user criteria."},"example":[{"code":"var uc = new sn_uc.UserCriteria();\nuc.update(\"name\": \"Updated name\", \"The existing name is not relevant. Setting a relevant name\"); \n","description":"","output":"31bea3d53790200044e0bfc8bcbe5dec"}]}]},"UserCriteriaLoader":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">UserCriteriaLoader</span> API enables you to get the user criteria\n    associated with a specific user, or a user associated with a specific linkTable. To use this\n    class in a scoped application, use the sn_uc namespace identifier. The User Criteria Scoped API\n    plugin (ID: com.glideapp.user_criteria.scoped.api) should be enabled to access the\n      <span class=\"keyword apiname\">UserCriteriaLoader</span> API. ","example":""},"properties":{},"methods":[{"name":"getAllUserCriteria","description":"Returns all user criteria associated with the logged in user.","params":[],"returns":{"type":"ArrayList<String>","description":"An array list containing the sys_ids of the user criteria associated with the\n                user."},"example":[{"code":"var result = new sn_uc.UserCriteriaLoader.getAllUserCriteria();\ngs.info(result);","description":"","output":"cb8e06e9d7103100f2d224837e610339"}]},{"name":"getAllUserCriteria","description":"Returns all user criteria associated with the specified user.","params":[{"name":"userId","type":"String","description":"sys_id of the user."}],"returns":{"type":"ArrayList<String>","description":"An array list containing the sys_ids of the user criteria associated with the\n                specified user."},"example":[{"code":"var result = new sn_uc.UserCriteriaLoader.getAllUserCriteria('62826bf03710200044e0bfc8bcbe5df1');\ngs.log(result);","description":"","output":"7b8a6927ef732100438236caa5c0fb89"}]},{"name":"getUserCriteria","description":"Returns the user criteria associated with the specified linkTable for the logged in\n    user.","params":[{"name":"linkTable","type":"String","description":"Mtom link table between the record and the Available For or Not Available For\n                User Criteria."}],"returns":{"type":"ArrayList<String>","description":"An array list containing the sys_id of the user criteria associated with the\n                logged in user for the specified link table."},"example":[{"code":"var result = new sn_uc.UserCriteriaLoader.getUserCriteria('sc_cat_item_user_criteria_mtom');\ngs.log(result);","description":"","output":"cb8e06e9d7103100f2d224837e610339"}]},{"name":"getUserCriteria","description":"Returns the user criteria of the specified user and the linkTable.","params":[{"name":"userId","type":"String","description":"sys_id of the user."},{"name":"linkTable","type":"String","description":"Mtom link table between the record and the Available For or Not Available For\n                User Criteria."}],"returns":{"type":"ArrayList<String>","description":"An array list containing the sys_id of the user criteria associated with the\n                specified user and link table."},"example":[{"code":"var result = new sn_uc.UserCriteriaLoader.getUserCriteria('62826bf03710200044e0bfc8bcbe5df1',             \n'sc_cat_item_user_criteria_mtom');\ngs.log(result);","description":"","output":"7b8a6927ef732100438236caa5c0fb89"}]}]},"VariablePoolQuestionSetJS - Scoped":{"meta":{"has_constructor":true,"description":"<span class=\"keyword apiname\">VariablePoolQuestionSetJS</span> API enables you to use Variable Pool\n    Question Set. To use this class in a scoped application, use the sn_sc namespace identifier. The\n    Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api) that is enabled by\n    default is required to access the <span class=\"keyword apiname\">VariablePoolQuestionSetJS</span> API. ","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the VariablePoolQuestionSet class.","params":[],"returns":{"type":"","description":""},"example":[{"code":"var variablePool=new sn_sc.VariablePoolQuestionSetJS();","description":":","output":""}]},{"name":"getFlatQuestions","description":"Returns the array of questions associated with the cart item ids specified.","params":[],"returns":{"type":"Object","description":"Object pointing to the current cart details."},"example":[{"code":"var cart=new sn_sc.VariablePoolQuestionSetJS();\t\n\tcart.setCartID(\"9bf16afb87110300318d05a888cb0b49\");\n\tcart.load();\n\tconsole.log(cart.getFlatQuestions());","description":":","output":".\tdisplayValue:&quot;&quot;sys_id:&quot;90b72d4b4f7b4200086eeed18110c701&quot;type:7value:&quot;&quot;__proto__:Object\n\t.\t1:\n\t.\tdisplayValue:&quot;&quot;sys_id:&quot;a8b72d4b4f7b4200086eeed18110c701&quot;type:7value:&quot;&quot;__proto__:Object\n\t.\t2:\n\t.\tdisplayValue:&quot;&quot;sys_id:&quot;a8b72d4b4f7b4200086eeed18110c702&quot;type:2value:&quot;&quot;"}]},{"name":"load","description":"Loads the question set.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var cart=new sn_sc.VariablePoolQuestionSetJS();\t\n\tcart.load();","description":":","output":""}]},{"name":"setCartID","description":"Sets the cart item ids of the variable pool.","params":[{"name":"id","type":"String","description":" "}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var cart=new sn_sc.VariablePoolQuestionSetJS();\t\n\tcart.setCartID(\"9bf16afb87110300318d05a888cb0b49\");","description":":","output":""}]}]},"Workflow":{"meta":{"has_constructor":false,"description":"The scoped Workflow API provides methods that can be used in an activity definition\n  script. There are no constructors for creating an instance of a scoped workflow object. Instead, use\n   the global <span class=\"keyword apiname\">workflow</span> object available in activity scripts. This workflow object\n   is available in any script location inside a workflow.","example":""},"properties":{"inputs":{"description":"Returns the workflow variables.","type":"Object"},"result":{"description":"Returns the workflow's result.","type":"String"}},"methods":[{"name":"debug","description":"Adds a debug message to the log.","params":[{"name":"message","type":"String","description":"The message to add to the log."},{"name":"args","type":"Object","description":"Arguments to add to the message."}],"returns":{"type":"String","description":"The message added to the log."},"example":[{"code":"var loggedMessage = workflow.debug(\"All is well\");","description":"","output":""}]},{"name":"error","description":"Adds an error message to the log.","params":[{"name":"message","type":"String","description":"The message to add to the log."},{"name":"args","type":"Object","description":"Arguments to add to the message."}],"returns":{"type":"String","description":"The logged message"},"example":[{"code":"var loggedMessage = workflow.error(\"An error has occurred. \");","description":"","output":""}]},{"name":"getVariable","description":"Returns the specified variable's value.","params":[{"name":"name","type":"String","description":"The variable name"}],"returns":{"type":"Object","description":"The variable's value"},"example":[{"code":"var value = workflow.getVariable(\"task\");","description":"","output":""}]},{"name":"info","description":"Adds an informational message to the log.","params":[{"name":"message","type":"String","description":"The message to add to the log."},{"name":"args","type":"Object","description":"Arguments to add to the message."}],"returns":{"type":"String","description":"The message that is logged."},"example":[{"code":"var loggedMessage = workflow.info(\"All is well\");","description":"","output":""}]},{"name":"name","description":"Returns the workflow name.","params":[],"returns":{"type":"String","description":"The workflow name"},"example":[{"code":"var name = workflow.name();","description":"","output":""}]},{"name":"removeVariable","description":"Removes the specified variable from the workflow.","params":[{"name":"name","type":"String","description":"The variable name"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var value = workflow.removeVariable(\"task\");","description":"","output":""}]},{"name":"scratchpad","description":"Returns the workflow's scratchpad object.","params":[],"returns":{"type":"Object","description":"The scratchpad object."},"example":[{"code":"var scratchpad = workflow.scratchpad();","description":"","output":""}]},{"name":"setResult","description":"Sets the workflow's result.","params":[{"name":"result","type":"String","description":"The workflow's result"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"workflow.setResult(\"Success\");","description":"","output":""}]},{"name":"setVariable","description":"Sets the specified variable to the specified value.","params":[{"name":"name","type":"String","description":"The variable name"},{"name":"value","type":"Object","description":"The value to be assigned to the variable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"workflow.setVariable(\"task\", \"terrible\");","description":"","output":""}]},{"name":"warn","description":"Adds a warning message to the log.","params":[{"name":"message","type":"String","description":"The message to add to the log."},{"name":"args","type":"Object","description":"Arguments to add to the message."}],"returns":{"type":"String","description":"The logged message"},"example":[{"code":"var loggedMessage = workflow.warn(\"Check your permissions.\");","description":"","output":""}]}]},"XMLDocument2":{"meta":{"has_constructor":true,"description":"XMLDocument2 is a JavaScript Object wrapper for parsing and extracting XML data from an\n  XML string. Use this JavaScript class to create an object from an XML string, usually a return value from a\n   web-service invocation, or the XML payload of ECC Queue. Using the XMLDocument2 object in a\n   JavaScript business rule lets you query values from the XML elements and attributes directly.<br/><br/>An XML string has a tree structure, and the parts of the structure are called nodes. An\n   XMLDocument2 object deals with two node types, element, and document element. An element node is\n   a node with a name and possibly attributes and child nodes. A document-element node is the root\n   node of the XML tree. It is the only node without a parent node.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an XMLDocument2 object.","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"constructor","description":"Creates an XMLDocument2 object from an attachment stream.","params":[{"name":"inputStream","type":"GlideScriptableInputStream","description":"The input stream the XMLDocument2 object encapsulates."}],"returns":{"type":"","description":""},"example":[]},{"name":"createElement","description":"Creates and adds an element node to the current node. The element name is the string\n    passed in as a parameter. The new element has no text child nodes.","params":[{"name":"name","type":"String","description":"The new element's name."}],"returns":{"type":"XMLNode","description":"Current XML node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \nxmlDoc.createElement(\"new2\"); \n \ngs.info(xmlDoc);","description":"","output":""}]},{"name":"createElementWithTextValue","description":"Creates and adds an element node with a text child node to the current\n    node.","params":[{"name":"name","type":"String","description":"Name of the element to add."},{"name":"value","type":"String","description":"Element's text value."}],"returns":{"type":"XMLNode","description":"Current XML node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n    \"  &lt;one&gt;\" +\n    \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n    \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n    \"    &lt;two&gt;another&lt;/two&gt;\" +\n    \"  &lt;/one&gt;\" +\n    \"  &lt;number&gt;1234&lt;/number&gt;\" +\n    \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \nxmlDoc.createElementWithTextValue(\"new\", \"test\");\ngs.info(xmlDoc);","description":"","output":""}]},{"name":"getDocumentElement","description":"Gets the document element node of the XMLdocument2 object. The document element node is\n    the root node.","params":[],"returns":{"type":"XMLNode","description":"The document element."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\n//returns the root node of the document tree.\nvar rootNode = xmlDoc.getDocumentElement();\ngs.info(rootNode.getTextContent());","description":"","output":""}]},{"name":"getFirstNode","description":"Gets the first node in the specified XPATH.","params":[{"name":"xPath","type":"String","description":"The XPATH."}],"returns":{"type":"XMLNode","description":"The first node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar foo = xmlDoc.getFirstNode('/test/one/two');\ngs.info(foo.getTextContent());","description":"","output":""}]},{"name":"getNextNode","description":"Gets the node after the specified node.","params":[{"name":"current","type":"Object","description":"The current node."}],"returns":{"type":"XMLNode","description":"The next node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar foo = xmlDoc. getFirstNode('/test/one/two');\nvar foo2 = xmlDoc.getNextNode(foo);\ngs.info(foo.getTextContent());\ngs.info(foo2.getTextContent());","description":"","output":""}]},{"name":"getNode","description":"Gets the node specified in the xpath.","params":[{"name":"xPath","type":"String","description":"XPath of the node to obtain."}],"returns":{"type":"XMLNode","description":"Current XML node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode(\"/test/one/two\");\ngs.info(node);","description":"","output":""}]},{"name":"getNodeText","description":"Gets all the text child nodes from the node referenced in the specified\n    XPath.","params":[{"name":"xPath","type":"String","description":"XPath of the text to obtain."}],"returns":{"type":"String","description":"Text children in the XPath."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \ngs.info(xmlDoc.getNodeText(\"//two\"));","description":"","output":"abcd1234"}]},{"name":"parseXML","description":"Parses the XML string and loads it into the XMLDocument2 object.","params":[{"name":"xmlDoc","type":"String","description":"The document to parse."}],"returns":{"type":"Boolean","description":"Flag that indicates whether the content was parsed."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \nvar rootNode = xmlDoc.getDocumentElement();","description":"This example parses the xmlString and loads it into the xmlDocument2 object.","output":""}]},{"name":"setCurrentElement","description":"Makes the node passed in as a parameter the current node.","params":[{"name":"element","type":"XMLNode","description":"The element node to set as the current node."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\n//returns the root node of the document tree.\nvar rootNode = xmlDoc.getDocumentElement(); //returns org.w3c.dom.Element\n// sets the root node as the current element\nxmlDoc.setCurrentElement(rootNode);","description":"","output":""}]},{"name":"setNamespaceAware","description":"When set to true, the XMLDocument2 object processes the document with XML\n    namespaces.<p>If you don't set this, an XML document with namespaces won't be enumerated correctly, and\n        an XPath search would fail. </p>","params":[{"name":"aware","type":"Boolean","description":"When true, the XMLDocument2 object processes the document with XML namespaces."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toString","description":"Returns a string containing the XML.","params":[],"returns":{"type":"String","description":"A string containing the XML."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\ngs.info(xmlDoc.toString());","description":"","output":""}]}]},"XMLNode":{"meta":{"has_constructor":false,"description":"The scoped XMLNode API allows you to query values from XML nodes. XMLNodes are extracted\n  from XMLDocument2 objects, which contain XML strings. There are no constructors for creating a stand alone instance of an XMLNode object. Instead,\n   use the createElement() method of <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#c_XMLDocument2ScopedAPI\" title=\"XMLDocument2 is a JavaScript Object wrapper for parsing and extracting XML data from an XML string.\">XMLDocument2</a>, which adds a node to an existing document.","example":""},"properties":{},"methods":[{"name":"getAttribute","description":"Gets the value of the attribute.","params":[{"name":"attribute","type":"String","description":"Name of the attribute."}],"returns":{"type":"String","description":"The attribute's value."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.getAttribute('att'));","description":"","output":"xxx"}]},{"name":"getAttributes","description":"Returns an object containing the node's attributes as properties with\n    values.","params":[],"returns":{"type":"Object","description":"Contains name-value pairs where the name is the attribute and the value is the\n                attribute's value."},"example":[]},{"name":"getChildNodeIterator","description":"Gets a XMLNodeIterator object that can be used to walk through the list of child\n    nodes.","params":[],"returns":{"type":"XMLNodeIterator","description":"The node iterator object."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\nvar iter= node.getChildNodeIterator();\ngs.info(iter.hasNext());","description":"","output":""}]},{"name":"getFirstChild","description":"Gets the node's first child node.","params":[],"returns":{"type":"XMLNode","description":"The node's first child node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"&lt;one&gt;\" +\n                \"&lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"&lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"&lt;two&gt;another&lt;/two&gt;\" +\n                \"&lt;/one&gt;\" +\n                \"&lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\ngs.info(node.getFirstChild());","description":"","output":""}]},{"name":"getLastChild","description":"Gets the node's last child node.","params":[],"returns":{"type":"XMLNode","description":"The node's last child."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"&lt;one&gt;\" +\n                \"&lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"&lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"&lt;two&gt;another&lt;/two&gt;\" +\n                \"&lt;/one&gt;\" +\n                \"&lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\n \ngs.info(node.getLastChild());","description":"","output":""}]},{"name":"getNodeName","description":"Gets the node's name. A node's name is determined by the node type. A document-element\n    node's name is #document. A text node's name is #text. An element node's name is the element's\n    name.","params":[],"returns":{"type":"String","description":"The node's name."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.getNodeName());","description":"","output":"two"}]},{"name":"getNodeValue","description":"Gets the node's value. A node's value is determined by the node type. Element and\n    document-element nodes return null.","params":[],"returns":{"type":"String","description":"The node's value."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.getNodeValue());","description":"","output":"null"}]},{"name":"getTextContent","description":"Gets the text content of the current node. The text content of a node consists of all\n    the node's child text nodes","params":[],"returns":{"type":"String","description":"The text content of the current node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmldoc = new XMLDocument2();\nxmldoc.parseXML(xmlString);\nvar node = xmldoc.getNode('//one/two');\ngs.info(node.getTextContent());","description":"","output":"abcd1234"}]},{"name":"hasAttribute","description":"Determines if the node has the specified attribute.","params":[{"name":"attribute","type":"String","description":"The name of the attribute to check."}],"returns":{"type":"Boolean","description":"True if the node has the attribute."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.hasAttribute('att'));","description":"","output":"true"}]},{"name":"toString","description":"Returns the string value of the current node.","params":[],"returns":{"type":"String","description":"The string value of the current node."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\ngs.info(node.toString());","description":"","output":""}]}]},"XMLNodeIterator":{"meta":{"has_constructor":false,"description":"The scoped XMLNodeIterator class allows you to iterate through a node of a XML\n  document. There are no constructors for creating a stand alone instance of a XMLNodeIterator object. To\n   create a XMLNodeIterator object use the <span class=\"keyword apiname\">getChildNodeIterator()</span> method of the\n   XMLNode object.","example":""},"properties":{},"methods":[{"name":"hasNext","description":"Returns true if the iteration has more elements.","params":[],"returns":{"type":"Boolean","description":"True if the iteration has more elements."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\nvar iter= node.getChildNodeIterator();\ngs.info(iter.hasNext());","description":"","output":""}]},{"name":"next","description":"Gets the next element in the iteration. The returned element may be a #text node for\n    the spaces/tabs if XML is \"pretty formatted\".","params":[],"returns":{"type":"XMLNode","description":"The next element in the iteration."},"example":[{"code":"var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\nvar iter= node.getChildNodeIterator();\nwhile(iter.hasNext()) {\n   var n = iter.next();\n   gs.info('Node name: ' +  n.getNodeName());\n   gs.info('Node value: ' +  n.getNodeValue());\n}","description":"","output":""}]}]}},"client":{"CustomEvent":{"meta":{"has_constructor":false,"description":"You can use CustomEvent API to show qualified embedded help in the right\n    sidebar. See \n      \n      <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-user-interface/page/build/help-guided-tours/task/embedded-help-qualifiers.html\" target=\"_blank\">Use embedded help qualifiers</a> for\n      more information.","example":""},"properties":{},"methods":[{"name":"fireAll","description":"Show the embedded-help content specified by the qualifier parameter in the right\n    sidebar.<p>Before using the <span class=\"keyword apiname\">fireAll()</span> method, you must have created the Embedded\n        Help qualifier and help content.</p>","params":[{"name":"event","type":"String","description":"The event to send. Must be the string\n                \"embedded_help:load_embedded_help\""},{"name":"qualifier","type":"String","description":"The qualifier name created in the Embedded Help application."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var qualifier = 'your-EH-qualifier';\n\t\tCustomEvent.fireAll(\"embedded_help:load_embedded_help\", qualifier);","description":"","output":""}]}]},"DynamicTranslation":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">The\n                  <span class=\"keyword apiname\">DynamicTranslation</span> API provides methods that translate text, in\n                real time, into multiple languages using translation service providers.</span> This API is available for both standard clients and Angular-based <span class=\"ph\">Service Portal</span> clients. In addition, you can use this API to detect the language of a specific string and check\n      whether the <span class=\"keyword apiname\">getDetectedLanguage()</span> and <span class=\"keyword apiname\">getTranslation()</span>\n      methods are enabled for a translation service. Use this API to create a seamless localization\n      experience for your user interface, enabling one interface to service multiple countries.<br/><br/>Currently this API supports two translation\n                service providers: Microsoft Azure Translator Service and IBM Watson Translator\n                Service. You can also configure other translation services within your instance and\n                then use the <span class=\"keyword apiname\">DynamicTranslation</span> API to translate your text.<br/><br/>To use this API you must activate the Dynamic Translation plugin. For information on this\n      plugin and additional information on Dynamic Translation, refer to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation overview</a>.\n      Also, to use this API in a <span class=\"ph\">Service Portal</span> widget, you must\n      inject the dynamicTranslation service into the widget client script function.<br/><br/><span class=\"notetitle\">Note:</span> The name of the class to use in <span class=\"ph\">Service Portal</span> clients is\n        <span class=\"keyword apiname\">dynamicTranslation</span>, while the name of the class to use in standard\n      clients is <span class=\"keyword apiname\">DynamicTranslation</span>.","example":""},"properties":{},"methods":[{"name":"getDetectedLanguage","description":"Detects the language of the passed in text.<p>If you pass in a translator, the method uses that translation service to detect the\n                source language. Otherwise, the detection is performed by the default translation\n                service. Ensure that the text you provide contains enough verbiage to enable proper\n                language detection.</p><p>In addition to the detected language, the response\n                contains a confidence level of the detection, along with other possible language\n                alternatives. If a translator is not passed in, the method also returns the default\n                translation service used to detect the language.</p>","params":[{"name":"text","type":"String","description":"Text to use to detect the language."},{"name":"parms","type":"Object","description":"Optional. JSON object that contains additional translation parameters."},{"name":"parms.translator","type":"String","description":"Optional. Translation service to use to translate the text (not\n                  case-sensitive).<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTranCL-getDetectedLanguage_S_O__ul_jdd_zbl_thb\">\n                  <li class=\"li\">Microsoft</li>\n\n                  <li class=\"li\">IBM</li>\n\n                  <li class=\"li\">&lt;custom&gt;</li>\n\n                </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the\n                  translation service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                    service provider</a>. </div>\n<p class=\"p\">Default: translation service configured in\n                  the Translator Configuration [sn_dt_translator_configuration] table.</p>"}],"returns":{"type":"Object","description":"JSON object containing the results of the language detection.<ul class=\"ul\" id=\"DynTranCL-getDetectedLanguage_S_O__d297e183\">\n                <li class=\"li\"><span class=\"keyword parmname\">detectedLanguage</span>: Object. Parameters describing the\n                  detected language.<ul class=\"ul\" id=\"DynTranCL-getDetectedLanguage_S_O__d297e189\">\n                    <li class=\"li\"><span class=\"keyword parmname\">code</span>: String. Language code of the detected\n                      language.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">confidence</span>: String. Float value indicating the\n                      confidence level of the detected language result. Value is between zero and\n                      one. The lower the value, the lower the confidence level.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Language code of the detected\n                      language.</li>\n\n                  </ul>\n</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">alternatives</span>: Object. Description of other languages that\n                  also may be a match.<ul class=\"ul\" id=\"DynTranCL-getDetectedLanguage_S_O__d297e211\">\n                    <li class=\"li\"><span class=\"keyword parmname\">code</span>: String. Language code of the alternative\n                      language.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">confidence</span>: String. Float value indicating the\n                      confidence level of the alternative language. Value is between zero and one.\n                      The lower the value, the lower the confidence level.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Language code of the alternative\n                      language.</li>\n\n                  </ul>\n</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">translator</span>: String. Translation service used to detect the\n                  language.</li>\n\n              </ul>\n<p class=\"p\">For example:</p>\n<div class=\"p\">\n                <pre class=\"pre codeblock\">\n{\n  \"detectedLanguage\": { \n     \"code\": \"en\", \n     \"confidence\": \"1\", \n     \"name\": \"en\" \n},\n  \"alternatives\": [\n    { \"code\": \"vi\", \n      \"confidence\": \"0.86\", \n      \"name\": \"vi\" \n    },\n    { \"code\": \"id\", \n      \"confidence\": \"0.86\", \n      \"name\": \"id\" \n    }\n  ],\n  \"translator\": \"Microsoft\"}</pre>\n\n              </div>"},"example":[{"code":"var detectedResponse = DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":'IBM'}).then(function(res) {console.log(res); }, function(res) {console.log(res); } );","description":"This example shows code that detects a string in English using IBM's translation service in\n        a standard client script.","output":"detectedResponse {\n  detectedLanguage:\n    { &quot;code&quot;: &quot;en&quot;, &quot;confidence&quot;: &quot;1&quot;, &quot;name&quot;: &quot;en&quot; }\n  alternatives: \n    [\n      { &quot;code&quot;: &quot;vi&quot;, &quot;confidence&quot;: &quot;0.86&quot;, &quot;name&quot;: &quot;vi&quot; },\n      { &quot;code&quot;: &quot;id&quot;, &quot;confidence&quot;: &quot;0.86&quot;, &quot;name&quot;: &quot;id&quot; }\n    ]                  \n }"},{"code":"var detectedResponse = DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":123}).then(function(res) {console.log(res); }, function(res) {console.log(res); } );","description":"This example shows a client script that throws an error when an invalid translation\n        service is passed\n      in.","output":"{&quot;code&quot;:&quot;40003&quot;,&quot;message&quot;:&quot;Translator (\\&quot;translator\\&quot; field) is invalid&quot;}"},{"code":"var detectedResponse = dynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":'IBM'}).then(function(res) {console.log(res); }, function(res) {console.log(res); } );","description":"This example shows code that detects a string in English using IBM's translation\n        service in a <span class=\"ph\">Service Portal</span>\n        widget client script. Note that the name of the class is <samp class=\"ph codeph\">dynamicTranslation</samp>\n        not\n      <samp class=\"ph codeph\">DynamicTranslation</samp>.","output":"detectedResponse {\n  detectedLanguage:\n    { &quot;code&quot;: &quot;en&quot;, &quot;confidence&quot;: &quot;1&quot;, &quot;name&quot;: &quot;en&quot; }\n  alternatives: \n    [\n      { &quot;code&quot;: &quot;vi&quot;, &quot;confidence&quot;: &quot;0.86&quot;, &quot;name&quot;: &quot;vi&quot; },\n      { &quot;code&quot;: &quot;id&quot;, &quot;confidence&quot;: &quot;0.86&quot;, &quot;name&quot;: &quot;id&quot; }\n    ]                  \n }"},{"code":"var detectedResponse = dynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":123}).then(function(res) {console.log(res); }, function(res) {console.log(res); } );","description":"This example shows a <span class=\"ph\">Service Portal</span> widget client script\n        that throws an error when an invalid translation service is passed\n      in.","output":"{&quot;code&quot;:&quot;40003&quot;,&quot;message&quot;:&quot;Translator (\\&quot;translator\\&quot; field) is invalid&quot;}"}]},{"name":"getTranslation","description":"Translates the passed in text to one or more languages.<p>The method uses translation services, such as Microsoft Azure Translator Service\n                and IBM Watson Translator Service, to perform the translation. If you do not pass in\n                translation parameters, the method uses the system default.</p>","params":[{"name":"textToTranslate","type":"String","description":"Text to translate."},{"name":"parms","type":"Object","description":"Optional. JSON object that contains additional translation parameters."},{"name":"parms.targetLanguages","type":"Array","description":"Optional. List of language codes to use to translate the text. The method\n                returns translated text for each language code.<p class=\"p\">Default: User preferred\n                  language.</p>"},{"name":"parms.translator","type":"String","description":"Optional. Translation service to use to translate the text (not\n                  case-sensitive).<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTranCL-getTranslation_S_O__ul_jdd_zbl_thb\">\n                  <li class=\"li\">Microsoft</li>\n\n                  <li class=\"li\">IBM</li>\n\n                  <li class=\"li\">&lt;custom&gt;</li>\n\n                </ul>\n<p class=\"p\">Default: Default translation service configured in the instance (defined in\n                  Translator Configurations).</p>"},{"name":"parms.sourceLanguage","type":"String","description":"Optional. Language code of the source text.<p class=\"p\">Default: Translation service\n                  detects the source language.</p>"},{"name":"parms.additionalParameters","type":"Object","description":"Optional. Array of JSON objects. Each object contains key-value pairs that\n                provide additional information for performing the translation."},{"name":"parms.additionalParameters[].parameterName","type":"String","description":"Optional. Key name.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTranCL-getTranslation_S_O__ul_jhc_5nl_thb\">\n                  <li class=\"li\">textype: Type of text to translate. For Microsoft Azure Translator Service\n                    only. </li>\n\n                </ul>"},{"name":"parms.additionalParameters[].parameterValue","type":"String","description":"Optional. Value of the associated key.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTranCL-getTranslation_S_O__ul_jk3_hhb_xhb\">\n                  <li class=\"li\">plain: Standard text string</li>\n\n                  <li class=\"li\">html: HTML text string</li>\n\n                </ul>\n<p class=\"p\">Default: plain</p>"}],"returns":{"type":"Object","description":"Results of the text translation. <ul class=\"ul\" id=\"DynTranCL-getTranslation_S_O__d297e250\">\n                <li class=\"li\"><span class=\"keyword parmname\">translations</span>: Object. Language translations.<ul class=\"ul\" id=\"DynTranCL-getTranslation_S_O__d297e256\">\n                    <li class=\"li\"><span class=\"keyword parmname\">targetLanguage</span>: String. Language code to which the\n                      source text was translated.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">translatedText</span>: String. Translated text.</li>\n\n                  </ul>\n</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">translator</span>: String. Translation service used to translate\n                  the text.</li>\n\n                <li class=\"li\"><span class=\"keyword parmname\">detectedLanguage</span>: Object. Detected language code of the\n                  source text. Returned only if the source language code is not passed in.<ul class=\"ul\" id=\"DynTranCL-getTranslation_S_O__d297e278\">\n                    <li class=\"li\"><span class=\"keyword parmname\">code</span>: String. Language code of the detected\n                      language.</li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Language code of the detected\n                      language.</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\">For example:\n              </p>\n<pre class=\"pre codeblock\">{\"translations\":[\n    {\n      \"targetLanguage\":\"it\",\n      \"translatedText\":\"Tradurre questo testo utilizzando la piattaforma dal server\"\n    },\n    {\n      \"targetLanguage\":\"fr\",\n      \"translatedText\":\"Traduire ce texte en utilisant la plate-forme à partir du serveur\"\n    }\n  ],\n  \"translator\":\"Microsoft\",\n  \"detectedLanguage\":{\"code\":\"en\",\"name\":\"en\"}\n}</pre>"},"example":[{"code":"DynamicTranslation.getTranslation(\"Translate this text using platform from client\", {\n  \"targetLanguages\": [\"fr\", \"it\"],\n  \"additionalParameters\": [{\n    \"parameterName\": \"texttype\",\n    \"parameterValue\": \"plain\"\n  }],\n  \"translator\": \"Microsoft\"\n }).then(function(res){console.log(res);}, function(res){console.log(res);});\n","description":"This example shows the translation of plain text content from English (detected) into\n        French and Italian using Microsoft's translation service in a standard client script.","output":"{&quot;translations&quot;:[\n    {\n      &quot;targetLanguage&quot;:&quot;it&quot;,\n      &quot;translatedText&quot;:&quot;Tradurre questo testo utilizzando la piattaforma dal client&quot;\n    },\n    {\n      &quot;targetLanguage&quot;:&quot;fr&quot;,\n      &quot;translatedText&quot;:&quot;Traduire ce texte en utilisant la plate-forme du client&quot;\n    }\n  ],\n  &quot;translator&quot;:&quot;Microsoft&quot;,\n  &quot;detectedLanguage&quot;:{&quot;code&quot;:&quot;en&quot;,&quot;name&quot;:&quot;en&quot;}\n}"},{"code":"DynamicTranslation.getTranslation(\"Translate this text using platform from client\", {\n  \"targetLanguages\": [\"123”],\n  \"additionalParameters\": [{\n    \"parameterName\": \"texttype\",\n    \"parameterValue\": \"plain\"\n  }],\n  \"translator\": \"Microsoft\"\n }).then(function(res){console.log(res);}, function(res){console.log(res);});\n","description":"This example shows a client script that throws an error when an invalid target language is\n        passed in.","output":"{&quot;code&quot;:&quot;40054&quot;,&quot;message&quot;:&quot;Target language is invalid&quot;}"},{"code":"dynamicTranslation.getTranslation(\"Translate this text using platform from client\", {\n  \"targetLanguages\": [\"fr\", \"it\"],\n  \"additionalParameters\": [{\n    \"parameterName\": \"texttype\",\n    \"parameterValue\": \"plain\"\n  }],\n  \"translator\": \"Microsoft\"\n }).then(function(res){console.log(res);}, function(res){console.log(res);});\n","description":"This example shows the translation of plain text content from English (detected) into\n        French and Italian using Microsoft's translation service in a <span class=\"ph\">Service Portal</span> widget client\n        script. Note that the name of the class is <samp class=\"ph codeph\">dynamicTranslation</samp> not\n          <samp class=\"ph codeph\">DynamicTranslation</samp>.","output":"{&quot;translations&quot;:[\n    {\n      &quot;targetLanguage&quot;:&quot;it&quot;,\n      &quot;translatedText&quot;:&quot;Tradurre questo testo utilizzando la piattaforma dal client&quot;\n    },\n    {\n      &quot;targetLanguage&quot;:&quot;fr&quot;,\n      &quot;translatedText&quot;:&quot;Traduire ce texte en utilisant la plate-forme du client&quot;\n    }\n  ],\n  &quot;translator&quot;:&quot;Microsoft&quot;,\n  &quot;detectedLanguage&quot;:{&quot;code&quot;:&quot;en&quot;,&quot;name&quot;:&quot;en&quot;}\n}"},{"code":"dynamicTranslation.getTranslation(\"Translate this text using platform from client\", {\n  \"targetLanguages\": [123],\n  \"additionalParameters\": [{\n    \"parameterName\": \"texttype\",\n    \"parameterValue\": \"plain\"\n  }],\n  \"translator\": \"Microsoft\"\n }).then(function(res){console.log(res);}, function(res){console.log(res);});\n","description":"This example shows a <span class=\"ph\">Service Portal</span> widget client script\n        that throws an error when an invalid target language is passed in","output":"{&quot;code&quot;:&quot;40054&quot;,&quot;message&quot;:&quot;Target language is invalid&quot;}"}]},{"name":"isEnabled","description":"<span class=\"ph\">Determines whether the\n                  <span class=\"keyword apiname\">getDetectedLanguage()</span> and <span class=\"keyword apiname\">getTranslation()</span>\n                methods are enabled for a translation service.</span><p>If you pass in a specific translation service, the API checks the method activation\n                for that translation service; otherwise the method checks the default translation\n                service.</p>","params":[{"name":"translator","type":"String","description":"Optional. Translation service to verify whether the  methods are active.\n              Translation services are configured under the Translator Configuration\n                menu.<p class=\"p\">Possible values - not case-sensitive:</p>\n<ul class=\"ul\" id=\"DynTranCL-isEnabled_S__d297e158\">\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>"}],"returns":{"type":"Error messages","description":"The following are error messages that the API may return and indications as to\n                their root cause.<ul class=\"ul\" id=\"DynTranCL-isEnabled_S__ul_wp4_sfm_d3b\">\n                  <li class=\"li\"><span class=\"ph\">Translator (\"translator\" field) is invalid\n                (40003): The passed in <span class=\"keyword parmname\">translator</span> parameter is not a\n                String.</span></li>\n\n                </ul>"},"example":[{"code":"DynamicTranslation.isEnabled('AWS').then(function(res){console.log(res);}, function(res){console.log(res);});","description":"This example shows a client script that checks whether the\n          <span class=\"keyword apiname\">DynamicTranslation</span> methods are enabled for the AWS translation\n        service.","output":"{detection: true, translation: true}"},{"code":"dynamicTranslation.isEnabled('AWS').then(function(res){console.log(res);}, function(res){console.log(res);});","description":"This example shows a <span class=\"ph\">Service Portal</span> widget client script\n        that checks whether the <span class=\"keyword apiname\">dynamicTranslation</span> methods are enabled for the\n        AWS translation service. Note that the name of the class is\n          <samp class=\"ph codeph\">dynamicTranslation</samp> not <samp class=\"ph codeph\">DynamicTranslation</samp>.","output":"{detection: true, translation: true}"},{"code":"DynamicTranslation.isEnabled(123).then(function(res){console.log(res);}, function(res){console.log(res);});","description":"This example shows a client script that throws an error when an invalid translation service\n        is passed in.","output":"{&quot;code&quot;:&quot;40003&quot;,&quot;message&quot;:&quot;Translator (&quot;translator&quot; field) is invalid&quot;}"},{"code":"dynamicTranslation.isEnabled(123).then(function(res){console.log(res);}, function(res){console.log(res);});","description":"This example shows a <span class=\"ph\">Service Portal</span> widget client script\n        that throws an error when an invalid translation service is passed in.","output":"{&quot;code&quot;:&quot;40003&quot;,&quot;message&quot;:&quot;Translator (&quot;translator&quot; field) is invalid&quot;}"}]}]},"GlideAgentWorkspace (g_aw)":{"meta":{"has_constructor":false,"description":"The g_aw API enables a UI Action or client script to open a specified record in an\n    Agent Workspace tab. There is no constructor for the GlideAgentWorkspace class. Access GlideAgentWorkspace methods\n      using the g_aw global object.","example":""},"properties":{},"methods":[{"name":"openRecord","description":"Opens a specified record, such as a form, in a subtab within <span class=\"ph\">Agent Workspace</span>.<p><span class=\"notetitle\">Note:</span> This method is only available in the <span class=\"ph\">Agent Workspace</span> client scripting\n        environment or in a UI action on the workspace client script field.</p>","params":[{"name":"table","type":"String","description":"Name of the table that contains the record to open."},{"name":"sysId","type":"String","description":"Sys ID of the record to open."},{"name":"params","type":"Object","description":"Optional. Name/value pairs of the parameters to pass to the record."},{"name":"params.readOnlyForm","type":"Boolean","description":"Flag that indicates whether all fields on the opened record are read-only;\n                regardless of the UI policy and ACLs.<ul class=\"ul\" id=\"gaw-openRecord_S_S_O__ul_py1_mrw_bhb\">\n                  <li class=\"li\">true: All fields are read only.</li>\n\n                  <li class=\"li\">false: Fields adhere to the associated UI policy and ACLs.</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>"},{"name":"params.defaultTab","type":"String","description":"Name of the initial tab to display in the workspace. You can only specify\n                related items or related lists.<p class=\"p\">If not specified, the details tab appears unless\n                    <span class=\"keyword parmname\">hideDetails</span> is set to true.</p>\n<p class=\"p\">For more information on\n                  the method to use to obtain a related list name, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/app-store/dev_portal/API_reference/GlideForm/concept/c_GlideFormAPI.html#GF-getRelatedListNames\" target=\"_blank\">getRelatedListNames()</a>.</p>"},{"name":"params.hideDetails","type":"Boolean","description":"Flag that indicates whether to hide the details tab and the UI actions.<ul class=\"ul\" id=\"gaw-openRecord_S_S_O__ul_zxb_xsw_bhb\">\n                  <li class=\"li\">true: Only the form header, all other tabs, and the first available tab appear\n                    on the form.</li>\n\n                  <li class=\"li\">false: Details tab and UI actions appear on the form.</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>"}],"returns":{"type":"None","description":" "},"example":[{"code":"g_aw.openRecord('sys_user', '62826bf03710200044e0bfc8bcbe5df1'); ","description":"Open a sys_user record in a subtab.","output":""},{"code":"g_aw.openRecord('sys_user', '62826bf03710200044e0bfc8bcbe5df1', {readOnlyForm: true}); ","description":"Open a record in a subtab where all fields are read-only.","output":""},{"code":"g_aw.openRecord('sys_user', '62826bf03710200044e0bfc8bcbe5df1', {defaultTab: \"sys_user_grmember.user\"});  ","description":"Open a record in a subtab and go directly to the \"Groups\" related list.","output":""},{"code":"g_aw.openRecord('sys_user', '62826bf03710200044e0bfc8bcbe5df1', {hideDetails: true}); ","description":"Open a record in a subtab but only show the form header and other tabs.","output":""}]}]},"GlideAjax":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">GlideAjax</span> class enables a client script to call server-side code\n    in a script include. To use <span class=\"keyword apiname\">GlideAjax</span> in a client script, follow these general steps.<br/><br/><li class=\"li\">Create a <span class=\"keyword apiname\">GlideAjax</span> instance by calling the <span class=\"keyword apiname\">GlideAjax</span>\n        constructor. As the argument to the constructor, specify the name of the script include\n        class that contains the method you want to call.</li>\n\n      <li class=\"li\">Call the <span class=\"keyword apiname\">addParam</span> method with the <span class=\"keyword parmname\">sysparm_name</span>\n        parameter and the name of the script-include method you want to call.</li>\n\n      <li class=\"li\">(Optional) Call the <span class=\"keyword apiname\">addParam</span> method one or more times to provide the\n        script-include code with other parameters it needs.</li>\n\n      <li class=\"li\">Execute the server-side code by calling <span class=\"keyword apiname\">getXML()</span>.\n            <div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"keyword apiname\">getXML()</span> is the preferred method for executing the code,\n          because it is asynchronous and does not hold up the execution of other client code.\n          Another method, <span class=\"keyword apiname\">getXMLWait()</span>, is also available but is not recommended.\n          Using <span class=\"keyword apiname\">getXMLWait()</span> ensures the order of execution, but can cause the\n          application to seem unresponsive, significantly degrading the user experience of any\n          application that uses it. <span class=\"keyword apiname\">getXMLWait()</span> is not available to scoped\n          applications.</div>\n</li><br/><br/><pre ng-prism='' source='var ga = new GlideAjax(&#39;HelloWorld&#39;); // HelloWorld is the script include class \nga.addParam(&#39;sysparm_name&#39;,&#39;helloWorld&#39;); // helloWorld is the script include method \nga.addParam(&#39;sysparm_user_name&#39;,\"Bob\"); // Set parameter sysparm_user_name to &#39;Bob&#39; \nga.getXML(HelloWorldParse);  /* Call HelloWorld.helloWorld() with the parameter sysparm_user_name set to &#39;Bob&#39; \n      and use the callback function HelloWorldParse() to return the result when ready */\n\n// the callback function for returning the result from the server-side code\nfunction HelloWorldParse(response) {  \n   var answer = response.responseXML.documentElement.getAttribute(\"answer\"); \n    alert(answer);\n}' class='language-javascript monospaceing'></pre>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Constructor for <span class=\"keyword apiname\">GlideAjax</span>.","params":[{"name":"class_name","type":"String","description":"The name of the server-side class that contains the method you want to execute."}],"returns":{"type":"","description":""},"example":[]},{"name":"addParam","description":"Specifies a parameter name and value to be passed to the server-side function associated\n    with this <span class=\"keyword apiname\">GlideAjax</span> object.<p>You can execute <span class=\"keyword apiname\">addParam</span> multiple times with different parameters and values.\n          <div class=\"note note\"><span class=\"notetitle\">Note:</span> The first call to <span class=\"keyword apiname\">addParam</span> should be with the parameter\n            <span class=\"keyword parmname\">sysparm_name </span> and the name of the server-side method you want to\n          call. The server-side code does not execute until the client script calls\n            <span class=\"keyword apiname\">getXML()</span>.</div></p>","params":[{"name":"parm_name","type":"String","description":"The name of the parameter to pass. (The name must begin with the\n                  <samp class=\"ph codeph\">sysparm_</samp> .)"},{"name":"parm_value","type":"String","description":"The value to assign to <span class=\"keyword parmname\">parm_name</span>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getAnswer","description":"Retrieves the results from a server-side method called from the client via\n      <span class=\"keyword apiname\">getXMLWait()</span>.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getXML","description":"Sends the server a request to execute the method and parameters associated with this\n      <span class=\"keyword apiname\">GlideAjax</span> object.<p>The server processes the request asynchronously and -- when ready -- returns the results via the\n        function specified as the <span class=\"keyword parmname\">callback_function</span>.</p>","params":[{"name":"callback","type":"Function","description":"The name of the callback function to process the results returned by the server."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var comments = gel(\"dialog_comments\").value;\nvar ga = new GlideAjax('validateComments'); //Call script include to escape text\nga.addParam('sysparm_name', 'validateComments');\nga.addParam('sysparm_comments', comments);\nga.getXML(callback);\n \nreturn false;\n \nfunction callback(response) {\n  var comments = response.responseXML.documentElement.getAttribute(\"answer\");\n  comments = trim(comments);\n  if (comments == \"\") {\n     //If comments are empty, alert the user and stop submission\n     alert(\"Please enter your comments before submitting.\");\n  } else {\n    //If there are comments, close the dialog window and submit them\n    GlideDialogWindow.get().destroy(); //Close the dialog window\n    g_form.setValue(\"comments\", comments); //Set the \"Comments\" field with comments in the dialog\n  }","description":"","output":""}]},{"name":"getXMLAnswer","description":"Call the processor asynchronously and get the answer element of the response in XML\n    format.","params":[{"name":"callback","type":"Function","description":"The callback function. The function receives the answer element of the response\n                in XML format as an argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function updateAttachmentCount(sysid) {\n    var ga = new GlideAjax('AttachmentAjax');\n    ga.addParam('sysparm_type', 'attachmentCount');\n    ga.addParam('sysparm_value', sysid);\n    ga.getXMLAnswer(numberOfAttachments, null, sysid); // callback: numberOfAttachments\n}\n\nfunction numberOfAttachments(answer, sysid) {\n\t// we want to know there are 5 attachments, not 5.0 attachments\n\tvar number = parseInt(answer);\n\tvar buttons = $$('.attachmentNumber_' + sysid);\n\tif (buttons[0] == undefined)\n\t\t$('header_attachment_list_label').down().innerHTML = number;\n\telse {\n\t\tfor (var i = 0; i &lt; buttons.length; i++) {\n\t\t\tbuttons[i].innerHTML = number;\n\t\t}\n\t}\n}","description":"","output":""}]},{"name":"getXMLWait","description":"Sends the server a request to execute the method and parameters associated with this\n      <span class=\"keyword apiname\">GlideAjax</span> object.<p>The server processes the request synchronously and will not process further requests from the\n        client until finished. To retrieve the results, the client must call\n          <span class=\"keyword apiname\">getAnswer()</span>. Using <span class=\"keyword apiname\">getXMLWait()</span> ensures the order of\n        execution, but can cause the application to seem unresponsive, significantly degrading the\n        user experience of any application that uses it. We recommend using<span class=\"keyword apiname\">\n          getXML()</span> instead. <div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"keyword apiname\">getXMLWait()</span> is not available to\n          scoped applications.</div></p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var ga = new GlideAjax('HelloWorld');\n      ga.addParam('sysparm_name','helloWorld');\n      ga.addParam('sysparm_user_name',\"Bob\");\n      ga.getXMLWait();\n      alert(ga.getAnswer());","description":"","output":""}]}]},"GlideAjaxV3":{"meta":{"has_constructor":true,"description":"The GlideAjaxV3 API provides the ability to asynchronously execute server-side scripts\n  from a client-side script. The GlideAjaxV3 API can be used in client-side scripts using ListV2 and ListV3 APIs.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideAjaxV3 class.","params":[{"name":"processor","type":"String","description":"The name of the processor (server-side script) to call."},{"name":"targetURL","type":"String","description":"(Optional) Override the xmlhttp processor url. If this parameter is not\n                specified, the default is xmlhttp.do."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"constructor","description":"Creates an instance of the GlideAjaxV3 class.","params":[{"name":"processor","type":"String","description":"The name of the processor (server-side script) to call."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addParam","description":"Set a name-value pair to be sent to the processor.","params":[{"name":"name","type":"String","description":"The name of the parameter. This usually has the prefix 'sysparm_'."},{"name":"value","type":"String","description":"The parameter value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getJSON","description":"Call the processor asynchronously and get the answer element of the response in JSON\n    format.","params":[{"name":"callback","type":"Function","description":"The callback function. The function receives the answer element of the response\n                as a JSON object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getParam","description":"Returns the value of the specified parameter.","params":[{"name":"name","type":"String","description":"The name of the parameter to return."}],"returns":{"type":"String","description":"The specified parameter's value."},"example":[]},{"name":"getParams","description":"Returns the name-value pairs for the request.","params":[],"returns":{"type":"Object","description":"The request's name-value pairs."},"example":[]},{"name":"getProcessor","description":"Returns the server-side script that the request is going to use.<p>This returns the 'sysparm_processor' parameter.</p>","params":[],"returns":{"type":"String","description":"The value of the request's sysparm_processor parameter."},"example":[]},{"name":"getURL","description":"Returns the target URL.","params":[],"returns":{"type":"String","description":"The URL where the Ajax request will be sent."},"example":[]},{"name":"getXML","description":"Call the processor asynchronously and get the response in XML format.","params":[{"name":"callback","type":"Function","description":"The callback function. The function receives the response as an\n                argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getXMLAnswer","description":"Call the processor asynchronously and get the answer element of the response in XML\n    format.","params":[{"name":"callback","type":"Function","description":"The callback function. The function receives the answer element of the response\n                in XML format as an argument."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function autofillPhoneNumber(sysid) {\n    var ga = new GlideAjax('x_abc_myscope.AjaxUtils');\n    ga.addParam('sysparm_type', 'getPhoneNumberForUser');\n    ga.addParam('sysparm_user', sysid);\n    ga.getXMLAnswer(function(answer) {\n        g_form.setValue('phone_number', answer);\n    });\n}","description":"","output":""}]},{"name":"setErrorCallback","description":"Sets a callback function to be called if the Ajax request fails.","params":[{"name":"callback","type":"Function","description":"The function to be called if the Ajax request fails. The callback function has\n                one parameter, the XMLHttpRequest object."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setProcessor","description":"Sets the request's server-side script. The server-side script is also called the\n    processor.<p>This sets the 'sysparm_processor' parameter.</p>","params":[{"name":"serverScript","type":"String","description":"The server-side script (processor) to receive the request."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideDialogWindow":{"meta":{"has_constructor":true,"description":"The <span class=\"keyword apiname\">GlideDialogWindow</span> API provides methods for displaying a dialog in\n  the current window and frame. Use these methods in scripts anywhere that you can use a client-side JavaScript. These methods\n   are most often called from a UI action with the <span class=\"ph uicontrol\">Client</span> check box\n   selected.<br/><br/><span class=\"notetitle\">Note:</span> This API has been deprecated, use the <span class=\"keyword apiname\">GlideModalV3</span> API instead.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Provides methods for displaying a dialog in the current window and frame.<p>Use these methods in scripts anywhere that you can use a client-side JavaScript. These methods\n        are most often called from a UI Action with the <span class=\"ph uicontrol\">Client</span> check box\n        selected.</p>","params":[{"name":"id","type":"String","description":"Name of the UI page to load into the dialog window."},{"name":"readOnly","type":"Boolean","description":"Optional. Flag that indicates whether the dialog window is read only (true) or\n                read/write (false). Default: false"},{"name":"width","type":"Number","description":"Optional. Size (in pixels) to set the width of the dialog window."},{"name":"height","type":"Number","description":"Optional. Size (in pixels) to set the height of the dialog window."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Creates a dialog window\nvar gdw = new GlideDialogWindow('show_list');\n\n// Creates a read-only dialog window\nvar gdw = new GlideDialogWindow('show_list', true);\n\n// Creates a dialog window that is 400 pixels wide\nvar gdw = new GlideDialogWindow('show_list', false, 400); \n\n// Creates a dialog window that is 400 pixels wide and 200 pixels tall\nvar gdw = new GlideDialogWindow('show_list', false, 400, 200); ","description":"","output":""}]},{"name":"adjustBodySize","description":"Adjusts the body height of a dialog window to be the window height minus the header\n    height.<p>You typically call this method after calling <span class=\"keyword apiname\">GlideDialogWindow -\n          setSize()</span>.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdw = new GlideDialogWindow('show_list');\n      gdw.setTitle('Test');\n      gdw.setSize(750,300);\n      gdw.adjustBodySize();\n      gdw.render();","description":"","output":""}]},{"name":"destroy","description":"Closes the dialog window.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//Destroy the current dialog window.\n      GlideDialogWindow.get().destroy();","description":"","output":""}]},{"name":"render","description":"Renders the dialog window.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdw = new GlideDialogWindow('show_list');\n      gdw.setTitle('Test');\n      gdw.setSize(750,300);\n      gdw.setPreference('table', 'u_test_list');\n      gdw.setPreference('title', 'A New Title');\n      gdw.render();","description":"","output":""}]},{"name":"setPreference","description":"Sets a given window property to a specified value.<p>Any window property can be set using this method.</p>","params":[{"name":"name","type":"String","description":"The window property to set."},{"name":"value","type":"String","description":"The value for the window property."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdw = new GlideDialogWindow('show_list');\n      gdw.setTitle('Test');\n      gdw.setSize(750,300);\n      gdw.setPreference('table', 'u_test_list');\n      gdw.setPreference('title', 'A New Title');","description":"","output":""}]},{"name":"setSize","description":"Sets the size of the dialog window.<p>If you do not pass width and height parameters, a default size is used.</p>","params":[{"name":"width","type":"Number","description":"The width of the dialog window."},{"name":"height","type":"Number","description":"The height of the dialog window."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gdw = new GlideDialogWindow('show_list');\n      gdw.setSize(750,300);","description":"","output":""}]},{"name":"setTitle","description":"Sets the title of the dialog window.","params":[{"name":"title","type":"String","description":"The title for the current window."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//var gdw = new GlideDialogWindow('show_list');\n      gdw.setTitle('test');","description":"","output":""}]}]},"GlideDocumentV3":{"meta":{"has_constructor":false,"description":"The GlideDocument class provides the ability to search a DOM element, a document, or a\n  JQuery element. The GlideDocumentV3 API can be used in client-side scripts using ListV2 and ListV3 APIs.  The\n   GlideDocument APIs are accessed using the g_document global object.","example":""},"properties":{},"methods":[{"name":"getElement","description":"Returns a node found in the specified DOM based context or created from the HTML\n    context.","params":[{"name":"selector","type":"String or Object","description":"The selector expression"},{"name":"context","type":"String or Object","description":"(Optional) A DOM Element, document, or JQuery object to be searched."}],"returns":{"type":"node","description":"The node that matches the selector."},"example":[]},{"name":"getElements","description":"Returns a node list found in the specified DOM based context or created if an HTML\n    context is specified.","params":[{"name":"selector","type":"String or Object","description":"The selector expression"},{"name":"context","type":"String or Object","description":"(Optional) A DOM Element, document, or JQuery object to be searched."}],"returns":{"type":"node list","description":"A list of nodes that matches the selector."},"example":[]}]},"GlideFlow":{"meta":{"has_constructor":false,"description":"Use the GlideFlow JavaScript API for client-side interactions with actions, flows, and\n    subflows. Use the GlideFlow API anywhere in the platform that accepts client scripts. The action, flow,\n      or subflow must be set as client callable, and have a valid ACL using the Manage Security\n      feature in Flow designer.<br/><br/>Some of the methods within GlideFlow return <samp class=\"ph codeph\">promise</samp> objects. A\n        <samp class=\"ph codeph\">promise</samp> represents the eventual result of an asynchronous operation. For\n      more information on promises, see <a class=\"extRef\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\">Promise - Javascript MDN</a> or <a class=\"extRef\" href=\"https://docs.angularjs.org/api/ng/service/$q\" target=\"_blank\">AngularJS\n        documentation</a>.<br/><br/>Using this API, you can:<ul class=\"ul\" id=\"GlideFlowAPI__ul_bdk_tf2_xs\">\n        <li class=\"li\">Start actions, flows, or subflows via a script.</li>\n\n        <li class=\"li\">Get an existing execution. </li>\n\n        <li class=\"li\">Get the status and any available outputs.</li>\n\n        <li class=\"li\">Wait for the completion of an action, flow, or subflow.</li>\n\n      </ul><br/><br/>There is no constructor for the GlideFlow class. Access GlideFlow methods using the GlideFlow\n      global object.","example":""},"properties":{},"methods":[{"name":"execution.awaitCompletion","description":"Returns a completion object for the execution.","params":[],"returns":{"type":"Object","description":"An object that contains completion details for a flow or action execution."},"example":[{"code":"\n(function() {\n\tvar inputs = {};\n\n\tinputs['input1'] = 'string input'; // String\n\n\tGlideFlow.startAction('global.action_name', inputs)\n\t\t.then(function(execution) {\n\t\t\treturn execution.awaitCompletion();\n\t\t}, errorResolver)\n\t\t.then(function(completion) {\n\t\t\tvar status = completion.status;\n\t\t\tconsole.log(status);\n\n\t\t\t// Available Outputs:\n\t\t\tvar outputs = completion.outputs;\n\t\t\tconsole.log(outputs);\n\t\t}, errorResolver());\n\n\tfunction errorResolver(error) {\n\t\t// Handle errors in error resolver\n\t\tconsole.error(error);\n\t}\n})();","description":"In this example, an action is executed using startAction(), which returns an execution\n        object. The code then uses awaitCompletion() on this execution object, which returns a\n        completion object. The code uses this completion object to log the status and outputs within\n        the execution.","output":""}]},{"name":"execution.getExecutionStatus","description":"Returns a string containing the execution status of the current execution.","params":[],"returns":{"type":"String","description":"A string containing the execution status."},"example":[{"code":"\n// Get an existing action, getStatus, and getOutputs if complete\n(function() {\n   GlideFlow.getExecution('mamIN4Q35vmEFe744EwJV5GHrSz8fmJG')\n      .then(function(execution) {\n         execution.getExecutionStatus().then(\n            function(status) {\n               if (status === 'COMPLETE')\n                  execution.getOutputs().then(\n                     function(outputs) {\n                        console.log(outputs);\n                     },\n                     errorResolver\n                  );\n            },\n            errorResolver\n         );\n      }, errorResolver);\n\n   function errorResolver(error) {\n      // Handle errors in error resolver\n      console.error(error);\n   }\n})();","description":"In this example, the code obtains an execution object using the getExecution method. The\n        getExecution method requires an ID, which is returned by the method used to start the\n        execution. The code then uses getExecutionStatus() to determine whether the execution has\n        been completed before continuing.","output":""}]},{"name":"execution.getOutputs","description":"Returns an outputs object for the execution.<p>Use this method to access output generated by the execution of an action, flow, or\n        subflow.</p>","params":[],"returns":{"type":"Object","description":"An object containing outputs for an action, flow, or subflow."},"example":[{"code":"\n// Get an existing action, getStatus, and getOutputs if complete\n(function() {\n   GlideFlow.getExecution('mamIN4Q35vmEFe744EwJV5GHrSz8fmJG')\n      .then(function(execution) {\n         execution.getExecutionStatus().then(\n            function(status) {\n               if (status === 'COMPLETE')\n                  execution.getOutputs().then(\n                     function(outputs) {\n                        console.log(outputs);\n                     },\n                     errorResolver\n                  );\n            },\n            errorResolver\n         );\n      }, errorResolver);\n\n   function errorResolver(error) {\n      // Handle errors in error resolver\n      console.error(error);\n   }\n})();","description":"In this example, the code obtains an execution object using the getExecution method. After\n        the execution is complete, the code uses getOutputs() to return an outputs object, which it\n        then logs using the console.log method.","output":""}]},{"name":"getExecution","description":"Get an existing execution instance by ID.","params":[{"name":"executionId","type":"String","description":"The ID of the execution to be retrieved."}],"returns":{"type":"Object","description":"A promise of an execution object."},"example":[{"code":"\n// Get an existing action and await completion\n(function() {\n\tGlideFlow.getExecution('79cd437e0b202300a150a95e93673ae3')\n\t\t.then(function(execution) {\n\t\t\treturn execution.awaitCompletion();\n\t\t}, errorResolver)\n\t\t.then(function(completion) {\n\n\t\t\tvar status = completion.status;\n\t\t\tconsole.log(status);\n\n\t\t\t// Available Outputs:\n\t\t\tvar outputs = completion.outputs;\n\t\t\tconsole.log(outputs);\n\t\t}, errorResolver());\n\n\tfunction errorResolver(error) {\n\t\t// Handle errors in error resolver\n\t\tconsole.error(error);\n\t}\n})();","description":"In this example, the code gets an execution, then waits for it to be completed before\n        logging the executions completion status and outputs using console.log.","output":""}]},{"name":"startAction","description":"Start an action.","params":[{"name":"scopedName","type":"String","description":"The scoped name of the flow to be executed."},{"name":"inputs","type":"Object","description":"An object containing inputs defined for the action."}],"returns":{"type":"Object","description":"An object containing details on the action execution."},"example":[{"code":"\n// Start an action and await completion.\n(function() {\n\tvar inputs = {};\n\n\tinputs['input1'] = 'string input'; // String\n\n\tGlideFlow.startAction('global.action_name', inputs)\n\t\t.then(function(execution) {\n\t\t\treturn execution.awaitCompletion();\n\t\t}, errorResolver)\n\t\t.then(function(completion) {\n\t\t\tvar status = completion.status;\n\t\t\tconsole.log(status);\n\n\t\t\t// Available Outputs:\n\t\t\tvar outputs = completion.outputs;\n\t\t\tconsole.log(outputs);\n\t\t}, errorResolver());\n\n\tfunction errorResolver(error) {\n\t\t// Handle errors in error resolver\n\t\tconsole.error(error);\n\t}\n})();","description":"In this example, the code starts the global action_name action using arguments in the\n        inputs input object variable. Upon completion, the example uses console.log or console.error\n        to report on the success or failure of the flow.","output":""}]},{"name":"startFlow","description":"Start a flow.","params":[{"name":"scopedName","type":"String","description":"The scoped name of the flow to be executed."},{"name":"inputs","type":"Object","description":"An object containing inputs defined for the flow."}],"returns":{"type":"Object","description":"An object containing details on the flow execution."},"example":[{"code":"\n// Start a Flow\n(function() {\n      var inputs = {};\n      inputs['current'] = { // GlideRecord \n        table : 'incident', \n        sys_id : '79cd437e0b202300a150a95e93673ae3'  \n    };\n        inputs['table_name'] = 'incident';\n         GlideFlow.startFlow('global.flow_name', inputs)\n\t\t.then(\n\t\t\tfunction(execution) {\n\t\t\t\tconsole.log('Started flow_name with execution id :' + execution.getExecutionId());\n\t\t\t},\n\t\t\tfunction(error) {\n\t\t\t\tconsole.log('Unable to start flow: ' + error);\n\t\t\t}\n\t\t);\n})();","description":"This example flow is normally triggered when a record on the incident table is updated.\n        Because you are activating the flow from Client script, you must provide this information.\n        The code creates an inputs variable that contains the current record and the table for the\n        record","output":""}]},{"name":"startSubflow","description":"Start a subflow.","params":[{"name":"scopedName","type":"String","description":"The scoped name of the flow to be executed."},{"name":"inputs","type":"Object","description":"An object containing inputs used for the subflow."}],"returns":{"type":"Object","description":"An object containing details on the subflow execution."},"example":[{"code":"\n// Start an action and await completion.\n(function() {\n\tvar inputs = {};\n\n\tinputs['input1'] = 'string input'; // String\n\n\tGlideFlow.startSubflow('global.subflow_name', inputs)\n\t\t.then(function(execution) {\n\t\t\treturn execution.awaitCompletion();\n\t\t}, errorResolver)\n\t\t.then(function(completion) {\n\t\t\tvar status = completion.status;\n\t\t\tconsole.log(status);\n\n\t\t\t// Available Outputs:\n\t\t\tvar outputs = completion.outputs;\n\t\t\tconsole.log(outputs);\n\t\t}, errorResolver());\n\n\tfunction errorResolver(error) {\n\t\t// Handle errors in error resolver\n\t\tconsole.error(error);\n\t}\n})();","description":"In this example, the code starts the global subflow_name subflow using arguments in the\n        inputs array variable. Upon completion, the example uses console.log or console.error to\n        report on the success or failure of the flow.","output":""}]}]},"GlideForm":{"meta":{"has_constructor":false,"description":"The GlideForm API provides methods to customize forms. GlideForm.js is the JavaScript\n  class containing the methods. The global object g_form is used to access GlideForm methods.\n  GlideForm methods are only used on the client. These methods are used to make custom changes to the form view of records. All validation of\n   examples was done using Client Scripts.<br/><br/>Some of these methods can also be used in other client scripts (such as Catalog Client Scripts\n   or Wizard Client Scripts), but must first be tested to determine whether they will work as\n   expected.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> The methods <span class=\"keyword apiname\">getControl()</span>, <span class=\"keyword apiname\">getHelpTextControl()</span>,\n     <span class=\"keyword apiname\">getElement()</span>, and <span class=\"keyword apiname\">getFormElement()</span> are deprecated for\n    mobile devices. For information on using GlideForm for mobile, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/script/client-scripts/reference/r_MobilePlatformMigrationImpacts.html\" target=\"_blank\">Mobile Client GlideForm (g_form) Scripting\n     and Migration</a>\n    \n    . </div><br/><br/>There is no constructor for the GlideForm class. Access GlideForm methods using the g_form\n   global object.","example":""},"properties":{},"methods":[{"name":"addDecoration","description":"Adds an icon on a field’s label.<p>Adding the same item twice is prevented; however, you can add the same icon with a\n        different title. <div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported by Service Catalog.</div></p>","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"icon","type":"String","description":"The font icon to show next to the field. Supported icons - icon-user,\n                icon-user-group, icon-lightbulb, icon-home, icon-mobile, icon-comment, icon-mail,\n                icon-locked, icon-database, icon-book, icon-drawer, icon-folder, icon-catalog,\n                icon-tab, icon-cards, icon-tree-right, icon-tree, icon-book-open, icon-paperclip,\n                icon-edit, icon-trash, icon-image, icon-search, icon-power, icon-cog, icon-star,\n                icon-star-empty, icon-new-ticket, icon-dashboard, icon-cart-full, icon-view,\n                icon-label, icon-filter, icon-calendar, icon-script, icon-add, icon-delete,\n                icon-help, icon-info, icon-check-circle, icon-alert, icon-sort-ascending,\n                icon-console, icon-list, icon-form, and icon-livefeed."},{"name":"title","type":"String","description":"The text title for the icon."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.addDecoration('caller_id', 'icon-star', 'preferred member');","description":"","output":""}]},{"name":"addDecoration","description":"Adds an icon on a field’s label.<p>Adding the same item twice is prevented; however, you can add the same icon with a\n        different title. <div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported by Service Catalog.</div></p>","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"icon","type":"String","description":"The font icon to show next to the field. Supported icons - icon-user,\n                icon-user-group, icon-lightbulb, icon-home, icon-mobile, icon-comment, icon-mail,\n                icon-locked, icon-database, icon-book, icon-drawer, icon-folder, icon-catalog,\n                icon-tab, icon-cards, icon-tree-right, icon-tree, icon-book-open, icon-paperclip,\n                icon-edit, icon-trash, icon-image, icon-search, icon-power, icon-cog, icon-star,\n                icon-star-empty, icon-new-ticket, icon-dashboard, icon-cart-full, icon-view,\n                icon-label, icon-filter, icon-calendar, icon-script, icon-add, icon-delete,\n                icon-help, icon-info, icon-check-circle, icon-alert, icon-sort-ascending,\n                icon-console, icon-list, icon-form, and icon-livefeed."},{"name":"title","type":"String","description":"The text title for the icon."},{"name":"color","type":"String","description":"A CSS color."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.addDecoration('caller_id', 'icon-star', 'Mark as Favorite', 'color-green');","description":"","output":""}]},{"name":"addErrorMessage","description":"Displays the error message at the top of the form.","params":[{"name":"message","type":"String","description":"The message to display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.addErrorMessage('This is an error');","description":"","output":""}]},{"name":"addInfoMessage","description":"Adds an informational message to the top of the form.","params":[{"name":"message","type":"String","description":"The message to display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.addInfoMessage('The top five fields in this form are mandatory');","description":"","output":""}]},{"name":"addOption","description":"Adds a choice to the end of a choice list field.","params":[{"name":"fieldName","type":"String","description":"The name of the field."},{"name":"choiceValue","type":"String","description":"The value to be stored in the database."},{"name":"choiceLabel","type":"String","description":"The value displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.addOption('priority', '6', '6 - Really Low');","description":"","output":""}]},{"name":"addOption","description":"Adds a choice to the choice list field at the position specified.","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"choiceValue","type":"String","description":"The value stored in the database."},{"name":"choiceLabel","type":"String","description":"The value displayed."},{"name":"choiceIndex","type":"Number","description":"Order of the choice in the list. The index is into a zero based array."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.addOption('priority', '2.5', '2.5 - Moderately High', 3);","description":"","output":""}]},{"name":"clearMessages","description":"Removes all informational and error messages from the top of the form.<p>Removes informational and error messages added with\n          <span class=\"keyword apiname\">g_form.addInfoMessage()</span> and\n        <span class=\"keyword apiname\">g_form.addErrorMessage()</span>.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.clearMessages();","description":"","output":""}]},{"name":"clearOptions","description":"Removes all options from the choice list.","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"clearValue","description":"Removes any value(s) from the field.","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"disableAttachments","description":"Prevents file attachments from being added.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"enableAttachments","description":"Allows file attachments to be added. Shows the paper clip icon.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"flash","description":"Used to draw attention to a particular field. Flashes the specified color for a\n    specified duration of time in the specified field.<p>This method is not supported by Service Catalog.</p><p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[{"name":"fieldName","type":"String","description":"Specifies the field to highlight in the following format:\n                  <samp class=\"ph codeph\">\"&lt;table-name&gt;.&lt;field-name&gt;\"</samp>."},{"name":"color","type":"String","description":"RGB color or acceptable CSS color."},{"name":"count","type":"Number","description":"Specifies how long the label will flash. Options include:<ul class=\"ul\" id=\"r_GlideFormFlash_String_String_Number__ul_qcc_4fw_ts\">\n                  <li class=\"li\">2: Flashes for 1 second</li>\n\n                  <li class=\"li\">0: Flashes for 2 seconds</li>\n\n                  <li class=\"li\">-2: Flashes for 3 seconds</li>\n\n                  <li class=\"li\">-4: Flashes for 4 seconds</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.flash(\"incident.number\", \"#FFFACD\", 0);","description":"","output":""}]},{"name":"getActionName","description":"Returns the most recent action name, or, for a client script, the sys_id of the UI\n    action clicked.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Not available in Wizard client scripts.</div></p>","params":[],"returns":{"type":"String","description":"The current action name."},"example":[{"code":"function onSubmit() {\n   var action = g_form.getActionName();\n   alert('You pressed ' + action);\n}","description":"","output":""}]},{"name":"getBooleanValue","description":"Returns a Boolean value for the specified field.","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"Boolean","description":"Returns false if the field value is false or undefined; otherwise returns\n                true."},"example":[]},{"name":"getControl","description":"Returns the HTML element for the specified field.<p>Compound fields may contain several HTML elements. This method is generally not necessary\n        as there are built-in methods that use the fields on a form.</p><p>If the field is a reference field and the control is a choice list,\n          <span class=\"keyword apiname\">getControl()</span> may not return a control as expected. In this case, use\n          <samp class=\"ph codeph\">sys_select.&lt;table name&gt;.&lt;field name&gt;</samp>.</p><p>This method is not available in mobile scripts or Service Portal scripts.</p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"HTMLElement","description":"The field's HTML element."},"example":[]},{"name":"getDecimalValue","description":"Returns the decimal value of the specified field.","params":[{"name":"fieldName","type":"String","description":"The name of the field."}],"returns":{"type":"String","description":"The decimal value of the specified field."},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n   alert(g_form.getDecimalValue('percent_complete'));\n}","description":"","output":""}]},{"name":"getElement","description":"Returns the HTML element specified by the parameter.<p>Compound fields may contain several HTML elements. This method is generally not necessary\n        as there are built-in methods that use the fields on a form.</p><p>This method is not available in mobile scripts or Service Portal scripts.</p>","params":[{"name":"id","type":"String","description":"The field id."}],"returns":{"type":"HTMLElement","description":"The field's HTML element."},"example":[]},{"name":"getFormElement","description":"Returns the HTML element for the form.<p>This method is not available in mobile scripts or Service Portal scripts.</p>","params":[],"returns":{"type":"HTMLFormElement","description":"The HTML element for the form."},"example":[]},{"name":"getHelpTextControl","description":"Returns the HTML element of the help text for the specified field.<p>This method is applicable to service catalog variables only.</p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"HTMLElement","description":"Help text field's HTML element."},"example":[]},{"name":"getIntValue","description":"Returns the integer value of the field.","params":[{"name":"fieldName","type":"String","description":"The field name."}],"returns":{"type":"Number","description":"Integer value of the field."},"example":[]},{"name":"getLabelOf","description":"Returns the plain text value of the field label.","params":[{"name":"fieldName","type":"String","description":"The field name"}],"returns":{"type":"String","description":"The label text."},"example":[{"code":"if (g_user.hasRole('itil')) {\n    var oldLabel = g_form.getLabelOf('comments');\n    g_form.setLabelOf('comments', oldLabel + ' (Customer visible)');\n}","description":"","output":""}]},{"name":"getOption","description":"Returns the option element for a selected box named <span class=\"keyword parmname\">fieldName</span>\n    where <span class=\"keyword parmname\">choiceValue</span> matches the option value.<p><span class=\"notetitle\">Note:</span> This method does not work on read-only fields.</p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"choiceValue","type":"String","description":"Value of the option."}],"returns":{"type":"HTMLElement","description":"The HTMLElement for the option. Returns null if the field or option is not\n                found."},"example":[]},{"name":"getReference","description":"Returns the GlideRecord for a specified field.<p>If a callback function is present, this routine runs asynchronously. The browser (and\n        script) processing continues normally until the server returns the reference value, at which\n        time, the callback function is invoked. If a callback function is not present, this routine\n        runs synchronously and processing halts (causing the browser to appear to hang) while\n        waiting on a server response.</p><p><div class=\"note important\"><span class=\"importanttitle\">Important:</span> It is strongly recommended that you use a callback function.</div></p><p>Callback function support for ServiceCatalogForm.getReference is available.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Using this method requires a call to the server which requires additional time and may\n          introduce latency to your page. Use this method with caution. For additional information,\n          see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/script/client-scripts/concept/client-script-best-practices.html\" target=\"_blank\">Client script design and\n            processing</a>. </div></p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"callBack","type":"Function","description":"Name of the call back function."}],"returns":{"type":"GlideRecord","description":"GlideRecord object for the specified field. <p class=\"p\">If the specified reference\n                  cannot be found, it returns an initialized GlideRecord object where currentRow =\n                  -1 and rows.length = 0.</p>"},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n    g_form.getReference('caller_id', doAlert); // doAlert is our callback function\n}\n \nfunction doAlert(caller) { // reference is passed into callback as first arguments\n   if (caller.vip === 'true')\n      alert('Caller is a VIP!');\n}","description":"Code example","output":""}]},{"name":"getRelatedListNames","description":"Returns an array of related lists from the current form in the order in which they\n    appear on that form.","params":[],"returns":{"type":"Array","description":"Array of related lists from the current form in the order in which they appear\n                on that form."},"example":[{"code":"var listNames = g_form.getRelatedListNames();\n\nfor (var i = 0; i &lt; listNames.length; i++) {  \n  this.showRelatedList(listNames[i]);\n }","description":":","output":""}]},{"name":"getSectionNames","description":"Returns all section names, whether visible or not.","params":[],"returns":{"type":"Array of strings","description":"The section names."},"example":[]},{"name":"getSections","description":"Returns an array of the form's sections.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[],"returns":{"type":"Array of HTML elements","description":"The form's sections."},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n   //this example was run on a form divided into sections (Change form)\n   // and hid a section when the \"state\" field was changed\n   var sections = g_form.getSections();\n   if (newValue == '2') {\n      g_form.setSectionDisplay(sections[1], false);\n   } else {\n      g_form.setSectionDisplay(sections[1], true);\n   }\n}","description":"","output":""}]},{"name":"getTableName","description":"Returns the name of the table to which this record belongs.<p>On the server side, the table for the current record can be retrieved with\n          <span class=\"keyword apiname\">current.sys_class_name</span> or\n        <span class=\"keyword apiname\">current.getTableName()</span>.</p>","params":[],"returns":{"type":"String","description":"Name of the table."},"example":[{"code":"function onLoad() {\n    if (g_form.isNewRecord()) {\n        var tableName = g_form.getTableName(); //Get the table name\n    }\n}","description":"","output":""}]},{"name":"getUniqueValue","description":"Returns the sys_id of the record displayed in the form.","params":[],"returns":{"type":"String","description":"The record's sys_id."},"example":[{"code":"function onLoad() {\n   var incSysid = g_form.getUniqueValue();\n   alert(incSysid);\n}","description":"","output":""}]},{"name":"getValue","description":"Returns the value of the specified field.","params":[{"name":"fieldName","type":"String","description":"The field name."}],"returns":{"type":"String","description":"The value of the specified field."},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n   alert(g_form.getValue('short_description'));\n}","description":"","output":""}]},{"name":"hideAllFieldMsgs","description":"Hides all field messages.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hideAllFieldMsgs","description":"Hides all field messages of the specified type.","params":[{"name":"type","type":"String","description":"The type of message, info or error."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hideErrorBox","description":"Hides the error message placed by <span class=\"keyword apiname\">showErrorBox()</span>.<p>Whenever possible, use <span class=\"keyword apiname\">hideFieldMsg()</span> rather than this method whenever\n        possible.</p>","params":[{"name":"fieldName","type":"String","description":"The name of the field or control."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hideFieldMsg","description":"Hides the last message placed by <span class=\"keyword apiname\">showFieldMsg()</span>.","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hideFieldMsg","description":"Hides the messages placed by <span class=\"keyword apiname\">showFieldMsg()</span>.","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"clearAll","type":"Boolean","description":"When true, all messages for the field are cleared. When false, only the last\n                message is removed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.hideFieldMsg('impact', true);","description":"","output":""}]},{"name":"hideRelatedList","description":"Hides the specified related list on the form.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[{"name":"listTableName","type":"String","description":"Name of the related list. Use the sys_id to hide a list through a relationship."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"hideRelatedLists","description":"Hides all related lists on the form.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"isLiveUpdating","description":"Returns true while a live update is being done on the record the form is showing.<p>This can be used in an <span class=\"keyword apiname\">onChange()</span> client script to determine if a change\n        to the record is because of a live update from another session. The client script can then\n        decide what action to take, or not to take. This applies to systems using UI16 with live\n        forms enabled.</p>","params":[],"returns":{"type":"Boolean","description":"Returns true if a live update is happening on the record displayed by the form."},"example":[]},{"name":"isMandatory","description":"Returns true if the field is mandatory.","params":[{"name":"fieldName","type":"String","description":"Name of the field."}],"returns":{"type":"Boolean","description":"True if the field is required, false otherwise."},"example":[]},{"name":"isNewRecord","description":"Returns true if the record has never been saved.","params":[],"returns":{"type":"Boolean","description":"Returns true if the record has not been saved; otherwise false."},"example":[{"code":"function onLoad() {\n   if(g_form.isNewRecord()){\n      alert('New Record!');\n   }\n}","description":"","output":""}]},{"name":"isSectionVisible","description":"Returns true if the section is visible.","params":[],"returns":{"type":"Boolean","description":"Returns true when the section is visible; otherwise, false is returned."},"example":[]},{"name":"onUserChangeValue","description":"Registers a custom event listener that detects when any field in the current form is\n    modified by a user.<p>When a form field is modified, the event listener calls the function that is passed in when\n        the listener is initially registered. This listener is only triggered when a user makes a\n        change to a field on the form. Changes from client scripts, UI policies, or any other\n        non-user interactions, do not trigger the listener.</p>","params":[{"name":"fn","type":"Function","description":"Function to call when a user changes the value of a field within the current\n                form. This is actually the function code, not just the function name. <p class=\"p\">This\n                  function must accept the following three arguments:</p>\n<ul class=\"ul\" id=\"GF-onUserChangeValue_F__ul_fnz_j4l_1hb\">\n                  <li class=\"li\">field name</li>\n\n                  <li class=\"li\">original field value</li>\n\n                  <li class=\"li\">updated field value</li>\n\n                </ul>"}],"returns":{"type":"Function","description":"Function to call to unregister the onUserChangeValue event listener."},"example":[{"code":"var handler = function(fieldname, originalValue, newValue) {\n  console.log('The field ('+ fieldname + ') has a new value of: ' + newValue); // function code\n}\n \nvar unregister = g_form.OnUserChangeValue(handler);\n \n// To unregister the event listener\nunregister();","description":"","output":""}]},{"name":"refreshSlushbucket","description":"You can update a list collector variable.","params":[{"name":"fieldName","type":"String","description":"Name of the slush bucket."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.refreshSlushbucket('bucket');","description":"","output":""}]},{"name":"removeDecoration","description":"Removes the icon from the specified field that matches the icon and title.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported by Service Catalog.</div></p>","params":[{"name":"fieldName","type":"String","description":"Field name."},{"name":"icon","type":"String","description":"Name of the icon to remove."},{"name":"title","type":"String","description":"The icon's text title (name)."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n\t// if the caller_id field is not present, then we can't add an icon anywhere\n\tif (!g_form.hasField('caller_id'))\n\t\treturn;\n \n\tif (!newValue)\n\t\treturn;\n \n\tg_form.getReference('caller_id', function(ref) {\n\t\tg_form.removeDecoration('caller_id', 'icon-star', 'VIP');\n \n\t\tif (ref.getValue('vip') == 'true')\n\t\t\tg_form.addDecoration('caller_id', 'icon-star', 'VIP');\t\t\t\n\t});\n}","description":"","output":""}]},{"name":"removeDecoration","description":"Removes the icon from the specified field that matches the icon, title, and\n    color.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported by Service Catalog.</div></p>","params":[{"name":"fieldName","type":"String","description":"Field name."},{"name":"icon","type":"String","description":"Name of the icon to remove."},{"name":"title","type":"String","description":"The icon's text title (name)."},{"name":"color","type":"String","description":"A CSS color"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.removeDecoration('caller_id', 'icon-star', 'VIP', 'blue');","description":"","output":""}]},{"name":"removeOption","description":"Removes the specified option from the choice list.","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"choiceValue","type":"String","description":"The value stored in the database. This is not the label."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.removeOption('priority', '1');","description":"","output":""}]},{"name":"save","description":"Saves the record without navigating away (update and stay).","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDisabled","description":"Makes the specified field available or unavailable.","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"disable","type":"Boolean","description":"When true disables the field. When false enables the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setDisplay","description":"Displays or hides a field.<p>This method cannot hide a mandatory field with no value. If the field is hidden, the space\n        is used to display other items. Whenever possible, use a UI policy instead of this method.</p>","params":[{"name":"fieldname","type":"String","description":"Name of the field."},{"name":"display","type":"Boolean","description":"When true displays the field, when false hides the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n   //If the page isn't loading\n   if (!isLoading) {\n      //If the new value isn't blank\n      if (newValue != '') {\n         g_form.setDisplay('priority', false);   \n      }\n      else \n         g_form.setDisplay('priority', true);\n      }\n   }","description":"","output":""}]},{"name":"setLabelOf","description":"Sets the plain text value of the field label.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported by Service Catalog.</div></p>","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"label","type":"String","description":"The field text label."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if (g_user.hasRole('itil')) {\n    var oldLabel = g_form.getLabelOf('comments');\n    g_form.setLabelOf('comments', oldLabel + ' (Customer visible)');\n}","description":"","output":""}]},{"name":"setMandatory","description":"Makes the specified field mandatory.<p>Whenever possible, use a UI policy rather than this method.</p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"mandatory","type":"Boolean","description":"When true makes the field mandatory. When false makes the field\n                optional."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setReadOnly","description":"Makes the specified field read only or editable.<p>Whenever possible, use a UI policy instead of this method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The function name <span class=\"keyword apiname\">setReadonly()</span> also works.</div></p><p>To make a mandatory field read-only, you must first remove the mandatory requirement for\n        that field by using the <span class=\"keyword apiname\">setMandatory()</span> method.</p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"readOnly","type":"Boolean","description":"When true makes the field read only. When false makes the field\n                editable."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSectionDisplay","description":"Shows or hides a section.","params":[{"name":"sectionName","type":"String","description":"The section name is lower case with an underscore replacing the first space in\n                the name, and with the remaining spaces being removed, for example \"Section Four is\n                Here\" becomes \"section_fourishere\". Other non-alphanumeric characters, such as\n                ampersand (&), are removed. Section names can be found by using the\n                  <span class=\"keyword apiname\">getSectionNames()</span> method."},{"name":"display","type":"Boolean","description":"When true shows the section. When false hides the section."}],"returns":{"type":"Boolean","description":"Returns true when successful."},"example":[]},{"name":"setValue","description":"Sets the value of a field.<p>When defining a value in a choice list, be sure to use number value rather than the\n        label.</p><p>To improve performance by preventing a round trip, include a display value in addition to\n        the value, use <span class=\"keyword apiname\">setValue(fieldName, value, displayValue)</span>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The method <span class=\"keyword apiname\">setValue()</span> can cause a stack overflow when used in an\n          OnChange client script. This is because every time the value is set, it will register as a\n          change, which may re-trigger the OnChange client script. To prevent this, perform a check\n          that will validate that the new value will be different from the old value. For example,\n          before performing <samp class=\"ph codeph\">setValue(shortDesc, newValue.toUpperCase());</samp>, validate\n          that the short description is not already uppercase. This will prevent the client script\n          from applying the <span class=\"keyword apiname\">toUpperCase()</span> more than once.</div></p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"value","type":"String","description":"Value in the database."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.setValue('short_description', 'replace this with appropriate text');","description":"","output":""}]},{"name":"setValue","description":"Sets the value and display value of the specified field.<p>When defining a value in a choice list, be sure to use number value rather than the\n        label.</p><p>To improve performance by preventing a round trip when setting the value for a reference\n        field, use this method not <span class=\"keyword apiname\">setValue(fieldName, value)</span>. When setting\n        multiple reference values for a list collector field, arrays can be passed in the second and\n        third parameters.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The method <span class=\"keyword apiname\">setValue()</span> can cause a stack overflow when used in an\n          OnChange client script. This is because every time the value is set, it will register as a\n          change, which may re-trigger the OnChange client script. To prevent this, perform a check\n          that will validate that the new value will be different from the old value. For example,\n          before performing <samp class=\"ph codeph\">setValue(shortDesc, newValue.toUpperCase());</samp>, validate\n          that the short description is not already uppercase. This will prevent the client script\n          from applying the <span class=\"keyword apiname\">toUpperCase()</span> more than once.</div></p>","params":[{"name":"fieldName","type":"String","description":"Name of the field."},{"name":"value","type":"String","description":"System ID for the reference value in the database. Can be an array of system\n                IDs if the field is a glide-list."},{"name":"displayValue","type":"String","description":"Display name for the referenced value in the database. Can be an array of\n                display names if the field is a glide-list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.setValue('assigned_to', userSysID, userName);","description":"","output":""},{"code":"g_form.setValue('glide-list_field_name', sysIDArray, displayNameArray);","description":"","output":""}]},{"name":"setVisible","description":"Displays or hides the field.<p>On desktop UI, the space is left blank when hidden. On Mobile or Service Portal UI, the\n        space is filled in my other fields when hidden. This method cannot hide mandatory fields\n        with no value.</p><p>Use UI Policy rather than this method whenever possible.</p>","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"display","type":"Boolean","description":"When true displays the field. When false hides the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n   //If the page isn't loading\n   if (!isLoading) {\n      //If the new value isn't blank\n      if(newValue != '') {\n         g_form.setVisible('priority', false); \n      }\n      else\n         g_form.setVisible('priority', true); \n      }\n   }","description":"","output":""}]},{"name":"showErrorBox","description":"Displays an error message under the specified form field (either a control object or\n    the name of the field). If the control or field is currently off the screen, the form scrolls to\n    the control or field.<p>A global property (glide.ui.scroll_to_message_field) is available that controls automatic\n        message scrolling when the form field is off screen (scrolls the form to the control or\n        field). The <span class=\"keyword apiname\">showFieldMsg()</span> method is a similar method that requires a\n        type parameter.</p>","params":[{"name":"name","type":"String","description":"The name of the control or field."},{"name":"message","type":"String","description":"The message to be displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"showErrorBox","description":"Displays an error message under the specified form field (either a control object or\n    the name of the field). If the control or field is currently off the screen and the scrollForm\n    parameter is true, the form scrolls to the control or field.<p>A global property (glide.ui.scroll_to_message_field) is available that controls automatic\n        message scrolling when the form field is off screen (scrolls the form to the control or\n        field). The <span class=\"keyword apiname\">showFieldMsg()</span> method is a similar method that requires a\n        type parameter.</p>","params":[{"name":"name","type":"String","description":"Name of the field or control."},{"name":"message","type":"String","description":"Message to display."},{"name":"scrollForm","type":"Boolean","description":"When true scrolls the form to the field. When false the form does not scroll to\n                the field."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"showFieldMsg","description":"Displays either an informational or error message under the specified form field\n    (either a control object or the name of the field). If the control or field is off the screen,\n    the form is scrolled to the field.<p>A global property (glide.ui.scroll_to_message_field) is available that controls automatic\n        message scrolling when the form field is off screen (scrolls the form to the control or\n        field).</p><p>The <span class=\"keyword apiname\">showErrorBox()</span> method is a shorthand method that does not require\n        the type parameter.</p><p><span class=\"notetitle\">Note:</span> This method does not work with the <span class=\"keyword parmname\">journal_field</span> type field in\n        UI16.</p>","params":[{"name":"field","type":"String","description":"Name of the field or control."},{"name":"message","type":"String","description":"Message to display."},{"name":"type","type":"String","description":"\"error\",\"info\", or \"warning\"."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.showFieldMsg('impact','Low impact response time can be one week','info');","description":"","output":""}]},{"name":"showFieldMsg","description":"Displays either an informational or error message under the specified form field\n    (either a control object or the name of the field).  If the control or field is currently off\n    the screen and scrollForm is true, the form is scrolled to the field.<p>A global property (glide.ui.scroll_to_message_field) is available that controls automatic\n        message scrolling when the form field is off screen (scrolls the form to the control or\n        field).</p><p>The <span class=\"keyword apiname\">showErrorBox()</span> method is a shorthand method that does not require\n        the type parameter.</p><p><span class=\"notetitle\">Note:</span> This method does not work with the <span class=\"keyword parmname\">journal_field</span> type field in\n        UI16.</p>","params":[{"name":"field","type":"String","description":"Name of the field or control."},{"name":"message","type":"String","description":"Message to display."},{"name":"type","type":"String","description":"\"error\",\"info\", or \"warning\"."},{"name":"scrollForm","type":"Boolean","description":"When true, the form scrolls to the field if it is off screen. When false, the\n                form does not scroll."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_form.showFieldMsg('impact','Low impact not allowed with High priority','error',false);","description":"","output":""}]},{"name":"showRelatedList","description":"Displays the specified related list on the form.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[{"name":"listTableName","type":"String","description":"Name of the related list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"showRelatedLists","description":"Displays all the form's related lists.<p>This method is not available on the mobile platform. If this method is run on a mobile\n        platform, no action occurs.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"submit","description":"Saves the record.<p>The user is taken away from the form, returning them to where they were.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"submit","description":"Performs the UI action specified by the parameter.","params":[{"name":"verb","type":"String","description":"An action_name from a sys_ui_action record. The action name must be for a\n                visible form button."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideGuidV3":{"meta":{"has_constructor":false,"description":"You can create a globally unique identifier. You access the GlideGuidV3 methods using the g_guid global object.","example":""},"properties":{},"methods":[{"name":"generate","description":"Creates a globally unique identifier 32 characters long, or as specified with the\n    optional length argument.","params":[{"name":"stringLength","type":"Number","description":"The desired string length, must be between 1 and 32 inclusive. This parameter\n                is optional. If not specified, the returned string will be 32 characters\n                long."}],"returns":{"type":"String","description":"The globally unique identifier."},"example":[]}]},"GlideList2 (g_list)":{"meta":{"has_constructor":false,"description":"<span class=\"keyword apiname\">GlideList2</span> is a JavaScript class used to customize (v2)\n  lists. The variable <samp class=\"ph codeph\">g_list</samp> is  used to access a specified list object. The\n        <samp class=\"ph codeph\">g_list</samp> variable is not available to the related lists form link UI action.\n      It is available to the lists form link UI action.<br/><br/>These methods are used in UI Context Menus and UI Actions.","example":""},"properties":{},"methods":[{"name":"addFilter","description":"Adds a single term to the list query filter.","params":[{"name":"filter","type":"String","description":"Query string condition to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_list.addfilter(\"active=true\");","description":"","output":""}]},{"name":"get","description":"Returns the <span class=\"keyword apiname\">GlideList2</span> object for the list that contains the specified\n    item.","params":[{"name":"DOMelement","type":"Object","description":"The DOM element ID for the list for which you want the\n                  <span class=\"keyword apiname\">GlideList2</span> object."}],"returns":{"type":"Object","description":"The GlideList2 object or null if not found."},"example":[]},{"name":"get","description":"Returns the <span class=\"keyword apiname\">GlideList2</span> object for the list specified.","params":[{"name":"ListID","type":"String","description":"The list ID for which you want the <span class=\"keyword apiname\">GlideList2</span>\n                object."}],"returns":{"type":"Object","description":"The GlideList2 object or null if not found."},"example":[{"code":"function assignLabelActionViaLookupModal(tableName, listId) {\n\tvar list = GlideList2.get(listId);\n\tif (!list)\n\t\treturn;\n\n\tassignLabelViaLookup(tableName, sysIds, list.getView());\n}","description":"","output":""}]},{"name":"getChecked","description":"Returns a comma-separated list of the sys_ids for the items that are checked in the list.","params":[],"returns":{"type":"String","description":"Comma-separated list of the sys_ids for the items that are checked in the list. Does not\n                check to determine that the items returned are allowed to be executed."},"example":[{"code":"function removeLabelActionViaLookupModal(tableName, listId) {\n  var list = GlideList2.get(listId);\n  if (!list)\n    return;\n\n  var sysIds = list.getChecked();\n  if (!sysIds)\n    return;\n\n  removeLabelViaLookup(tableName, sysIds);\n}","description":"","output":""}]},{"name":"getFixedQuery","description":"Returns the sysparm_fixed query.<p>A fixed query is the part of the query that cannot be removed from the breadcrumb (i.e., it is\n        fixed for the user). It is specified by including a <span class=\"keyword parmname\">sysparm_fixed_query</span>\n        parameter for the application module.</p>","params":[],"returns":{"type":"String","description":"The fixed query string for the list."},"example":[{"code":"var list = GlideList2.get(container.readAttribute('list_id'));\nvar filter = this._getFilter(element);\nvar fixedQuery = list.getFixedQuery();\nif (fixedQuery)\n  filter = fixedQuery + \"^\" + filter;","description":"","output":""}]},{"name":"getGroupBy","description":"Returns the field or comma-separated list of fields that are used to group the list.","params":[],"returns":{"type":"String","description":"The field or comma-separated list of fields that are used to group the list."},"example":[{"code":"function runFilterV2Lists(name, filter) {\n  var list = GlideList2.get(name);\t\n    if (list) {\n      var groupBy = list.getGroupBy();\n      if (groupBy)  \n        filter += \"^\" + groupBy;\n\t\t\n        list.setFilterAndRefresh(filter);\n    }\n}","description":"","output":""}]},{"name":"getListName","description":"Returns the name of the list, which is usually the table name.","params":[],"returns":{"type":"String","description":"The list name (usually the table name)."},"example":[{"code":"var list = GlideList2.get(name);\t\nvar listName = list.getListName();\n","description":"","output":""}]},{"name":"getOrderBy","description":"Returns the first field used to order the list.","params":[],"returns":{"type":"String","description":"The field used for order, or a blank."},"example":[{"code":"var list = GlideList2.get(listId);\nif (!list)\n  return;\nvar orderBy = list.getOrderBy();","description":"","output":""}]},{"name":"getParentTable","description":"Returns the name of the parent table for a related list (the table associated with the form).","params":[],"returns":{"type":"String","description":"The parent table name."},"example":[{"code":"for (var id in GlideLists2) {\n  var list = GlideLists2[id];\n  if (list.getTableName() == listTableName &amp;&amp; list.getParentTable() == tableName)\n    return list.getContainer();\n}\n","description":"","output":""}]},{"name":"getQuery","description":"Returns the encoded query string for the list.","params":[{"name":"orderBy","type":"Boolean","description":"(Optional) If <span class=\"ph uicontrol\">true</span>, includes the orderBy in the encoded\n                query string."},{"name":"groupBy","type":"Boolean","description":"(Optional) If <span class=\"ph uicontrol\">true</span>, includes the groupBy in the encoded\n                query string."},{"name":"fixed","type":"Boolean","description":"(Optional) If <span class=\"ph uicontrol\">true</span>, includes fixed query in the encoded\n                query string."},{"name":"all","type":"Boolean","description":"(Optional) If <span class=\"ph uicontrol\">true</span>, includes orderBy, groupBy, and fixed\n                query."}],"returns":{"type":"String","description":"Encoded query string for the list."},"example":[{"code":"var list = GlideList2.get(this.listID);\nvar ajax = new GlideAjax(\"AJAXJellyRunner\", \"AJAXJellyRunner.do\");\n  ajax.addParam(\"sysparm_query_encoded\", list.getQuery({groupby: true, orderby: true}));\n  ajax.addParam(\"sysparm_table\", list.getTableName());\n  ajax.addParam(\"sysparm_view\", list.getView());","description":"","output":""}]},{"name":"getRelated","description":"Returns the related list field that associates the related list to the parent form.","params":[],"returns":{"type":"String","description":"Field that connects the list to the parent form."},"example":[{"code":"var list = GlideList2.get(name);\nvar related = list.getRelated();\nif (related) \n  ajax.addParam(\"sysparm_is_related_list\", \"true\");","description":"","output":""}]},{"name":"getTableName","description":"Returns the table name for the list.","params":[],"returns":{"type":"String","description":"Returns the table name for the list."},"example":[{"code":"GlideList2.getListsForTable = function(table) {\n    var lists = [];\n    for (var id in GlideLists2) {\n        var list = GlideLists2[id];\n        if (list.getTableName() == table)\n            lists.push(list);\n    }\n    return lists;\n}","description":"","output":""}]},{"name":"getTitle","description":"Returns the list title.","params":[],"returns":{"type":"String","description":"The list title."},"example":[{"code":"var list = GlideList2.get(name);\t\nvar listTitle = list.getTitle();\n","description":"","output":""}]},{"name":"getView","description":"Returns the view used to display the list.","params":[],"returns":{"type":"String","description":"The name of the view."},"example":[{"code":"function assignLabelActionViaLookupModal(tableName, listId) {\n\tvar list = GlideList2.get(listId);\n\tif (!list)\n\t\treturn;\n\n\tassignLabelViaLookup(tableName, sysIds, list.getView());\n}","description":"","output":""}]},{"name":"isUserList","description":"Returns <span class=\"ph uicontrol\">true</span> if the list has been personalized by the user by\n    choosing the list mechanic and changing the list layout.","params":[],"returns":{"type":"Boolean","description":"True if the list layout has been changed."},"example":[{"code":"var list = GlideList2.get(listId);\nif (!list)\n  return;\nif (list.isUserList())\n  var tableName = list.getTableName();","description":"","output":""}]},{"name":"refresh","description":"Refreshes the list.  The <span class=\"keyword parmname\">orderBy</span> part of the list filter is ignored\n    so that the list uses its natural ordering when it is refreshed.","params":[{"name":"firstRow","type":"Number","description":"(Optional) The first row to appear in the list. If not specified, the first row\n                of the current is used."},{"name":"additionalParms","type":"String","description":"(Optional) name-value pairs that are submitted with the list refresh\n                request."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$timeout(function() {\n  if (GlideList.lists) {\n    var list = GlideList.get(name);\n    if (list) {\n       if (sortBy) {\n         if (sortDirection == 'ASC')\n            list.sort(sortBy);\n         else\n            list.sortDescending(sortBy);\n         }  \n       list.refresh();\n     }\n   }\n}\t\t\t","description":"","output":""}]},{"name":"refreshWithOrderBy","description":"Refreshes the list. The <span class=\"keyword parmname\">orderBy</span> part of the list filter is included\n    if it is specified for the list.","params":[{"name":"firstRow","type":"Number","description":"(Optional) The first row to appear in the list."},{"name":"description","type":"String","description":"(Optional)  name=value pairs that are submitted with the list refresh request."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"ga.getXML(function(serverResponse) {\n  var response = serverResponse.responseXML.getElementsByTagName(\"response\")[0];\n  if (response) {\n    var list = GlideList2.getByName(\"backlog_stories\");\n    list.refreshWithOrderBy();\n    var status = response.getAttribute('status');\n    $j('html, body').animate({scrollTop: $j(\"#\"+data.record.sys_id).offset().top},500);\n    if (status == 'failure') {\n      alert('${gs.getMessage(\"Story cannot be created. Team is not associated with any project.\")}');\n    }\n  }\n}","description":"","output":""}]},{"name":"setFilter","description":"Sets the encoded query string for the list, ignoring the <span class=\"keyword parmname\">orderBy</span> and\n      <span class=\"keyword parmname\">groupBy</span> parts of the query string.","params":[{"name":"filter","type":"String","description":"Encoded query string."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"list = GlideList2.get($(side+\"ContentDivRelease\").select(\".list_div\")[0].getAttribute(\"id\"));\nif (list) {\n  list.setFilter(\"active=true\");\n  list.refresh(1);\n }","description":"","output":""}]},{"name":"setFilterAndRefresh","description":"Sets the encoded query string for the list, including the <span class=\"keyword parmname\">orderBy</span>\n    and <span class=\"keyword parmname\">groupBy</span> if specified, and then refreshes the list using the new\n    filter.","params":[{"name":"filter","type":"String","description":"Encoded query string."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function updateListFilter(projectID) {\n  var list = GlideList2.getByName(\"backlog_stories\");\n  var fixedQuery = $('hdn_additional_filters').value;\n  if(!projectID) {\n      list.setFilterAndRefresh(fixedQuery + \"^ORDERBYteam_index\");\n      list.setOrderBy(\"team_index\");\n  }\n}","description":"","output":""}]},{"name":"setFirstRow","description":"Sets the first row that appears in the list when the list is refreshed.","params":[{"name":"rowNum","type":"Number","description":"Row number of the first row to display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var nextRow = 0;\nvar rowsPerPage = 20;\nvar list = GlideList2.get(listId);\nif (!list)\n  return;\nlist.setFirstRow(nextRow);\nnextRow = nextRow + rowsPerPage;\n","description":"","output":""}]},{"name":"setGroupBy","description":"Sets the <span class=\"keyword parmname\">groupBy</span> criteria for the list, for a single field or\n    multiple fields.<p>For a single field, use field or groupByField. The groupBy prefix is optional. For multiple\n        fields, use <samp class=\"ph codeph\">field1^field2^field3</samp> or\n          <samp class=\"ph codeph\">groupByField1^groupByField2^groupByField3</samp>.</p>","params":[{"name":"groupBy","type":"String","description":"The <span class=\"keyword parmname\">groupBy</span> criteria for the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function runContextAction(listId) {\n  var g_list = GlideList2.get(listId);\n  g_list.setGroupBy('');\n  g_list.refresh(1);\n}","description":"","output":""}]},{"name":"setOrderBy","description":"Sets the <span class=\"keyword parmname\">orderBy</span> criteria for the list.<p>For a single order by field use <span class=\"keyword parmname\">orderBy</span> field or\n          <span class=\"keyword parmname\">orderByDescField</span>. For multiple fields, use\n          <samp class=\"ph codeph\">orderByField1^orderByField2^orderByField3</samp>. <span class=\"keyword parmname\">orderBy</span>\n        specifies ascending order and orderByDesc specifies descending. These prefix strings are\n        optional. If not specified <span class=\"keyword parmname\">orderBy</span> is assumed.</p>","params":[{"name":"orderBy","type":"String","description":"Single or multiple order by fields."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"updateOrderBy: function(orderBy){\n  var list = GlideList2.get(this.listID);\n  if (list)\n    list.setOrderBy(orderBy);\n};","description":"","output":""}]},{"name":"setRowsPerPage","description":"Sets the number of rows per page to display.","params":[{"name":"rows","type":"Number","description":"The number of rows to display"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"link: function(scope) {\n  var list = GlideList2.get(scope.listId);\n  list.setRowsPerPage(scope.maxRows);\n  list.setFilterAndRefresh(scope.tableQuery);\n}","description":"","output":""}]},{"name":"showHideGroups","description":"Shows or hides all the groups within the list and saves the current collapsed/expanded\n    state of the groups as a user preference.","params":[{"name":"showFlag","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, shows the groups within the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function showHideAllGroups(showFlag) {\n  var list = GlideList2.get(listId);\n  if (!list)\n    return;\n  list.showHideGroups(showFlag);\n}","description":"","output":""}]},{"name":"showHideList","description":"Displays or hides the list and saves the current collapsed/expanded state of the list as a user preference.","params":[{"name":"showFlag","type":"Boolean","description":"If <span class=\"ph uicontrol\">true</span>, displays the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"GlideList2.toggleAll = function(expandFlag) {\nfor (var id in GlideLists2) {\n  var list = GlideLists2[id];\nlist.showHideList(expandFlag);\n}","description":"","output":""}]},{"name":"sort","description":"Sorts the list in ascending order and saves the choice.","params":[{"name":"field","type":"String","description":"Specifies the field used to sort the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$timeout(function() {\n  if (GlideList.lists) {\n    var list = GlideList.get(name);\n    if (list) {\n       if (sortBy) {\n         if (sortDirection == 'ASC')\n            list.sort(sortBy);\n         else\n            list.sortDescending(sortBy);\n         }  \n       list.refresh();\n     }\n   }\n}","description":"","output":""}]},{"name":"sortDescending","description":"Sorts the list in descending order and saves the choice.","params":[{"name":"field","type":"String","description":"Specifies the field used to sort the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$timeout(function() {\n  if (GlideList.lists) {\n    var list = GlideList.get(name);\n    if (list) {\n       if (sortBy) {\n         if (sortDirection == 'ASC')\n            list.sort(sortBy);\n         else\n            list.sortDescending(sortBy);\n         }  \n       list.refresh();\n     }\n   }\n}","description":"","output":""}]},{"name":"toggleList","description":"Toggles the display of the list and saves the current collapsed/expanded state of the list as a user preference.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = GlideList2.get(listId);\nif (!list)\n  return;\nlist.toggleList();","description":"","output":""}]},{"name":"toggleListNoPref","description":"Toggles the display of the list but does not save the current collapsed/expanded state of the list as a user preference.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var list = GlideList2.get(listId);\nif (!list)\n  return;\nlist.toggleListNoPref();","description":"","output":""}]}]},"GlideListV3 (g_list)":{"meta":{"has_constructor":false,"description":"Use GlideListV3 to manipulate lists. You access the GlideListV3 methods by using the g_list global object. These methods are used in\n   UI context menus and UI actions. The g_list object is not available for related lists on the form\n   link UI action.","example":""},"properties":{},"methods":[{"name":"addFilter","description":"Adds a single term to the list query filter.","params":[{"name":"filter","type":"String","description":"Query string condition to add."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"get","description":"Returns the GlideList object for the specified DOM element.","params":[{"name":"DomElement","type":"Object","description":"The DOM element ID for which you want the GlideList object."}],"returns":{"type":"Object","description":"The GlideList object for the specified DOM element. Returns null if the DOM\n                element is not found."},"example":[]},{"name":"get","description":"Returns the GlideList object for specified list.","params":[{"name":"listId","type":"String","description":"The list name."}],"returns":{"type":"Object","description":"The GlideList object for the specified list, or null if not found."},"example":[]},{"name":"getChecked","description":"Returns a comma-separated list of sys_ids for checked items in the list. Does not\n    return items that are not allowed to be executed.","params":[],"returns":{"type":"String","description":"Comma-separated list of the sys_ids for checked items in the list. Does not\n                return items that are not allowed to be executed."},"example":[]},{"name":"getFixedQuery","description":"Returns the sysparm_fixed query.<p>The fixed query is the part of the query that cannot be removed from the breadcrumb (i.e.,\n        it is fixed for the user). It is specified by including a\n          <span class=\"keyword parmname\">sysparm_fixed_query</span> parameter for the application module.</p>","params":[],"returns":{"type":"String","description":"The fixed query string for the list."},"example":[]},{"name":"getFormTarget","description":"Returns the form's target attribute.","params":[],"returns":{"type":"String","description":"The form's target attribute."},"example":[]},{"name":"getGroupBy","description":"Returns the field or comma-separated list of fields that are used to group the\n    list.","params":[],"returns":{"type":"String","description":"The field or comma-separated list of fields used to group the list."},"example":[]},{"name":"getListName","description":"Returns the name of the list, which is usually the table name.","params":[],"returns":{"type":"String","description":"The list name."},"example":[]},{"name":"getOrderBy","description":"Returns the first field used to order the list.","params":[],"returns":{"type":"String","description":"The field used to order the list, or an empty string if the list is not\n                sorted."},"example":[]},{"name":"getParentTable","description":"Returns the name of the parent table (the table associated with the form).","params":[],"returns":{"type":"String","description":"The parent table name."},"example":[]},{"name":"getQuery","description":"Returns the encoded query string for the list.","params":[{"name":"options","type":"Object","description":"The options can be one or more of the following.<ul class=\"ul\" id=\"r_GLV3-getQuery_O__ul_b1q_zmy_pv\">\n                  <li class=\"li\">orderby - include ORDERBY in the query</li>\n\n                  <li class=\"li\">groupby - include GROUPBY in the query</li>\n\n                  <li class=\"li\">fixed - include sysparm_fixed_query in the query</li>\n\n                  <li class=\"li\">all - include all the options in the query</li>\n\n                </ul>"}],"returns":{"type":"String","description":"Encoded query string for the list."},"example":[]},{"name":"getReferringUrl","description":"Returns the referring URL.","params":[],"returns":{"type":"String","description":"Returns the parent form's URL, or '*' if there is no parent form."},"example":[]},{"name":"getRelated","description":"Returns the related list field that associates the related list to the parent\n    form.","params":[],"returns":{"type":"String","description":"Field that connects the list to the parent form."},"example":[]},{"name":"getRelatedListType","description":"Returns the related list type.","params":[],"returns":{"type":"String","description":"The relationship table type."},"example":[]},{"name":"getRelationshipId","description":"Returns the relationship record id, if this is type REL related list.","params":[],"returns":{"type":"String","description":"The sys_id of the relationship record."},"example":[]},{"name":"getRowCount","description":"Returns the number of rows returned by the query.","params":[],"returns":{"type":"Number","description":"The number of rows returned by the query."},"example":[]},{"name":"getRowsPerPage","description":"Returns the number of rows to be displayed on a page.","params":[],"returns":{"type":"Number","description":"The number of rows to be displayed on a page."},"example":[]},{"name":"getTableName","description":"Returns the table name of the list.","params":[],"returns":{"type":"String","description":"The list's table name."},"example":[]},{"name":"getTitle","description":"Returns the list title.","params":[],"returns":{"type":"String","description":"The list title."},"example":[]},{"name":"getView","description":"Returns the view used to display the list.","params":[],"returns":{"type":"String","description":"The name of the view"},"example":[]},{"name":"isUserList","description":"Returns true if the list has been personalized by the user.","params":[],"returns":{"type":"Boolean","description":"True if the list layout has changed."},"example":[]},{"name":"refresh","description":"Refreshes the list. The orderBy part of the list filter is ignored so that the list's\n    natural ordering is used.","params":[{"name":"firstRow","type":"Number","description":"(Optional) The first row to display in the list. If not specified, the list's\n                current first row is used."},{"name":"additionalParams","type":"Object","description":"(Optional) Name- value pairs that are submitted with the list refresh\n                request."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"refreshWithOrderBy","description":"Refreshes the list using the orderBy fields.","params":[{"name":"firstRow","type":"Number","description":"(Optional) The first row to display in the list. If not specified, the list's\n                current first row is used."},{"name":"additionalParams","type":"Object","description":"(Optional) Name- value pairs that are submitted with the list refresh\n                request."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setFilter","description":"Sets the encoded query string for the list ignoring the orderBy and groupBy parts of\n    the query string.","params":[{"name":"filter","type":"String","description":"An encoded query string."},{"name":"saveOrderBy","type":"Boolean","description":"The default is false. When true uses the orderBy part of the query."},{"name":"saveGroupBy","type":"Boolean","description":"The default is false. When true uses the groupBy part of the query."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setFilterAndRefresh","description":"Sets the encoded query string for the list, and then refreshes the list using the new\n    filter.<p>This preserves the groupby and orderby parameters.</p>","params":[{"name":"filter","type":"String","description":"Encoded query string."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setFirstRow","description":"Sets the first row to be displayed when the list is refreshed.","params":[{"name":"firstRow","type":"Number","description":"The row number in the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setFormTarget","description":"Specifies where to display the response from the form.","params":[{"name":"target","type":"String","description":"The form.target attribute value to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setGroupBy","description":"Sets the <span class=\"keyword parmname\">groupBy</span> criteria for the list, for a single field or\n    multiple fields.<p>For a single field, use field or groupByField. The groupBy prefix is optional. For multiple\n        fields use <samp class=\"ph codeph\">field1^field2^field3</samp> or\n          <samp class=\"ph codeph\">groupByField1^groupByField2^groupByField3</samp>.</p>","params":[{"name":"String","type":"groupBy","description":"The group by criteria for the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setOrderBy","description":"Sets the <span class=\"keyword parmname\">orderBy</span> criteria for the list.<p>For a single order by field use <span class=\"keyword parmname\">orderBy</span> field or\n          <span class=\"keyword parmname\">orderByDescField</span>. For multiple fields, use\n          <samp class=\"ph codeph\">orderByField1^orderByField2^orderByField3</samp>. <span class=\"keyword parmname\">orderBy</span>\n        specifies ascending order and orderByDesc specifies descending. These prefix strings are\n        optional. If not specified <span class=\"keyword parmname\">orderBy</span> is assumed.</p>","params":[{"name":"orderBy","type":"String","description":"Single or multiple order by fields."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setReferringUrl","description":"Sets the parent form referring url.","params":[{"name":"url","type":"String","description":"The parent form's URL"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setRowsPerPage","description":"Set the number of rows to display on a page.","params":[{"name":"numRows","type":"Number","description":"The number of rows to display on a page."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"showHideGroups","description":"Displays or hides all of the groups within the list and saves the current\n    collapsed/expanded state of the groups as a user preference.","params":[{"name":"showFlag","type":"Boolean","description":"When true, displays the groups within the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"showHideList","description":"Displays or hides the list and saves the current collapsed/expanded state of the list\n    as a user preference.","params":[{"name":"showFlag","type":"Boolean","description":"When true, displays the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"sort","description":"Sort the list in ascending order.","params":[{"name":"field","type":"String","description":"The field to be used to sort the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"sortDescending","description":"Sorts the list in descending order.","params":[{"name":"field","type":"String","description":"The field used to sort the list."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toggleList","description":"Toggles the list display between collapsed and expanded, and saves the state as a user\n    preference.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toggleListNoPref","description":"Toggles the list display between collapsed and expanded, but does not save the state as\n    a user preference.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideMenu (g_menu and g_item)":{"meta":{"has_constructor":false,"description":"GlideMenu methods are used in UI Context Menus, in the onShow scripts to customize UI\n  Context Menu items. There is no constructor for the GlideMenu class. Access GlideMenu methods using the g_menu\n   global object.<ul class=\"ul\" id=\"c_GlideMenuAPI__ul_thk_zzw_hv\">\n    <li class=\"li\">g_menu is the UI Context Menu that is about to be shown. The onShow script can make changes\n     to the appearance of the menu before it is displayed using these methods.</li>\n\n    <li class=\"li\">g_item is the current UI Context Menu item that is about to be shown. It is used in several\n     of the g_menu methods to specify an item.</li>\n\n   </ul>","example":""},"properties":{},"methods":[{"name":"clearImage","description":"Clears the image for an item.","params":[{"name":"item","type":"GlideMenuItem","description":"Specifies the item to have its image removed from display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.clearImage(g_item);","description":"","output":""}]},{"name":"clearSelected","description":"Clears any selection images from items in the menu.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getItem","description":"Returns a menu item by item ID.<p>It can be necessary to find an item in a menu so that it can be changed before being\n        displayed. Each menu item may be assigned a unique ID when the menu item is created (either\n        from a UI Context Menu entry or from the <span class=\"keyword apiname\">addAction()</span> method in the\n        Dynamic Script Action).</p>","params":[{"name":"itemID","type":"String","description":"Specifies the item to be returned."}],"returns":{"type":"GlideMenuItem","description":"The menu item"},"example":[]},{"name":"setDisabled","description":"Disables a menu item so that it cannot be selected. The disabled menu item is displayed\n    in a lighter color (grayed out) to indicate it is disabled.","params":[{"name":"item","type":"GlideMenuItem","description":"The item to be disabled."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.setDisabled(g_item);","description":"","output":""}]},{"name":"setEnabled","description":"Enables the specified menu item.","params":[{"name":"item","type":"GlideMenuItem","description":"The item to be enabled."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.setEnabled(g_item);","description":"","output":""}]},{"name":"setHidden","description":"Hides the specified menu item.<p>When hiding menu items, the separator bars are not adjusted, so it is possible to end up\n        with the menu showing two separators in a row.</p>","params":[{"name":"item","type":"GlideMenuItem","description":"The item to be hidden."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.setHidden(g_item);","description":"","output":""}]},{"name":"setImage","description":"Sets an image for an item.","params":[{"name":"item","type":"GlideMenuItem","description":"the item to have the image displayed."},{"name":"imgSrc","type":"String","description":"the image to attach to the menu item."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.setImage(g_item, 'images/checked.gifx');","description":"","output":""}]},{"name":"setLabel","description":"Sets the display label for a menu item. The label may contain HTML.","params":[{"name":"item","type":"GlideMenuItem","description":"the item to be labeled."},{"name":"label","type":"String","description":"the label to be displayed. The string may contain HTML."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.setLabel(g_item, \"This is a new label\");","description":"","output":""}]},{"name":"setVisible","description":"Displays the specified item.","params":[{"name":"item","type":"GlideMenuItem","description":"The item to be displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"g_menu.setVisible(g_item);","description":"","output":""}]}]},"GlideModalFormV3":{"meta":{"has_constructor":true,"description":"Displays a form in a GlideModal. General usage of the GlideModalForm class involves creating the object, setting any\n   preferences, and then rendering the\n   GlideModalForm.<pre ng-prism='' source='var d = new GlideModalForm(&#39;dialog title&#39;, &#39;table_name_or_form_name&#39;, [callback on completion of submit])\n         d.setPreference(&#39;name&#39;, &#39;value&#39;);\n         d.render();' class='language-javascript monospaceing'></pre><br/><br/>Specify the query parameters that are passed to the form using\n    <span class=\"keyword apiname\">setPreference()</span>.  Any name/value pair that you specify with\n    <span class=\"keyword apiname\">setPreference()</span> is sent along with the form POST request to display the form.<br/><br/>The GlideFormModal is set to fill the height of the document window.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideModalForm class.","params":[{"name":"title","type":"String","description":"The form title."},{"name":"tableName","type":"String","description":"The table being shown."},{"name":"onCompletionCallback","type":"Function","description":"The function to call after the form has been submitted and processed on the\n                server. The callback function has the form<samp class=\"ph codeph\"> callbackFunction(String\n                  action_verb, String sys_id, String table, String displayValue)</samp> where <ul class=\"ul\" id=\"r_GMFV3-GlideModalForm_S_S_F_B__ul_udl_4jy_kv\">\n                  <li class=\"li\">action_verb is the name of the UI action executed. Examples are sysverb_insert\n                    (Submit button),  sysverb_cancel, sysverb_save (Save button).</li>\n\n                  <li class=\"li\">sys_id is the sys_id of the affected record.</li>\n\n                  <li class=\"li\">table is the name of the table containing the record.</li>\n\n                  <li class=\"li\">displayValue </li>\n\n                </ul>"}],"returns":{"type":"","description":""},"example":[{"code":"var d = new GlideModalForm('dialog title', 'table_name_or_form_name', [callback on completion of submit])\n         d.setPreference('name', 'value');\n         d.render();","description":"","output":""}]},{"name":"addParm","description":"Sets the specified parameter to the specified value.","params":[{"name":"name","type":"String","description":"The parameter name."},{"name":"value","type":"String","description":"The parameter value."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"render","description":"Shows the form.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setCompletionCallback","description":"Sets the function to be called when the form has been successfully submitted and\n    processed by the server.<p>The callback function has the form <samp class=\"ph codeph\">callbackFunction(String action_verb, String\n          sys_id, String table, String displayValue)</samp> where <ul class=\"ul\" id=\"r_GMFV3-setCompletionCallback_F__ul_udl_4jy_kv\">\n          <li class=\"li\">action_verb is an action_name from a sys_ui_action record.</li>\n\n          <li class=\"li\">sys_id is the sys_id of the affected record.</li>\n\n          <li class=\"li\">table is the name of the table containing the record.</li>\n\n          <li class=\"li\">displayValue </li>\n\n        </ul></p>","params":[{"name":"callbackFunction","type":"Function","description":"The callback function to be called when the form has been successfully\n                processed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setOnloadCallback","description":"Sets the function to be called after the form has been loaded.","params":[{"name":"callbackFunction","type":"Function","description":"The function to be called after the form has been loaded. The callback function\n                has the form <samp class=\"ph codeph\">callBackFunction(GlideModalForm obj)</samp>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setSysID","description":"Sets the object's sys_id preference.","params":[{"name":"sys_id","type":"String","description":"The id preference. One of the query parameters passed to the form."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideModalV3":{"meta":{"has_constructor":true,"description":"Provides methods for displaying a content overlay. This is a fully-featured replacement for <span class=\"keyword apiname\">GlideWindow</span> and\n    <span class=\"keyword apiname\">GlideDialogWindow</span>.<div class=\"fig fignone\" id=\"c_GlideModalClientSideV3API__fig_khf_mxy_d2b\"><span class=\"figcap\">Figure 1. Example overlay</span>\n    \n    <img alt=\"Example overlay\" class=\"image-small-mid\" data-lightbox=\"app_store_clientside_api_reference_newyork_app-store_dev_portal_API_reference_Images_GlideModalV3-Client-example-overlay-dialog\" id=\"c_GlideModalClientSideV3API__image_lhf_mxy_d2b\" src=\"app_store_clientside_api_reference_newyork_app-store_dev_portal_API_reference_Images_GlideModalV3-Client-example-overlay-dialog.png\"/>\n   </div>","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideModalV3 class.","params":[{"name":"id","type":"String","description":"The UI page to load into the modal."},{"name":"readOnly","type":"Boolean","description":"When true, hides the close button."},{"name":"width","type":"Number","description":"The width in pixels."}],"returns":{"type":"","description":""},"example":[]},{"name":"get","description":"Get a GlideModal object by ID.","params":[{"name":"id","type":"String","description":"The element id of the GlideModal object."}],"returns":{"type":"GlideModal","description":"The object."},"example":[]},{"name":"getPreference","description":"Returns the value of the specified property.","params":[{"name":"name","type":"String","description":"The property name"}],"returns":{"type":"String","description":"The specified property's value"},"example":[{"code":"var gm = new GlideModal('UI_dialog_name');\n        //Sets the dialog title\n        gm.setTitle('Show title');  \t\t\t      \t\n        //returns the value of the title\n        var title = gm.getPreference('title');\n        gm.setWidth(550);\n        //Opens the dialog\n        gm.render(); \n      ","description":"","output":""}]},{"name":"render","description":"Renders the UI page in the modal.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gm = new GlideModal(\"UI_dialog_name\");\n        //Sets the dialog title\n        gm.setTitle('Show title');  \t\t\t      \t\n        gm.setWidth(550);\n        //Opens the dialog\n        gm.render(); \n      ","description":"","output":""}]},{"name":"renderWithContent","description":"Display a modal with the specified HTML content.<p>The <span class=\"keyword apiname\">renderWithContent()</span> method replaces the <span class=\"keyword apiname\">render()</span>\n        method, and does not request a UI page to render.</p>","params":[{"name":"html","type":"Object","description":"The HTML content to be shown in the modal."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"renderWithContent","description":"Display a modal with the specified HTML content.<p>The <span class=\"keyword apiname\">renderWithContent()</span> method replaces the <span class=\"keyword apiname\">render()</span>\n        method, and does not request a UI page to render.</p>","params":[{"name":"html","type":"String","description":"The HTML content to be shown in the modal."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setPreference","description":"Set a property that is read by the loaded UI page.","params":[{"name":"name","type":"String","description":"The property name"},{"name":"value","type":"String","description":"The property value"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gm = new GlideModal('UI_dialog_name');\n        //Sets the dialog title\n        gm.setTitle('Show title'); \n        gm.setPreference('table', 'task'); \t\t\t\n        gm.setPreference('name', 'value');        \t\n        //Opens the dialog\n        gm.render(); \n      ","description":"","output":""}]},{"name":"setPreferenceAndReload","description":"Set the properties and reload the modal.","params":[{"name":"properties","type":"Array","description":"An array of name-value pairs to be set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"setTitle","description":"Sets the title of the modal.","params":[{"name":"title","type":"String","description":"The title to be displayed"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gm = new GlideModal('UI_dialog_name');\n        //Sets the dialog title\n        gm.setTitle('Show title'); \n        gm.setPreference('name', 'value'); \t\t\t      \t        \n        //Opens the dialog\n        gm.render(); \n      ","description":"","output":""}]},{"name":"setWidth","description":"Set the width in pixels.<p>The modal is boxed into predefined system sizes.</p>","params":[{"name":"width","type":"Number","description":"The number of pixels."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gm = new GlideModal('UI_dialog_name');\n        //Sets the dialog title\n        gm.setTitle('Show title'); \n        gm.setPreference('name', 'value'); \t\t\t      \t\n        gm.setWidth(550);\n        //Opens the dialog\n        gm.render(); \n      ","description":"","output":""}]},{"name":"switchView","description":"Change the view and reload the modal.","params":[{"name":"newView","type":"String","description":"The view to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideNavigationV3":{"meta":{"has_constructor":false,"description":"Provides methods to control and refresh the navigator and main frame. The GlideNavigation methods are accessed using the g_navigation global object.","example":""},"properties":{},"methods":[{"name":"open","description":"Redirects to a new URL.","params":[{"name":"url","type":"String","description":"The URL to be loaded. It can be any URL supported by the browser."},{"name":"target","type":"String","description":"The frame to use. If omitted, opens in the current frame."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"openPopup","description":"Opens a popup window.<p>The features parameter is part of the DOM specification. The features are used and passed\n        through. See the <a class=\"extRef\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/open\" target=\"_blank\">Mozilla Developer Network</a> for more information on\n        the feature list.</p>","params":[{"name":"url","type":"String","description":"The URL to open."},{"name":"name","type":"String","description":"The window name"},{"name":"features","type":"String","description":"A comma separated list of features for the popup window."},{"name":"noStack","type":"Boolean","description":"True to append sysparm_stack=no to the url. This prevents weirdness when using\n                the form back button."}],"returns":{"type":"Window","description":"The instance of the new window."},"example":[]},{"name":"openRecord","description":"Redirects to a record. The record will be displayed in the navigator.","params":[{"name":"tableName","type":"String","description":"The name of the table containing the record to be displayed."},{"name":"sys_id","type":"String","description":"The sys_id of the record to be displayed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"refreshNavigator","description":"Refreshes the navigator display.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"reloadWindow","description":"Reloads the current frame.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideNotificationV3":{"meta":{"has_constructor":false,"description":"You can show messages over the page content. The GlideNotification method is accessed using the g_notification global object. List V3 must\n   be activated for the g_notification object to be available.","example":""},"properties":{},"methods":[{"name":"show","description":"Displays the specified string over the page content as the specified type of\n    message.","params":[{"name":"type","type":"String","description":"The type of message - error, warning, or info."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// Displays an info message at the top of the screen\nnowapi.g_notification.show(\"info\", \"The record has been updated\");\n\t \n// Displays an error message at the top of the screen\nnowapi.g_notification.show(\"error\", \"You need to provide notes!\");","description":"","output":""}]}]},"GlideRecord":{"meta":{"has_constructor":true,"description":"GlideRecord is used for database operations. The client-side GlideRecord API enables the\n  use of some GlideRecord functionality in client-side scripts, such as client scripts and UI policy\n  scripts. A GlideRecord contains both records and fields. Queries made with the client-side\n    <span class=\"keyword apiname\">GlideRecord</span> are executed on the server. Therefore, a request is made from the\n   client browser to obtain the record data.<br/><br/>The client-side <span class=\"keyword apiname\">GlideRecord</span> API is not supported in scoped applications.\n   Instead, create a script include and use the <span class=\"keyword apiname\">GlideAjax</span> API, or use the REST\n   APIs. In addition, the client-side <span class=\"keyword apiname\">GlideRecord</span> API applies ACLs based on the\n   credentials of the user executing the script. To execute the code on the server without ACLs, use\n   the <span class=\"keyword apiname\">GlideAJAX</span> API.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideRecord class for the specified table.","params":[{"name":"tableName","type":"String","description":"The table to be used."}],"returns":{"type":"","description":""},"example":[{"code":"var gr = new GlideRecord('incident');","description":"","output":""}]},{"name":"addOrderBy","description":"Adds a column to order by in the query.","params":[{"name":"column","type":"String","description":"The column by which to order the result set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addQuery","description":"Adds a filter to return records where the field meets the specified condition (field,\n    operator, value).<p>If you are familiar with SQL, this method is similar to the \"where\" clause. You can create\n        one or more queries for a single filter by calling this method multiple times. Once you\n        define all of the desired queries, call the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_GRCS-query_Function\" title=\"Runs the query against the table based on the addQuery() filter. This queries the GlideRecord table as well as any references of the table.\">GlideRecord - query(Function responseFunction)</a> to\n        execute the specified query clause (filter).</p><p>To create more complex queries, use the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_GRCS-setEncodedQuery\" title=\"Adds a specified encoded query string to the current query clause.\">setEncodedQuery()</a> method.</p>","params":[{"name":"name","type":"String","description":"Name of the field to check."},{"name":"operator","type":"Object","description":"Query operator. The available values are dependent on the data type of the\n                  <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_GRCS-addQuery_S_O_O__ul_qyb_rbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">&gt;</li>\n\n                    <li class=\"li\">&gt;=</li>\n\n                    <li class=\"li\">&lt;</li>\n\n                    <li class=\"li\">&lt;=</li>\n\n                  </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_GRCS-addQuery_S_O_O__ul_egz_vbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">IN</li>\n\n                    <li class=\"li\">NOT IN</li>\n\n                    <li class=\"li\">STARTSWITH</li>\n\n                    <li class=\"li\">ENDSWITH</li>\n\n                    <li class=\"li\">CONTAINS</li>\n\n                    <li class=\"li\">DOES NOT CONTAIN</li>\n\n                    <li class=\"li\">INSTANCEOF</li>\n\n                  </ul>\n</div>"},{"name":"value","type":"Object","description":"Value on which to query (not case-sensitive)."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.addQuery('priority', '&lt;=', 2); // Priority is 2 or higher and,\ngr.addQuery('short_description', 'CONTAINS', 'crash'); // Short description contains the word crash\ngr.query(response);\n \nfunction response(result) {\n    while(result.next()) {\n       // Print all INC with priority of 2 or higher AND short description contains \"crash\"\n        console.log(result.getValue('number')); \n    }\n}","description":" showing how to add multiple queries to a filter.","output":""},{"code":"var priorities = [4,2]; \nvar gr = new GlideRecord('incident'); \ngr.addQuery('priority', 'IN', priorities); \ngr.query(response); \n\nfunction response(result) {\n  while(result.next()) {\n    console.log(result.getValue('number')); \n  } \n}","description":" showing how to pass in an array to verify multiple conditions in a single\n        query.","output":""}]},{"name":"addQuery","description":"Adds a query to return records where the specified field name is equal to a specified\n    value (or is in a list of values).<p>If you are familiar with SQL, this method is similar to the \"where\" clause. You can create\n        one or more queries for a single filter by calling this method multiple times; for this\n        method the queries are AND'ed. Once you define all of the desired queries, call the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_GRCS-query_Function\" title=\"Runs the query against the table based on the addQuery() filter. This queries the GlideRecord table as well as any references of the table.\">GlideRecord - query(Function responseFunction)</a> to execute the specified query clause (filter).</p><p>To perform an operation other than AND, use either the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_GRCS-addQuery_S_O_O\" title=\"Adds a filter to return records where the field meets the specified condition (field, operator, value).\">addQuery(String name, Object operator, Object\n          value)</a> method or the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_GRCS-setEncodedQuery\" title=\"Adds a specified encoded query string to the current query clause.\">setEncodedQuery()</a> method.</p>","params":[{"name":"name","type":"String","description":"Name of the field to check."},{"name":"value","type":"Object","description":"Value on which to query."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.addQuery('priority', 4); // Priority is 4 – Low and,\ngr.addQuery('state', 3); // State is On Hold\ngr.query(response);\n \nfunction response(result) {\n    while(result.next()) {\n       // Print all INC with priority 4 – Low AND state is On Hold\n        console.log(result.getValue('number')); \n    }\n}","description":" showing multiple queries.","output":""},{"code":"var gr = new GlideRecord('incident');\ngr.addQuery('short_description', new String('USB device not working')); // string object\ngr.addQuery('priority', 4); //number\ngr.query(response);\n \nfunction response(result) {\n    while(result.next()) {\n       // Print all INC with priority 4 – Low AND short description contains 'USB device not working'\n        console.log(result.getValue('number')); \n    }\n}","description":" showing how to pass a string object.","output":""}]},{"name":"deleteRecord","description":"Deletes the current record.","params":[{"name":"responseFunction","type":"Function","description":"The response function for the Ajax callback."}],"returns":{"type":"Boolean","description":"True if the record was deleted. False if no record was found to delete."},"example":[]},{"name":"get","description":"Executes a GlideRecord query for a record with the specified sys_id. This method is\n    expected to be used to query for single records, so a next operation is performed before\n    returning.","params":[{"name":"sys_id","type":"Object","description":"The sys_id of the record to be found."}],"returns":{"type":"Boolean","description":"True if one or more matching records was found. False if no records were\n                found."},"example":[]},{"name":"getEncodedQuery","description":"Retrieves the query condition of the current result set as an encoded query\n    string.","params":[],"returns":{"type":"String","description":"The encoded query as a string."},"example":[]},{"name":"getLimit","description":"Returns the limit for records to be returned by the GlideRecord query.","params":[],"returns":{"type":"Number","description":"The limit for records to be returned by the GlideRecord query."},"example":[]},{"name":"getTableName","description":"Retrieves the name of the table associated with this GlideRecord.","params":[],"returns":{"type":"String","description":"The table name"},"example":[{"code":"var item = new GlideRecord('sc_request'); \nitem.addQuery('sys_id', current.request); \nitem.query(itemResponse); \n \nfunction itemResponse(item) {\n   alert('The table is ' + item.getTableName());\n}","description":"","output":""}]},{"name":"hasNext","description":"Determines if there are any more records in the GlideRecord.","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query set."},"example":[]},{"name":"insert","description":"Inserts a new record using the field values that have been set for the current\n    record.","params":[{"name":"responseFunction","type":"Function","description":"The response function."}],"returns":{"type":"String","description":"The sys_id of the inserted record, or null if the record was not\n                inserted."},"example":[{"code":"var gr = new GlideRecord('to_do');\ngr.initialize(); \ngr.name = 'first to do item'; \ngr.description = 'learn about GlideRecord'; \ngr.insert();","description":"","output":""}]},{"name":"next","description":"Moves to the next record in the GlideRecord.","params":[],"returns":{"type":"Boolean","description":"False if there are no more records in the query set."},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query(recResponse);\n \nfunction recResponse(rec) {\n  while (rec.next()) { \n    alert(rec.number + ' exists');\n  }\n}","description":"","output":""}]},{"name":"orderBy","description":"Specifies an orderBy column. May be called more than once to order by multiple\n    columns.","params":[{"name":"column","type":"String","description":"The column name to be used to order the result set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function UpdateProjectWBS(project) {\n  var count = 0;\n  var child = new GlideRecord('pm_project_task');\n  child.addQuery('parent', project.sys_id);\n  child.orderBy('order');\n  child.orderBy('number');\n  child.query(childResponse);\n  g_form.addInfoMessage(count + ' Project Tasks updated');\n}\n \nfunction childResponse(child) {\n  var len = child.getRowCount().toString().length;\n  var seq = 0;\n  while (child.next()) {\n    count += UpdateProjectTaskWBS(child, 1, ++seq, len, '');\n  }\n}","description":"","output":""}]},{"name":"query","description":"Runs the query against the table based on the addQuery() filter. This queries the\n    GlideRecord table as well as any references of the table.","params":[{"name":"responseFunction","type":"Function","description":"The response function for the Ajax callback."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var rec = new GlideRecord('incident');\nrec.query(recResponse);\n \nfunction recResponse(rec) {\n  while (rec.next()) { \n   alert(rec.number + ' exists');\n  } \n}","description":"","output":""}]},{"name":"setEncodedQuery","description":"Adds a specified encoded query string to the current query clause.<p>This method enables you to specify complex filters (encoded query strings) in a single\n        query call, unlike other client-side <span class=\"keyword apiname\">addQuery()</span> methods. Once you define\n        all of the desired queries, call the <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork#r_GRCS-query_Function\" title=\"Runs the query against the table based on the addQuery() filter. This queries the GlideRecord table as well as any references of the table.\">GlideRecord - query(Function responseFunction)</a> to execute\n        the specified query clause (filter). For additional information on encoded query strings,\n        refer to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">Encoded query strings</a>.</p><p>If you call this method multiple times before calling the query() method, the queries are\n        AND'ed together.</p>","params":[{"name":"encodedQuery","type":"String","description":"Encoded query string to add to the current query clause."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var gr = new GlideRecord('incident');\ngr.setEncodedQuery('priority=4^ORstate=3');\ngr.query(response);\n \nfunction response(result) {\n    while(result.next()) {\n        console.log(result.getValue('number'));\n    }\n}\n","description":"","output":""}]},{"name":"setLimit","description":"Sets the limit for how many records are in the GlideRecord.","params":[{"name":"maxQuery","type":"Number","description":"The limit for the number of records to retrieve."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideRecordV3":{"meta":{"has_constructor":true,"description":"GlideRecord is used for database operations. Client-side GlideRecord enables the use of\n  some GlideRecord functionality in client-side scripts, such as client scripts and UI policy\n  scripts. A GlideRecord contains both records and fields.<br/><br/>Queries made with the client-side GlideRecord are executed on the server. Therefore, a request\n   is made from the client browser to obtain the record data.<br/><br/>Client-side GlideRecord is not supported in scoped applications. Instead, create a script\n   include and use GlideAjax, or use the REST APIs.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideRecord class for the specified table.","params":[{"name":"tableName","type":"String","description":"The table to be used."}],"returns":{"type":"","description":""},"example":[{"code":"var gr = new GlideRecord('incident');","description":"","output":""}]},{"name":"addOrderBy","description":"Adds a column to order by in the query.","params":[{"name":"column","type":"String","description":"The column by which to order the result set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addQuery","description":"Adds a filter to return records where the field meets the specified condition (field,\n    operator, value).","params":[{"name":"fieldName","type":"String","description":"Name of the field to be checked."},{"name":"operator","type":"Object","description":"An operator for the query."},{"name":"value","type":"Object","description":"The value to use."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"addQuery","description":"Adds a filter to return records where the field is equal to the value (or is in a list\n    of values).","params":[{"name":"fieldName","type":"String","description":"Name of the field to be checked."},{"name":"value","type":"Object","description":"The value or list of values on which to query."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"deleteRecord","description":"Deletes the current record.","params":[{"name":"responseFunction","type":"Function","description":"The response function."}],"returns":{"type":"Boolean","description":"True if the record was deleted. False if no record was found to delete."},"example":[]},{"name":"get","description":"Get a record by sysID.","params":[{"name":"sysId","type":"String","description":"The sysID of the record for which to search."}],"returns":{"type":"Boolean","description":"True if one or more matching records was found. False if no records were\n                found."},"example":[]},{"name":"getEncodedQuery","description":"Retrieves all query conditions as an encoded query string.","params":[],"returns":{"type":"String","description":"An encoded query string containing all conditions that have been added to the\n                query."},"example":[]},{"name":"getTableName","description":"Gets the name of the table associated with the GlideRecord.","params":[],"returns":{"type":"String","description":"The table name."},"example":[]},{"name":"hasNext","description":"Determines if there are any more records in the GlideRecord.","params":[],"returns":{"type":"Boolean","description":"True if there are more records in the query set."},"example":[]},{"name":"insert","description":"Inserts a new record using the field values that have been set for the current\n    record.","params":[{"name":"responseFunction","type":"Function","description":"The response function."}],"returns":{"type":"String","description":"The sys_id of the inserted record, or null if the record was not\n                inserted."},"example":[]},{"name":"next","description":"Moves to the next record in the GlideRecord.","params":[],"returns":{"type":"Boolean","description":"False if there are no more records in the query set."},"example":[]},{"name":"orderBy","description":"Specifies an orderBy column. May be called more than once to order by multiple\n    columns.","params":[{"name":"column","type":"String","description":"The column to add to sort the result set."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"query","description":"Performs a query. Takes zero or more parameters. Parameters may be in any order. Any\n    function is considered to be a response function. Any pair of literals is considered a query\n    pair (field : value).<p>Do not make synchronous query calls. Performing a query without a response function makes\n        the call synchronous, which means that the display will wait for the query response before\n        continuing.</p>","params":[{"name":"responseFunction","type":"Function","description":"The function called when the query results are available. (optional)"},{"name":"name","type":"String","description":"A field name. (optional)"},{"name":"value","type":"String","description":"The field value to check for. (optional)"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"// synchronous, no response function, DO NOT USE\nquery(); \n// \n// asynchronous, calls the responseFunction when done \nquery(responseFunction) \n//\n// synchronous, adds \"category=hardware\" to current query conditions, and does a query, DO NOT USE\nquery('category', 'hardware') \n//\n//asynchronous, adds \"category=hardware\" to current query conditions, does a query, and calls responseFunction \nquery('category', 'hardware', responseFunction) ","description":"","output":""}]}]},"GlideUIScripts":{"meta":{"has_constructor":false,"description":"Access UI scripts from within client-side code. There is no constructor for this class. Access methods using the g_ui_scripts global object\n      in any client-side code, such as client or validation scripts.<br/><br/>If calling a UI script with UI Type set to Mobile / <span class=\"ph\">Service Portal</span>, use the\n        <samp class=\"ph codeph\">g_ui_scripts['nameOfScript'];</samp> syntax. If calling a UI script with the UI\n      Type set to All or Desktop, use the <span class=\"keyword apiname\">getUIScript()</span> method to load the\n      script. However, this method is not supported in Internet Explorer 11 when called outside of\n      the Angular application environment. If calling a UI script outside of an Angular context\n      using IE11, you must call the script directly.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> This class does not support UI scripts with the <span class=\"ph uicontrol\">Global</span> field set\n        to true.</div>","example":""},"properties":{},"methods":[{"name":"getUIScript","description":"Calls a UI script with the UI Type set to All or Desktop from a client script or other\n    client-side code. Returns a promise.<p>Use the <samp class=\"ph codeph\">then()</samp> function to perform an asynchronous action after the call\n        resolves.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported in Internet Explorer 11 when called outside of the\n          Angular application environment. If calling a UI script outside of an Angular context\n          using IE11, call the script directly using the\n            <samp class=\"ph codeph\">g_ui_scripts['nameOfScript'];</samp> syntax. </div></p>","params":[{"name":"scriptName","type":"String","description":"API name of the UI script to run."}],"returns":{"type":"Promise","description":"The result of the asynchronous call."},"example":[{"code":"function onLoad() {\n    //Call the UI script directly If the UI Type is Mobile / Service Portal, for example:\n    //g_ui_scripts['myUIScript'];\n\n    //Use the method if the UI Type is All or Desktop\n    g_ui_scripts.getUIScript('myUIScript').then(function(script) {\n        script.myUIScriptMethod();\n    }, function() {\n        console.log('The script did not load');\n    });\n}","description":"","output":""}]}]},"GlideURLV3":{"meta":{"has_constructor":true,"description":"Provides methods for manipulating a URI. The GlideURLV3 API can be used in client-side scripts using ListV2 and ListV3 APIs.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the GlideURL class.","params":[{"name":"contextPath","type":"String","description":"A relative path for the URL."}],"returns":{"type":"","description":""},"example":[]},{"name":"addParam","description":"Adds a query string name-value pair to the URL.","params":[{"name":"name","type":"String","description":"Name of the query string parameter."},{"name":"value","type":"String","description":"Query string value."}],"returns":{"type":"String","description":"The GlideURL"},"example":[{"code":"var gu = new GlideURL('incident.do');\nvar url = gu.addParam('sys_id', '-1');\n","description":"","output":""}]},{"name":"getURL","description":"Get the entire context path and query string parameters as a single URI.","params":[{"name":"additionalParams","type":"Object","description":"A name-value pair object that contains parameters that are added to this URL\n                request only. These additional parameters are not saved to the GlideURL\n                object."}],"returns":{"type":"String","description":"The GlideURL with the specified additional parameters added to the end."},"example":[]},{"name":"refresh","description":"Reloads the current page URL.<p>This refreshes the current page URL, not the URL set in the object.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"GlideUser":{"meta":{"has_constructor":false,"description":"The GlideUser API provides access to information about the current user and current user\n  roles. Using the GlideUser API avoids the need to use the slower GlideRecord queries to get user\n  information. The GlideUser methods and properties are accessed through a global object (g_user) that is only\n   available in client scripts. GlideUser <ul class=\"ul\" id=\"c_GlideUserAPI__ul_bqz_wch_vs\">\n    <li class=\"li\">contains name and role information about the current user.</li>\n\n    <li class=\"li\">is typically used in client scripts and UI policies but is also found in UI actions that run\n     on the client.</li>\n\n    <li class=\"li\">cannot be used in business rules or UI actions that run on the server.</li>\n\n    <li class=\"li\">avoids the need for GlideRecord queries to get user information.</li>\n\n   </ul><br/><br/>Session information about the current user and current user roles is contained in the client\n   (web browser). All GlideUser methods except <span class=\"keyword apiname\">getClientData()</span> access the session\n   information that is available by default. The <span class=\"keyword apiname\">getClientData()</span> method requires\n   setup on the server and use of <span class=\"keyword apiname\">putClientData()</span> to make session information\n   available.","example":""},"properties":{"firstName":{"description":"Returns the current user's first name.","type":"String"},"lastName":{"description":"The current user's last name.","type":"String"},"userID":{"description":"Returns the sys_id of the current user.","type":"String"},"userName":{"description":"This property is the current user's username, for example gsmith02. It is not the\n    user's name, for example George Smith.","type":"String"}},"methods":[{"name":"getClientData","description":"Returns a session client value previously set with <span class=\"keyword apiname\">putClientData()</span>.<p>Session client data is a set of named strings that may be setup on the server (using\n          <span class=\"keyword apiname\">putClientData()</span>) that then may be used by client scripts (using\n          <span class=\"keyword apiname\">getClientData()</span>).  Can be used during form load time to get information\n        that the client script needs to make decisions about the form, for example, which fields\n        should be visible.</p>","params":[{"name":"Key","type":"String","description":"Name of the client data to retrieve."}],"returns":{"type":"String","description":"Value of the client data."},"example":[{"code":"var loginLanguage = g_user.getClientData(\"loginlanguage\");","description":"","output":""}]},{"name":"getFullName","description":"Returns the first and last name of the current user.","params":[],"returns":{"type":"String","description":"The current user's full name."},"example":[{"code":"var formalName = g_user.getFullName();","description":"","output":""}]},{"name":"hasRole","description":"Returns true if the current user has the specified role or the admin role.","params":[{"name":"role","type":"String","description":"Role to check"},{"name":"includeDefaults","type":"Boolean","description":"(Optional) Flag that indicates whether to include default roles, such as\n                snc_internal and snc_external, in the request. For additional information on roles,\n                see <p class=\"p\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-customer-service-management/page/administer/contextual-security/concept/c_InternalAndExternalUsers.html\" target=\"_blank\">Explicit roles</a>.</p>\n<p class=\"p\">Default: false</p>"}],"returns":{"type":"Boolean","description":"Returns true if the current user has the specified role or the admin role;\n                otherwise returns false."},"example":[{"code":"var isInternal = g_user.hasRole('snc_internal', true);","description":"","output":""},{"code":"var isItil = g_user.hasRole('itil');","description":"","output":""}]},{"name":"hasRoleExactly","description":"Returns true only if the current user has the specified role.","params":[{"name":"role","type":"String","description":"Role to check"},{"name":"includeDefaults","type":"Boolean","description":"(Optional) Flag that indicates whether to include default roles, such as\n                snc_internal and snc_external, in the request. For additional information on roles,\n                see <p class=\"p\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-customer-service-management/page/administer/contextual-security/concept/c_InternalAndExternalUsers.html\" target=\"_blank\">Explicit roles</a>.</p>\n<p class=\"p\">Default: false</p>"}],"returns":{"type":"Boolean","description":"Returns true if the current user has the specified role."},"example":[{"code":"var isInternal = g_user.hasRoleExactly('snc_internal', true);","description":"","output":""},{"code":"var isItil = g_user.hasRoleExactly('itil');","description":"","output":""}]},{"name":"hasRoleFromList","description":"Returns true if the current user has at least one of the specified roles or has the\n    admin role.","params":[{"name":"roles","type":"String","description":"Comma-separated list of roles to check"},{"name":"includeDefaults","type":"Boolean","description":"(Optional) Flag that indicates whether to include default roles, such as\n                snc_internal and snc_external, in the request. For additional information on roles,\n                see <p class=\"p\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-customer-service-management/page/administer/contextual-security/concept/c_InternalAndExternalUsers.html\" target=\"_blank\">Explicit roles</a>.</p>\n<p class=\"p\">Default: false</p>"}],"returns":{"type":"Boolean","description":"Returns true if the current user has a role in the list or the admin\n                role."},"example":[{"code":"var isOK = g_user.hasRoleFromList(\"itil, maint\");","description":"","output":""},{"code":"var isOK = g_user.hasRoleFromList(\"itil, maint, snc_internal\", true);","description":"","output":""}]},{"name":"hasRoles","description":"Returns true if the current user has any role.","params":[{"name":"includeDefaults","type":"Boolean","description":"(Optional) Flag that indicates whether to include default roles, such as\n                snc_internal and snc_external, in the request. For additional information on roles,\n                see <p class=\"p\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-customer-service-management/page/administer/contextual-security/concept/c_InternalAndExternalUsers.html\" target=\"_blank\">Explicit roles</a>.</p>\n<p class=\"p\">Default: false</p>"}],"returns":{"type":"Boolean","description":"Returns true if the current user has at least one role."},"example":[{"code":"var yesRole = g_user.hasRoles();","description":"","output":""},{"code":"var yesRole = g_user.hasRoles(true);","description":"","output":""}]}]},"Guided Tours":{"meta":{"has_constructor":false,"description":"Provides methods for launching and stopping guided tours. This API includes methods used in <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/integrate/inbound-rest/reference/r_RESTAPIHTTPResponseCodes.html\" target=\"_blank\">Guided Tour Designer</a>.","example":""},"properties":{},"methods":[{"name":"applyListFilter","description":"Sets a function to retrieve filtered tour results when the\n      <samp class=\"ph codeph\">getAllTours()</samp> method is called.<p>Complete signature includes\n          <samp class=\"ph codeph\">top.NOW.guided_tours.api</samp> preceding the method name.</p>","params":[{"name":"filter_func","type":"Function","description":"Filter function that takes a single <samp class=\"ph codeph\">tour</samp> object from the\n                  <samp class=\"ph codeph\">tours[]</samp> array returned from <samp class=\"ph codeph\">getAllTours()</samp>\n                method."}],"returns":{"type":"None","description":" "},"example":[{"code":"//create a filter function\nvar filtFunction = function(tour) {\n   //only return those tours whose name starts with ‘my’\n   return tour.name.indexOf(‘my’) === 0);\n}\n\n//apply the filter \ntop.NOW.guided_tours.api.applyListFilter (filtFunction);\n\n//call the getAllTours method to observe the filtered tours\ntop.NOW.guided_tours.api.getAllTours (function(er, tours) {\n  if(!er) {\n    console.log(‘The filtered tours are: ‘);\n    console.log(tours);\n  }\n});\n","description":"The following example shows basic API usage.","output":""},{"code":"top.NOW.guided_tours.api.applyListFilter(function(tour) {\n       var options = (tour.options)? JSON.parse(tour.options): null;\n       return (options &amp;&amp; options.my_param) ? (options.my_param == my_value) : false;\n});","description":"The following example shows how to use the <samp class=\"ph codeph\">options</samp> field on the tour\n        object to add JSON with custom tour identifiers for reading and filtering tours inside the\n          <samp class=\"ph codeph\">filter_func()</samp> function.","output":""}]},{"name":"endTour","description":"Stops a currently playing tour. This method silently exits if no tours are\n    playing.<p>Complete signature includes\n          <samp class=\"ph codeph\">top.NOW.guided_tours.api</samp> preceding the method name.</p>","params":[],"returns":{"type":"Null","description":" "},"example":[{"code":"//create a callback function to end the tour if it starts correctly\nvar cbFunction = function(err) {\n\tif (err) {\n   console.log(‘Error Occurred’);\n}\n\telse {\n\t   // tour has started so we can call endTour\n\t   top.NOW.guided_tours.api.endTour();\n}\n}\n\n//calling the startTour method so that we can end the tour as soon as it starts\ntop.NOW.guided_tours.api.startTour('a297e04b732313007077edcc5ef6a780', 2, cbFunction);\n","description":"","output":""}]},{"name":"events.off","description":"Removes an existing event listener.<p>Complete signature includes\n          <samp class=\"ph codeph\">top.NOW.guided_tours.api</samp> preceding the method name.</p>","params":[{"name":"event_name","type":"String","description":"Event name to be removed from the listener.<div class=\"p\">Valid event names:<ul class=\"ul\" id=\"GT-events.off_S_F__ul_tn1_x4t_yhb\">\n                    <li class=\"li\">tourStarted</li>\n\n                    <li class=\"li\">tourEnded</li>\n\n                    <li class=\"li\">tourCompleted</li>\n\n                    <li class=\"li\">tourFailed</li>\n\n                    <li class=\"li\">tourAbandoned</li>\n\n                    <li class=\"li\">tourDismissed</li>\n\n                    <li class=\"li\">stepStarted</li>\n\n                  </ul>\n</div>"},{"name":"listener_function","type":"Function","description":"Optional. If provided, specified listener function is removed from remaining\n                event listeners attached with that event. If not provided, all listener functions\n                attached to that event are removed."}],"returns":{"type":"None","description":" "},"example":[{"code":"//create a callback function to handle the result of the api call\nvar eventListenerTourStarted = function() {\n   console.log(‘The tour has started’); \n}\nvar eventListenerTourEnded = function() {\n   console.log(‘The tour has ended’); \n}\n\n//attaching event listeners for tourStarted and tourEnded Events\ntop.NOW.guided_tours.events.on(‘tourStarted’,eventListenerTourStarted);\ntop.NOW.guided_tours.events.on(‘tourEnded’, eventListenerTourEnded);\n\n…\n//start a tour\ntop.NOW.guided_tours.api.startTour ('a297e04b732313007077edcc5ef6a780', 2, cbFunction);\n//As soon as the tour starts the eventListenerTourStarted gets fired\n…\ntop.NOW.guided_tours.api.endTour();\n// eventListenerTourEnded gets fired\n\n….\n\n//removing the event listeners top.NOW.guided_tours.events.off(‘tourStarted’,eventListenerTourStarted);\ntop.NOW.guided_tours.events.off(‘tourEnded’, eventListenerTourEnded);\n","description":"","output":""}]},{"name":"events.on","description":"Attaches an event listener to a guided tour event.<p>Complete signature includes\n          <samp class=\"ph codeph\">top.NOW.guided_tours.api</samp> preceding the method name.</p>","params":[{"name":"event_name","type":"String","description":"Event name to be attached to the listener.<div class=\"p\">Valid event names:<ul class=\"ul\" id=\"GT-events.on_S_F__ul_tn1_x4t_yhb\">\n                    <li class=\"li\">stepStarted</li>\n\n                    <li class=\"li\">tourStarted</li>\n\n                    <li class=\"li\">tourEnded</li>\n\n                    <li class=\"li\">tourCompleted</li>\n\n                    <li class=\"li\">tourFailed</li>\n\n                    <li class=\"li\">tourAbandoned</li>\n\n                    <li class=\"li\">tourDismissed</li>\n\n                  </ul>\n</div>"},{"name":"listener_function","type":"Function","description":"Listener to be added.<div class=\"p\">\n                  <div class=\"note note\"><span class=\"notetitle\">Note:</span> Clear any event listener after it solves its purpose.</div>\n\n                </div>"},{"name":"listener_function.obj","type":"Object","description":"Passed to <samp class=\"ph codeph\">listener_function()</samp> by each event in the following format:<div class=\"p\">\n                  <ul class=\"ul\" id=\"GT-events.on_S_F__ul_wsr_khs_g3b\">\n                    <li class=\"li\">For stepStarted events:\n                      <pre class=\"pre codeblock\">{tour: '&lt;tour_sys_id&gt;', step: step_num}</pre>\n</li>\n\n                    <li class=\"li\">For all other events:<pre class=\"pre codeblock\">{tour: '&lt;tour_sys_id&gt;'}</pre>\n</li>\n\n                  </ul>\n\n                </div>\n<div class=\"p\">JSON parameters:<ul class=\"ul\" id=\"GT-events.on_S_F__ul_qfx_nhs_g3b\">\n                    <li class=\"li\">tour_sys_id: String. Guided tour ID from the Guided Tours\n                      [sys_embedded_tour_guide] table</li>\n\n                    <li class=\"li\">step_num: Number. Value between 0 (first step) and <em class=\"ph i\">n</em> (final\n                      step)</li>\n\n                  </ul>\n</div>"}],"returns":{"type":"","description":""},"example":[{"code":"//create a callback function to handle the result of the api call\nvar eventListenerTourStarted = function() {\n   console.log(‘The tour has started’); \n}\nvar eventListenerTourEnded = function() {\n   console.log(‘The tour has ended’); \n}\n\n//attaching event listeners for tourStarted and tourEnded Events\ntop.NOW.guided_tours.events.on(‘tourStarted’,eventListenerTourStarted);\ntop.NOW.guided_tours.events.on(‘tourEnded’, eventListenerTourEnded);\n\n…\n//start a tour\ntop.NOW.guided_tours.api.startTour ('a297e04b732313007077edcc5ef6a780', 2, cbFunction);\n//As soon as the tour starts the eventListenerTourStarted gets fired\n…\ntop.NOW.guided_tours.api.endTour();\n// eventListenerTourEnded gets fired\n\n….\n\n//removing the event listeners top.NOW.guided_tours.events.off(‘tourStarted’,eventListenerTourStarted);\ntop.NOW.guided_tours.events.off(‘tourEnded’, eventListenerTourEnded);\n","description":"The following example shows basic API usage.","output":""},{"code":"top.NOW.guided_tours.events.on(\"tourStarted\", function (obj){console.log(obj);});","description":"The following example shows how to use the <samp class=\"ph codeph\">listener_function</samp> parameter\n        with <samp class=\"ph codeph\">obj</samp> as an argument.","output":""}]},{"name":"getAllTours","description":"Gets a list of tours on the current page from which this method is called. Because this\n    method is asynchronous, a callback function must be passed to determine operation success and\n    get a list of tours.<p>Complete signature includes\n          <samp class=\"ph codeph\">top.NOW.guided_tours.api</samp> preceding the method name.</p>","params":[{"name":"cb_function","type":"Function","description":"Callback function called by <samp class=\"ph codeph\">getAllTours()</samp> after attempt to\n                fetch all tours for the current page from which <samp class=\"ph codeph\">getAllTours()</samp>\n                method is called."},{"name":"cb_function.err","type":"Object","description":"Points to the error object if any occurred during the operation:<p class=\"p\"><samp class=\"ph codeph\">err\n                    = { success: false, message: 'string containing the error object'\n                  }</samp></p>\n<p class=\"p\">Null otherwise.</p>"},{"name":"cb_function.tours","type":"Array","description":"List of available tours for the page.<p class=\"p\">If no tours are present on the page,\n                    <samp class=\"ph codeph\">cb_function.tours</samp> returns undefined.</p>\n<p class=\"p\"><samp class=\"ph codeph\">if(!tours)\n                    console.log('No tour present')</samp></p>"}],"returns":{"type":"None","description":" "},"example":[{"code":"//create a callback function to handle the result of the API call\nvar cbFunction = function(err, tours) {\n\tif (err) {\n   console.log(‘Error Occurred’);\n}\n\telse {\n\t    if(!tours) console.log('No tour present')\n   else {\n      tours.forEach(function(t) {\n               console.log(t);\n             });\n          }\n}\n}\n//calling the getTours method\ntop.NOW.guided_tours.api.getAllTours(cbFunction);\n","description":"","output":""}]},{"name":"loadPlayer","description":"Loads the guided tours player on a page in which guided tours player is not present by\n    default.<p>Complete signature: <pre class=\"pre codeblock\">NOW.guided_tours.api.loadPlayer()</pre></p>","params":[],"returns":{"type":"None","description":" "},"example":[]},{"name":"startTour","description":"Starts a tour. Because this method is asynchronous, you must pass a callback function\n    to determine operation success.<p>Complete signature includes\n          <samp class=\"ph codeph\">top.NOW.guided_tours.api</samp> preceding the method name.</p>","params":[{"name":"tour_id","type":"String","description":"Sys ID of the tour from the Guided Tours [sys_embedded_tour_guide]\n                table."},{"name":"step_number","type":"Number","description":"Optional. Step at which to start the tour. If not provided (or step number is\n                0), tour starts from the beginning."},{"name":"cb_function","type":"Function","description":"Optional. Callback function called by <samp class=\"ph codeph\">startTour()</samp> method after\n                attempt to launch the tour."},{"name":"cb_function.err","type":"Object","description":"Points to the error object if any occurred during the operation:<p class=\"p\"><samp class=\"ph codeph\">err\n                    = { success: false, message: 'string containing the error object'\n                  }</samp></p>\n<p class=\"p\">Null otherwise.</p>"}],"returns":{"type":"None","description":" "},"example":[{"code":"//create a callback function to handle the result of the API call\nvar cbFunction = function(err) {\n\tif (err) {\n   console.log(‘Error Occurred’);\n}\n\telse {\n   console.log(‘The tour with tourid=%s was successfully launched’, tourId);\n}\n}\n\n//calling the startTour method\ntop.NOW.guided_tours.api.startTour('a297e04b732313007077edcc5ef6a780', 2, cbFunction);\n","description":"","output":""}]}]},"i18NV3":{"meta":{"has_constructor":false,"description":"Provides methods to get and format translated messages. The i18N methods are accessed using the g_i18n global object.","example":""},"properties":{},"methods":[{"name":"format","description":"Formats a string containing named tokens with values from a map.","params":[{"name":"message","type":"String","description":"The message to have the tokens added."},{"name":"map","type":"Object","description":"The map of name/value pairs to replace in the message."}],"returns":{"type":"String","description":"The formatted string"},"example":[{"code":"// Returns: \"The rich young ruler was very very rich\"\nnowapi.i18n.format(\"The {p1} {p2} {p3} was very very {p1}\",{p1: \"rich\", p2: \"young\", p3: \"ruler\"});","description":"","output":""}]},{"name":"getMessage","description":"Retrieves a translated message.<p>If the specified string exists in the database for the current language, then the\n        translated message is returned. If the specified string does not exist for the current\n        language, then the English version of the string is returned. If the string does not exist\n        at all in the database, then the ID itself is returned.</p>","params":[{"name":"msgKey","type":"String","description":"The message to be retrieved."},{"name":"callback","type":"Function","description":"The function to be called when the message has been retrieved. The callback\n                function has one argument, a string that is the translated message."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getMessages","description":"Retrieves a set of messages.<p>If the specified string exists in the database for the current language, then the\n        translated message is returned. If the specified string does not exist for the current\n        language, then the English version of the string is returned. If the string does not exist\n        at all in the database, then the ID itself is returned.</p>","params":[{"name":"msgKeys","type":"Array","description":"An array of keys specifying the messages to be retrieved."},{"name":"callback","type":"Function","description":"The function to be called when the messages have been retrieved. The callback\n                function has one argument, an object containing key-value pairs, where key is the\n                requested message key, and the value is the translated string."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"Mobile GlideForm (g_form)":{"meta":{"has_constructor":false,"description":"Mobile GlideForm (g_form) methods enable you to work with forms on the mobile\n    platform. Use these methods in any script that targets a mobile device.","example":""},"properties":{},"methods":[{"name":"addDecoration","description":"Adds a decorative icon next to a field.","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"icon","type":"String","description":"The font icon to show next to the field."},{"name":"text","type":"String","description":"The text title for the icon (used for screen readers)."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n      // if the caller_id field is not present, then we can't add an icon anywhere\n      if (!g_form.hasField('caller_id'))\n          return;\n      \n      if (!newValue)\n         return;\n      \n      g_form.getReference('caller_id', function(ref) {\n      g_form.removeDecoration('caller_id', 'icon-star', 'VIP');\n      \n      if (ref.getValue('vip') == 'true')\n           g_form.addDecoration('caller_id', 'icon-star', 'VIP');\t\t\t\n      });\n      }","description":"This example adds a VIP icon next to the caller.","output":""}]},{"name":"getLabel","description":"Gets the form label text.","params":[{"name":"fieldName","type":"String","description":"The field name."}],"returns":{"type":"String","description":"The label text."},"example":[{"code":"if (g_user.hasRole('itil')) {\n      var oldLabel = g_form.getLabel('comments');\n      g_form.setLabel('comments', oldLabel + ' (Customer visible)');\n      }","description":"","output":""}]},{"name":"hasField","description":"Determines if a field is present on the form.<p>Present means that it can be shown, not that it is visible.</p>","params":[{"name":"fieldName","type":"String","description":"The field to look for."}],"returns":{"type":"Boolean","description":"True if the field is present on the form; false, if it is not. On the form means that the\n                field is part of g_form. It could still be hidden, read-only, mandatory, or\n                invalid."},"example":[{"code":"if (g_form.hasField('assignment_group'))\n      g_form.setMandatory('assigned_to', true);\n    ","description":"This example makes the assigned_to field mandatory if the assignment_group field is on the form.","output":""}]},{"name":"removeDecoration","description":"Removes a decorative icon from next to a field.","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"icon","type":"String","description":"The icon to remove."},{"name":"text","type":"String","description":"The text title for the icon."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function onChange(control, oldValue, newValue, isLoading) {\n      // if the caller_id field is not present, then we can't add an icon anywhere\n      if (!g_form.hasField('caller_id'))\n           return;\n      \n      if (!newValue)\n           return;\n      \n      g_form.getReference('caller_id', function(ref) {\n           g_form.removeDecoration('caller_id', 'icon-star', 'VIP');\n      \n           if (ref.getValue('vip') == 'true')\n                g_form.addDecoration('caller_id', 'icon-star', 'VIP');\t\t\t\n      });\n      }","description":"","output":""}]},{"name":"setLabel","description":"Sets the form label text.","params":[{"name":"fieldName","type":"String","description":"The field name."},{"name":"label","type":"String","description":"The field label text."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"if (g_user.hasRole('itil')) {\n      var oldLabel = g_form.getLabel('comments');\n      g_form.setLabel('comments', oldLabel + ' (Customer visible)');\n      }","description":"This example changes the comments label.","output":""}]}]},"NotifyClient":{"meta":{"has_constructor":true,"description":"The NotifyClient API allows you use Notify telephony functionality, such as making and\n  receiving calls, from a web browser. Several NotifyClient methods take a callback function as a parameter. Because NotifyClient\n   calls are made asynchronously, these methods cannot return a value directly. Use the callback\n   function to parse the returned data, such as by assigning variables or making other API\n   calls.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Instantiates a new Notify WebRTC Client object.","params":[{"name":"initializeVendorClientLazily","type":"Boolean","description":"Flag that indicates whether to use the autoSelectVendorCallback function passed\n                in the <span class=\"keyword apiname\">setCallerId()</span> method to automatically set the caller's\n                associated vendor  (<span class=\"keyword parmname\">notifyConfig.vendor</span> does not need to be\n                defined in the constructor).<ul class=\"ul\" id=\"r_Notify2WebRTCClient-Client_Object__ul_nk1_swy_xfb\">\n                  <li class=\"li\">false: Default. Do not use the autoSelectVendorCallback function to set the\n                    caller's vendor. The vendor must be set in the constructor.</li>\n\n                  <li class=\"li\">true: Use the autoSelectVendorCallback function to define the vendor when the\n                    caller ID is set.</li>\n\n                </ul>"},{"name":"notifyConfig","type":"Object","description":"JSON object that contains the configuration settings for the Notify WebRTC\n                Client."},{"name":"notifyConfig.autoLoadScriptResources","type":"Boolean","description":"Flag that indicates how to load the core JS library needed by the vendor\n                  client.<ul class=\"ul\" id=\"r_Notify2WebRTCClient-Client_Object__ul_r5m_lmz_vfb\">\n                  <li class=\"li\">false: Default. Use vendor specific codes to load the required vendor JS\n                    library (enables backwards compatibility).</li>\n\n                  <li class=\"li\">true: Use notifyClient.js to load the core JS library.</li>\n\n                </ul>"},{"name":"notifyConfig.callerId","type":"Number","description":"Registered Notify number to use. Do not directly set this value. Use the method\n                  <span class=\"keyword apiname\">notifyClient.setCallerID()</span> to set this value."},{"name":"notifyConfig.forceRefreshToken","type":"Boolean","description":"Flag that indicates whether to auto-renew expired client tokens.<ul class=\"ul\" id=\"r_Notify2WebRTCClient-Client_Object__ul_isp_2nz_vfb\">\n                  <li class=\"li\">false: Do not automatically renew client tokens when they expire.</li>\n\n                  <li class=\"li\">true: Default. Automatically renew client tokens when they expire.</li>\n\n                </ul>"},{"name":"notifyConfig.skipParentId","type":"Boolean","description":"Flag that indicates whether to immediately invoke the onIncoming caller for\n                incoming calls.<ul class=\"ul\" id=\"r_Notify2WebRTCClient-Client_Object__ul_ldn_l4z_vfb\">\n                  <li class=\"li\">false: Default. Do not immediately invoke the onIncoming event handler.</li>\n\n                  <li class=\"li\">true: Immediately invoke the onIncoming event handler. By setting this flag,\n                    if there is another call, where the <samp class=\"ph codeph\">&lt;Dial&gt;&lt;Client&gt;</samp> Twiml\n                    caused the incoming call, then setting this flag causes the system to auto poll\n                    the backend. This auto poll obtains the parent notify_call reference.</li>\n\n                </ul>"},{"name":"notifyConfig.vendor","type":"Constant","description":"Vendor to which the caller belongs.<ul class=\"ul\" id=\"r_Notify2WebRTCClient-Client_Object__ul_p5j_ylz_vfb\">\n                  <li class=\"li\">SNC.Notify.Vendor.TWILIO_DIRECT</li>\n\n                  <li class=\"li\">SNC.Notify.Vendor.TWILIO (older, deprecated Twilio driver)</li>\n\n                </ul>"}],"returns":{"type":"","description":""},"example":[{"code":"jQuery(function () {\n\n  var notifyConfig = {\n    autoLoadScriptResources: true // This will take care of auto loading the JS resources needed by the client (if any)\n  };\n  var client = new SNC.Notify.Client(notifyConfig, true); // The second argument ensures that the proper vendor for the given number is auto determined\n  client.setCallerId('valid_notify_long_number', function () {\n    // This is called after the vendor has been determined.\n\n    if (!notifyConfig.vendor) // Means this number has no compatible vendor\n      return;\n\n    client.addEventListener(SNC.Notify.STD_EVENTS.ONLINE, function () {\n      // Ability to call is available\n    });\n    client.addEventListener(SNC.Notify.STD_EVENTS.OFFLINE, function () {\n      // Ability to call is _not_ available right now\n    });\n    client.addEventListener(SNC.Notify.STD_EVENTS.ERROR, function (msg, code) {\n      // Some error happened\n    });\n      //... register other event handlers here\n      //Show UI elements which can be used to invoke client.call() and other APIs\n    client.init(); // This is important to call this.\n    });\n});","description":"The following example shows how to create the NotifyClient constructor, register various\n        event listeners, and initialize the client driver.","output":""}]},{"name":"addEventListener","description":"Registers an event handler to listen for changes in a Notify client.<p>Using this method you can register multiple listeners. Each listener must be a separate\n        method call.</p>","params":[{"name":"event","type":"String","description":"Name of the event to listen for. <p class=\"p\">Instead of passing strings, use the\n                  constants defined in <samp class=\"ph codeph\">SNC.Notify.STD_EVENTS</samp>.</p>\n<ul class=\"ul\" id=\"NotifyClient-addEventListener_S_F__ul_dnl_vl4_3gb\">\n                  <li class=\"li\">CALL_START: call has started and is in progress.</li>\n\n                  <li class=\"li\">CALL_CANCEL: caller canceled the call.</li>\n\n                  <li class=\"li\">CALL_INIT: WebRTC connected to a call (incoming or outgoing).</li>\n\n                  <li class=\"li\">CALL_DISCONNECT: current call has been disconnected.</li>\n\n                  <li class=\"li\">ERROR: Error occurred. Parameters: <samp class=\"ph codeph\">message(string),\n                      errCode(string)</samp><ul class=\"ul\" id=\"NotifyClient-addEventListener_S_F__ul_tpd_1r4_3gb\">\n                      <li class=\"li\"><samp class=\"ph codeph\">message</samp>: error message to display.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">errCode</samp>: Optional. Associated error code.</li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">INCOMING_CALL: Call is coming in. Parameters: <samp class=\"ph codeph\">from(string),\n                      to(string), callId(string), parentId(string), sysId(string),\n                      isFromClient(boolean)</samp><ul class=\"ul\" id=\"NotifyClient-addEventListener_S_F__ul_mtl_2r4_3gb\">\n                      <li class=\"li\"><samp class=\"ph codeph\">from</samp>: caller's phone number.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">to</samp>: called phone number.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">callId</samp>: SID of the call.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">parentId</samp>: parent notify_call reference. If skipParentId\n                        is set to true, this parameter should not be passed.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">sysId</samp>: WebRTC-to-WebRTC calls only. Unique identifier\n                        (sys_id) of the caller.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">isFromClient</samp>: WebRTC-to-WebRTC calls only. Flag that\n                        indicates whether the call is from another WebRTC client.</li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">CALL_MUTE: client is muted.</li>\n\n                  <li class=\"li\">CALL_UNMUTE: client is unmuted.</li>\n\n                  <li class=\"li\">OFFLINE: WebRTC session is not active.</li>\n\n                  <li class=\"li\">ONLINE: WebRTC session is ready. Must be set after calling the init()\n                    method.</li>\n\n                </ul>"}],"returns":{"type":"Function","description":"Function to use to de-register a listener."},"example":[{"code":"jQuery(function () {\n\n  var notifyConfig = {\n    autoLoadScriptResources: true // This will take care of auto loading the JS resources needed by the client (if any)\n  };\n  var client = new SNC.Notify.Client(notifyConfig, true); // The second argument ensures that the proper client for the given number is auto determined\n  client.setCallerId('valid_notify_long_number', function () {\n    // This is called after the client has been determined.\n\n    if (!notifyConfig.vendor) // Means this number has no compatible client\n      return;\n\n    client.addEventListener(SNC.Notify.STD_EVENTS.ONLINE, function () {\n      // Ability to call is available\n    });\n    client.addEventListener(SNC.Notify.STD_EVENTS.OFFLINE, function () {\n      // Ability to call is _not_ available right now\n    });\n    client.addEventListener(SNC.Notify.STD_EVENTS.ERROR, function (msg, code) {\n      // Some error happened\n    });\n      //... register other event handlers here\n     \n    client.init(); // This is important to call this.\n    });\n});","description":"This example shows how to register multiple listeners.","output":""},{"code":"var dereg = notifyClient.addEventListener(SNC.Notify.STD_EVENTS.ONLINE, function () {\n ... \n }); \n dereg(); \n  // The event listener function is no longer triggered.","description":"This example shows how to de-register a listener.","output":""}]},{"name":"call","description":"Calls the specified phone number or the phone number associated with a specified\n    user.<p><span class=\"notetitle\">Note:</span> When checking the status of a call/connection, always compare against the constants\n        provided by <samp class=\"ph codeph\">SNC.Notify.Status</samp>.</p>","params":[{"name":"identifier","type":"Object","description":"JSON object that contains either a phone number to call or the sys_id of a\n                WebRTC user. Passing a user sys_id causes the call to be made through\n                browser-to-browser communication.<p class=\"p\">You can obtain the user sys_id from the Notify\n                  WebRTC Session table.</p>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> If you provide both a phone number and user sys_id,\n                  the method only uses the phone number.</div>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"notifyClient.call({\n    phoneNumber: \"+18001112223\"\n});","description":"This example demonstrates passing a phone number as the function parameter.","output":""},{"code":"notifyClient.call({\n    userId: \"6816f79cc0a8016401c5a33be04be441\"\n});","description":"This example demonstrates passing a user record sys_id as the function parameter.","output":""},{"code":"$j(\"#pickupCallBtn\").on(\"click\", function() {\n\tnotifyClient.hangupCall();\n});","description":"This example shows a button click handler.","output":""},{"code":"onConnect: function(status) {  \n  // webRTC receives a call connection event (incoming or outgoing).\n  if (status == SNC.Notify.Status.OPEN) {\n    setStatus(getTimeStamp() + \" -- Successfully established call\");\n    showHangupButton();\n  }\n},","description":"This example shows an event handler.","output":""}]},{"name":"destroy","description":"Kills the current Notify client, rendering it unusable.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"forwardCall","description":"Forwards an ongoing incoming or outgoing phone call to either a different phone number\n    or a different WebRTC client.","params":[{"name":"argument","type":"Object","description":"JSON object that contains the necessary information for forwarding the call to\n                either a phone number or a WebRTC client (user sys_id). You can obtain this sys_id\n                from the Notify WebRTC Session table."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var arg = {\n    type: \"number\",\n    id: \"+17012345678\",\n    dtmf: \"1234\"\n}\nclient.forwardCall(arg);","description":"This example demonstrates forwarding a call to a different phone number. The dtmf attribute\n        allows you to send DTMF dial tones to the receiving number.","output":""},{"code":"var arg = {\n    type: \"userId\",\n    id: \"6816f79cc0a8016401c5a33be04be441\"\n}\nclient.forwardCall(arg);","description":"This example demonstrates forwarding a call to a different Notify client.","output":""}]},{"name":"getAvailableClients","description":"Returns a list of clients available to accept calls.<p>This method excludes the current client from the list. The equivalent <a class=\"xref\" href=\"app.do#!/api_doc?v=newyork&amp;id=undefined\" title=\"Returns a list of client sessions that are available to receive calls.\">Notify-getAvailableClients()</a> method does not filter any user.</p>","params":[{"name":"callback","type":"Function","description":"Function to use to parse the list of clients. This function accepts a single\n                parameter, an array of JSON objects with the following\n                format:<pre class=\"pre codeblock\">[{\n    sys_id: \"...\",  // user's sys_id\n    name: \"...\" // user's name\n}]</pre>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getParentId","description":"Returns the parent call identifier for a specified call identifier, if one\n    exists.<p>Depending on the telephony provider, there may be a delay before the parent call identifier\n        is returned; therefore you must provide a callback function.</p>","params":[{"name":"callId","type":"String","description":"Unique identifier of the call for which to return the parent call\n                identifier."},{"name":"callback","type":"Function","description":"Function that obtains the JSON object that contains either the parent call\n                identifier or an error message if the identifier could not be obtained after several\n                tries."}],"returns":{"type":"String","description":"Parent call identifier."},"example":[{"code":"notifyClient.getParentId( callId, function(jsonObj) {} );","description":"This example shows how to use this method to obtain the parent call identifier.","output":""},{"code":"{\n\tparentId: \"xyz\",\n\terror: \"msg\"\n}","description":"This example shows the contents of the jsonObj parameter.","output":""}]},{"name":"getStatus","description":"Returns the normalized status of the current call.","params":[],"returns":{"type":"String","description":"Current status of the call. The values returned by the telephony provider API\n                are normalized by replacing the returned driver value with its equivalent value as\n                defined in SNC.Notify.Status."},"example":[{"code":"clientStatus = notifyClient.getStatus();","description":"This example shows how to obtain the status of the current Notify client.","output":""}]},{"name":"hangupCall","description":"End the current call.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$j(\"#pickupCallBtn\").on(\"click\", function() {\n    notifyClient.hangupCall();\n});","description":"This example how to hang up a call.","output":""}]},{"name":"init","description":"Initializes the client driver.<p>For example, when using the Twilio client, it invokes the method\n          <span class=\"keyword apiname\">Twilio.Device.setup()</span>. Call this method after the user has interacted\n        with the page. This initialization process is asynchronous, therefore, you must provide an\n        ONLINE event handler. This handler is called when the setup process is complete and the\n        system is ready to take or make calls.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$j(function() {\n  notifyClient = new SNC.Notify.Client( notifyConfig );\n  notifyClient.setCallerId( '+31858889170' );\n  notifyClient.init();\n});","description":"This example shows how to initialize the Notify client.","output":""}]},{"name":"mute","description":"Mute or unmute the current client.","params":[{"name":"muted","type":"Boolean","description":"Mutes or unmutes the current call.<ul class=\"ul\" id=\"r_Notify2WebRTCClient-mute_boolean__ul_wwg_ymh_wfb\">\n                  <li class=\"li\">false: (or any non-true value) unmutes the current call.</li>\n\n                  <li class=\"li\">true: mutes the current call.</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"notifyClient.mute( \"true\" );","description":"This example shows how to send mute the current call.","output":""}]},{"name":"pickupCall","description":"Answers and connects to an incoming call from a WebRTC client.<p>Call this method when there is a notification of an incoming call.</p>","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$j(\"#pickupCallBtn\").on(\"click\", function() {\n    notifyClient.pickupCall();\n});","description":"This example shows how to pickup a call.","output":""}]},{"name":"sendDtmf","description":"Send one or more DTMF-valid digits over the current call.","params":[{"name":"digits","type":"String","description":"One or more DTMF-valid digits."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"notifyClient.SendDtmf( \"1246AF\" ) {} );","description":"This example shows how to send DTMF signals to the current call.","output":""}]},{"name":"setCallerId","description":"Sets the caller ID for the current client session.<p>You can change or update the caller ID at any time however, the caller ID must belong to\n        the same vendor.</p>","params":[{"name":"value","type":"String","description":"Phone number to use to make and receive calls."},{"name":"autoSelectVendorCallback","type":"Function","description":"<strong class=\"ph b\">Optional.</strong><span class=\"keyword parmname\">initializeVendorClientLazily</span> must be set\n                to \"true\" in the constructor to use this function, otherwise an error is thrown.\n                  <p class=\"p\">Name of the callback function to call once the vendor is automatically set for\n                  the specified phone number. With this option, the vendor does not need to be\n                  specified in the constructor (<span class=\"keyword parmname\">notifyConfig.vendor</span>). Auto\n                  vendor selection is an asynchronous operation. Therefore, this callback is\n                  required to indicate when it is safe to call\n                    <span class=\"keyword apiname\">notifyConfig.init()</span>, as this method requires that the vendor\n                  be set before it is called. In addition, you must also check if\n                    <span class=\"keyword parmname\">notifyConfig.vendor</span> has been set in the callback to ensure\n                  that a vendor has been specified.</p>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"$j(function() {\n  notifyClient = new SNC.Notify.Client( notifyConfig );\n  notifyClient.setCallerId( '+31858889170' );\n  notifyClient.init();\n});","description":"This example shows how to set the caller ID. This example assumes that the vendor is set in\n        the constructor.","output":""}]},{"name":"setClientAvailable","description":"Sets the availability of an active WebRTC client agent.<p>This type of availability is different than an agent being in a call. In this case, an\n        active WebRTC client may be connected and not on a call, but may not want to receive\n        calls.</p><p>Calling this method updates the <span class=\"ph uicontrol\">Available</span> field value on the Notify\n        Client Connected Session [notify_client_session] record associated with this client session.\n        You can get a list of available clients using the <span class=\"keyword apiname\">getAvailableClients()</span>\n        method.</p>","params":[{"name":"available","type":"boolean","description":"Flag that indicates whether an active WebRTC client wants to receive calls.<ul class=\"ul\" id=\"r_NC-setClientAvailable_boolean__ul_fym_4vg_wfb\">\n                  <li class=\"li\">false: client does not want to receive calls.</li>\n\n                  <li class=\"li\">true: client does want to receive calls.</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"NotifyOnTaskClient":{"meta":{"has_constructor":false,"description":"The <span class=\"keyword apiname\">NotifyOnTaskClient</span> API provides methods for sending SMS messages\n    or starting/managing a conference call for various telephony service providers, such as Zoom and\n    WebEx. Any UI can consume the <span class=\"keyword apiname\">NotifyOnTaskClient</span> API by explicitly including the\n      NotifyOnTaskClient UI script.<br/><br/>Using the <span class=\"keyword apiname\">NotifyOnTaskClient</span> API you can:<br/><br/><ul class=\"ul\" id=\"NotifyOnTaskClient__ul_qvb_kqy_4hb\">\n        <li class=\"li\">Start a conference call</li>\n\n        <li class=\"li\">End a conference call</li>\n\n        <li class=\"li\">Add participants</li>\n\n        <li class=\"li\">Perform actions that are available through the telephony driver such as:<ul class=\"ul\" id=\"NotifyOnTaskClient__ul_e5f_pqy_4hb\">\n            <li class=\"li\">mute/unmute participants</li>\n\n            <li class=\"li\">remove participants from a conference call</li>\n\n            <li class=\"li\">add participants to a conference call</li>\n\n            <li class=\"li\">start a conference call</li>\n\n            <li class=\"li\">end a conference call</li>\n\n          </ul>\n</li>\n\n      </ul><br/><br/>The Notify (com.snc.notify) plugin requires a separate subscription. For additional\n      information on activating the Notify plugin, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/product/notify2/task/t_ActivateNotify.html\" target=\"_blank\">Activate Notify</a>.","example":""},"properties":{},"methods":[{"name":"addParticipants","description":"Adds the specified participants to a specified conference call.","params":[{"name":"data","type":"Object","description":"Object that describes the conference call."},{"name":"data.addToWorkNotes","type":"Boolean","description":"<span class=\"ph\">Flag that indicates whether to add information\n                about the participants that were included in the conference call in the work notes\n                field of the associated record.</span><p class=\"p\"><span class=\"ph\">For this functionality to work, you must also\n                  specify values in the <span class=\"keyword parmname\">data.table</span> and\n                    <span class=\"keyword parmname\">data.sysId</span> parameters. These parameters identify the record\n                  in which to add the work notes.</span></p>\n<p class=\"p\">Default: false</p>"},{"name":"data.confId","type":"String","description":"Required. <span class=\"ph\">Sys ID of the conference call. </span><span class=\"ph\">The conference Sys ID is located in the Notify\n                  Conference Call [notify_conference_call] table.</span>"},{"name":"data.items","type":"Array","description":"Required. <span class=\"ph\">Information for each participant to include in the\n                conference call.</span><p class=\"p\">Valid array values:</p>\n<ul class=\"ul\" id=\"NClient-addParticipants_O__ul_qzh_pqt_rhb\">\n                  <li class=\"li\"><span class=\"keyword parmname\">id</span>: User Sys ID; located in the User [sys_User]\n                    table.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">notifyParticipantId</span>: Participant Sys ID; located in the\n                    Notify Participant [notify_participant] table.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">phoneNumber</span>: Phone number of the participant. If this\n                    value is passed in conjunction with either the <span class=\"keyword parmname\">id</span> or\n                      <span class=\"keyword parmname\">notifyParticipantId</span>, this value supersedes the phone\n                    numbers in the user/participant record and is used to place the call.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">email</span>: email address of the participant.</li>\n\n                </ul>"},{"name":"data.message","type":"String","description":"<span class=\"ph\">Message that is read aloud when a user answers the call,\n                such as, \"P1 incident has been created please login to instance.\"</span>"},{"name":"data.serviceProvider","type":"String","description":"<span class=\"ph\">Required. Name of conference service provider,\n                such as Zoom or Webex.</span>"},{"name":"data.sysId","type":"String","description":"<span class=\"ph\">Sys ID of the source record to associate with the\n                conference call.</span><p class=\"p\"><span class=\"ph\">For example, if a conference call is held to discuss\n                  a specific incident or problem, put the Sys ID of the incident or problem record\n                  in this value. This Sys ID is stored in the Source column of the NotifyConference\n                  Call [notify_conference_call] table and can later be tracked. </span></p>\n<p class=\"p\"><span class=\"ph\">This parameter is used in conjunction with the\n                    <span class=\"keyword parmname\">data.Table</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                    <span class=\"keyword parmname\">allowMulticonference</span> parameters.</span></p>\n<p class=\"p\">You should configure this value when the conference call is initially\n                  created through a \"start\" action. If required, you can also set this value through\n                  this method.</p>"},{"name":"data.table","type":"String","description":"<span class=\"ph\">Table that contains the source record to associate with\n                the conference call. A source record can be any record, such as an \"incident\" or\n                \"problem\", that is the topic of discussion in the conference call. </span><p class=\"p\">This table name is stored in the Table column of the\n                NotifyConference Call [notify_conference_call] table and can be tracked. </p>\n<p class=\"p\">This parameter is used in conjunction with the\n                  <span class=\"keyword parmname\">data.sysId</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                  <span class=\"keyword parmname\">allowMulticonference</span> parameters. </p>\n<p class=\"p\">You should configure this value when the conference call is initially created\n                  through a \"start\" action. If required, you can also set this value through this\n                  method.</p>"}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NClient-addParticipants_O__d875e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NClient-addParticipants_O__d875e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NClient-addParticipants_O__d875e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-addParticipants_O__d875e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-addParticipants_O__d875e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"function addToConferenceCall() {\n    var data = NotifyOnTaskClient.getNotifyActionTemplate();\n    data.serviceProvider = 'Telephony'; // e.g 'Zoom', 'WebEx'\n    data.confId = 'Active conference sysId';\n    data.items.push({ id: 'userSysId' });\n    data.items.push({ phoneNumber: '+917799555331' });\n    data.items.push({ email: 'yln99518@gmail.com' });\n\n    NotifyOnTaskClient.addParticipants(data).then(function (result) {\n        var joinActionResult = result[0];\n        if(joinActionResult.status) {\n            joinActionResult.successMessages.forEach(function(msg) {\n                console.log(msg);\n            });\n            return;\n        }\n\n        joinActionResult.warnMessages.forEach(function(msg) {\n            console.warn(msg);\n        });\n        joinActionResult.errorMessages.forEach(function(msg) {\n            console.error(msg);\n        });\n    }, function (errMsg) {\n        console.log(errMsg);\n    });\n}","description":"","output":""}]},{"name":"doConferenceAction","description":"Performs the specified conference call action, such as starting/ending a conference\n    call or joining, removing, muting, or unmuting participants from a conference call.<p>You can start a new conference call and add participants within a single call to this\n        method or call the method multiple times to start the call and then manage participants\n        separately. In addition, through the passed in data object, you can configure the method\n          to:<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__ul_rqn_z2y_vhb\">\n          <li class=\"li\">Save pointers in the conference call record to the specific record (source record),\n            such as an incident or problem, that is the topic of discussion for the conference\n            call.</li>\n\n          <li class=\"li\">Allow/disallow multiple conference calls for a source record.</li>\n\n          <li class=\"li\">Automatically log the participants that were in the conference call in the\n              <span class=\"ph uicontrol\">Work notes</span> field of the source record.</li>\n\n          <li class=\"li\">Have a message read aloud when a participant answers an outgoing call from the\n            conference.</li>\n\n        </ul></p>","params":[{"name":"action","type":"String","description":"Defines the conference call action to perform.<div class=\"p\">The\n                following are the available conference call actions:<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e553\">\n                  <li class=\"li\">start: Starts the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">end: Terminates the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">join: Adds the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array to the conference call identified in <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiJoin: Adds the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array to the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">selfJoin: Adds the currently logged in user to the conference call (no entry\n                    in <span class=\"keyword parmname\">data.items</span> required.)</li>\n\n                  <li class=\"li\">kick: Removes the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array from the conference call identified in\n                    <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiKick: Removes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">mute: Mutes the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array on the conference call identified in <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiMute: Mutes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array on the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">unmute: Unmutes the participant specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiUnmute: Unmutes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                </ul>\n</div>"},{"name":"data","type":"Object","description":"Object that describes the conference call."},{"name":"data.addToWorkNotes","type":"Boolean","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e178\">Flag that indicates whether to add information\n                about the participants that were included in the conference call in the work notes\n                field of the associated record.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e182\">For this functionality to work, you must also\n                  specify values in the <span class=\"keyword parmname\">data.table</span> and\n                    <span class=\"keyword parmname\">data.sysId</span> parameters. These parameters identify the record\n                  in which to add the work notes.</span></p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e194\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>"},{"name":"data.allowMulticonference","type":"Boolean","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e220\">Flag that indicates whether to allow multiple\n                conference calls for a specific record at one time.</span>\n              <p class=\"p\" id=\"NClient-doConferenceAction_S_O__d875e223\">For this functionality to work, you must also specify values in the\n                  <span class=\"keyword parmname\">data.table</span> and <span class=\"keyword parmname\">data.sysId</span> parameters.\n                These parameters identify the record that is allowed to have multiple conference\n                calls.</p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e235\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.confId","type":"String","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e253\">Sys ID of the conference call. </span>\n              <p class=\"p\"><span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e257\">The conference Sys ID is located in the Notify\n                  Conference Call [notify_conference_call] table.</span></p>\n<p class=\"p\">Actions for which this\n                parameter is required:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e261\">\n                <li class=\"li\">end</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>\n<div class=\"p\">\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> Participant actions such as mute, unmute, and kick do not require this\n                  parameter to be set as the method obtains this information from the Notify\n                  Conference Call Participant [notify_participant] table.</div>\n\n              </div>"},{"name":"data.fromNumber","type":"String","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e293\">Service provider number to call into for the\n                conference call.</span>\n              <p class=\"p\" id=\"NClient-doConferenceAction_S_O__d875e296\">Locate this value in the Number or Phone number column of the Notify Phone Number\n                [notify_number] table.</p>\n<p class=\"p\">Actions for which this parameter is required:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e300\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.isNewConference","type":"Boolean","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e319\">Flag that indicates whether this is a new or an\n                existing conference call.</span>\n              <p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e324\">\n                <li class=\"li\">true: New conference call</li>\n\n                <li class=\"li\">false: Existing conference call</li>\n\n              </ul>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e336\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.message","type":"String","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e403\">Message that is read aloud when a user answers the call,\n                such as, \"P1 incident has been created please login to instance.\"</span>\n              <p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e408\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n              </ul>"},{"name":"data.items","type":"Array","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e354\">Information for each participant to include in the\n                conference call.</span>\n              <p class=\"p\">Valid array values:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e359\">\n                <li class=\"li\">id: Sys ID of user; located in the User [sys_User] table.<p class=\"p\">Valid actions: join,\n                    multiJoin, start</p>\n</li>\n\n                <li class=\"li\">notifyParticipantId: Sys ID of the Notify participant; located in the Notify\n                  Participant [notify_participant] table.<p class=\"p\">Valid actions: join, kick, multiJoin,\n                    mute, start, unmute</p>\n</li>\n\n                <li class=\"li\">phoneNumber: Phone number of the participant. If this value is passed in\n                  conjunction with either the <span class=\"keyword parmname\">id</span> or\n                  <span class=\"keyword parmname\"> notifyParticipantId</span>, this value supersedes\n                  the phone numbers in the user/participant record and is used to place the\n                    call.<p class=\"p\">Valid actions: join, multiJoin, start</p>\n</li>\n\n                <li class=\"li\">email: Email address of the participant.<p class=\"p\">Valid actions: join, multiJoin,\n                    start</p>\n</li>\n\n              </ul>"},{"name":"data.serviceProvider","type":"String","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e432\">Required. Name of conference service provider,\n                such as Zoom or Webex.</span>\n              <p class=\"p\">Actions for which this parameter is required:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e437\">\n                <li class=\"li\">all</li>\n\n              </ul>"},{"name":"data.sysId","type":"String","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e455\">Sys ID of the source record to associate with the\n                conference call.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e459\">For example, if a conference call is held to discuss\n                  a specific incident or problem, put the Sys ID of the incident or problem record\n                  in this value. This Sys ID is stored in the Source column of the NotifyConference\n                  Call [notify_conference_call] table and can later be tracked. </span></p>\n<p class=\"p\"><span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e462\">This parameter is used in conjunction with the\n                    <span class=\"keyword parmname\">data.Table</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                    <span class=\"keyword parmname\">allowMulticonference</span> parameters.</span></p>\n<p class=\"p\">Actions for\n                which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e475\">\n                <li class=\"li\">start</li>\n\n              </ul>"},{"name":"data.table","type":"String","description":"<span class=\"ph\" id=\"NClient-doConferenceAction_S_O__d875e493\">Table that contains the source record to associate with\n                the conference call. A source record can be any record, such as an \"incident\" or\n                \"problem\", that is the topic of discussion in the conference call. </span>\n              <p class=\"p\" id=\"NClient-doConferenceAction_S_O__d875e496\">This table name is stored in the Table column of the\n                NotifyConference Call [notify_conference_call] table and can be tracked. </p>\n<p class=\"p\" id=\"NClient-doConferenceAction_S_O__d875e498\">This parameter is used in conjunction with the\n                  <span class=\"keyword parmname\">data.sysId</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                  <span class=\"keyword parmname\">allowMulticonference</span> parameters. </p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e511\">\n                <li class=\"li\">start</li>\n\n              </ul>"}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-doConferenceAction_S_O__d875e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"\n/**\n * \n * @param {string} action - action to perform on the conference object or participant object\n * @param {Array} participants;\n */\nfunction doConferenceAction(action, participants) {\n    var data = NotifyOnTaskClient.getNotifyActionTemplate();\n    data.serviceProvider = 'Telephony'; // e.g 'Zoom', 'WebEx'\n    data.confId = 'Active conference sysId';\n    data.items = participants;\n\n    NotifyOnTaskClient.doConferenceAction(action, data).then(function (result) {\n        var kickActionResult = result[0];\n        if (kickActionResult.status)\n            console.log(action + ' succeeded');\n        else {\n            kickActionResult.warnMessages.forEach(function (msg) {\n                console.warn(msg);\n            });\n            kickActionResult.errorMessages.forEach(function (msg) {\n                console.error(msg);\n            });\n        }\n    }, function (errMsg) {\n            console.log(errMsg)\n    });\n}\n\n// kick participants\n\ndoConferenceAction('kick', [{notifyParticipantId: 'notifyParticipantSysId'}]);\n\n// kick multiple participants\n\ndoConferenceAction('multiKick',\n    [{notifyParticipantId: 'notifyParticipantSysId'},\n    {notifyParticipantId: 'notifyParticipantSysId'}]);\n\n// Mute participants\ndoConferenceAction('mute', [{notifyParticipantId: 'notifyParticipantSysId'}]);\ndoConferenceAction('mute', [{notifyParticipantId: 'notifyParticipantSysId'}]);\n\ndoConferenceAction('multiMute',\n    [{notifyParticipantId: 'notifyParticipantSysId'},\n    {notifyParticipantId: 'notifyParticipantSysId'}]);\n\n// self join to any confernece. \ndoConferenceAction('selfJoin', [{id: 'logged in userId'}]);\n","description":"The following example shows how to create a function to call doConferenceAction() to\n        manipulate the participants in a conference call by passing in the action and the\n        participants.","output":""}]},{"name":"endConference","description":"Terminates the specified conference call.","params":[{"name":"data","type":"Object","description":"Object that describes the conference call."},{"name":"data.confId","type":"String","description":"<span class=\"ph\">Sys ID of the conference call. </span>"},{"name":"data.serviceProvider","type":"String","description":"<span class=\"ph\">Required. Name of conference service provider,\n                such as Zoom or Webex.</span>"}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NClient-endConference_O__d875e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NClient-endConference_O__d875e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NClient-endConference_O__d875e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-endConference_O__d875e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-endConference_O__d875e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"function endConferenceCall() {\n    var data = NotifyOnTaskClient.getNotifyActionTemplate();\n    data.serviceProvider = 'Telephony'; // e.g 'Zoom', 'WebEx'\n    data.confId = 'Active conference sysId';\n\n    NotifyOnTaskClient.endConference(data).then(function (result) {\n        var endActionResult = result[0];\n        if (endActionResult.status)\n            console.log('Conference has been ended');\n        else {\n            endActionResult.warnMessages.forEach(function (msg) {\n                console.warn(msg);\n            });\n            endActionResult.errorMessages.forEach(function (msg) {\n                console.error(msg);\n            });\n        }\n    }, function (errMsg) {\n        console.log(errMsg);\n    });\n}","description":"","output":""}]},{"name":"getNotifyActionTemplate","description":"Returns a JSON data template to use with the <span class=\"keyword apiname\">doConferenceAction()</span>\n    method. Using this template automatically structures the data object so that you don't have to\n    manually create it.<p>Call this method prior to calling the <span class=\"keyword apiname\">doConferenceAction()</span> method. For\n        the desired conference call action, set the desired parameters within the template, and then\n        pass the template in the <span class=\"keyword apiname\">doConferenceAction()</span> call. For additional\n        information on the valid parameters for each action, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-application-development/page/app-store/dev_portal/API_reference/NotifyOnTaskClient/concept/NotifyOnTaskClient.html#NClient-doConferenceAction_S_O\" target=\"_blank\">doConferenceAction()</a>.</p><p><span class=\"notetitle\">Note:</span> This is a helper method. You can also manually construct this object and pass it into\n        the <span class=\"keyword apiname\">doConferenceAction()</span> method and have the same outcome.</p>","params":[],"returns":{"type":"data.addToWorkNotes","description":"<span class=\"ph\" id=\"NClient-getNotifyActionTemplate__d875e178\">Flag that indicates whether to add information\n                about the participants that were included in the conference call in the work notes\n                field of the associated record.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NClient-getNotifyActionTemplate__d875e182\">For this functionality to work, you must also\n                  specify values in the <span class=\"keyword parmname\">data.table</span> and\n                    <span class=\"keyword parmname\">data.sysId</span> parameters. These parameters identify the record\n                  in which to add the work notes.</span></p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NClient-getNotifyActionTemplate__d875e194\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>"},"example":[{"code":"\n/**\n * \n * @param {string} action - action to perform on the conference object or participant object\n * @param {Array} participants;\n */\nfunction doConferenceAction(action, participants) {\n    var data = NotifyOnTaskClient.getNotifyActionTemplate();\n    data.serviceProvider = 'Telephony'; // e.g 'Zoom', 'WebEx'\n    data.confId = 'Active conference sysId';\n    data.items = participants;\n\n    NotifyOnTaskClient.doConferenceAction(action, data).then(function (result) {\n        var kickActionResult = result[0];\n        if (kickActionResult.status)\n            console.log(action + ' succeeded');\n        else {\n            kickActionResult.warnMessages.forEach(function (msg) {\n                console.warn(msg);\n            });\n            kickActionResult.errorMessages.forEach(function (msg) {\n                console.error(msg);\n            });\n        }\n    }, function (errMsg) {\n            console.log(errMsg)\n    });\n}\n\n// kick participants\n\ndoConferenceAction('kick', [{notifyParticipantId: 'notifyParticipantSysId'}]);\n\n// kick multiple participants\n\ndoConferenceAction('multiKick',\n    [{notifyParticipantId: 'notifyParticipantSysId'},\n    {notifyParticipantId: 'notifyParticipantSysId'}]);\n\n// Mute participants\ndoConferenceAction('mute', [{notifyParticipantId: 'notifyParticipantSysId'}]);\ndoConferenceAction('mute', [{notifyParticipantId: 'notifyParticipantSysId'}]);\n\ndoConferenceAction('multiMute',\n    [{notifyParticipantId: 'notifyParticipantSysId'},\n    {notifyParticipantId: 'notifyParticipantSysId'}]);\n\n// self join to any confernece. \ndoConferenceAction('selfJoin', [{id: 'logged in userId'}]);\n","description":"The following example shows how to call getNotifyActionTemplate() to obtain the data\n        template necessary to define the actions for doConferenceAction().","output":""}]},{"name":"start","description":"Starts a new conference call.","params":[{"name":"data","type":"Object","description":"Object that describes the conference call."},{"name":"data.addToWorkNotes","type":"Boolean","description":"Optional.<span class=\"ph\">Flag that indicates whether to add information\n                about the participants that were included in the conference call in the work notes\n                field of the associated record.</span><p class=\"p\" id=\"NClient-start_O__data.addToWorkNotes2-p-NConf\">For this functionality to work, you must\n                  also specify values for the <span class=\"keyword parmname\">data.table</span> and\n                    <span class=\"keyword parmname\">data.sysId</span> parameters to identify the record in which to\n                  add the work notes.</p>\n<p class=\"p\">Default: false</p>"},{"name":"data.allowMulticonference","type":"Boolean","description":"Optional. <span class=\"ph\">Flag that indicates whether to allow multiple\n                conference calls for a specific record at one time.</span><p class=\"p\">For this functionality to work, you must also specify values in the\n                  <span class=\"keyword parmname\">data.table</span> and <span class=\"keyword parmname\">data.sysId</span> parameters.\n                These parameters identify the record that is allowed to have multiple conference\n                calls.</p>\n<p class=\"p\">Default: false</p>"},{"name":"data.fromNumber","type":"String","description":"Required. <span class=\"ph\">Service provider number to call into for the\n                conference call.</span><p class=\"p\">Locate this value in the Number or Phone number column of the Notify Phone Number\n                [notify_number] table.</p>"},{"name":"data.items","type":"Array","description":"Optional. <span class=\"ph\">Information for each participant to include in the\n                conference call.</span><p class=\"p\">Valid array values:</p>\n<ul class=\"ul\" id=\"NClient-start_O__ul_qzh_pqt_rhb\">\n                  <li class=\"li\"><span class=\"keyword parmname\">id</span>: User Sys ID; located in the User [sys_User]\n                    table.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">notifyParticipantId</span>: Participant Sys ID; located in the\n                    Notify Participant [notify_participant] table.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">phoneNumber</span>: Phone number of the participant. If this\n                    value is passed in conjunction with either the <span class=\"keyword parmname\">id</span>\n                      or<span class=\"keyword parmname\"> notifyParticipantId</span>, this value supersedes the phone\n                    numbers in the user/participant record and is used to place the call.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">email</span>: Email address of the participant.</li>\n\n                </ul>"},{"name":"data.message","type":"String","description":"Optional. <span class=\"ph\">Message that is read aloud when a user answers the call,\n                such as, \"P1 incident has been created please login to instance.\"</span>"},{"name":"data.serviceProvider","type":"String","description":"<span class=\"ph\">Required. Name of conference service provider,\n                such as Zoom or Webex.</span>"},{"name":"data.sysId","type":"String","description":"Optional. <span class=\"ph\">Sys ID of the source record to associate with the\n                conference call.</span><p class=\"p\"><span class=\"ph\">For example, if a conference call is held to discuss\n                  a specific incident or problem, put the Sys ID of the incident or problem record\n                  in this value. This Sys ID is stored in the Source column of the NotifyConference\n                  Call [notify_conference_call] table and can later be tracked. </span></p>\n<p class=\"p\"><span class=\"ph\">This parameter is used in conjunction with the\n                    <span class=\"keyword parmname\">data.Table</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                    <span class=\"keyword parmname\">allowMulticonference</span> parameters.</span></p>"},{"name":"data.table","type":"String","description":"Optional. <span class=\"ph\">Table that contains the source record to associate with\n                the conference call. A source record can be any record, such as an \"incident\" or\n                \"problem\", that is the topic of discussion in the conference call. </span><p class=\"p\">This table name is stored in the Table column of the\n                NotifyConference Call [notify_conference_call] table and can be tracked. </p>\n<p class=\"p\">This parameter is used in conjunction with the\n                  <span class=\"keyword parmname\">data.sysId</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                  <span class=\"keyword parmname\">allowMulticonference</span> parameters. </p>"}],"returns":{"type":"Object","description":"Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NClient-start_O__d875e67\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NClient-start_O__d875e74\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NClient-start_O__d875e90\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-start_O__d875e103\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NClient-start_O__d875e116\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"},"example":[{"code":"function startConferenceCall() {\n    var data = NotifyOnTaskClient.getNotifyActionTemplate();\n    data.table = 'incident';\n    data.sysId = '1234';\n    data.serviceProvider = serviceProvider;\n    data.addToWorkNotes = true;\n    data.fromNumber = 'Telephony Number';\n    data.items.push({ id: 'userSysId' });\n    data.items.push({ phoneNumber: '+917799555332' });\n    data.items.push({ email: 'yln99517@gmail.com' });\n\n    NotifyOnTaskClient.start(data).then(function (result) {\n        var startActionResult = result[0];\n        if(startActionResult.status) {\n            startActionResult.successMessages.forEach(function(msg) {\n                console.log(msg);\n            });\n            return;\n        }\n\n        startActionResult.warnMessages.forEach(function(msg) {\n            console.warn(msg);\n        });\n        startActionResult.errorMessages.forEach(function(msg) {\n            console.error(msg);\n        });\n    }, function (errMsg) {\n        console.log(errMsg);\n    });\n}","description":"","output":""}]}]},"openFrameAPI":{"meta":{"has_constructor":false,"description":"OpenFrame is an omni-present frame that communication partners can use to integrate\n  their systems into the <span class=\"ph\">ServiceNow</span> platform. One of the core requirements is the ability to connect and serve code from different domains\n   that can connect seamlessly with partner subsystems. This cross domain connection is required to\n   keep connections and callbacks registered into communication systems without any cross domain\n   issues.<br/><br/>OpenFrame has two significant parts: one that lives in the <span class=\"ph\">ServiceNow</span> application (referred to\n      as TopFrame) and this API that is sourced from the partner application. This API has the\n      necessary methods to communicate with TopFrame and control the visual features of the\n        OpenFrame.<div class=\"note note\"><span class=\"notetitle\">Note:</span> To stay current with reference to the OpenFrame library, use the following\n        resource URI: <span class=\"ph filepath\">https://[servicenow\n          instance]/scripts/openframe/latest/openFrameAPI.min.js</span>.</div><br/><br/><h2 class=\"title sectiontitle\">APIs not supported on Agent Workspace</h2>\n      \n      <div class=\"p\">The following functionalities are not supported on Agent Workspace:<ul class=\"ul\" id=\"c_openFrameAPI__ul_b1k_3qx_zdb\">\n          <li class=\"li\">openServiceNowList</li>\n\n          <li class=\"li\">OpenCustomURL</li>\n\n        </ul>\n</div>","example":""},"properties":{},"methods":[{"name":"hide","description":"Hides the OpenFrame in the TopFrame.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.hide()","description":"","output":""}]},{"name":"init","description":"Initialize OpenFrame, must be the first method called.<p>This method initializes communication to TopFrame and initializes any visual elements\n        passed in the config parameter.</p>","params":[{"name":"config","type":"Object","description":"An object of key value pairs. The possible keys are height, width, title,\n                subTitle, and titleIcon. All keys are optional."},{"name":"successCallback","type":"function","description":"The callback function used if the <span class=\"keyword apiname\">init</span> method succeeds. The\n                openframe configuration stored in the system is passed as a parameter to the\n                callback function."},{"name":"failureCallback","type":"function","description":"The callback function used if the <span class=\"keyword apiname\">init</span> method fails."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"var config = {\nheight: 300,\nwidth: 200\n}\nfunction handleCommunicationEvent(context) {\nconsole.log(\"Communication from Topframe\", context);\n}\nfunction initSuccess(snConfig) {\nconsole.log(\"openframe configuration\",snConfig);\n//register for communication event from TopFrame\nopenFrameAPI.subscribe(openFrameAPI.EVENTS.COMMUNICATION_EVENT,\nhandleCommunicationEvent);\n}\nfunction initFailure(error) {\nconsole.log(\"OpenFrame init failed..\", error);\n}\nopenFrameAPI.init(config, initSuccess, initFailure);","description":"","output":""}]},{"name":"isVisible","description":"Checks to see if the OpenFrame is visible in the TopFrame.","params":[{"name":"callback","type":"function","description":"The callback function receives a parameter with a value of true or false. True\n                if OpenFrame is visible and false if not visible."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function callback(isVisible) {\nconsole.log(isVisible)\n}\nopenFrameAPI.isVisible(callback)","description":"","output":""}]},{"name":"openCustomURL","description":"Opens a custom URL in TopFrame.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This API is not supported on Agent Workspace. </div></p>","params":[{"name":"Url","type":"String","description":"A string of 2083 or fewer characters."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.openCustomURL('10_cool_things.do');\n","description":"","output":""}]},{"name":"openServiceNowForm","description":"Opens a form URL.<p>When an agent receives an incoming call, the OpenFrame window displays information such as\n        the account, contact, or consumer. Clicking a link in the OpenFrame window displays the\n        corresponding record. <ul class=\"ul\" id=\"r_openFrame-openServiceNowForm_Object__ul_mwy_4nc_lhb\">\n          <li class=\"li\">In the platform interface, this API opens a form URL in TopFrame. </li>\n\n          <li class=\"li\">For <span class=\"ph\">Agent Workspace</span>, this\n            API supports interaction tab management. In <span class=\"ph\">Agent Workspace</span>, an\n            interaction record opens in a parent tab and the specified entity record opens in a\n            child tab under the interaction tab.</li>\n\n        </ul></p>","params":[{"name":"details","type":"Object","description":"Key-value pairs that identify the form URL to open."},{"name":"details.entity","type":"String","description":"Table or entity name."},{"name":"details.query","type":"String","description":"Query to identify the record to open, such as:\n                  <samp class=\"ph codeph\">query:'sys_id=&lt;record_sys_id&gt;'</samp>."},{"name":"details.interaction_sys_id","type":"String","description":"Optional. Sys ID of the interaction record to open as parent tab in <span class=\"ph\">Agent Workspace</span>.<div class=\"note note\"><span class=\"notetitle\">Note:</span> In\n                  the platform interface the <span class=\"keyword parmname\">interaction_sys_id</span> is ignored.\n                </div>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.openServiceNowForm({entity:'customer_account', \nquery:'sys_id=447832786f0331003b3c498f5d3ee452', 'interaction_sys_id':'3be092313b711300758ce9b534efc4dd'});","description":"The following example shows basic usage in platform:","output":""},{"code":"openFrameAPI.openServiceNowForm({ entity: 'sys_user', \nquery: 'sys_id=-1&amp;sysparm_query=first_name=Ivan' });","description":"The following example shows how to use the <samp class=\"ph codeph\">query</samp> parameter to create a new\n        record with a populated <span class=\"ph uicontrol\">Name</span> field in Workspace:","output":""}]},{"name":"openServiceNowList","description":"Opens a list URL in TopFrame.<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This API is not supported on Agent Workspace. </div></p>","params":[{"name":"details","type":"Object","description":"An object of key value pairs. The possible keys are <ul class=\"ul\" id=\"r_openFrameAPI-openServiceNowList_Object__ul_ndm_fxd_lt\">\n                  <li class=\"li\">entity, the table name</li>\n\n                  <li class=\"li\">query, an encoded query string</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.openServiceNowList({entity:'case', query:'active=true'});","description":"","output":""}]},{"name":"setFrameMode","description":"Sets the OpenFrame mode.<p>The mode passed in this API:<ul class=\"ul\" id=\"r_openFrameAPI-setFrameMode__ul_vnq_4gw_5fb\">\n          <li class=\"li\">Sets the appropriate icon in the header: collapse or expand</li>\n\n          <li class=\"li\">Raises the relevant event for CTI:<ul class=\"ul\" id=\"r_openFrameAPI-setFrameMode__ul_sjp_rgw_5fb\">\n              <li class=\"li\">openFrameAPI.EVENTS.COLLAPSE</li>\n\n              <li class=\"li\">openFrameAPI.EVENTS.EXPAND</li>\n\n            </ul>\n</li>\n\n        </ul></p>","params":[{"name":"Mode","type":"String","description":"Set OpenFrame Mode. Enumerated options:<ol class=\"ol\" id=\"r_openFrameAPI-setFrameMode__ol_yjp_3gw_5fb\">\n                  <li class=\"li\">openFrameAPI.FRAME_MODE.COLLAPSE</li>\n\n                  <li class=\"li\">openFrameAPI.FRAME_MODE.EXPAND</li>\n\n                </ol>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setFrameMode(openFrameAPI.FRAME_MODE.COLLAPSE);\n","description":"","output":""}]},{"name":"setHeight","description":"Sets the OpenFrame height.","params":[{"name":"Height","type":"Number","description":"Height in pixels"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setHeight(100);","description":"","output":""}]},{"name":"setIcons","description":"The OpenFrame header can include icons that are placed next to the close\n    icon.","params":[{"name":"icons","type":"Array","description":"A list of icon configurations, where each icon configuration is an object with\n                key values imageURL, imageTitle, and any other needed context."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setIcons([{imageURL:'https://mydomian.com/image/mute.png',\nimageTitle:'mute', id:101}, {imageURL:'https://mydomian.com/image/hold.png',\nimageTitle:'hold', id:102}]);","description":"","output":""}]},{"name":"setPresenceIndicator","description":"Sets the presence indicator to display agent availability in a workspace.<p>For more information on configuring OpenFrame, refer to       <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-customer-service-management/page/product/customer-service-management/task/t_CreateAnOpenFrameConfiguration.html\" target=\"_blank\">Create an OpenFrame configuration</a></p>","params":[{"name":"state","type":"String","description":"Presence state of the agent.<p class=\"p\">Default states:</p>\n<ul class=\"ul\" id=\"openFrameAPI-setPresenceIndicator__ul_bws_ldg_d3b\">\n                  <li class=\"li\">Available</li>\n\n                  <li class=\"li\">Away</li>\n\n                  <li class=\"li\">Offline</li>\n\n                </ul>\n<p class=\"p\">You can also specify custom states.</p>"},{"name":"color","type":"String","description":"Presence indicator color on workspace. <p class=\"p\">Supported colors:</p>\n<ul class=\"ul\" id=\"openFrameAPI-setPresenceIndicator__ul_xwr_xbg_d3b\">\n                  <li class=\"li\">red</li>\n\n                  <li class=\"li\">orange</li>\n\n                  <li class=\"li\">grey</li>\n\n                  <li class=\"li\">green</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openframeAPI.setPresenceIndicator(‘Available’, ‘green’);","description":"","output":""}]},{"name":"setSize","description":"Sets the OpenFrame size.","params":[{"name":"width","type":"Number","description":"Should be greater than zero."},{"name":"height","type":"Number","description":"Should be greater than zero."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setSize(300, 370);","description":"","output":""}]},{"name":"setSubtitle","description":"Sets the OpenFrame subtitle.","params":[{"name":"subTitle","type":"String","description":"A string of 256 or fewer characters."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setSubtitle('+18888888888');","description":"","output":""}]},{"name":"setTitle","description":"Sets the OpenFrame title.","params":[{"name":"title","type":"String","description":"A string of 256 or fewer characters."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setTitle('Incoming Call');","description":"","output":""}]},{"name":"setTitleIcon","description":"Sets the OpenFrame's title icon.","params":[{"name":"icon","type":"Object","description":"Object of key value pairs. Keys include imageURL, imageTitle, and any other\n                context needed."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setTitleIcon({imageURL:'/my/image/path.png', imageTitle:'mute', id:101});","description":"","output":""},{"code":"openFrameAPI.setTitleIcon({imageURL:'https://mydomian.com/image/path.png',\nimageTitle:'mute', id:101});","description":"","output":""}]},{"name":"setWidth","description":"Sets the OpenFrame width.","params":[{"name":"Width","type":"Number","description":"Width in pixels"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.setWidth(100);","description":"","output":""}]},{"name":"show","description":"Makes the OpenFrame visible in the TopFrame.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"openFrameAPI.show()","description":"","output":""}]},{"name":"subscribe","description":"Subscribes to the event.<p>These events are available. <ul class=\"ul\" id=\"r_openFrameAPI-subscribe_String_Object__ul_y25_pvd_lt\">\n          <li class=\"li\">openframe_icon_clicked -- this event occurs when any icon other than the close icon is\n            clicked on the OpenFrame footer. The callback receives the icon object as a parameter.\n            This event replaces openframe_header_icon_clicked. </li>\n\n          <li class=\"li\">openframe_header_icon_clicked -- this event occurs when any icon other than the close\n            icon is clicked on the OpenFrame header. The callback receives the icon object as a\n            parameter. This event works but should be replaced with openframe_icon_clicked. </li>\n\n          <li class=\"li\">openframe_shown -- this event occurs when the OpenFrame is shown. </li>\n\n          <li class=\"li\">openframe_hidden -- this event occurs when the OpenFrame is hidden. </li>\n\n          <li class=\"li\">openframe_before_destroy -- this event occurs before the TopFrame is unloaded. </li>\n\n          <li class=\"li\">openframe_communication -- this event is application specific and can be customized. </li>\n\n          <li class=\"li\">openframe_communication_failure -- this event occurs when communication to TopFrame\n            fails.</li>\n\n          <li class=\"li\">openframe_collapse -- this event occurs when the collapse icon is clicked on the\n            OpenFrame header. </li>\n\n          <li class=\"li\">openframe_expand -- this event occurs when the expand icon is clicked on the OpenFrame\n            header.</li>\n\n        </ul></p><p>The openframe_header_icon_clicked is split into two events:<ul class=\"ul\" id=\"r_openFrameAPI-subscribe_String_Object__ul_gnz_3bz_f2b\">\n          <li class=\"li\">openframe_icon_clicked: this event occurs when any icon other than the close icon is\n            clicked on the OpenFrame. The callback receives the icon object as a parameter.</li>\n\n          <li class=\"li\">openframe_title_icon_clicked: this event occurs when the title icon is clicked on the\n            OpenFrame. The callback receives the titleIcon object as a parameter.</li>\n\n        </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> The openframe_icon_clicked event replaces openframe_header_icon_clicked, which\n          works currently but is marked for retirement in a future release. Until that time,\n          clicking an icon emits both openframe_icon_clicked and openframe_header_icon_clicked.\n          Also, you can subscribe to either one but not both at the same time as it may execute the\n          callback function twice. For example, if you are using openframe_header_icon_clicked, plan\n          to change the code and subscribe to openframe_icon_clicked and/or\n          openframe_title_icon_clicked based on your use case.</div></p>","params":[{"name":"event","type":"openFrameAPIEVENT","description":"One of the available events."},{"name":"eventCallback","type":"function","description":"The method called when the specified event occurs."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function handleIconClick(context) {\nconsole.log(\"Icon was clicked\", context);\n}\nopenFrameAPI.subscribe(openFrameAPI.EVENTS.ICON_CLICKED, handleIconClick);","description":"","output":""}]},{"name":"version","description":"Returns the OpenFrame API version.","params":[],"returns":{"type":"String","description":"The OpenFrame API version"},"example":[{"code":"var version = openFrameAPI.version();\n\nconsole.log(\"API version \" + version);","description":"","output":""}]}]},"ScriptLoader":{"meta":{"has_constructor":false,"description":"Provides the ability to load scripts asynchronously. You can use the <span class=\"keyword apiname\">ScriptLoader</span> API in client-side scripts for a\n   platform/desktop UI using ListV2 and ListV3 APIs. It is not available for Service Portal, Mobile,\n   or Agent Workspace.<br/><br/>You access the <span class=\"keyword apiname\">ScriptLoader</span> methods by using the global object\n   ScriptLoader.","example":""},"properties":{},"methods":[{"name":"getScripts","description":"Loads scripts asynchronously.","params":[{"name":"scripts","type":"Array","description":"An array of scripts."},{"name":"callback","type":"Function","description":"The function called when the scripts have been loaded. The callback function\n                has no arguments."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"getScripts","description":"Gets scripts asynchronously.","params":[{"name":"filePath","type":"String","description":"A path, including the file name, that contains one or more scripts."},{"name":"callback","type":"Function","description":"The function to be called after the scripts have been loaded. The callback\n                function has no arguments."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[]}]},"spAriaUtil":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Show messages on a screen reader.</span> spAriaUtil is an angular service that you can use in Service Portal widget client\n      scripts.","example":""},"properties":{},"methods":[{"name":"sendLiveMessage","description":"Announce a message to a screen reader.<p>The <span class=\"keyword apiname\">sendLiveMessage()</span> method injects text into an aria-live region on\n        the page. The default setting for an aria-live region is <samp class=\"ph codeph\">assertive</samp>, which\n        means that messages are announced immediately. This can annoy and confuse users if used too\n        frequently.</p>","params":[{"name":"message","type":"String","description":"The message to be shown."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function(spAriaUtil) {\n  /* widget controller */\n\n  spAriaUtil.sendLiveMessage('Hello world!');\n}","description":"","output":""}]}]},"spContextManager":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Make data from a <span class=\"ph\">Service Portal</span> widget\n                available to other applications and services in a <span class=\"ph\">Service Portal</span> page. For\n                example, pass widget data to <span class=\"ph\">Agent Chat</span> when it opens in a\n                  <span class=\"ph\">Service Portal</span>\n              page.</span> spContextManager is an AngularJS service that you can use in <span class=\"ph\">Service Portal</span> widget client\n      scripts.<br/><br/><span class=\"ph\">Keys passed to this API are unique per page. For example, if\n                the <samp class=\"ph codeph\">'agent-chat'</samp> key is already initialized by another widget on\n                the page through the <span class=\"keyword apiname\">addContext()</span> method, you must use the\n                  <span class=\"keyword apiname\">updateContextForKey()</span> method to update the key's data.\n              </span> Available keys\n      include:<br/><br/><ul class=\"ul\" id=\"spContextManagerAPI__ul_jb2_xp4_zhb\">\n                  <li class=\"li\"><span class=\"ph uicontrol\">agent-chat</span>: Sends widget data to <span class=\"ph\">Agent Chat</span> when it opens\n                    in a <span class=\"ph\">Service Portal</span>\n                    page.</li>\n\n                </ul><br/><br/>For more information about passing data to <span class=\"ph\">Agent Chat</span>, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-servicenow-platform/page/build/service-portal/task/configure-va-in-sp.html\" target=\"_blank\">Configure Agent Chat in Service\n        Portal</a>.","example":""},"properties":{},"methods":[{"name":"addContext","description":"Initializes a key and adds widget data as the value. For example, add data to the\n    'agent-chat' key to make it available to <span class=\"ph\">Agent Chat</span>.<p>Use this method the first time data is added to a specific key on a <span class=\"ph\">Service Portal</span> page. If the key is\n        already used by another widget on the page, use the <span class=\"keyword apiname\">updateContextForKey()</span>\n        method instead.</p>","params":[{"name":"key","type":"String","description":"Name of the key to send the data. Available keys include:<div class=\"p\">\n                <ul class=\"ul\" id=\"SPCM-addContext_S_O__d2179e151\">\n                  <li class=\"li\"><span class=\"ph uicontrol\">agent-chat</span>: Sends widget data to <span class=\"ph\">Agent Chat</span> when it opens\n                    in a <span class=\"ph\">Service Portal</span>\n                    page.</li>\n\n                </ul>\n\n              </div>"},{"name":"context","type":"Object","description":"Widget data in JSON format to send to the\n              application or service specified in the key parameter. For example,\n                <samp class=\"ph codeph\">{'approval_count': 5}</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function ($scope, spContextManager) {\n    spContextManager.addContext('agent-chat', {\n        'approval_count': 5       \n    });\n};","description":"<span class=\"ph\">Pass <samp class=\"ph codeph\">approval_count</samp> to <span class=\"ph\">Agent Chat</span>. When a user\n                    initiates an <span class=\"ph\">Agent Chat</span>\n                    conversation from the <span class=\"ph\">Service Portal</span> homepage, the\n                    system appends <samp class=\"ph codeph\">&amp;sysparm_approval_count=5</samp> to the <span class=\"ph\">Agent Chat</span>\n                    <samp class=\"ph codeph\">iframe</samp> URL. </span>","output":""}]},{"name":"getContext","description":"Returns each key and associated data object defined by any widget on the\n    page.<p>Using this method may affect performance. Use this method to understand which keys are\n        initialized on the page and to get their current values. If you know which key you need to\n        access, use the <span class=\"keyword apiname\">getContextForKey()</span> method instead.</p>","params":[],"returns":{"type":"Object","description":"Each key and associated data object defined on the page."},"example":[{"code":"function ($scope, spContextManager) {\n  spContextManager.getContext();\n} ","description":"","output":""}]},{"name":"getContextForKey","description":"Returns the widget data associated with a key.","params":[{"name":"key","type":"String","description":"Name of the key to get context from. Available keys include:<div class=\"p\">\n                  <ul class=\"ul\" id=\"SPCM-getContextForKey_S_B__ul_jb2_xp4_zhb\">\n                  <li class=\"li\"><span class=\"ph uicontrol\">agent-chat</span>: Sends widget data to <span class=\"ph\">Agent Chat</span> when it opens\n                    in a <span class=\"ph\">Service Portal</span>\n                    page.</li>\n\n                </ul>\n\n                </div>"},{"name":"returnPromise","type":"Boolean","description":"Flag that determines whether to return the data associated with a key as a\n                promise or an object. Values include:  <div class=\"p\">\n                  <ul class=\"ul\" id=\"SPCM-getContextForKey_S_B__ul_ccf_jvc_shb\">\n                    <li class=\"li\">True: return the data as a promise. Use this option if another widget on the\n                      page uses the <span class=\"keyword apiname\">addContext()</span> method to initialize the same\n                      key. Returning a promise prevents returning an undefined object when the key\n                      is not yet initialized.</li>\n\n                    <li class=\"li\">False: returns an object containing the data associated with the key.</li>\n\n                  </ul>\n\n                </div>"}],"returns":{"type":"Object","description":"If returnPromise is false, returns an object containing the data associated\n                with the key. For example, <samp class=\"ph codeph\">{approval_count: 5}</samp>."},"example":[{"code":"function ($scope, spContextManager) {\n  spContextManager.getContextForKey('agent-chat', true).then(function(context) {\n    context = context || {};\n    context.approval_count = 5; \n    spContextManager.updateContextForKey('agent-chat', context);\n  });\n} ","description":"<span class=\"ph\">Pass <samp class=\"ph codeph\">approval_count</samp> to <span class=\"ph\">Agent Chat</span>. When a user\n                    initiates an <span class=\"ph\">Agent Chat</span>\n                    conversation from the <span class=\"ph\">Service Portal</span> homepage, the\n                    system appends <samp class=\"ph codeph\">&amp;sysparm_approval_count=5</samp> to the <span class=\"ph\">Agent Chat</span>\n                    <samp class=\"ph codeph\">iframe</samp> URL. </span>","output":""}]},{"name":"updateContextForKey","description":"Sends data to an existing key. For example, if another widget on the page uses the\n    'agent-chat' key to pass data to the <span class=\"ph\">Agent Chat</span> configuration, you must\n    update the context of the key rather than using the <span class=\"keyword apiname\">addContext()</span>\n    method.","params":[{"name":"key","type":"String","description":"Name of the key to send the data. Available keys include:<div class=\"p\">\n                <ul class=\"ul\" id=\"SPCM-updateContextForKey_S_O__d2179e151\">\n                  <li class=\"li\"><span class=\"ph uicontrol\">agent-chat</span>: Sends widget data to <span class=\"ph\">Agent Chat</span> when it opens\n                    in a <span class=\"ph\">Service Portal</span>\n                    page.</li>\n\n                </ul>\n\n              </div>"},{"name":"context","type":"Object","description":"Widget data in JSON format to send to the\n              application or service specified in the key parameter. For example,\n                <samp class=\"ph codeph\">{'approval_count': 5}</samp>."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"function ($scope, spContextManager) {\n  spContextManager.getContextForKey('agent-chat', true).then(function(context) {\n    context = context || {};\n    context.approval_count = 5; \n    spContextManager.updateContextForKey('agent-chat', context);\n  });\n} ","description":"<span class=\"ph\">Pass <samp class=\"ph codeph\">approval_count</samp> to <span class=\"ph\">Agent Chat</span>. When a user\n                    initiates an <span class=\"ph\">Agent Chat</span>\n                    conversation from the <span class=\"ph\">Service Portal</span> homepage, the\n                    system appends <samp class=\"ph codeph\">&amp;sysparm_approval_count=5</samp> to the <span class=\"ph\">Agent Chat</span>\n                    <samp class=\"ph codeph\">iframe</samp> URL. </span>","output":""}]}]},"spModal":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Show alerts, prompts, and confirmation dialogs in <span class=\"ph\">Service Portal</span> widgets. The\n                SPModal class is available in Service Portal client scripts.</span> You can use <span class=\"keyword apiname\">spModal.open()</span> to display a widget in a modal dialog. The\n   spModal class is a lightweight wrapper for Angular UI bootstrap's <a class=\"extRef\" href=\"https://angular-ui.github.io/bootstrap/#/modal\" target=\"_blank\">$uibModal</a>.","example":""},"properties":{},"methods":[{"name":"alert(String message).then","description":"Displays an alert.","params":[{"name":"message","type":"String","description":"The message to display."}],"returns":{"type":"Boolean","description":"The promise contains a single argument that contains true or false."},"example":[{"code":"// HTML template \n&lt;button ng-click=\"c.onAlert()\" class=\"btn btn-default\"&gt;\n    Alert\n  &lt;/button&gt;\n\n// Client script\nfunction(spModal) {\n    var c = this;\n  c.onAlert = function () {\n        spModal.alert('How do you feel today?').then(function (answer) {\n            c.simple = answer;\n        });\n    }\n }","description":"","output":""}]},{"name":"confirm(String message).then","description":"Displays a confirmation message.","params":[{"name":"message","type":"String","description":"The message to display."}],"returns":{"type":"Boolean","description":"The promise contains a single argument that contains true or false."},"example":[{"code":"// HTML template \n &lt;button ng-click=\"c.onConfirm()\" class=\"btn btn-default\"&gt; Confirm &lt;/button&gt; \n&lt;span&gt;{{c.confirmed}}&lt;/span&gt;   \n\n// Client script\nfunction(spModal) {\n  var c = this;\n  c.onConfirm = function() {\n        c.confirmed = \"asking\";\n        spModal.confirm(\"Can you confirm or deny this?\").then(function(confirmed) {\n            c.confirmed = confirmed; // true or false\n        })\n    }\n } ","description":"","output":""},{"code":"//HTML template \n&lt;button ng-click=\"c.onConfirmEx()\" class=\"btn btn-default\"&gt;\n    Confirm - HTML message\n  &lt;/button&gt;\n  &lt;span&gt;{{c.confirmed}}&lt;/span&gt;\n\n// Client script\nfunction(spModal) {\n  var c = this;\n  // more control, passing options\n    c.onConfirmEx = function() {\n        c.confirmed = \"asking\";\n        var warn = '&lt;i class=\"fa fa-warning\" aria-hidden=\"true\"&gt;&lt;/i&gt;';\n        spModal.open({\n            title: 'Delete this Thing?',\n            message: warn + ' Are you &lt;b&gt;sure&lt;/b&gt; you want to do that?'\n        }).then(function(confirmed) {\n            c.confirmed = confirmed;\n        })\n    }\n}","description":"Confirm with HTML message","output":""}]},{"name":"open(Object options).then","description":"Opens a modal window using the specified options.","params":[{"name":"options","type":"Object","description":"An object that may have these properties. <ul class=\"ul\" id=\"SPM-open_O__ul_ofq_tyy_my\">\n                  <li class=\"li\">title - a string that can be HTML that goes in the header. The default is\n                    empty.</li>\n\n                  <li class=\"li\">message - a string that can be HTML that goes in the header. The default is\n                    empty.</li>\n\n                  <li class=\"li\">buttons - an array that contains the buttons to show on the dialog. The\n                    default is Cancel and OK.</li>\n\n                  <li class=\"li\">input - a Boolean. When true shows an input field on the dialog. The default\n                    is false.</li>\n\n                  <li class=\"li\">value - a string containing the value of the input field. The default is\n                    empty.</li>\n\n                  <li class=\"li\">widget - a string that identifies the widget ID or sys_id to embed in the\n                    dialog. The default is empty.</li>\n\n                  <li class=\"li\">widgetInput - an object to send the embedded widget as input. The default is\n                    null.</li>\n\n                  <li class=\"li\">shared - a client-side object to share data with the embedded widget client\n                    script.</li>\n\n                  <li class=\"li\">size - a string indicating the size of the window. Can be 'sm' or 'lg'. The\n                    default is empty.</li>\n\n                </ul>"}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"//HTML template\n&lt;button ng-click=\"c.onOpen()\" class=\"btn btn-default\"&gt;\n    Prompt with label\n  &lt;/button&gt;\n  &lt;div ng-show=\"c.name\"&gt;\n    You answered &lt;span&gt;{{c.name}}&lt;/span&gt;\n  &lt;/div&gt;\n\n//Client code\nfunction(spModal) {\n  var c = this;\n  c.onOpen = function() {\n        //ask the user for a string\n        spModal.open({\n            title: 'Give me a name',\n            message: 'What would you like to name it?',\n            input: true,\n            value: c.name\n        }).then(function(name) {\n            c.name = name;\n        })\n    }\n}","description":" of a prompt with a label","output":""},{"code":"//HTML template\n&lt;button ng-click=\"c.onAgree()\" class=\"btn btn-default\"&gt;\n    Agree\n  &lt;/button&gt;\n  &lt;div ng-show=\"c.agree\"&gt;\n    You answered {{c.agree}}\n  &lt;/div&gt;\n\n//Client script\nfunction(spModal) {\n  var c = this;\n  c.onAgree = function() {\n        // ask the user for a string\n        // note embedded html in message\n        var h = '&lt;h4&gt;Apple likes people to agree to lots of stuff&lt;/h4&gt;'\n        // Line feeds added to the following lines for presentation formatting.\n        var m = 'Your use of Apple software or hardware products is based \non the software license and other terms and conditions in effect for the \nproduct at the time of purchase. Your agreement to these terms is required \nto install or use the product. '\n        spModal.open({\n            title: 'Do you agree?',\n            message: h + m,\n            buttons: [\n                {label:'✘ ${No}', cancel: true},\n                {label:'✔ ${Yes}', primary: true}\n            ]\n        }).then(function() {\n            c.agree = 'yes';\n        }, function() {\n            c.agree = 'no';\n        })\n    }\n}","description":" of agree with custom buttons.","output":""},{"code":"//HTML template\n&lt;button ng-click=\"c.onWidget('widget-cool-clock')\" class=\"btn btn-default\"&gt;\n    Cool Clock\n  &lt;/button&gt;\n\n//Client script\nfunction(spModal) {\n  var c = this;\n  c.onWidget = function(widgetId, widgetInput) {\n        spModal.open({\n            title: 'Displaying widget ' + widgetId,\n            widget: widgetId, \n            widgetInput: widgetInput || {}\n        }).then(function(){\n            console.log('widget dismissed');\n        })      \n    }\n}","description":" of embedded widget","output":""}]},{"name":"prompt(String message, String default).then","description":"Displays a prompt for user input.","params":[{"name":"message","type":"String","description":"The message to display."},{"name":"default (optional)","type":"String","description":"A default value to use if the user does not provide a response."}],"returns":{"type":"String","description":"The promise contains the user's response, or the default value if the user does\n                not enter a response."},"example":[{"code":"//HTML template\n &lt;button ng-click=\"c.onPrompt()\" class=\"btn btn-default\"&gt;\n    Prompt\n  &lt;/button&gt;\n  &lt;div ng-show=\"c.name\"&gt;\n    You answered &lt;span&gt;{{c.name}}&lt;/span&gt;\n  &lt;/div&gt;\n\n// Client script\nfunction(spModal) {\n  var c = this;\n  c.onPrompt = function() {\n        spModal.prompt(\"Your name please\", c.name).then(function(name) {\n            c.name = name;\n        })\n    }\n}","description":"","output":""}]}]},"spUtil":{"meta":{"has_constructor":false,"description":"<span class=\"ph\">Utility methods to perform common functions in a <span class=\"ph\">Service Portal</span> widget client\n                script.</span> ","example":""},"properties":{},"methods":[{"name":"addErrorMessage","description":"Displays a notification error message.","params":[{"name":"message","type":"String","description":"Error message to display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"spUtil.addErrorMessage(\"There has been an error processing your request\")","description":"","output":""}]},{"name":"addInfoMessage","description":"Displays a notification info message.","params":[{"name":"message","type":"String","description":"Message to display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"spUtil.addInfoMessage(\"Your order has been placed\")","description":"","output":""}]},{"name":"addTrivialMessage","description":"Displays a trivial notification message.<p>Trivial messages disappear after a short period of time.</p>","params":[{"name":"message","type":"String","description":"Message to display."}],"returns":{"type":"void","description":"Method does not return a value"},"example":[{"code":"spUtil.addTrivialMessage(\"Thanks for your order\")","description":"","output":""}]},{"name":"format","description":"Formats a string as an alternative to string concatenation.<p>Use this method to build a string with variables.</p>","params":[{"name":"template","type":"String","description":"<p class=\"p\">String template with values for substitution. </p>"},{"name":"data","type":"Object","description":"Object containing variables for substitution."}],"returns":{"type":"String","description":"A formatted string."},"example":[{"code":"spUtil.format('An error ocurred: {error} when loading {widget}', {error: '404', widget: 'sp-widget'})","description":"","output":"'An error occurred: 404 when loading sp-widget'"}]},{"name":"get","description":"Returns a widget model by ID or sys_id.<p>Use this method to embed a widget model in a widget client script. The callback function\n        returns the full widget model.</p>","params":[{"name":"widgetId","type":"String","description":"Widget ID or sys_id of the widget to embed."},{"name":"data","type":"Object","description":"(Optional) Name/value pairs of parameters to pass to the widget model."}],"returns":{"type":"Object","description":"Model of the embedded widget."},"example":[{"code":"spUtil.get(\"widget-cool-clock\").then(function(response) {\n  c.coolClock = response;\n});","description":"Without data passed","output":""},{"code":"spUtil.get('pps-list-modal', {title: c.data.editAllocations, \n  table: 'resource_allocation', \n  queryString: 'GROUPBYuser^resource_plan=' + c.data.sysId, \n  view: 'resource_portal_allocations' }).then(function(response) {\n    var formModal = response;\n    c.allocationListModal = response;\n  });  \t\n","description":"With data passed","output":""}]},{"name":"recordWatch","description":"Watches for updates to a table or filter and returns the value from the callback\n    function.<p>Allows a widget developer to respond to table updates in real-time. For instance, by using\n          <span class=\"keyword apiname\">recordWatch()</span>, the Simple List widget can listen for changes to its\n        data table. If records are added, removed, or updated, the widget updates automatically.</p><p>When passing the <samp class=\"ph codeph\">$scope</samp> argument into the <span class=\"keyword apiname\">recordWatch()</span>\n        function, be sure to inject <samp class=\"ph codeph\">$scope</samp> into the parameters of your client\n        script function.</p><p>Tables that are periodically subject to a high frequency of database events are blacklisted\n        from <span class=\"keyword apiname\">recordWatch()</span> to prevent event storms.</p>","params":[{"name":"$scope","type":"Object","description":"Scope of the data object updated by the callback function."},{"name":"table","type":"String","description":"Watched table."},{"name":"filter","type":"String","description":"Filter for fields to watch."},{"name":"callback","type":"Function","description":"Optional. Parameter to define the callback function."}],"returns":{"type":"Promise","description":"Return value of the callback function."},"example":[{"code":"//A simple recordWatch function.\nspUtil.recordWatch($scope, \"live_profile\", \"sys_id=\" + liveProfileId);\n\n//In a widget client script\nfunction(spUtil, $scope) {\n  /* widget controller */\n  var c =this;\n\n  // Registers a listener on the incident table with the filter active=true, \n  // meaning that whenever something changes on that table with that filter, \n  // the callback function is executed.    \n  // The callback function takes a single parameter 'response', which contains \n  // the property 'data'. The 'data' property contains information about the changed record. \n  spUtil.recordWatch($scope, \"incident\", \"active=true\", function(response) {\n        \n    // Returns the data inserted or updated on the table \n    console.log(response.data);   \n    \n    });\n}\n","description":"","output":""}]},{"name":"refresh","description":"Calls the server and replaces the current <span class=\"ph uicontrol\">options</span> and\n      <span class=\"ph uicontrol\">data</span> with the server response.<p>Calling <samp class=\"ph codeph\">spUtil.refresh()</samp> is similar to calling\n          <samp class=\"ph codeph\">server.refresh()</samp>. However, when you call\n          <samp class=\"ph codeph\">spUtil.refresh()</samp>, you can define the $scope object.</p>","params":[{"name":"$scope","type":"Object","description":"The scope defined for the update."}],"returns":{"type":"Object","description":"The updated options and data objects."},"example":[]},{"name":"update","description":"Updates the data object on the server within a given scope.<p>This method is similar to <samp class=\"ph codeph\">server.update()</samp>, but includes a $scope parameter\n        that defines the scope to pass over.</p>","params":[{"name":"$scope","type":"Object","description":"The scope defined for the update."}],"returns":{"type":"Object","description":"The updated data object."},"example":[]}]},"StopWatch":{"meta":{"has_constructor":true,"description":"Use a StopWatch object to measure the duration of operations. The StopWatch API can be used in client-side scripts using ListV2 and ListV3 APIs.","example":""},"properties":{},"methods":[{"name":"constructor","description":"Creates an instance of the StopWatch class using the specified date as the initial\n    value.","params":[{"name":"initialDate","type":"Date","description":"The initial date for the object."}],"returns":{"type":"","description":""},"example":[]},{"name":"constructor","description":"Creates an instance of the StopWatch class.<p>Uses the current time as the start time.</p>","params":[],"returns":{"type":"","description":""},"example":[]},{"name":"getTime","description":"Returns the number of milliseconds since the timer started.","params":[],"returns":{"type":"Number","description":"The number of milliseconds since the timer started."},"example":[]},{"name":"restart","description":"Resets the timer to the current time.","params":[],"returns":{"type":"void","description":"Method does not return a value"},"example":[]},{"name":"toString","description":"The elapsed time as HH:MM:SS.SSS.","params":[],"returns":{"type":"String","description":"The elapsed time formatted as HH:MM:SS.SSS."},"example":[]}]}},"release":"newyork"}