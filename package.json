{
    "name": "snich-canary",
    "publisher": "integrateNate",
    "displayName": "S.N.I.C.H. Canary",
    "description": "ServiceNow Integrated Code Helper - Canary. Get the latest as I build stuff ready to be tested! Provide feedback to integratenate@gmail.com",
    "icon": "images/icon-canary.png",
    "version": "1.42.1",
    "liveVersion": "1.1.0",
    "canaryVersion": "1.42.1",
    "betaVersion": "1.0.6",
    "keywords": [
        "SNICH",
        "snich",
        "ServiceNow",
        "Service-Now",
        "ServiceNow Code Sync",
        "Service-Now Code Helper",
        "Service-Now Code Syncer",
        "Service-Now Code Sync",
        "SNOW",
        "SNOW Code Syncer",
        "SNOW Code Editor"
    ],
    "qna": "marketplace",
    "badges": [
        {
            "url": "https://badgen.net/badge/YouTube/Instructional Videos/blue?icon=googleplay",
            "description": "Watch instructional videos on Youtube!",
            "href": "https://www.youtube.com/playlist?list=PLp0BtdkD38PWd9PTib4OgRaTQ3SIQDE17"
        },
        {
            "url": "https://badgen.net/badge/ServiceNow/Kingston%20%7C%20London%20%7C%20Madrid/red",
            "description": "Supported Service Now Versions",
            "href": "https://www.servicenow.com"
        }
    ],
    "engines": {
        "vscode": "^1.92.0"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/RaynorUE/snich"
    },
    "categories": [
        "Other",
        "SCM Providers"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "snich.open_file_by.sn_file_path",
                "title": "Open File by SN File Path (such as in an Exception / Error Log)",
                "category": "SNICH"
            },
            {
                "command": "snich.sys_package.load.all",
                "title": "Load all Files from SN Package",
                "category": "SNICH"
            },
            {
                "command": "snich.application.open_file.in.service_now",
                "title": "Open File in Browser (ServiceNow)",
                "category": "SNICH"
            },
            {
                "command": "snich.application.run.background_script.global",
                "title": "Run Background Script (Global)",
                "category": "SNICH"
            },
            {
                "command": "snich.application.run.background_script.select_scope",
                "title": "Run Background Script (Scoped)",
                "category": "SNICH"
            },
            {
                "command": "snich.setup.new_instance",
                "title": "Setup New Instance",
                "category": "SNICH"
            },
            {
                "command": "snich.setup.test_connection",
                "title": "Test Connection",
                "category": "SNICH"
            },
            {
                "command": "snich.instance.pull_record",
                "title": "Sync Record (Pull)",
                "category": "SNICH"
            },
            {
                "command": "snich.instance.setup.new_table",
                "title": "Configure Table (New and Update)",
                "category": "SNICH"
            },
            {
                "command": "snich.application.load.all",
                "title": "Load all Application Files (Pull)",
                "category": "SNICH"
            },
            {
                "command": "snich.activeEditor.compare_with_server",
                "title": "Compare with Server (Active Editor)",
                "category": "SNICH"
            }
        ],
        "configuration": [
            {
                "title": "SNICH",
                "properties": {
                    "snich.alwaysAskPrimaryDisplayField": {
                        "type": "boolean",
                        "title": "Always ask for primary display field",
                        "description": "Set to true if you want to always be asked to pick the primary display field when configuring new tables. Else we will default to using name if it exists. If name is not found we will still ask you to pick.",
                        "default": false
                    },
                    "snich.syncedRecordNameSeparator": {
                        "type": "string",
                        "title": "Sycned Record Display Name Seperator",
                        "description": "The seperator used when multiple fields are selected for synced record display names. NOTE: Please take into account your file systems restricted characters.",
                        "default": "__"
                    },
                    "snich.logLevel": {
                        "type": "string",
                        "title": "Logging Level",
                        "description": "Enable the level of logging you want. Picking a more detail log option will incldue the less detailed options \"above it\"",
                        "enum": [
                            "Debug",
                            "Info",
                            "Warn",
                            "Error"
                        ],
                        "enumDescriptions": [
                            "Debug: Extremely detailed. Intended for extension development. But can help identify edge case issues.",
                            "Info: Moderately detailed. Can be useful for seeing what's going on under the hood without a bunch of noise.",
                            "Warn: This is the Default log level. Typically warnings are used for things you should be doing instead, but functionality is not yet broken.",
                            "Error: Least detailed. Use this if you only want to know when major issues occur."
                        ],
                        "default": "Error"
                    },
                    "snich.alwaysAskScope": {
                        "type": "boolean",
                        "title": "Always Ask for Application Scope (Future Planning, not yet implemented)",
                        "description": "When syncing / pulling a record from ServiceNow do we always ask for the app scope? This will be used for filtering the record list when selecting a table to sync from. If false, we will show all files from all application scopes, always.",
                        "default": false
                    },
                    "snich.createEmptyFiles": {
                        "type": "string",
                        "title": "Should we create files when the field data is empty?",
                        "description": "If choosing not to sync empty files, a warning will be generated letting you know it was empty.",
                        "enum": [
                            "Yes",
                            "No"
                        ],
                        "enumDescriptions": [
                            "Yes: Create files with empty content.",
                            "No: I like warning messages instead."
                        ],
                        "default": "Yes"
                    },
                    "snich.showSNApps": {
                        "type": "boolean",
                        "title": "Show sn_ applications",
                        "description": "When using a command that asks for Application selection, do we show SN apps in the list?",
                        "default": false
                    },
                    "snich.syncRecordMultiple": {
                        "type": "boolean",
                        "title": "Sync Record: Select Multiple",
                        "description": "When using the Sync Record command, allow multiple files to be selected. Disable this if you are annoyed by having to checkbox a single record during selection.",
                        "default": false
                    }
                }
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "compile": "webpack",
        "watch": "webpack --watch",
        "package": "webpack --mode production --devtool hidden-source-map",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "npm run compile-tests && npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/request": "^2.48.8",
        "@types/request-promise-native": "^1.0.18",
        "@types/uuid": "^8.0.0",
        "@types/vscode": "^1.93.0",
        "@types/xml2js": "^0.4.11",
        "semver": "^7.3.2",
        "ts-loader": "^7.0.5",
        "typescript": "^3.9.3",
        "webpack-cli": "^5.1.1"
    },
    "dependencies": {
        "request": "^2.88.2",
        "request-promise-native": "^1.0.9",
        "xml2js": "^0.5.0"
    }
}
